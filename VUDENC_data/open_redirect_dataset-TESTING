[{"snippet_id": 16603, "code": " or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists", "label": 0}, {"snippet_id": 10590, "code": "): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint", "label": 0}, {"snippet_id": 5097, "code": " self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id) self.assertEqual", "label": 0}, {"snippet_id": 13991, "code": ": The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching", "label": 0}, {"snippet_id": 70200, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 75230, "code": " person=person_form.save() committee_member=committee_member_form.save(commit=False) committee_member.person=person committee_member.save() candidate.committee_members.add(committee_member) return HttpResponseRedirect", "label": 0}, {"snippet_id": 22653, "code": " def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information", "label": 1}, {"snippet_id": 869, "code": " posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist,", "label": 1}, {"snippet_id": 26582, "code": " process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool)", "label": 0}, {"snippet_id": 31866, "code": "(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions", "label": 1}, {"snippet_id": 7183, "code": "'method_type', 'ita_ind', 'group_exam_ind' ] column_searchable_list={'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type'", "label": 1}, {"snippet_id": 68, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'})", "label": 0}, {"snippet_id": 36821, "code": " for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date']=datetime.date.strftime((item['upload_date']), '%Y-%m-%d') document_count +=item['document_count']", "label": 0}, {"snippet_id": 22613, "code": " profile a span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"", "label": 0}, {"snippet_id": 44220, "code": ".assertEqual(btn.get_attribute(\"href\"), ds_detail_url, \"User should go back to detail view when clicking cancel\") dg_detail_url=f'{self.live_server_url}/datagroup/{dg.pk}/' self.browser.get(dg_detail_url", "label": 0}, {"snippet_id": 62124, "code": " page.headers: return False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page", "label": 0}, {"snippet_id": 13138, "code": " }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link", "label": 0}, {"snippet_id": 51186, "code": "\"store_true\" self.add_option(*args, **kwargs) def add_option(self, *args, **kwargs): self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose", "label": 0}, {"snippet_id": 21617, "code": "(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR,", "label": 0}, {"snippet_id": 71274, "code": " key='_messages'): if not self.session.data.get(key): self.session.data[key]=[] return self.session.data[key].append({ 'message': message, 'level': level}) add_message=_add_message def _get_messages(self", "label": 0}, {"snippet_id": 77110, "code": " we'll append '?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path=urlparse.urlsplit(target_url).path[1:] layer_ns=\"[%s]:%s\" %(target_path, str(server_layer_def[\"id", "label": 0}, {"snippet_id": 58076, "code": " from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email/milestone_ortc_notify_text\" ) self.assertEqual(len(mail.outbox", "label": 0}, {"snippet_id": 33, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 79369, "code": ".accepted_dataset_id) data_dict['followers']=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict):", "label": 0}, {"snippet_id": 84717, "code": " HttpResponseNotAllowed(['POST']) @login_required def stop_observing_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html", "label": 0}, {"snippet_id": 25282, "code": " channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning", "label": 0}, {"snippet_id": 3694, "code": "']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 33456, "code": "=ProductDocument.objects.create(document=dd, product=p) pd.save() dd.refresh_from_db() pid=dd.products.first().pk puc=PUC.objects.get(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get(pk", "label": 0}, {"snippet_id": 33135, "code": "(WeightFractionType) admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin", "label": 0}, {"snippet_id": 16447, "code": " a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters=", "label": 0}, {"snippet_id": 51548, "code": "(args)) def run(buildname=\"build\", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder.get_dependency_args, 'add_option':builder", "label": 0}, {"snippet_id": 47152, "code": ": ext_form, 'hp_formset' : hp_formset, } if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc.extracted=True doc", "label": 0}, {"snippet_id": 15014, "code": " re.search('input,source_type:', name): attrs=name.split(',') (ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts[", "label": 0}, {"snippet_id": 6125, "code": ".credentials_store[id_token['sub']] except KeyError: logger.debug(\"Expired ID token, credentials missing\", exc_info=True) return self.redirect_to_auth_server(request.url) try: credentials.refresh(self.http", "label": 0}, {"snippet_id": 3704, "code": ".\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com',", "label": 0}, {"snippet_id": 13164, "code": " reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing", "label": 0}, {"snippet_id": 8897, "code": ": context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id", "label": 0}, {"snippet_id": 55172, "code": " \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn", "label": 0}, {"snippet_id": 2550, "code": "\nimport time try: from urllib.parse import urlencode except ImportError: from urllib import urlencode from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse", "label": 0}, {"snippet_id": 47865, "code": "; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request,", "label": 0}, {"snippet_id": 28751, "code": " Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b\"\\n\"): line", "label": 0}, {"snippet_id": 39515, "code": ".CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) qa_flag=models.BooleanField(default=False) @classmethod def detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__(self)", "label": 0}, {"snippet_id": 66177, "code": ") stack.set_transition_type(Gtk.StackTransitionType.CROSSFADE) self.unlock_database_stack_box=self.builder.get_object(\"unlock_database_stack_box\") unlock_database_stack_switcher=self.builder.get_object", "label": 0}, {"snippet_id": 19929, "code": " channel(str): The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self", "label": 0}, {"snippet_id": 78667, "code": ":type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model", "label": 0}, {"snippet_id": 2705, "code": " if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=", "label": 0}, {"snippet_id": 44500, "code": " Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing", "label": 0}, {"snippet_id": 25035, "code": "(i)) client_id=ray.utils.binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources, dynamic_resources) else: logger", "label": 0}, {"snippet_id": 74426, "code": "\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super()", "label": 0}, {"snippet_id": 969, "code": " ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os", "label": 1}, {"snippet_id": 4538, "code": ", 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 61561, "code": " allow_redirects=False ) except requests.exceptions.RequestException: return ScanResult( securedrop=securedrop, live=pshtt_results['Live'], http_status_200_ok=False, ) return ScanResult( landing_page_url", "label": 1}, {"snippet_id": 44307, "code": " +f'/product/{p.pk}/' self.browser.get(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit.is_enabled(), \"Button should be disabled\") tag=self.browser.find_element_by_class_name", "label": 0}, {"snippet_id": 82685, "code": " the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs", "label": 0}, {"snippet_id": 83216, "code": ".job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled", "label": 0}, {"snippet_id": 31980, "code": " Execute a command in the form of a raw string. ''' tokens=Tokenizer(raw) parser=Parser(tokens) root=parser.parse() if root: root.execute(self.builtins) root.wait() def _builtin_exit(self, name, n=0): sys", "label": 0}, {"snippet_id": 25041, "code": ".ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources, dynamic_resources) else: logger.warning( \"Monitor: \" \"could not find ip for client{", "label": 0}, {"snippet_id": 62249, "code": " validate_cache_control_header(page, 'private') def validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page): if len(page.cookies.keys", "label": 0}, {"snippet_id": 3294, "code": " self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=[", "label": 0}, {"snippet_id": 79039, "code": " Request %s not found in the data base') % datarequest_id) validator.validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request", "label": 0}, {"snippet_id": 37283, "code": "['clean_comp_data_file'].widget.attrs.update( {'accept': '.csv'}) self.collapsed=True class DataSourceForm(forms.ModelForm): required_css_class='required' class Meta: model=DataSource fields=['title', ", "label": 0}, {"snippet_id": 84224, "code": "'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is not None: template_params[", "label": 0}, {"snippet_id": 8450, "code": " URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request", "label": 0}, {"snippet_id": 11344, "code": "(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if", "label": 0}, {"snippet_id": 19578, "code": "} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log", "label": 1}, {"snippet_id": 37144, "code": " required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset", "label": 0}, {"snippet_id": 26019, "code": ".all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store(self): \"\"\"Start the plasma store.\"\"\" assert self._plasma_store_socket_name", "label": 0}, {"snippet_id": 12345, "code": " produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context", "label": 0}, {"snippet_id": 44032, "code": "'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"//table[@id='sources']/tbody/tr\")) self.assertEqual(row_count, 25,", "label": 0}, {"snippet_id": 64668, "code": "'setattr', 'slice', 'sorted', 'staticmethod', 'StopAsyncIteration', 'StopIteration', 'str', 'sum', 'super', 'SyntaxError', 'SyntaxWarning', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'tuple', 'type", "label": 0}, {"snippet_id": 52818, "code": "['room']=self.room.id self.request.data['text']=self.request.data.get('message') serializer=self.get_serializer(data=request.data) self.perform_create(serializer) return Response(serializer.data, status", "label": 0}, {"snippet_id": 9951, "code": "(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders", "label": 0}, {"snippet_id": 72224, "code": ".fsals_available(): raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) old_export=ganesha_conf.update_export({ 'export_id", "label": 0}, {"snippet_id": 51524, "code": ".startswith(\"Windows\") else other_program_exists def scp(*args): program=None for p in[\"scp\", \"pscp\"]: if program_exists(p): program=p break if program is None: raise \"Cannot find scp(or pscp) in the path.\"", "label": 0}, {"snippet_id": 49046, "code": " import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.core.exceptions import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms", "label": 0}, {"snippet_id": 49248, "code": ".has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc", "label": 0}, {"snippet_id": 42046, "code": ":1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product self.assertEqual(product.title", "label": 0}, {"snippet_id": 4679, "code": " %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 76720, "code": ", rel_tile_row, im_tile) return tiles_array def _SetTransPixelToBgcolor(tile, bgcolor): \"\"\"Set the transparent pixels to bgcolor. Args: tile: Tile as sent from the server. bgcolor: BGCOLOR parameter as", "label": 0}, {"snippet_id": 62441, "code": " reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict ", "label": 0}, {"snippet_id": 67703, "code": "'threat/attribute_list.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): attr=Attribute.objects.all() context=super().get_context_data(**kwargs) context['categories'", "label": 0}, {"snippet_id": 84385, "code": " group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if", "label": 0}, {"snippet_id": 3029, "code": "=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state", "label": 0}, {"snippet_id": 51662, "code": "+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method }", "label": 0}, {"snippet_id": 40369, "code": ".filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es).count() > 1: return QAGroup.objects.filter(extraction_script=es)", "label": 0}, {"snippet_id": 21061, "code": " if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self", "label": 0}, {"snippet_id": 27150, "code": ", it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify", "label": 0}, {"snippet_id": 58448, "code": "\"settings\":{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" } }, onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_thread</p", "label": 0}, {"snippet_id": 72889, "code": " CreatePositionForm, 'baseVisibleText': InterfaceText }) @login_required(login_url='/login/', redirect_field_name=None) def positions(request): try: sort_by=request.session['position_sort'] except KeyError", "label": 1}, {"snippet_id": 57716, "code": "(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding", "label": 0}, {"snippet_id": 83028, "code": " running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent", "label": 0}, {"snippet_id": 7555, "code": " from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import", "label": 0}, {"snippet_id": 60606, "code": " request.query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title=None help=None if isinstance(exception", "label": 0}, {"snippet_id": 10866, "code": "/account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email", "label": 0}, {"snippet_id": 63043, "code": " initialized. \"\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login') def test_chpass_authn", "label": 0}, {"snippet_id": 30369, "code": ".'), 200) response.headers['Content-Type']='application/json' return response login_session['access_token']=credentials.access_token login_session['gplus_id']=gplus_id userinfo_url=\"https://www.googleapis", "label": 0}, {"snippet_id": 44327, "code": ".find_element_by_class_name('taggit-tag') tag.click() self.assertTrue(submit.is_enabled(), \"Button should be enabled\") def test_field_exclusion(self): doc=self.objects.doc qa_url=self.live_server_url +f'/qa/extractedtext/", "label": 0}, {"snippet_id": 42548, "code": " from dashboard.tests.loader import fixtures_standard class FacetedSearchTest(TestCase): fixtures=fixtures_standard def setUp(self): self.c=Client() def test_faceted_search_excludes_chemicals(self): response", "label": 0}, {"snippet_id": 10860, "code": " if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded", "label": 0}, {"snippet_id": 70285, "code": " parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False):", "label": 0}, {"snippet_id": 9668, "code": "'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, }", "label": 0}, {"snippet_id": 47010, "code": " render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg.get_zip_url(), ", "label": 0}, {"snippet_id": 34987, "code": " download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\"", "label": 1}, {"snippet_id": 56054, "code": "/{}'.format(settings.PUBLIC_DOMAIN, PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username", "label": 0}, {"snippet_id": 9032, "code": " register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core", "label": 0}, {"snippet_id": 54985, "code": " a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder,", "label": 0}, {"snippet_id": 17823, "code": " and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password was reset. Log in now.'), 'info", "label": 0}, {"snippet_id": 50885, "code": " argument '{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser() self.add_bool_option(\"-v\", \"--verbose\") self._enabled_options", "label": 0}, {"snippet_id": 53253, "code": " InspectLoader from cauldron import environ from cauldron import templating from cauldron.cli import threads from cauldron.runner import redirection from cauldron.session import projects class UserAbortError", "label": 0}, {"snippet_id": 567, "code": ") head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath", "label": 1}, {"snippet_id": 83185, "code": " self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion", "label": 0}, {"snippet_id": 67081, "code": "'tm_http']=tm.getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context[", "label": 0}, {"snippet_id": 31910, "code": "\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections", "label": 0}, {"snippet_id": 13546, "code": ".message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode", "label": 0}, {"snippet_id": 221, "code": "'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding", "label": 0}, {"snippet_id": 57585, "code": " import receiver from django.conf import settings from django.core.mail import send_mail from django.template import loader, Context from core.common.mongo import c_onboarding_status, c_onboarding_settings", "label": 0}, {"snippet_id": 13827, "code": "( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar", "label": 0}, {"snippet_id": 6893, "code": " return redirect(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token()", "label": 0}, {"snippet_id": 64985, "code": ".test_case): test_case=name +test_case try: expr=ast.parse(test_case, mode='eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not expr: raise ValueError('Failed to", "label": 0}, {"snippet_id": 34656, "code": "(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined as a product entry", "label": 0}, {"snippet_id": 73017, "code": " breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications/applications.html", "label": 0}, {"snippet_id": 76559, "code": " bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=", "label": 0}, {"snippet_id": 47502, "code": " connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import", "label": 1}, {"snippet_id": 41921, "code": " linked to Product, bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should be present.\") p=Product.objects.create(upc='stub_47',data_source=self.objects.ds", "label": 0}, {"snippet_id": 46758, "code": "='': errors.append([count, \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType.objects.get( group_type", "label": 0}, {"snippet_id": 63169, "code": "{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login',", "label": 0}, {"snippet_id": 35136, "code": ", *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation", "label": 0}, {"snippet_id": 59213, "code": " PrefixLoader from sanic import Sanic, response from sanic.exceptions import InvalidUsage, NotFound from.views.base import( DatasetteError, ureg ) from.views.database import DatabaseDownload, DatabaseView", "label": 0}, {"snippet_id": 29652, "code": ".any(name=s)) posts.extend(results) tags=Tag.query.all() return render_template('gallery.html', posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for", "label": 1}, {"snippet_id": 12176, "code": " True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER", "label": 0}, {"snippet_id": 47113, "code": "', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...' ExtractedTextForm, HPFormSet=create_detail_formset", "label": 0}, {"snippet_id": 68889, "code": "/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R+RJfRpb1qvljURr54y35IZgs fMG22Np+TmM2RLgdFCZa18h0+RbH9i0b+ZrB9XPZmLb/h9ou7SowGqQ3wwOtT3Vy qmif0A2GCcjFTqWW6TXaY8eZJ9BCEqW3k/0Cjw7K/mSy/utxYiUIvZNKgaG/P8U7", "label": 0}, {"snippet_id": 10160, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/", "label": 0}, {"snippet_id": 37763, "code": ".all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs): super().__init__(", "label": 0}, {"snippet_id": 53739, "code": " self.write_both elif item=='close': return super(RedirectBuffer, self).__getattribute__(item) source=super(RedirectBuffer, self) \\ .__getattribute__('redirection_source') if hasattr(source, item): return", "label": 0}, {"snippet_id": 12225, "code": ". Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view", "label": 0}, {"snippet_id": 84911, "code": " for article in articles_all: match=search_title.search(article.content) if match: found_links.append({'title': article.title}) for old_title in old_titles: if old_title in article.content: found_old_links", "label": 0}, {"snippet_id": 72311, "code": ".has_export(export_id): raise cherrypy.HTTPError(404) export=ganesha_conf.remove_export(export_id) if reload_daemons: ganesha_conf.reload_daemons(export.daemons) @ApiController('/nfs-ganesha/daemon') class", "label": 0}, {"snippet_id": 28050, "code": " the formatting of an exception thrown by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the", "label": 0}, {"snippet_id": 688, "code": "\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title>", "label": 0}, {"snippet_id": 115, "code": " you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part:", "label": 1}, {"snippet_id": 29142, "code": ", g, url_for from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_admin import Admin, helpers from flask_security import Security from flask_login import LoginManager from", "label": 1}, {"snippet_id": 27515, "code": " that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so", "label": 1}, {"snippet_id": 42735, "code": " self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript", "label": 0}, {"snippet_id": 22771, "code": " event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the", "label": 0}, {"snippet_id": 3623, "code": " properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self", "label": 0}, {"snippet_id": 25521, "code": "\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants", "label": 0}, {"snippet_id": 62734, "code": " the user is logged in(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with any subsequent request that needs to be athenticated. :param eppn: the", "label": 0}, {"snippet_id": 69018, "code": "() apt.trust_gpg_key(key) apt.add_source('nodesource', 'https://deb.nodesource.com/node_10.x', 'main') apt.install_packages(['nodejs']) def remove_chp(): \"\"\" Ensure CHP is not running \"\"\" if os.path.exists", "label": 0}, {"snippet_id": 39208, "code": ") def auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\" Deletes datagroup directory from filesystem when datagroup instance is deleted. \"\"\" dg_folder=instance.get_dg_folder() if os.path.isdir", "label": 0}, {"snippet_id": 35377, "code": ") product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value", "label": 0}, {"snippet_id": 17315, "code": " models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint(", "label": 0}, {"snippet_id": 69072, "code": " systemd.disable_service('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot disable configurable-http-proxy...\") try: systemd.uninstall_unit('configurable-http", "label": 0}, {"snippet_id": 48769, "code": "(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={}", "label": 0}, {"snippet_id": 58179, "code": " onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 75.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 1, onboarding.STEP_3: 1, onboarding.STEP_4", "label": 1}, {"snippet_id": 12008, "code": " asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated", "label": 0}, {"snippet_id": 82137, "code": " short_url=f'{request.get_host()}/{token_generator()}') instance.save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type='text/csv') response['Content", "label": 0}, {"snippet_id": 408, "code": "\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime", "label": 0}, {"snippet_id": 47527, "code": " OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp", "label": 1}, {"snippet_id": 46537, "code": "'lower_wf_analysis'] ingredient.central_wf_analysis=row['central_wf_analysis'] ingredient.upper_wf_analysis=row['upper_wf_analysis'] ingredient.script=script try: ingredient.full_clean() except ValidationError", "label": 0}, {"snippet_id": 18294, "code": " database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) ", "label": 1}, {"snippet_id": 16319, "code": "': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value in form.cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered", "label": 1}, {"snippet_id": 77614, "code": "=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self)", "label": 0}, {"snippet_id": 44941, "code": ", 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', } hp_formset=HnPFormSet(data, prefix", "label": 0}, {"snippet_id": 8292, "code": ".displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl", "label": 0}, {"snippet_id": 5706, "code": "\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 69792, "code": " ensure_jupyterhub_package(HUB_ENV_PREFIX) ensure_jupyterlab_extensions() ensure_jupyterhub_service(HUB_ENV_PREFIX) ensure_jupyterhub_running() ensure_symlinks(HUB_ENV_PREFIX) run_plugin_actions(pm, args.plugin) logger.info(", "label": 0}, {"snippet_id": 61260, "code": " the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name", "label": 0}, {"snippet_id": 37607, "code": "=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class", "label": 0}, {"snippet_id": 70812, "code": ") newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 71235, "code": "._get_user_class().get_by_id(int(self.session.user_id)) if self.user is None: pass else: self.user=None return self def _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile", "label": 0}, {"snippet_id": 30502, "code": " been logged out.\") return redirect(url_for('showGrudgets')) else: flash(\"You were not logged in\") return redirect(url_for('showGrudgets')) def createUser(login_session): newUser=User(name=login_session", "label": 1}, {"snippet_id": 46814, "code": " text.append(str(doc.pk)+','+','.join(line.values())+'\\n') if errors: datagroup.csv.close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save()", "label": 0}, {"snippet_id": 80936, "code": ", http, _ from odoo.exceptions import ValidationError, UserError _logger=logging.getLogger(__name__) class WebsiteEventController(http.Controller): @http.route(['/fit_subscribe_controller/subscribe'], type", "label": 0}, {"snippet_id": 35574, "code": " assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product)", "label": 0}, {"snippet_id": 18228, "code": "=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn", "label": 1}, {"snippet_id": 63956, "code": " Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config", "label": 0}, {"snippet_id": 35325, "code": " +str(Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type': doc.document_type, 'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType", "label": 0}, {"snippet_id": 53631, "code": " @property def source_encoding(self): if self.redirection_source.encoding: return self.redirection_source.encoding return 'utf8' def read_all(self) -> str: \"\"\" Reads the current state of the buffer and", "label": 1}, {"snippet_id": 40278, "code": " else( self.get_qa_complete_extractedtext_count() / count * 100)) return \"{0:.0f}%\".format(pct) def get_pct_checked_numeric(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count", "label": 0}, {"snippet_id": 30160, "code": "('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin():", "label": 0}, {"snippet_id": 62948, "code": ".headers['Set-Cookie'] token=session._session.token authr=auth_response(token, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64", "label": 0}, {"snippet_id": 73842, "code": "/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position", "label": 0}, {"snippet_id": 45461, "code": " * @login_required() def data_document_detail(request, pk): template_name='data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1", "label": 0}, {"snippet_id": 71575, "code": ".Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req", "label": 0}, {"snippet_id": 74239, "code": "[\"key\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else:", "label": 0}, {"snippet_id": 45199, "code": "(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date']=datetime.date.strftime((item['upload_date']", "label": 0}, {"snippet_id": 30071, "code": "')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'id", "label": 0}, {"snippet_id": 38133, "code": ".ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable", "label": 0}, {"snippet_id": 10317, "code": "} if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers", "label": 0}, {"snippet_id": 685, "code": "-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 77188, "code": ".target_url, self.request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"", "label": 0}, {"snippet_id": 63108, "code": "] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/chpass', eppn, _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-termination", "label": 0}, {"snippet_id": 19204, "code": " num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self,", "label": 1}, {"snippet_id": 51874, "code": ") pw=request.form.get('pw') displayname=request.form.get('displayname') user_record=User.query.filter(User.email==email).first() if user_record is None: new_user=q.make_user(email, pw, displayname) q.add_to_db", "label": 0}, {"snippet_id": 73718, "code": "'errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=dictionary.get('position') request.session['position_id']=position.id return render(request, ", "label": 0}, {"snippet_id": 81189, "code": "'subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bz_tickets'), ('subscription_partner', '=', partner.id)]) if ai_monthly", "label": 0}, {"snippet_id": 29859, "code": ".validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post) db.session.add(comment) db.session.commit() return", "label": 0}, {"snippet_id": 55983, "code": " link=dynamic_link.format(real_link) get_experience_interactor=create_get_experience_interactor() experience=get_experience_interactor.set_params(experience_share_id=experience_share_id, logged_person_id='", "label": 0}, {"snippet_id": 11961, "code": " third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized", "label": 0}, {"snippet_id": 15193, "code": "()]) new_value=FloatField('Delta',[validators.required()]) class ChangeInputAddDelta(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeInputAddDelta, self).__init__(csrf_enabled", "label": 0}, {"snippet_id": 22217, "code": "=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO,", "label": 1}, {"snippet_id": 23197, "code": " time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an", "label": 0}, {"snippet_id": 48588, "code": "', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm", "label": 0}, {"snippet_id": 79518, "code": " email notification to users of assigned organisation with admin access :param title: The title of the data request :type title: string :param description: A brief description for your data request :type", "label": 0}, {"snippet_id": 14709, "code": " flask_bootstrap import Bootstrap from flask_wtf import FlaskForm from flask_login import LoginManager, current_user, login_user, logout_user, UserMixin from werkzeug.security import generate_password_hash", "label": 1}, {"snippet_id": 19808, "code": " self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port", "label": 1}, {"snippet_id": 84181, "code": " if group_slug is not None: initial.update({'content_type': group_ct.id, 'object_id': group.id}) if article is None: initial.update({'title': title, 'action': 'create'}) form=ArticleFormClass(initial=initial", "label": 0}, {"snippet_id": 2214, "code": " provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you", "label": 0}, {"snippet_id": 63678, "code": "{'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method", "label": 0}, {"snippet_id": 46130, "code": "'extract_button' in request.POST: extract_form=ExtractionScriptForm(request.POST, request.FILES,dg_type=dg.type) if extract_form.is_valid(): csv_file=request.FILES.get('extract_file') script_pk=int(request.POST[", "label": 0}, {"snippet_id": 4608, "code": " 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login", "label": 0}, {"snippet_id": 75985, "code": "}:{from_to_url}' if self.redirect_type in['prefix', 'page', 'exact']: return redirect_text.format( type=self.get_redirect_type_display(), from_to_url=self.get_from_to_url_display(), ) return ugettext( ", "label": 0}, {"snippet_id": 3515, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=", "label": 0}, {"snippet_id": 60431, "code": ".prepare_jinja2_environment(env=self.jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?)?$>\") app.add_route(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / ", "label": 0}, {"snippet_id": 38441, "code": " DataDocument object is a single source of Factotum data. ``filename`` the name of the document's source file ``title`` the title of the document ``url`` an optional URL to the document's remote source", "label": 0}, {"snippet_id": 3645, "code": "\"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"", "label": 0}, {"snippet_id": 71761, "code": " req._load_user() user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) user=models.User", "label": 0}, {"snippet_id": 83788, "code": " is_member(user, group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html'", "label": 0}, {"snippet_id": 42615, "code": "?q=diatom&group_type=Unidentified') self.assertContains(response, 'Showing 1 -20 of') response=self.c.get('/find/?q=diatom&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result found", "label": 1}, {"snippet_id": 79550, "code": "). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model", "label": 0}, {"snippet_id": 28231, "code": " error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython", "label": 0}, {"snippet_id": 32831, "code": " file redirection. Args: fd: The file descriptor to modify. newfd: The new file descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open", "label": 1}, {"snippet_id": 73769, "code": "=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request", "label": 0}, {"snippet_id": 84904, "code": " found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match: found_links.append({'title': article.title}) for", "label": 0}, {"snippet_id": 57673, "code": ".render(context) send_mail( rendered_subj, rendered_text, from_email, to_email, fail_silently=True ) def suspending_receiver(signal, **decorator_kwargs): \"\"\" Custom decorator to disable signals. Reference:", "label": 0}, {"snippet_id": 49237, "code": "=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid() and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required", "label": 0}, {"snippet_id": 77003, "code": " \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"}, \"VectorMapsRaster\":{ \"x\": \"col\", \"y\": \"row\", \"z\": \"level\"}, \"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs", "label": 0}, {"snippet_id": 62217, "code": ": return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore(page): return validate_cache_control_header", "label": 0}, {"snippet_id": 15622, "code": "'input_source_final', '') for index, command in enumerate(get_command('change_input_series_all_models')): sub_form=form.change_input_series_all_models[index] sub_form.input_source_initial.choices=get_inputs_choices(", "label": 0}, {"snippet_id": 37201, "code": ".update( {'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['extract_file'].widget.attrs.update({'accept': '", "label": 0}, {"snippet_id": 46153, "code": "=script_pk) info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context[", "label": 0}, {"snippet_id": 71578, "code": " self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank(", "label": 0}, {"snippet_id": 64201, "code": " LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods=['POST']) def logout_service(): \"\"\"SAML Logout Response endpoint The IdP will send the logout response to this", "label": 0}, {"snippet_id": 76584, "code": ".0,30000000.0& WIDTH=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0.0410861968994s http://localhost/wms?LAYERS=1002&SERVICE=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg", "label": 0}, {"snippet_id": 51110, "code": "\"disable_others\"]: self._enabled_options.clear() self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self", "label": 0}, {"snippet_id": 41577, "code": ".models import User from django.test import Client from importlib import import_module from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest", "label": 0}, {"snippet_id": 11670, "code": "(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _", "label": 0}, {"snippet_id": 76041, "code": " return '' def get_full_path(self, filename, language=None, version_slug=None): \"\"\" Return a full path for a given filename. This will include version and language information. No protocol/domain is returned", "label": 1}, {"snippet_id": 17733, "code": "(): user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching", "label": 0}, {"snippet_id": 22365, "code": "*kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is", "label": 0}, {"snippet_id": 52849, "code": ".HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ 'id': instance", "label": 0}, {"snippet_id": 20298, "code": " data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get", "label": 0}, {"snippet_id": 3544, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"", "label": 0}, {"snippet_id": 63679, "code": "'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method", "label": 0}, {"snippet_id": 48719, "code": "(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form", "label": 0}, {"snippet_id": 60748, "code": " pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this", "label": 0}, {"snippet_id": 77803, "code": ") self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit", "label": 0}, {"snippet_id": 27563, "code": " extra_data={'key': 'value'}): Optionally, a dictionary can be passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and", "label": 0}, {"snippet_id": 41567, "code": " DataGroupForm from django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import Client from importlib import import_module from django.db", "label": 1}, {"snippet_id": 58688, "code": ".models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib.auth.models import User from django.contrib.sites.models import Site", "label": 0}, {"snippet_id": 78421, "code": "=str(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest", "label": 0}, {"snippet_id": 6260, "code": "={ 'csrf_token': csrf_token, 'destination': destination, } extra_params={ 'state': json.dumps(state), } flow=self.flow_for_request() auth_url='{url}&{extra_params}'.format( url=flow.step1_get_authorize_url", "label": 0}, {"snippet_id": 60150, "code": ".OperationalError: continue datasette_version={\"version\": __version__} if self.version_note: datasette_version[\"note\"]=self.version_note return{ \"python\":{ \"version\": \".\".join(map(str, sys.version_info[:3])), ", "label": 0}, {"snippet_id": 42193, "code": " self.assertIn(span, response, 'Trash button should be present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class", "label": 0}, {"snippet_id": 10525, "code": " get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline", "label": 0}, {"snippet_id": 16909, "code": "]=power data.append(current) else: games=_seed_games(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={", "label": 0}, {"snippet_id": 38104, "code": ".CharField(max_length=100, blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models", "label": 0}, {"snippet_id": 6028, "code": "\" g.oidc_id_token=id_token g.oidc_id_token_dirty=True def after_request(self, response): \"\"\" Set a new ID token cookie if the ID token has changed. \"\"\" if getattr(g, 'oidc_id_token_dirty', False): signed_id_token", "label": 0}, {"snippet_id": 19475, "code": ".log_files[log_filename]=[] def check_log_files_and_push_updates(self): \"\"\"Get any changes to the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles", "label": 1}, {"snippet_id": 34050, "code": " doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait", "label": 0}, {"snippet_id": 70798, "code": " if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/'):", "label": 1}, {"snippet_id": 22510, "code": " code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be", "label": 0}, {"snippet_id": 41441, "code": " ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) self.assertFalse( 'SID'", "label": 0}, {"snippet_id": 36672, "code": " import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1)", "label": 0}, {"snippet_id": 33872, "code": "') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password", "label": 0}, {"snippet_id": 62280, "code": " import session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action @acs_action('login-action') def login_action(session_info,", "label": 0}, {"snippet_id": 46376, "code": "(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if doc.title: new_prod_title='%s", "label": 0}, {"snippet_id": 2801, "code": "(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout", "label": 1}, {"snippet_id": 41088, "code": ".url) self.assertContains(response, 'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/'", "label": 0}, {"snippet_id": 56108, "code": "=HttpResponse('', status=302) response['Location']=link return response def root_redirect(request): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: link=dynamic_link.format('{}/'.format(settings", "label": 1}, {"snippet_id": 40748, "code": " num_dss=int(response_html.xpath('//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records", "label": 0}, {"snippet_id": 21129, "code": " config=self._config, include_java=self._ray_params.include_java, java_worker_options=self._ray_params.java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes", "label": 0}, {"snippet_id": 68329, "code": ".filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today", "label": 0}, {"snippet_id": 14970, "code": ") (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()", "label": 0}, {"snippet_id": 4481, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456", "label": 0}, {"snippet_id": 49658, "code": ": editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile", "label": 0}, {"snippet_id": 12674, "code": "(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns", "label": 0}, {"snippet_id": 19188, "code": " import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range", "label": 1}, {"snippet_id": 19350, "code": ".services import get_ip_address from ray.services import get_port import ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes", "label": 1}, {"snippet_id": 10040, "code": "'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page.", "label": 0}, {"snippet_id": 54372, "code": "\"Array of datums for politicians Format: JSON \"\"\" @app.route('/json/politicians/all') def all_politicians(): pols=Politician.all() politicians=[] for pol in pols: tokens=pol.name.title().split(' ') politician", "label": 0}, {"snippet_id": 20373, "code": ".gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush", "label": 0}, {"snippet_id": 9808, "code": " current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline", "label": 0}, {"snippet_id": 9482, "code": ") except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address", "label": 0}, {"snippet_id": 68824, "code": " itertools import logging import os import secrets import subprocess import sys import time from urllib.error import HTTPError from urllib.request import urlopen, URLError import pluggy from tljh import( apt", "label": 0}, {"snippet_id": 70655, "code": "\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime", "label": 0}, {"snippet_id": 32835, "code": ". newfd: The new file descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def", "label": 1}, {"snippet_id": 2097, "code": " the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE", "label": 0}, {"snippet_id": 58256, "code": ", ('fake_key', None) ) def test_get_onboarding_setting(self, setting_name, value, _mock): self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting", "label": 0}, {"snippet_id": 59221, "code": " NotFound from.views.base import( DatasetteError, ureg ) from.views.database import DatabaseDownload, DatabaseView from.views.index import IndexView from.views.special import JsonDataView from.views.table", "label": 0}, {"snippet_id": 17770, "code": ".html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if", "label": 0}, {"snippet_id": 75058, "code": ", candidate_id): from.forms import MetadataForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register'))", "label": 0}, {"snippet_id": 11733, "code": "'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider", "label": 0}, {"snippet_id": 15929, "code": " characters long') return False self.user=auth_add_user(self.email.data, self.password.data) return True class LoginForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField", "label": 0}, {"snippet_id": 45712, "code": " request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument", "label": 0}, {"snippet_id": 63092, "code": " eppn, _check) def test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass'] now=int(time.time()) self", "label": 0}, {"snippet_id": 24828, "code": " subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password", "label": 1}, {"snippet_id": 22184, "code": " __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port", "label": 0}, {"snippet_id": 57399, "code": " request.user.is_authenticated: return invalid_permission_redirect(request) print_transaction=request.POST.get('print_transaction', None) if print_transaction: transaction=get_object_or_404(Transaction, code", "label": 0}, {"snippet_id": 73839, "code": " @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request, sort_by)", "label": 0}, {"snippet_id": 21940, "code": " redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the", "label": 0}, {"snippet_id": 72481, "code": " from django.http import HttpResponse from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import", "label": 1}, {"snippet_id": 63889, "code": "-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app", "label": 1}, {"snippet_id": 52403, "code": ".\"\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None) phase_code=request.form.get(\"project-phase\") board_id=request.form.get(\"board-id\") new_project", "label": 0}, {"snippet_id": 72786, "code": "'home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') @login_required(login_url='/login/', redirect_field_name=None) def", "label": 1}, {"snippet_id": 34610, "code": ">0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated", "label": 1}, {"snippet_id": 49321, "code": " for extracted_list_presence in extracted_text.rawchem.select_subclasses('extractedlistpresence'): tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence) if tag_form", "label": 0}, {"snippet_id": 25416, "code": ": return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}", "label": 0}, {"snippet_id": 34680, "code": ".filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values(", "label": 0}, {"snippet_id": 31933, "code": "._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline", "label": 0}, {"snippet_id": 22471, "code": "): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None", "label": 1}, {"snippet_id": 11835, "code": ".shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from", "label": 0}, {"snippet_id": 71070, "code": "-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None:", "label": 0}, {"snippet_id": 30797, "code": " return redirect('/login') if grudgetToDelete.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to delete this grudget. Please", "label": 1}, {"snippet_id": 59702, "code": "\"Return config for plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get", "label": 0}, {"snippet_id": 63742, "code": " logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND')", "label": 0}, {"snippet_id": 61258, "code": " hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host ", "label": 0}, {"snippet_id": 69322, "code": "('Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file): \"\"\" Set up user conda environment with required packages \"\"\" logger.info(\"Setting up user environment", "label": 0}, {"snippet_id": 58710, "code": " django.conf import settings from django.core.mail import send_mail from django.core.urlresolvers import reverse from django.http.response import Http404 from django.template import loader, Context from", "label": 0}, {"snippet_id": 70645, "code": " item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 9742, "code": "): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled", "label": 0}, {"snippet_id": 15275, "code": "=0) change_timeseries_value_several_days_add_delta=FieldList(FormField(ChangeInputAddDelta), min_entries=0) def get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'],", "label": 0}, {"snippet_id": 61509, "code": " from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain if TYPE_CHECKING: from directory.models import DirectoryEntryQuerySet def pshtt_data_to_result(securedrop", "label": 1}, {"snippet_id": 75118, "code": " thesis.title !=form.cleaned_data['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve removed. Please make sure your title is correct in the information section below", "label": 0}, {"snippet_id": 62482, "code": " for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app", "label": 0}, {"snippet_id": 22481, "code": ": pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization", "label": 1}, {"snippet_id": 77964, "code": ")[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids", "label": 0}, {"snippet_id": 35804, "code": "=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source", "label": 0}, {"snippet_id": 41169, "code": " new_product.id) def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when the document doesn't yet have an extracted record for data group types 'CP' and ", "label": 0}, {"snippet_id": 79539, "code": " :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id", "label": 0}, {"snippet_id": 10704, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers", "label": 0}, {"snippet_id": 8852, "code": ": TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 24567, "code": ":{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename", "label": 1}, {"snippet_id": 7705, "code": "\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login", "label": 0}, {"snippet_id": 70290, "code": ".parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the", "label": 0}, {"snippet_id": 78831, "code": " accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError", "label": 0}, {"snippet_id": 3561, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 79700, "code": ":param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id,", "label": 0}, {"snippet_id": 70726, "code": ".moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given", "label": 0}, {"snippet_id": 79723, "code": "] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants", "label": 0}, {"snippet_id": 20247, "code": " from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=", "label": 0}, {"snippet_id": 22434, "code": " dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and", "label": 0}, {"snippet_id": 22255, "code": " self.redis_address=redis_address self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port", "label": 0}, {"snippet_id": 3185, "code": " OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/'", "label": 0}, {"snippet_id": 32944, "code": " SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\") sys.stdout=open(cmd[i +1], \"w\") del cmd[i +1] del cmd[i] print(\"this is a test\")", "label": 1}, {"snippet_id": 25363, "code": "[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To", "label": 0}, {"snippet_id": 7554, "code": " ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts", "label": 0}, {"snippet_id": 13912, "code": " enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 39929, "code": ".TextField(null=True, blank=True) def __str__(self): return 'Notes for{}'.format(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before", "label": 1}, {"snippet_id": 57072, "code": " concepts_permitted_by_employee: continue disabled=False url=concept_model._url.format('new/{}'.format(transaction.code)) if not permission in concepts_permitted_by_transaction: disabled=True url=' available_concepts.append(", "label": 0}, {"snippet_id": 65570, "code": "() def start_database_opening_routine(self, tab_title, filepath): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar", "label": 0}, {"snippet_id": 70511, "code": "; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head", "label": 0}, {"snippet_id": 52615, "code": " message=messages_list[i] flash_message=flash_message +emails_lst[i] +\"\\n\" h.send_team_invite(emails_lst[i], sender, message, team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(", "label": 0}, {"snippet_id": 61550, "code": " soup=request_and_scrape_page(securedrop.landing_page_url) no_redirects_page, _=request_and_scrape_page( securedrop.landing_page_url, allow_redirects=False ) except requests.exceptions.RequestException:", "label": 1}, {"snippet_id": 72235, "code": " cannot be managed by the dashboard.\" .format(fsal['name'])) old_export=ganesha_conf.update_export({ 'export_id': export_id, 'path': path, 'cluster_id': cluster_id, 'daemons': daemons, 'pseudo': pseudo,", "label": 0}, {"snippet_id": 62427, "code": " return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the", "label": 0}, {"snippet_id": 46952, "code": ".id) form.referer=request.META.get('HTTP_REFERER', None) if datagroup.extracted_docs(): form.fields['group_type'].disabled=True groups=GroupType.objects.all() for group in groups: group.codes=DocumentType", "label": 0}, {"snippet_id": 61875, "code": " validate_subdomain(url): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just", "label": 0}, {"snippet_id": 22859, "code": " be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the", "label": 0}, {"snippet_id": 84605, "code": "(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() template_params={'changes': changes_qs.order_by('-modified'), 'allow_write': allow_write}", "label": 0}, {"snippet_id": 13531, "code": " old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, ", "label": 0}, {"snippet_id": 62803, "code": "'SAMLResponse': base64.b64encode(saml_response), 'RelayState': came_from}): response1=self.app.dispatch_request() cookie=response1.headers['Set-Cookie'] return cookie def authn(self, url, force_authn=False): \"", "label": 1}, {"snippet_id": 60613, "code": ".query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title=None help=None if isinstance(exception, NotFound): status=404 info={} message=exception", "label": 0}, {"snippet_id": 33269, "code": " assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument)", "label": 0}, {"snippet_id": 47476, "code": "=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required() def data_source_delete(request, pk, template_name=('data_source/' 'datasource_confirm_delete", "label": 0}, {"snippet_id": 6482, "code": "): logger.debug(\"Can't retrieve CSRF token, state, or code\", exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token: logger.debug(\"CSRF token mismatch\") return self.oidc_error() flow", "label": 0}, {"snippet_id": 79751, "code": "=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict", "label": 0}, {"snippet_id": 7139, "code": " governing permissions and limitations under the License.''' from app.models.bookings import ExamType from.base import Base from flask_login import current_user from qsystem import db class ExamTypeConfig(Base", "label": 0}, {"snippet_id": 72607, "code": "=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title(", "label": 0}, {"snippet_id": 62103, "code": "(page.headers['Server']) if not matches: return True elif len(matches.group()) > 1: return False else: return True def validate_csp(page): if 'Content-Security-Policy' not in page.headers: return False", "label": 0}, {"snippet_id": 71739, "code": " test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create(auth_id, user_info) req=EngineAuthRequest.blank('/auth/google') req", "label": 0}, {"snippet_id": 52283, "code": " make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\"", "label": 0}, {"snippet_id": 83642, "code": " group=None, args=None, kw=None): if group is None: return reverse(urlname, args=args) else: app=group._meta.app_label urlconf='.'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return ''.join", "label": 0}, {"snippet_id": 70219, "code": "([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime)", "label": 0}, {"snippet_id": 33991, "code": ") self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self", "label": 0}, {"snippet_id": 17089, "code": " t, 'round': r, 'formset': formset}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer", "label": 0}, {"snippet_id": 62168, "code": "(page): return validate_security_header( page, \"X-Frame-Options\", \"DENY\", ) def validate_cross_domain_policy(page): return validate_security_header( page, \"X-Permitted-Cross-Domain-Policies\", \"master-only\"", "label": 0}, {"snippet_id": 1742, "code": ".utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below", "label": 0}, {"snippet_id": 29862, "code": ".get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post) db.session.add(comment) db.session.commit() return redirect(url_for('gallery.show_post'", "label": 0}, {"snippet_id": 4204, "code": ", 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 38705, "code": " django.urls import reverse from django.db.models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker from django.core.exceptions import ValidationError from", "label": 1}, {"snippet_id": 38199, "code": " self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self", "label": 0}, {"snippet_id": 42059, "code": ") product=ProductDocument.objects.get(document=doc).product self.assertEqual(product.title, 'unknown', 'Title should be unknown in bulk_create') self.assertEqual(product.upc, f'stub_%s' % new_stub_id, ", "label": 0}, {"snippet_id": 47877, "code": " response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'", "label": 0}, {"snippet_id": 13236, "code": "\" import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 24576, "code": " self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os", "label": 1}, {"snippet_id": 44000, "code": " def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self", "label": 1}, {"snippet_id": 35056, "code": " dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from", "label": 0}, {"snippet_id": 8160, "code": ", settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer", "label": 0}, {"snippet_id": 76315, "code": ". Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image. Returns: The image to be presented to the user. \"\"\" proj=layer_properties", "label": 0}, {"snippet_id": 60000, "code": "=True ) as conn: self.prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn", "label": 0}, {"snippet_id": 83433, "code": ".instance.id is None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup", "label": 0}, {"snippet_id": 64353, "code": "'eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page) else: http_info=client.handle_logout_request( request.form['SAMLRequest'], subject_id, BINDING_HTTP_REDIRECT, relay_state=request.form['RelayState'", "label": 0}, {"snippet_id": 68038, "code": ".get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name", "label": 0}, {"snippet_id": 24899, "code": ".issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning( \"Monitor: \" \"TODO: if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\"", "label": 0}, {"snippet_id": 81651, "code": ":%M:%S') if event_type=='open' and len(self.fit_subscriptions) > 0: _logger.info('Can subscribe for open event id: %s, name: %s', event.event_type_id.name, event.name) return True if event_start < datetime", "label": 1}, {"snippet_id": 19886, "code": "(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e", "label": 0}, {"snippet_id": 19448, "code": " log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1) for", "label": 1}, {"snippet_id": 36452, "code": "')) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self", "label": 1}, {"snippet_id": 68092, "code": " id=pk) hunt.delete() return redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event in Event.objects.filter", "label": 0}, {"snippet_id": 12144, "code": " settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions[", "label": 0}, {"snippet_id": 367, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This", "label": 0}, {"snippet_id": 8625, "code": " def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 63869, "code": "-action', force_authn=True) @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def", "label": 0}, {"snippet_id": 4529, "code": " that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full", "label": 0}, {"snippet_id": 63732, "code": ".app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): del", "label": 0}, {"snippet_id": 29993, "code": "), nullable=False) email=Column(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base): __tablename__='Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable", "label": 0}, {"snippet_id": 71946, "code": ", '/callback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self", "label": 1}, {"snippet_id": 46643, "code": " default_name, 'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup=form.save()", "label": 0}, {"snippet_id": 77909, "code": " if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id'], users) else: print('-Nothing to update for organisation %s' % org['name", "label": 0}, {"snippet_id": 2956, "code": " code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if ", "label": 0}, {"snippet_id": 70088, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a><", "label": 0}, {"snippet_id": 47904, "code": "'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),", "label": 0}, {"snippet_id": 65082, "code": "'Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err", "label": 0}, {"snippet_id": 53491, "code": ": if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return True while len(frames) > 1 and is_cauldron_code(frames", "label": 0}, {"snippet_id": 13062, "code": " def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year", "label": 0}, {"snippet_id": 39412, "code": " and self.curated_chemical is not None: return self.curated_chemical.true_cas else: return None @property def true_chemname(self): if hasattr(self, 'curated_chemical') and self.curated_chemical is not None", "label": 0}, {"snippet_id": 15141, "code": ",[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeInputNewValue(FlaskForm): def __init__(self, csrf_enabled", "label": 0}, {"snippet_id": 29030, "code": " Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to", "label": 0}, {"snippet_id": 61490, "code": "\nfrom bs4 import BeautifulSoup import requests import re from typing import Dict, TYPE_CHECKING from pshtt.pshtt import inspect_domains import tldextract from django.utils import timezone from directory", "label": 1}, {"snippet_id": 25037, "code": ".utils.binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources, dynamic_resources) else: logger.warning( \"Monitor", "label": 0}, {"snippet_id": 41151, "code": ") self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9101') self.assertContains(response, f'product/%s' % new_product", "label": 0}, {"snippet_id": 15122, "code": "(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial", "label": 0}, {"snippet_id": 35710, "code": "(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, ", "label": 0}, {"snippet_id": 53652, "code": " those contents :return: A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode", "label": 1}, {"snippet_id": 73396, "code": " import EmailAuthenticateToken, Position from screendoor.parseposter import parse_upload from screendoor.redactor import parse_applications @login_required(login_url='login/', redirect_field_name=None)", "label": 1}, {"snippet_id": 6080, "code": " @app.before_request and @check(below). Sets g.oidc_id_token to the ID token if the user has successfully authenticated, else returns a redirect object so they can go try to authenticate. :return: A redirect", "label": 0}, {"snippet_id": 56555, "code": ".when_call_root_redirect() \\ .then_response_should_be_a_redirect_to('pachatary://app/') class ScenarioMaker: def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self", "label": 1}, {"snippet_id": 67050, "code": "(TemplateView): template_name='filehash/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() filehash=self.kwargs['pk'] vt=VT", "label": 0}, {"snippet_id": 77641, "code": " default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit", "label": 0}, {"snippet_id": 83772, "code": " def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles, False otherwise.\"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True", "label": 0}, {"snippet_id": 23201, "code": ".TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an object is a Cython function or method\"\"\" def", "label": 0}, {"snippet_id": 84327, "code": " return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision) is not int(revision_from) +1: from_value", "label": 0}, {"snippet_id": 28537, "code": " set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in", "label": 0}, {"snippet_id": 15505, "code": " set_form_defaults(form, commands): def get_command(command_name): return[item for item in commands if item['command']==command_name] def str_to_datetime(str): if not str or str=='None': str=datetime.today().strftime(", "label": 0}, {"snippet_id": 76026, "code": "'.format( lang=self.project.language, version=self.project.default_version, ) return '{from_url} ->{to_url}'.format( from_url=from_url, to_url=to_url, ) return '' def get_full_path(self, filename, language", "label": 1}, {"snippet_id": 19904, "code": ".FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"", "label": 0}, {"snippet_id": 27871, "code": " This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value", "label": 0}, {"snippet_id": 22495, "code": ": \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task", "label": 0}, {"snippet_id": 50996, "code": " default steps. \"all\" includes all steps. \"foo\" or \"+foo\" includes step foo. \"-foo\" excludes step foo, even if \"default\" or \"all\" is present. ''' steps=flatten_string_list(steps) steps=flatten_comma_list", "label": 0}, {"snippet_id": 63075, "code": " def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba' self.assertEquals(session['eduPersonPrincipalName'], eppn) self.acs('/login', eppn, _check) def test_chpass_assertion_consumer_service", "label": 0}, {"snippet_id": 38635, "code": ": return self.data_group.group_type.code in['CP', 'HH', 'CO',] @property def is_extracted(self): return hasattr(self,'extractedtext') def get_absolute_url(self): return reverse('data_document', kwargs=", "label": 0}, {"snippet_id": 59706, "code": " from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self", "label": 0}, {"snippet_id": 45180, "code": "('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds", "label": 0}, {"snippet_id": 79838, "code": " def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized", "label": 0}, {"snippet_id": 17452, "code": " on IRC.'.format(ban_reason)) flask.flash(flask.Markup(ban_str), 'danger') return flask.redirect(flask.url_for('account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '", "label": 0}, {"snippet_id": 56073, "code": ", logged_person_id='-1').execute() preview_content={'st': '@{}'.format(profile.username), 'sd': profile.bio, 'si': profile.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus", "label": 0}, {"snippet_id": 8526, "code": " \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned", "label": 0}, {"snippet_id": 74084, "code": ".base.TemplateView): storage_helper=view_helpers.ReportStorageHelper @property def storage(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin, _PassphrasePartial): def", "label": 0}, {"snippet_id": 77386, "code": " _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn't support database\" \"type '%s'\", server_vars[\"dbType\"]) return layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"", "label": 0}, {"snippet_id": 20595, "code": " new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging.getLogger(__name__", "label": 0}, {"snippet_id": 49349, "code": " template_name='data_source/datasource_confirm_delete.html'): doc=get_object_or_404(DataDocument, pk=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail", "label": 0}, {"snippet_id": 51025, "code": "=set(s[1:] for s in steps if s.startswith(\"-\")) self._enabled_options=set(s[1:] for s in steps if s.startswith(\"+\")) self._enabled_options=self._enabled_options.union( s for s in steps if s[0] not in \"", "label": 0}, {"snippet_id": 57621, "code": " specified content. Arguments: context_data(dict): data to be passed to templates. from_email(str): sender's email. to_email(list): list of addresses to send an email to. template_subject(str): path to a", "label": 0}, {"snippet_id": 45582, "code": " data document form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail", "label": 0}, {"snippet_id": 10101, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference", "label": 0}, {"snippet_id": 13657, "code": " return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user", "label": 0}, {"snippet_id": 29288, "code": " register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string", "label": 0}, {"snippet_id": 82437, "code": "(r'^update/category/(?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update-view'), re_path(r'^delete/category/(?P<pk>(\\d)+)/$', CategoryDeleteView.as_view(), name='category-delete-view')", "label": 0}, {"snippet_id": 38505, "code": " document is considered \"matched\" to that source file. ``extracted`` When the content of a data document has been extracted by manual data entry or by an extraction script, a new ExtractedText record is", "label": 0}, {"snippet_id": 56630, "code": "}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def", "label": 0}, {"snippet_id": 70788, "code": " index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path", "label": 1}, {"snippet_id": 75582, "code": ".current_file_name) response=FileResponse(open(file_path, 'rb'), content_type='application/pdf') response['Content-Disposition']='attachment; filename=\"%s\"' % candidate.thesis.original_file_name return response", "label": 0}, {"snippet_id": 17340, "code": "'GET', 'POST']) def login(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.LoginForm(flask.request.form) if flask.request.method=='POST' and form.validate(): if app.config['MAINTENANCE_MODE", "label": 0}, {"snippet_id": 10386, "code": " get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden", "label": 0}, {"snippet_id": 49031, "code": "(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']", "label": 0}, {"snippet_id": 84211, "code": " initial=initial) if not article: template_params={'form': form, 'new_article': True} else: template_params={'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article)", "label": 0}, {"snippet_id": 76678, "code": "] %d, %d is black\", world_extent_in_tiles, abs_tile_col, abs_tile_row) tiles_array.AddImage(rel_tile_col, rel_tile_row, None) else: world_wrapped_tile_col=abs_tile_col % world_extent_in_tiles tile_args", "label": 0}, {"snippet_id": 66584, "code": " filechooser_opening_dialog.close() file_path=filechooser_opening_dialog.get_filename() composite_unlock_select_button.set_label(ntpath.basename(file_path)) self.composite_keyfile_path=file_path elif response=", "label": 0}, {"snippet_id": 10463, "code": ".api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers", "label": 0}, {"snippet_id": 32074, "code": " self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical analysis on a raw string. Args: string: The raw string on which to operate. ''' def __init__(self, string): self.string=string", "label": 0}, {"snippet_id": 19228, "code": "\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key", "label": 0}, {"snippet_id": 24664, "code": " \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type", "label": 1}, {"snippet_id": 20331, "code": "(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and", "label": 0}, {"snippet_id": 66008, "code": "\") self.quit_dialog.set_destroy_with_parent(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(", "label": 0}, {"snippet_id": 22070, "code": ". huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether to start the web UI, which is a", "label": 0}, {"snippet_id": 57368, "code": " self.is_filtered=False if len([k for k in data.keys() if k !='page']) > 0: self.is_filtered=True self.filter=TransactionFilter(data) self.queryset=self.filter.qs.select_related('cashclose')\\ .prefetch_related", "label": 0}, {"snippet_id": 19407, "code": " to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address", "label": 1}, {"snippet_id": 72161, "code": " def get(self, cluster_id, export_id): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) return ganesha_conf", "label": 0}, {"snippet_id": 49649, "code": ".decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile", "label": 0}, {"snippet_id": 34998, "code": "\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem", "label": 1}, {"snippet_id": 54116, "code": " render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def", "label": 0}, {"snippet_id": 58770, "code": "=email_name.replace('.', '') return email_name, domain class InviteQuerySet(models.QuerySet): def my_invites(self, request): return self.filter(instructor=request.user.instructor) def testers(self): return", "label": 0}, {"snippet_id": 42954, "code": "=new_group).count() self.assertTrue(initial_qa_count > 100) pk=ExtractedText.objects.filter( extraction_script_id=scr.id).filter(qa_group=None).first().pk response=self.client.get(f'/qa/extractedtext/{pk}/'", "label": 0}, {"snippet_id": 78609, "code": " a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data", "label": 0}, {"snippet_id": 71977, "code": " from functools import partial import cherrypy import cephfs from. import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope", "label": 1}, {"snippet_id": 43965, "code": ".find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser", "label": 0}, {"snippet_id": 10686, "code": ".tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint", "label": 0}, {"snippet_id": 5243, "code": "'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"", "label": 0}, {"snippet_id": 23053, "code": " lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args:", "label": 0}, {"snippet_id": 62283, "code": " session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action @acs_action('login-action') def login_action(session_info, user): \"", "label": 0}, {"snippet_id": 7108, "code": " at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR", "label": 0}, {"snippet_id": 39940, "code": "\nfrom django.db import models from.dsstox_lookup import DSSToxLookup from.extracted_text import ExtractedText from model_utils.managers import InheritanceManager from django.apps import apps from django", "label": 1}, {"snippet_id": 7173, "code": ".role_code in self.roles_allowed def get_query(self): return self.session.query(self.model) create_modal=False edit_modal=False column_list=[ 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', ", "label": 1}, {"snippet_id": 62787, "code": "(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse", "label": 0}, {"snippet_id": 69413, "code": " logger.info(\"Setting up admin users\") config_path=CONFIG_FILE if os.path.exists(config_path): with open(config_path, 'r') as f: config=yaml.load(f) else: config={} config['users']=config.get('users',{}", "label": 0}, {"snippet_id": 71714, "code": ".id(), '1') def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self", "label": 0}, {"snippet_id": 22553, "code": " at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary", "label": 0}, {"snippet_id": 74310, "code": ".access_form_valid ) and self._passphrase_next_url(request): return self._redirect_from_passphrase(request) elif self.access_granted or self.access_form_valid: return super().dispatch(request, *args, **kwargs) else", "label": 0}, {"snippet_id": 78843, "code": ".get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db", "label": 0}, {"snippet_id": 10556, "code": ".getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode", "label": 0}, {"snippet_id": 56832, "code": "*kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs(**kwargs) extra_context['concept']=concept transaction=concept.transaction extra_context['transaction']=transaction return", "label": 0}, {"snippet_id": 84929, "code": ".append({'old_title': old_title, 'title': article.title}) context={'found_links': found_links, 'found_old_links': found_old_links, 'name': title} return render_to_response('wiki/backlinks.html', context", "label": 0}, {"snippet_id": 17421, "code": " return flask.redirect(flask.url_for('account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason", "label": 0}, {"snippet_id": 14993, "code": " attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name", "label": 0}, {"snippet_id": 60365, "code": "=str(app_root / \"datasette\" / \"templates\") template_paths=[] if self.template_dir: template_paths.append(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"] for plugin in get_plugins(pm)", "label": 0}, {"snippet_id": 74412, "code": " def _rendering_done_hook(self): self.eval_action(\"REVIEW\") class _ReportActionPartial(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__", "label": 0}, {"snippet_id": 82375, "code": "-url'), re_path(r'^add-many/$', ShortManyURLSView.as_view(), name='add-many-urls'), re_path(r'^detail/(?P<pk>(\\d)+)/$', URLDetailView.as_view(), name='url-detail-view'), re_path(r'^update/(?P<pk>(\\d)+)", "label": 0}, {"snippet_id": 64306, "code": " and response.status_ok(): session.clear() return redirect(next_page) else: current_app.logger.error('Unknown error during the logout') abort(400) elif 'SAMLRequest' in request.form: current_app.logger", "label": 0}, {"snippet_id": 32845, "code": " self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self", "label": 1}, {"snippet_id": 29671, "code": " def show_post_redirect(): return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items", "label": 1}, {"snippet_id": 68810, "code": ".stdout.decode() assert proc.stderr.decode()==' -Validating: \\x1b[32mOK\\x1b[0m\\n' * len(extensions) def test_labextensions(): \"\"\" Validate labextensions we want installed \"\"\" assert os.path.exists('/opt", "label": 0}, {"snippet_id": 3663, "code": " with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 73931, "code": " position): return render(request, 'position.html', position_detail_data(request, position)) def upload_applications(request): position=Position.objects.get( id=request.POST.get(\"id\")) def import_applications", "label": 1}, {"snippet_id": 27350, "code": ".autoscaling_config=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def update(self, **kwargs):", "label": 0}, {"snippet_id": 72405, "code": " return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if depth > 5: logger.warning(\"[NFS] Limiting depth", "label": 0}, {"snippet_id": 68443, "code": " import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection class IndexView(PaginationMixin, ListView): template_name='twitter_hunter/index.html' context_object_name='hts", "label": 0}, {"snippet_id": 53500, "code": ".startswith(resources_path): return False return True while len(frames) > 1 and is_cauldron_code(frames[0].filename): frames.pop(0) return frames def format_stack_frame(stack_frame, project: 'projects.Project')", "label": 0}, {"snippet_id": 12527, "code": " providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful", "label": 0}, {"snippet_id": 73418, "code": ".html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm", "label": 0}, {"snippet_id": 49529, "code": " from database.database_insert import insert_user, insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil", "label": 0}, {"snippet_id": 45140, "code": " return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats[", "label": 0}, {"snippet_id": 10745, "code": ".get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer", "label": 0}, {"snippet_id": 53567, "code": " :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message", "label": 0}, {"snippet_id": 6323, "code": " id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non-trusted issuer: %s' % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow", "label": 0}, {"snippet_id": 38324, "code": ")s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_", "label": 1}, {"snippet_id": 65242, "code": ".unlock_database import UnlockDatabase import keepassgtk.config_manager import os from os.path import exists import ntpath import gi gi.require_version('Gtk', '3.0') gi.require_version('Gdk', '3.0') class", "label": 0}, {"snippet_id": 7335, "code": " Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses", "label": 0}, {"snippet_id": 78997, "code": " accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id", "label": 0}, {"snippet_id": 40956, "code": " ddid=dd.id resp=self.client.get('/datadocument/%s/' % ddid) self.assertEqual(resp.status_code, 200, 'The page must return a 200 status code') try: extracted_text=ExtractedText.objects.get(data_document", "label": 0}, {"snippet_id": 44321, "code": " \"Button should be disabled\") tag=self.browser.find_element_by_class_name('taggit-tag') tag.click() self.assertTrue(submit.is_enabled(), \"Button should be enabled\") def test_field_exclusion(self): doc=self", "label": 0}, {"snippet_id": 11648, "code": ".VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':", "label": 0}, {"snippet_id": 77924, "code": " import ckan.plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras", "label": 0}, {"snippet_id": 79330, "code": " 'close_time': close_time, 'closed': datarequest.closed, 'user': _get_user(datarequest.user_id), 'organization': None, 'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller", "label": 0}, {"snippet_id": 77773, "code": " author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"", "label": 1}, {"snippet_id": 58434, "code": "\"settings\":{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" } }, onboarding.INVITE_SOMEBODY:{ \"done\": True, \"settings\":{ \"html\": \"<p>invite_somebody</p>\", \"description\"", "label": 0}, {"snippet_id": 28474, "code": ") def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier.decode() return hex_identifier def hex_to_binary(hex_identifier)", "label": 0}, {"snippet_id": 28736, "code": "() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns", "label": 1}, {"snippet_id": 29274, "code": ".register_blueprint(gallery) app.register_blueprint(auth) app.register_blueprint(user) configure_uploads(app,(images,)) patch_request_class(app, FILE_SIZE_LIMIT) return app def register_blueprints(app): \"\"\" Register all", "label": 0}, {"snippet_id": 40995, "code": "(self): doc=DataDocument.objects.first() response=self.client.get(f'/datadocument/179486/') self.assertIn('Download Script',response.content.decode('utf-8')) self.assertIn('Extraction Script',response.content", "label": 0}, {"snippet_id": 2108, "code": "\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime", "label": 0}, {"snippet_id": 28202, "code": " the backend processes. Args: redis_client: The redis client to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The", "label": 0}, {"snippet_id": 71143, "code": ".session_hash==session.hash(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id !=session.user_id: session=models.Session.upgrade_to_user_session( session_id,", "label": 0}, {"snippet_id": 35560, "code": "['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split", "label": 0}, {"snippet_id": 55683, "code": "(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath", "label": 0}, {"snippet_id": 82228, "code": "() context['number_of_links']=quantity context['urls_without_category']=urls_without_category return context class CategoryDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs", "label": 0}, {"snippet_id": 77365, "code": ": server_vars[\"projection\"]=\"flat\" logger.debug(\"Servers projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES", "label": 0}, {"snippet_id": 17874, "code": ": return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password", "label": 0}, {"snippet_id": 42536, "code": " from lxml import html from django.urls import resolve from django.contrib.auth.models import User from dashboard.tests.loader import fixtures_standard class FacetedSearchTest(TestCase): fixtures=fixtures_standard", "label": 0}, {"snippet_id": 9858, "code": " messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions", "label": 0}, {"snippet_id": 42311, "code": " test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by':[str(User.objects.get(username=", "label": 0}, {"snippet_id": 10393, "code": ".core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext", "label": 0}, {"snippet_id": 51805, "code": " render_template, redirect, request, jsonify) from flask_debugtoolbar import DebugToolbarExtension import jinja2 import random from model import(db, connect_to_db, User, Team, UserTeam, Board, Project, Phase) import", "label": 0}, {"snippet_id": 47408, "code": " datasource, 'datagroup_list': datagroup_list, 'form': form} return render(request, template_name, context) @login_required() def data_source_create(request, template_name=('data_source/' 'datasource_form", "label": 0}, {"snippet_id": 12729, "code": " \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request", "label": 0}, {"snippet_id": 50890, "code": " return result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser() self.add_bool_option(\"-v\", \"--verbose\") self._enabled_options=set() self._disabled_options=set(", "label": 0}, {"snippet_id": 50603, "code": " return PosixUserLock(name) def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS']", "label": 0}, {"snippet_id": 28999, "code": " object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object)", "label": 0}, {"snippet_id": 63601, "code": ", data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND", "label": 1}, {"snippet_id": 30167, "code": "{'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''.join(random.choice(string.ascii_uppercase ", "label": 0}, {"snippet_id": 57242, "code": "=kwargs.get('transaction_code', None) if not transaction_code: transaction=Transaction.objects.create(employee=request.user) return redirect('transaction_edit', transaction_code=transaction.code) transaction", "label": 0}, {"snippet_id": 21071, "code": "\"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name or get_raylet_socket_name()) self.prepare_socket_file(self._raylet_socket_name) stdout_file, stderr_file", "label": 0}, {"snippet_id": 38657, "code": "'pk': self.pk}) def get_abstract_filename(self): ext=self.filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self.data_group fn=self.get_abstract_filename() return f'/media/", "label": 0}, {"snippet_id": 79712, "code": " description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not", "label": 0}, {"snippet_id": 7747, "code": ").query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return", "label": 0}, {"snippet_id": 3202, "code": " @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect", "label": 0}, {"snippet_id": 52309, "code": ".form.get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team", "label": 1}, {"snippet_id": 10975, "code": "'hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to", "label": 0}, {"snippet_id": 38825, "code": "=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default", "label": 0}, {"snippet_id": 60445, "code": "/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/", "label": 0}, {"snippet_id": 72938, "code": " request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() request", "label": 1}, {"snippet_id": 33920, "code": "(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation", "label": 0}, {"snippet_id": 45665, "code": "'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request", "label": 0}, {"snippet_id": 55523, "code": ".commonprefix(self._raw())) \tdef join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef", "label": 0}, {"snippet_id": 71870, "code": " 'error', 'message':'TEST1'}, {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey", "label": 0}, {"snippet_id": 11589, "code": " successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action", "label": 0}, {"snippet_id": 65743, "code": "\"liufhre86ewoiwejmrcu8owe\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") CreateDatabase( self, self.create_tab", "label": 0}, {"snippet_id": 546, "code": " \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir", "label": 1}, {"snippet_id": 58818, "code": ".email) ) class Invite(models.Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code', max_length", "label": 0}, {"snippet_id": 52055, "code": "\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name, \"desc\"", "label": 0}, {"snippet_id": 47504, "code": " from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q", "label": 1}, {"snippet_id": 41983, "code": "') self.assertNotIn('Bulk Create', response.content.decode(), (\"Bulk button shouldn't be present w/ \" \"Habits and practices group_type.\")) def test_bulk_create_post(self): '''test the POST to create Products", "label": 0}, {"snippet_id": 13498, "code": " redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError):", "label": 1}, {"snippet_id": 80929, "code": "/fit_event_views.xml', 'views/fit_subscription_templates.xml', 'views/fit_website_event_sale_templates.xml', 'views/fit_website_event_templates.xml', 'views/fit_website_templates.xml', ], 'installable': True, }", "label": 0}, {"snippet_id": 24757, "code": " import os import time import traceback import redis import ray from ray.autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import ray.gcs_utils import ray.utils", "label": 0}, {"snippet_id": 62802, "code": "{'SAMLResponse': base64.b64encode(saml_response), 'RelayState': came_from}): response1=self.app.dispatch_request() cookie=response1.headers['Set-Cookie'] return cookie def authn(self, url, force_authn=False", "label": 1}, {"snippet_id": 21623, "code": "(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True,", "label": 0}, {"snippet_id": 34973, "code": "(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response[", "label": 1}, {"snippet_id": 60894, "code": ", comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name", "label": 0}, {"snippet_id": 26089, "code": " use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind", "label": 0}, {"snippet_id": 18871, "code": " gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time", "label": 0}, {"snippet_id": 9499, "code": " address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update", "label": 0}, {"snippet_id": 52005, "code": "\"Displays form to send email to user for password recovery\"\"\" return \"OOOOOOOPS\" @app.route(\"/dashboard\") def dashboard(): \"\"\"Renders dashboard view, grabbing existing teams for display\"\"\" session[\"team_id\"", "label": 0}, {"snippet_id": 17811, "code": "!=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session", "label": 0}, {"snippet_id": 55742, "code": " file_with_name(self,name): \t\ttry: \t\t\tthe_file=self[name] \t\texcept IndexError: \t\t\tthe_file=self.create(File,name) \t\treturn the_file class Line(object): \tdef __init__(self,file,number,text): \t\tself.file=file \t", "label": 1}, {"snippet_id": 74093, "code": "(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin, _PassphrasePartial): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get", "label": 0}, {"snippet_id": 20455, "code": "\" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str,", "label": 0}, {"snippet_id": 12923, "code": " user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using", "label": 0}, {"snippet_id": 21003, "code": ", stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 69795, "code": " ensure_jupyterlab_extensions() ensure_jupyterhub_service(HUB_ENV_PREFIX) ensure_jupyterhub_running() ensure_symlinks(HUB_ENV_PREFIX) run_plugin_actions(pm, args.plugin) logger.info(\"Done!\") if __name__==", "label": 0}, {"snippet_id": 40004, "code": ", null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField(max_length=50, null=True", "label": 0}, {"snippet_id": 24796, "code": " class Monitor(object): \"\"\"A monitor for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting", "label": 0}, {"snippet_id": 18080, "code": "(email_msg) def send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user': user } email_msg", "label": 0}, {"snippet_id": 46161, "code": " csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context['msg']=('The following columns need to be added or ", "label": 0}, {"snippet_id": 63329, "code": ", '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__) @test_views.route('/test') def test(): return 'OK' @test_views", "label": 0}, {"snippet_id": 57411, "code": " None) if print_transaction: transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf", "label": 0}, {"snippet_id": 70333, "code": ". You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below", "label": 0}, {"snippet_id": 5676, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']", "label": 1}, {"snippet_id": 69361, "code": ": conda.install_miniconda(installer_path, USER_ENV_PREFIX) apt.install_packages([ 'gcc' ]) conda.ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[ 'jupyterhub", "label": 0}, {"snippet_id": 48682, "code": " assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product)", "label": 0}, {"snippet_id": 72617, "code": ".POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1].split('@')[0].title().translate({ord", "label": 0}, {"snippet_id": 36390, "code": "=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%',", "label": 0}, {"snippet_id": 35847, "code": ", instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by(", "label": 0}, {"snippet_id": 75886, "code": " ' '<b>/tutorial/install.html</b>', ) redirect_type_helptext=_('The type of redirect you wish to use.') class Redirect(models.Model): \"\"\"A HTTP redirect associated with a Project.\"\"\" project=models.ForeignKey", "label": 0}, {"snippet_id": 980, "code": "='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part)", "label": 1}, {"snippet_id": 20812, "code": "(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare", "label": 0}, {"snippet_id": 75941, "code": ", db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField(choices=STATUS_CHOICES", "label": 0}, {"snippet_id": 30829, "code": " if request.method=='POST': session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete", "label": 0}, {"snippet_id": 10158, "code": " sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP", "label": 0}, {"snippet_id": 41007, "code": "('Download Script',response.content.decode('utf-8')) self.assertIn('Extraction Script',response.content.decode('utf-8')) def test_product_card_location(self): response=self.client.get('/datadocument/179486", "label": 0}, {"snippet_id": 36930, "code": "=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month", "label": 0}, {"snippet_id": 74989, "code": "(candidate) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=UploadForm() return render(request, 'etd_app/candidate_upload.html',{'candidate': candidate", "label": 0}, {"snippet_id": 22176, "code": " for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port", "label": 0}, {"snippet_id": 43492, "code": "\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']", "label": 0}, {"snippet_id": 82017, "code": ", *args, **kwargs): form=JustURLForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] short_url=form.cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL", "label": 0}, {"snippet_id": 76223, "code": ".sub(ending +'$', '.html', path) return self.get_full_path( filename=to, language=language, version_slug=version_slug, ) def redirect_sphinx_htmldir(self, path, language=None, version_slug=None): if path", "label": 0}, {"snippet_id": 26691, "code": " than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants", "label": 0}, {"snippet_id": 70351, "code": " index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path", "label": 1}, {"snippet_id": 67185, "code": " from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django", "label": 0}, {"snippet_id": 79208, "code": " model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c", "label": 0}, {"snippet_id": 79051, "code": "=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req", "label": 0}, {"snippet_id": 39789, "code": ".prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is", "label": 0}, {"snippet_id": 21931, "code": " exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port", "label": 0}, {"snippet_id": 742, "code": " directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags", "label": 0}, {"snippet_id": 6426, "code": " domain') return False if not id_token.get('email_verified', False) and \\ self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN=", "label": 0}, {"snippet_id": 82245, "code": ", pk, *args, **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request, 'category-detail-view.html',{'object': object, 'visits': visits", "label": 0}, {"snippet_id": 56245, "code": ".APP_DEEPLINK_DOMAIN, '/people/me/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase.ScenarioMaker(", "label": 0}, {"snippet_id": 906, "code": ", path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^", "label": 0}, {"snippet_id": 9597, "code": " current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer", "label": 0}, {"snippet_id": 13095, "code": " order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _", "label": 0}, {"snippet_id": 64218, "code": " Logout Response endpoint The IdP will send the logout response to this view, which will process it with pysaml2 help and log the user out. Note that the IdP can request a logout even when we didn't initiate", "label": 0}, {"snippet_id": 81390, "code": ".name) if repeating_event.fit_repetition=='daily': self._handle_daily_event_repetition(repeating_event) if repeating_event.fit_repetition=='weekly': self._handle_weekly_event_repetition(repeating_event", "label": 0}, {"snippet_id": 82178, "code": " template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset=Category.objects.all().order_by('name') template_name='category-list-view", "label": 0}, {"snippet_id": 25387, "code": " RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy", "label": 0}, {"snippet_id": 28950, "code": " is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker used", "label": 0}, {"snippet_id": 57212, "code": "'transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction return render(request, 'transactions/transaction_detail.html', extra_context", "label": 0}, {"snippet_id": 42451, "code": " ExtractedText class ExtractedQaTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self", "label": 0}, {"snippet_id": 9907, "code": ".get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request", "label": 0}, {"snippet_id": 18486, "code": "\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?=.{8,20}$)(?![_.])(?!.*[_.]{2", "label": 0}, {"snippet_id": 11402, "code": "=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user", "label": 0}, {"snippet_id": 77040, "code": " _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self, target_url", "label": 0}, {"snippet_id": 8788, "code": "=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth", "label": 0}, {"snippet_id": 22594, "code": " set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span", "label": 0}, {"snippet_id": 84303, "code": "'article__object_id': group.id}) changeset=get_object_or_404( changes_qs, revision=int(revision), **article_args) article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, *", "label": 0}, {"snippet_id": 13141, "code": ", 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value", "label": 0}, {"snippet_id": 10136, "code": " This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next", "label": 0}, {"snippet_id": 71645, "code": ").count() self.assertTrue(s_count2==1) def test_save_session(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google", "label": 0}, {"snippet_id": 21341, "code": " raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following", "label": 0}, {"snippet_id": 18474, "code": " the secure cookie and logs in the user. \t\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument", "label": 1}, {"snippet_id": 40067, "code": " to boolean False ''' try: return self.curated_chemical.sid except AttributeError: return False def get_data_document(self): '''Find the child object by trying each of the classes, then return the datadocument", "label": 0}, {"snippet_id": 45067, "code": "%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count", "label": 0}, {"snippet_id": 76886, "code": " give the image. image_spec: all details about type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname +\"-\") image.save(t_path, image_spec.pil_format", "label": 0}, {"snippet_id": 5217, "code": " response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/", "label": 0}, {"snippet_id": 20811, "code": " raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to", "label": 0}, {"snippet_id": 35004, "code": " writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document", "label": 1}, {"snippet_id": 63498, "code": "', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn']=eppn session['eduPersonPrincipalName']=eppn response=self.app.dispatch_request() self.assertEqual(response.status, '200 OK') self", "label": 0}, {"snippet_id": 63993, "code": " if user is None: current_app.logger.error('Could not find the user identified by the IdP') raise Forbidden(\"Access not authorized\") action=get_action() return action(session_info, user) def _get_name_id", "label": 0}, {"snippet_id": 55562, "code": " not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path) \t\telse:", "label": 0}, {"snippet_id": 18198, "code": " PasswordHasher from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options import define", "label": 1}, {"snippet_id": 77944, "code": " LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras to datasets to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0", "label": 0}, {"snippet_id": 31925, "code": "'' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell. ''' while True: try: line", "label": 0}, {"snippet_id": 13570, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers", "label": 0}, {"snippet_id": 78413, "code": ".warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest", "label": 0}, {"snippet_id": 21465, "code": "(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill", "label": 0}, {"snippet_id": 10294, "code": " ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username", "label": 0}, {"snippet_id": 14377, "code": "'student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle", "label": 0}, {"snippet_id": 2964, "code": " if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request", "label": 0}, {"snippet_id": 21226, "code": " start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path", "label": 0}, {"snippet_id": 32154, "code": " it. ''' while self.char and self.char.isspace(): self.read() if self.char==None: return Token(TokenType.EOF, None, self.position) elif self.char=='>': start=self.position if self.read()=='>': self.read", "label": 0}, {"snippet_id": 22949, "code": " str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time\": self.start_time, \"end_time\": time.time(), \"extra_data\": extra_data, } self", "label": 0}, {"snippet_id": 13786, "code": " HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine", "label": 0}, {"snippet_id": 75607, "code": ": select2_results.append({'id': r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0: return[{'text", "label": 0}, {"snippet_id": 73871, "code": ".get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request", "label": 0}, {"snippet_id": 3400, "code": "=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self):", "label": 0}, {"snippet_id": 24334, "code": ")=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE and driver_id !=self.worker.task_driver_id", "label": 0}, {"snippet_id": 18158, "code": "+domain +payload\r url=url.strip()\r \r try:\r r=requests.head(url, allow_redirects=True, timeout=5)\r except:\r print \"[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r", "label": 1}, {"snippet_id": 68517, "code": ", **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('-datetime') return query def get(self", "label": 0}, {"snippet_id": 62220, "code": "(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore(page): return validate_cache_control_header(page, 'no-store') def validate_notransform", "label": 0}, {"snippet_id": 17870, "code": ": if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form", "label": 0}, {"snippet_id": 29358, "code": " login_required from benwaonline.database import db from benwaonline.oauth import twitter from benwaonline.models import user_datastore, User from benwaonline.auth import auth from benwaonline.auth.forms", "label": 1}, {"snippet_id": 5719, "code": "'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin", "label": 0}, {"snippet_id": 65103, "code": " fixed=fix_syntax_err(code, se) if not fixed: if vlevel >=1: print(repr(se), file=sys.stderr) dock_points(deductions, args.points, 'syntax error') break code=fixed except BaseException as e: if vlevel >=1:", "label": 0}, {"snippet_id": 15668, "code": ".get('number_of_days', '') sub_form.new_value.data=command.get('new_value', '') for index, command in enumerate(get_command('change_timeseries_value_several_days_add_delta')): sub_form=form.change_timeseries_value_several_days_add_delta", "label": 0}, {"snippet_id": 43362, "code": ".dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 79970, "code": "'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights", "label": 1}, {"snippet_id": 77853, "code": " username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation", "label": 0}, {"snippet_id": 62257, "code": ", \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page): if len(page.cookies.keys()) > 0: return False else: return True def validate_onion_address_not_in_href(page): links_on_landing_page=page", "label": 0}, {"snippet_id": 48431, "code": ".data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type': doc.document_type, 'return_url': request.META.get('HTTP_REFERER')} form", "label": 0}, {"snippet_id": 59456, "code": " in API output to always use https:// protocol \"\"\".strip()), ) DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette", "label": 0}, {"snippet_id": 84030, "code": "'can_observe': True}) if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name", "label": 0}, {"snippet_id": 27239, "code": "=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True", "label": 1}, {"snippet_id": 43342, "code": " true_cas=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True", "label": 0}, {"snippet_id": 37133, "code": ".csv'}) self.fields['download_script'].queryset=qs class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type", "label": 0}, {"snippet_id": 40650, "code": ".doc.extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1", "label": 0}, {"snippet_id": 72268, "code": " daemons=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict", "label": 0}, {"snippet_id": 57504, "code": " transaction.closed_date=timezone.datetime.now() transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']: transaction.save() return", "label": 0}, {"snippet_id": 49820, "code": " session: email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER", "label": 0}, {"snippet_id": 4352, "code": "': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account", "label": 1}, {"snippet_id": 51021, "code": " steps self._disable_all_options=DEFAULT_STEPS not in steps self._disabled_options=set(s[1:] for s in steps if s.startswith(\"-\")) self._enabled_options=set(s[1:] for s in steps if s.startswith(\"+\")) self", "label": 0}, {"snippet_id": 76290, "code": " user_height): \"\"\"High-level production of the image. Args: layer_properties: Object with details about the layer. user_log_rect: The user-requested projected, ie map coordinates, not lat/lon, limits of", "label": 0}, {"snippet_id": 19733, "code": " import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary,", "label": 0}, {"snippet_id": 8410, "code": " descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), ", "label": 0}, {"snippet_id": 12849, "code": "{'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders", "label": 0}, {"snippet_id": 1293, "code": " os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist", "label": 1}, {"snippet_id": 7953, "code": " reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client", "label": 0}, {"snippet_id": 82289, "code": " DeleteView): model=Category template_name='category-delete-view.html' success_url=reverse_lazy('category-list-view') class ClickTrackingDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, *", "label": 0}, {"snippet_id": 65246, "code": ".require_version('Gtk', '3.0') gi.require_version('Gdk', '3.0') class MainWindow(Gtk.ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog", "label": 0}, {"snippet_id": 38327, "code": "=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\"", "label": 1}, {"snippet_id": 3843, "code": "=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users", "label": 0}, {"snippet_id": 70698, "code": " import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date", "label": 1}, {"snippet_id": 83667, "code": "\"\"A soft lock to edting an article.\"\"\" def __init__(self, title, request, message_template=None): self.title=title self.user_ip=get_real_ip(request) self.created_at=datetime.now() if message_template is", "label": 0}, {"snippet_id": 6298, "code": " for this application, was issued by the Apps domain we expected, and that the email address has been verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False", "label": 0}, {"snippet_id": 13362, "code": " get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils", "label": 0}, {"snippet_id": 53207, "code": "': '+26334465657456774567', 'email': 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, '') self.assertEqual(self.view.get_object().zipcode", "label": 0}, {"snippet_id": 39581, "code": "=models.CASCADE, primary_key=True) prod_name=models.CharField(max_length=500, null=True, blank=True) doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50,", "label": 0}, {"snippet_id": 56970, "code": " context=super().get_context_data(**kwargs) context['header']=self.header context['filter']=self.filter context['is_filtered']=self.is_filtered return context def get_queryset(self): data=QueryDict('',", "label": 0}, {"snippet_id": 42196, "code": " 'Trash button should be present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style", "label": 0}, {"snippet_id": 67905, "code": " redirect from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q,", "label": 0}, {"snippet_id": 7106, "code": " of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT", "label": 0}, {"snippet_id": 24769, "code": " ray.cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id", "label": 0}, {"snippet_id": 11266, "code": " ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in", "label": 0}, {"snippet_id": 81793, "code": "(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url", "label": 0}, {"snippet_id": 67204, "code": " socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import", "label": 0}, {"snippet_id": 55155, "code": ".path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir(self.path) \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self):", "label": 0}, {"snippet_id": 54727, "code": ".book_edition,assignment.chapter,problem.number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups", "label": 1}, {"snippet_id": 33217, "code": "(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field=", "label": 0}, {"snippet_id": 66820, "code": ".GET.get('keyword'): domain=request.GET.get('keyword') return HttpResponseRedirect(domain) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name", "label": 1}, {"snippet_id": 36924, "code": " ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime", "label": 0}, {"snippet_id": 51836, "code": ".undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route(\"/\") def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app", "label": 0}, {"snippet_id": 78500, "code": ".title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids", "label": 1}, {"snippet_id": 74051, "code": ", reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core.reporting import report_delivery from callisto_core.wizard_builder", "label": 0}, {"snippet_id": 18357, "code": "\tdocument={'username': self.username,'email': self.email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher", "label": 1}, {"snippet_id": 4200, "code": ".\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response", "label": 0}, {"snippet_id": 46621, "code": "(data_source=datasource).count() +1 default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'\"' initial_values={'downloaded_by': request.user", "label": 0}, {"snippet_id": 24275, "code": "( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\", worker=self", "label": 0}, {"snippet_id": 32918, "code": "/output based characters < > >> in the command. < will be redirecting input, > will be output and >> is output append \"\"\" if(\"<\" in cmd): SetUpInputRedirect(cmd) if(\">\" in cmd): SetUpOutputRedirect(cmd) if", "label": 1}, {"snippet_id": 43782, "code": " in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait", "label": 0}, {"snippet_id": 67846, "code": "') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs' def get_context_data(self, **kwargs): context=super().get_context_data", "label": 0}, {"snippet_id": 15543, "code": "'number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models')[0]['include'] if not form.change_input_series_one_model", "label": 0}, {"snippet_id": 4641, "code": " self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): ", "label": 0}, {"snippet_id": 49362, "code": "'POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects", "label": 0}, {"snippet_id": 62243, "code": "-transform') def validate_private(page): return validate_cache_control_header(page, 'private') def validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\"", "label": 0}, {"snippet_id": 24897, "code": "=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning( \"Monitor: \" \"TODO: if launching > 1 redis shard, flushing needs to \" \"touch shards", "label": 0}, {"snippet_id": 16806, "code": "'tournament': t, 'round': r, 'formset': formset}) g.save() for gp_id, field in f.cleaned_data.items(): if gp_id in['the_set', 'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try:", "label": 0}, {"snippet_id": 58244, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.INVITE_SOMEBODY, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.PREVIEW_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.NEXT_STEPS, ONBOARDING_STEPS_DEFAULT_TEMPLATE),", "label": 1}, {"snippet_id": 36845, "code": " item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats", "label": 0}, {"snippet_id": 71040, "code": "': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the", "label": 0}, {"snippet_id": 65842, "code": "(self): if self.container.get_n_pages() > 1: self.container.set_show_tabs(True) else: self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath", "label": 0}, {"snippet_id": 46506, "code": " extracted_chemical=None context['clean_comp_err'][i +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical matches rawchem_ptr_id %s' % row['id']) try: ingredient", "label": 0}, {"snippet_id": 30005, "code": "): __tablename__='Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self", "label": 1}, {"snippet_id": 24524, "code": " files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell())", "label": 1}, {"snippet_id": 26501, "code": "+f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda", "label": 0}, {"snippet_id": 40062, "code": " curated_chemical relationship, it evaluates to boolean False ''' try: return self.curated_chemical.sid except AttributeError: return False def get_data_document(self): '''Find the child object by trying", "label": 0}, {"snippet_id": 69664, "code": "(conda_packages), ' '.join(conda_packages) )) conda.ensure_conda_packages(USER_ENV_PREFIX, conda_packages) pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages()))) if pip_packages: logger.info(", "label": 0}, {"snippet_id": 28665, "code": "\"GPU\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus return resources _default_handler=None def setup_logger(logging_level, logging_format): \"\"\"Setup default logging", "label": 0}, {"snippet_id": 6094, "code": " returns a redirect object so they can go try to authenticate. :return: A redirect, or None if the user is authenticated. \"\"\" if request.endpoint in frozenset(['oidc_callback', 'oidc_error']): return None", "label": 0}, {"snippet_id": 27550, "code": ". This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key': 'value'}): Optionally, a dictionary can be passed", "label": 0}, {"snippet_id": 37708, "code": "): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields", "label": 0}, {"snippet_id": 71126, "code": " import re from webob import Response from webob import Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return", "label": 0}, {"snippet_id": 6713, "code": ") def register(): form=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit", "label": 0}, {"snippet_id": 36103, "code": " return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is", "label": 0}, {"snippet_id": 20120, "code": "[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin)", "label": 0}, {"snippet_id": 11479, "code": "(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login", "label": 0}, {"snippet_id": 34486, "code": ") ) ) prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click(", "label": 0}, {"snippet_id": 48001, "code": "=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...'", "label": 0}, {"snippet_id": 69103, "code": " ensure_jupyterhub_service(prefix): \"\"\" Ensure JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp() systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units", "label": 0}, {"snippet_id": 11652, "code": " log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender", "label": 0}, {"snippet_id": 1245, "code": " modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\"", "label": 0}, {"snippet_id": 29102, "code": "=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock", "label": 0}, {"snippet_id": 33683, "code": "']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self", "label": 0}, {"snippet_id": 82616, "code": " NoSuchProcess: pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"", "label": 0}, {"snippet_id": 37051, "code": " bootstrap_datepicker_plus import DatePickerInput from django import forms from django.forms import BaseInlineFormSet from django.utils.translation import ugettext_lazy as _ from dashboard.models import * from django", "label": 1}, {"snippet_id": 68992, "code": " DdWjbGflN9k17VCf4Z9yAb9QMqHzHwIGXrb7ryFcuROMCLLVUp07PrTrRxnO9A/4 xxECi0l/BzNxeU1gK88hEaNjIfviPR/h6Gq6KOcNKZ8rVFdwFpjbvwHMQBWhrqfu G3KaePvbnObKHXpfIKoAM7X2qfO+IFnLGTPyhFTcrl6vZBTMZTfZiC1XDQLuGUnd sckuXINIU3DFWzZGr0QrqkuE/jyr7FXeUJj9B7cLo+s", "label": 0}, {"snippet_id": 71302, "code": "=_get_messages def _set_redirect_uri(self): next_uri=self.GET.get('next') if next_uri is not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try", "label": 1}, {"snippet_id": 15322, "code": " in model['inputs'].iteritems()] def get_inputs_choices(): models=load_json('models.json') inputs_by_models=[get_inputs_choices_by_model(model['model_system_name']) for model in models] return[item for", "label": 0}, {"snippet_id": 47492, "code": "'datasource_confirm_delete.html')): datasource=get_object_or_404(DataSource, pk=pk) if request.method=='POST': datasource.delete() return redirect('data_source_list') return render(request, template_name,{'object': datasource", "label": 0}, {"snippet_id": 15402, "code": ".model_system_name.data, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_input_series_all_models': for entry in field.entries", "label": 0}, {"snippet_id": 37873, "code": " if not dg.type in['CO']: return False if dg.extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=[]): '''Returns the", "label": 0}, {"snippet_id": 67318, "code": "=ip)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=ip)).order_by('-publish_timestamp') count=context['events'].count() if", "label": 0}, {"snippet_id": 47170, "code": ") context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required def dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id", "label": 0}, {"snippet_id": 44971, "code": ".is_valid()) def test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk", "label": 0}, {"snippet_id": 63758, "code": " saml2.client import Saml2Client from saml2.response import LogoutResponse from saml2.metadata import entity_descriptor from werkzeug.exceptions import Forbidden from flask import request, session, redirect", "label": 0}, {"snippet_id": 13733, "code": "\"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email", "label": 0}, {"snippet_id": 41062, "code": "'title' :['New Product'], 'upc' :['stub_1860'], 'document_type':[1], 'return_url' :['/datadocument/167497/']} response=self.client.post('/link_product_form/167497/', data=data) self.assertRedirects(response", "label": 0}, {"snippet_id": 60891, "code": " job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the", "label": 0}, {"snippet_id": 13130, "code": " UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), ", "label": 0}, {"snippet_id": 50835, "code": " Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list(x) for x in arglist],[]) def flatten_comma_list(arglist): return", "label": 0}, {"snippet_id": 77246, "code": " !=\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen", "label": 1}, {"snippet_id": 20328, "code": "=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with", "label": 0}, {"snippet_id": 68942, "code": " gANhQrlMnTx//IdZssaxvYytSHpPZTYw+qPEjbBJOLpoLrz8ZafN1uekpAqQjffI AOqW9SdIzq/kSHgl0bzWbPJPw86XzzftewjKNbkCDQRTmyS2ARAAxSSdQi+WpPQZ fOflkx9sYJa0cWzLl2w++FQnZ1Pn5F09D/kPMNh4qOsyvXWlekaV/SseDZtVziHJ Km6V8TBG3flmFlC3DWQfNNFwn5", "label": 0}, {"snippet_id": 45316, "code": "=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month", "label": 0}, {"snippet_id": 59766, "code": " name) for name in names ] def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} query=queries.get(query_name) if query: if", "label": 0}, {"snippet_id": 45809, "code": "=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects", "label": 0}, {"snippet_id": 54106, "code": "=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def", "label": 0}, {"snippet_id": 44468, "code": ".objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type=", "label": 0}, {"snippet_id": 67035, "code": "=request.GET.get('keyword') return HttpResponseRedirect(filehash) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='filehash/detail.html'", "label": 1}, {"snippet_id": 13329, "code": ".api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers", "label": 0}, {"snippet_id": 20291, "code": ".xray_driver_removed_handler else: raise Exception(\"This code should be unreachable.\") message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self", "label": 0}, {"snippet_id": 63528, "code": ")['payload']['location']) def test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context('/logout',", "label": 0}, {"snippet_id": 68625, "code": ".astimezone(timezone('Asia/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(", "label": 0}, {"snippet_id": 74748, "code": " person_form=PersonForm(instance=person_instance, degree_type=degree_type) else: person_form=PersonForm(initial=shib_info, degree_type=degree_type) candidate_form=CandidateForm(degree_type=degree_type) return", "label": 0}, {"snippet_id": 16780, "code": " formset.is_valid(): for f in formset: g=f.game g.name=f.cleaned_data['game_name'] g.the_set=f.cleaned_data['the_set'] try: g.full_clean() except ValidationError as e: f.add_error(None, e) return render", "label": 0}, {"snippet_id": 19986, "code": "(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex(heartbeat_message", "label": 0}, {"snippet_id": 68622, "code": "('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse", "label": 0}, {"snippet_id": 45721, "code": " template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs,", "label": 0}, {"snippet_id": 68772, "code": "(): \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE", "label": 0}, {"snippet_id": 57379, "code": ".is_filtered=True self.filter=TransactionFilter(data) self.queryset=self.filter.qs.select_related('cashclose')\\ .prefetch_related('concepts__value__currency') \\ .order_by('-id') return self.queryset def post", "label": 0}, {"snippet_id": 42215, "code": "<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>' self.assertIn(span, response, 'Check should be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg.pk response=self", "label": 0}, {"snippet_id": 74470, "code": " logging import os import urllib import requests from django.contrib.auth.decorators import login_required, permission_required from django.contrib import messages from django.conf import settings from", "label": 0}, {"snippet_id": 20513, "code": "-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address", "label": 1}, {"snippet_id": 22099, "code": " default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name", "label": 0}, {"snippet_id": 68940, "code": "+Yxfe7JkNclwvRimvlAjqIiW5OK0vvfHco+Y gANhQrlMnTx//IdZssaxvYytSHpPZTYw+qPEjbBJOLpoLrz8ZafN1uekpAqQjffI AOqW9SdIzq/kSHgl0bzWbPJPw86XzzftewjKNbkCDQRTmyS2ARAAxSSdQi+WpPQZ fOflkx9sYJa0cWzLl2w++FQnZ1Pn5F09D/kPMNh4qOsyvXWlekaV", "label": 0}, {"snippet_id": 52117, "code": " create_team(): \"\"\"Create Team model and UserTeam model, updating database each time.\"\"\" name=request.form.get(\"name\", \"Untitled\") desc=request.form.get(\"description\", None) user_id=session.get(\"user_id", "label": 0}, {"snippet_id": 6715, "code": " register(): form=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit() token", "label": 0}, {"snippet_id": 3606, "code": " 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login", "label": 0}, {"snippet_id": 52172, "code": " Dashboard with a redirect.\"\"\" user_id=session[\"user_id\"] team_id=request.form.get(\"team\") user_choice=request.form.get(\"is_joining\") if user_choice==\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship", "label": 0}, {"snippet_id": 84902, "code": " found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match: found_links.append({'title': article.title}", "label": 0}, {"snippet_id": 70293, "code": " django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 6925, "code": "'next')) flash('An email with instructions for resetting your password has been ' 'sent.') return redirect(url_for('auth.login')) return render_template('auth/reset_password.html', form=form) @auth.route(", "label": 0}, {"snippet_id": 66274, "code": "\"clicked\", self.on_keyfile_unlock_button_clicked) composite_unlock_button=self.builder.get_object(\"composite_unlock_button\") composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked", "label": 0}, {"snippet_id": 57285, "code": "['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction", "label": 0}, {"snippet_id": 12149, "code": "'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']", "label": 0}, {"snippet_id": 82760, "code": " the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname", "label": 0}, {"snippet_id": 75333, "code": "'candidate': candidate}) @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate", "label": 0}, {"snippet_id": 63431, "code": " test_no_authn_util(self): no_authn_urls_before=[path for path in self.app.config['NO_AUTHN_URLS']] no_authn_path='/test3' no_authn_views(self.app,[no_authn_path]) self.assertEqual(no_authn_urls_before +[", "label": 0}, {"snippet_id": 34338, "code": "=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=", "label": 0}, {"snippet_id": 48068, "code": ", 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc.html'): hnp=get_object_or_404", "label": 0}, {"snippet_id": 76727, "code": "(tile, bgcolor): \"\"\"Set the transparent pixels to bgcolor. Args: tile: Tile as sent from the server. bgcolor: BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source", "label": 0}, {"snippet_id": 16821, "code": "'game_name']: continue gp=GamePlayer.objects.get(id=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament", "label": 0}, {"snippet_id": 3571, "code": "'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self", "label": 0}, {"snippet_id": 79901, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk", "label": 0}, {"snippet_id": 49566, "code": "'U9ufkrhicVHrj5CGojmQ7ZCxSwytoShSgM0t9WCq0HbqcfKwL8' } } app.secret_key='fe2917b485cc985c47071f3e38273348' app.config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS']=set(['pml']) def get_resource_as_string", "label": 0}, {"snippet_id": 42245, "code": ".assertIn('<th>Product</th>', response, 'Data Group should have Product column.') fu=GroupType.objects.create(title='Functional use') self.objects.dg.group_type=fu self.objects.dg.save() response=self.client", "label": 0}, {"snippet_id": 14293, "code": "( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order", "label": 0}, {"snippet_id": 55119, "code": ".expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime(self", "label": 0}, {"snippet_id": 24569, "code": " self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open(", "label": 1}, {"snippet_id": 83614, "code": " article_qs, group def get_articles_for_object(object, article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url", "label": 0}, {"snippet_id": 72854, "code": " render(request, 'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save-position\"): position=Position", "label": 1}, {"snippet_id": 59338, "code": " \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit for calculating a suggested facet \"\"\".strip()), ConfigOption(\"allow_facet\"", "label": 0}, {"snippet_id": 76000, "code": ", ) return ugettext( 'Redirect:{}'.format( self.get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self", "label": 0}, {"snippet_id": 53146, "code": "(update_url, data) self.assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None) self.assertEqual(self.view.get_object().house_cond, None) data={'budget': ", "label": 0}, {"snippet_id": 65371, "code": "/terminal/KeepassGtk/keepassgtk.css\") css_provider.load_from_file(css_provider_resource) context=Gtk.StyleContext() context.add_provider_for_screen( screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER", "label": 0}, {"snippet_id": 11872, "code": " openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 78258, "code": " updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix", "label": 0}, {"snippet_id": 21283, "code": " of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has", "label": 0}, {"snippet_id": 12300, "code": " try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid", "label": 0}, {"snippet_id": 21837, "code": " to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when", "label": 0}, {"snippet_id": 81885, "code": "=CounterCountingForm(request.POST or None) if form.is_valid(): object.count +=1 ip=get_client_ip(request) client_agent=request.META['HTTP_USER_AGENT'] clicktracker=ClickTracking.objects.create( client_ip=ip,", "label": 1}, {"snippet_id": 48411, "code": ",{'documents':docs_page, 'datagroup':dg}) @login_required() def link_product_form(request, pk, template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc", "label": 0}, {"snippet_id": 50645, "code": " repr(os.environ)\"' %(vsvars32, python), stdout=subprocess.PIPE, shell=True) stdout, _=process.communicate() exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!", "label": 0}, {"snippet_id": 47641, "code": " documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products", "label": 0}, {"snippet_id": 48098, "code": " puc=PUC.objects.get(id=form['puc'].value()) if not ExtractedHabitsAndPracticesToPUC.objects.filter( PUC=puc, extracted_habits_and_practices=hnp).exists(): ExtractedHabitsAndPracticesToPUC.objects.create", "label": 0}, {"snippet_id": 789, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 58167, "code": ": 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding", "label": 1}, {"snippet_id": 22946, "code": ": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time\": self.start_time, \"end_time\": time.time(), \"extra_data", "label": 0}, {"snippet_id": 50265, "code": "['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Incorrect Email/Password') return redirect('/login') @app.route(\"/logout", "label": 0}, {"snippet_id": 60906, "code": " pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str \"\"", "label": 0}, {"snippet_id": 25505, "code": " address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False", "label": 0}, {"snippet_id": 80108, "code": ", handled_slot from.logging_stream import LoggingStream from.status_monitor import StatusMonitor from.threading import ExitFlag, LoggingThread class ControlApplication(QApplication): EXIT_CODE_RESTART=42", "label": 0}, {"snippet_id": 59467, "code": "={ option.name: option.default for option in CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette: def __init__( self, files, cache_headers=True, cors=False, inspect_data", "label": 0}, {"snippet_id": 64582, "code": ", 'complex', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'delattr', 'DeprecationWarning', 'dict', 'dir', 'divmod', '__doc__', 'Ellipsis', 'enumerate',", "label": 0}, {"snippet_id": 69617, "code": " run_plugin_actions(plugin_manager, plugins): \"\"\" Run installer hooks defined in plugins \"\"\" hook=plugin_manager.hook apt_packages=list(set(itertools.chain(*hook.tljh_extra_apt_packages()))) if apt_packages:", "label": 0}, {"snippet_id": 67066, "code": "] vt=VT() context['vt_hash']=vt.getFileReport(filehash) context['vt_behavior']=vt.getFileBehavior(filehash) tm=ThreatMiner() context['tm_meta']=tm.getMetaFromSample(filehash) context['tm_http']=tm.getHttpFromSample", "label": 0}, {"snippet_id": 24031, "code": ": orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr) def _wrapper(*args, **kwargs", "label": 0}, {"snippet_id": 4328, "code": " can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username", "label": 0}, {"snippet_id": 64682, "code": "'tuple', 'type', 'TypeError', 'UnboundLocalError', 'UnicodeEncodeError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'vars', 'Warning', 'ZeroDivisionError', 'zip', ] def output_json(points, deductions):", "label": 0}, {"snippet_id": 76535, "code": " a given zoom_level. zoom_level: self-explanatory. layer_properties: Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(", "label": 0}, {"snippet_id": 3354, "code": " absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params", "label": 0}, {"snippet_id": 81050, "code": ".info('Found existing registration, no seats available') else: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env", "label": 0}, {"snippet_id": 4602, "code": " self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test", "label": 0}, {"snippet_id": 21761, "code": ".items(): for process_info in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result def any_processes_alive(self): \"\"\"Return true if", "label": 0}, {"snippet_id": 53539, "code": "=stack_frame.name if location=='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project: 'projects.Project'", "label": 0}, {"snippet_id": 33714, "code": "') def test_download_raw_chem_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains(response, 'Download Uncurated Chemicals') rc=RawChem.objects", "label": 1}, {"snippet_id": 27675, "code": "(object): \"\"\"A class that holds the profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self", "label": 1}, {"snippet_id": 17758, "code": "), 'info') return flask.redirect(flask.url_for('main.home')) return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads", "label": 0}, {"snippet_id": 41306, "code": " inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document", "label": 0}, {"snippet_id": 49722, "code": " with open(filepath) as f: editor_content=f.read() except FileNotFoundError: editor_content=\"\" return render_template(\"editor.html\", editor_content=editor_content) @app.route('/openFile') def openFile()", "label": 0}, {"snippet_id": 66896, "code": "(domain=domain)|Q(url__contains=domain)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp", "label": 0}, {"snippet_id": 58653, "code": ".exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy=instructor.user, isPreview=True, isLive=False", "label": 1}, {"snippet_id": 82792, "code": ", hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param", "label": 0}, {"snippet_id": 18328, "code": "\t\tif(document_email!=None): \t\t\terror=\"Email exists already\" \t\treturn error \t\"\"\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously", "label": 1}, {"snippet_id": 80636, "code": " wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window", "label": 0}, {"snippet_id": 78614, "code": " addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to", "label": 0}, {"snippet_id": 50949, "code": " hasattr(f, \"buildstep\"): f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None: f.buildstep.name=name f.buildstep.set_optional(optional) f.buildstep.set_default(default", "label": 0}, {"snippet_id": 82897, "code": " the name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\"", "label": 0}, {"snippet_id": 25586, "code": ", autoscaling_config, redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password)", "label": 1}, {"snippet_id": 26786, "code": " processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll", "label": 0}, {"snippet_id": 3669, "code": " next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo", "label": 1}, {"snippet_id": 82025, "code": " url=form.cleaned_data['input_url'] short_url=form.cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already", "label": 0}, {"snippet_id": 43598, "code": "*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1", "label": 1}, {"snippet_id": 80709, "code": " to{target_pos}.\") self.matisse.set_thin_etalon_motor_pos(target_pos) @handled_slot(bool) def start_bifi_scan(self, checked): print('Starting BiFi scan...') self.matisse.birefringent_filter_scan() @handled_slot", "label": 0}, {"snippet_id": 80161, "code": "(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True) self.log_queue=queue.Queue() self.log_stream=LoggingStream(self.log_queue) self.log_thread", "label": 0}, {"snippet_id": 44159, "code": ", len(bubbles),('There should be a circle' 'drawn for every PUC')) def test_datagroup(self): list_url=self.live_server_url +'/datagroups/' self.browser.get(list_url) self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 26399, "code": ". Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\"", "label": 0}, {"snippet_id": 12730, "code": "\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used", "label": 0}, {"snippet_id": 82628, "code": " what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob", "label": 0}, {"snippet_id": 52319, "code": " team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(\"/current-board\", methods=[\"POST\"]) def update_most_recently_clicked_board", "label": 1}, {"snippet_id": 31909, "code": " \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client", "label": 0}, {"snippet_id": 28186, "code": " instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to", "label": 0}, {"snippet_id": 64419, "code": ".get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA'), None) if verify_auth_token(eppn=eppn, token=token, nonce=nonce, timestamp", "label": 0}, {"snippet_id": 26041, "code": ") stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file", "label": 0}, {"snippet_id": 59096, "code": " -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user :param kwargs: params to search by :return: invite if found :raise: Http404 if not found ''", "label": 0}, {"snippet_id": 34793, "code": " or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n", "label": 0}, {"snippet_id": 29568, "code": " next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) flash('There was an issue with sign up, please try again') return render_template(", "label": 1}, {"snippet_id": 38585, "code": ".ManyToManyField('Product', through='ProductDocument') matched=models.BooleanField(default=False) extracted=models.BooleanField(default=False) document_type=models.ForeignKey(DocumentType, on_delete=models", "label": 0}, {"snippet_id": 48800, "code": " product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr", "label": 0}, {"snippet_id": 80682, "code": " set_thin_eta_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set Thin Etalon Motor Position', label='Absolute Position:', value=self.matisse.query('MOTTE:POS?", "label": 0}, {"snippet_id": 27366, "code": "*kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs", "label": 0}, {"snippet_id": 61250, "code": " message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__", "label": 0}, {"snippet_id": 69703, "code": " path in[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config.d')]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files() if os.path.exists(CONFIG_FILE): with open(CONFIG_FILE, ", "label": 0}, {"snippet_id": 77069, "code": " tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type=request_type self.db_type=db_type self.version=str(version", "label": 0}, {"snippet_id": 62040, "code": " else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if page.encoding is None: return False if page.encoding.upper", "label": 0}, {"snippet_id": 74418, "code": " class _ReportActionPartial(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form", "label": 0}, {"snippet_id": 55475, "code": ": \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) \tdef utime(self,times): \t\treturn os.utime(self.path,times) \tdef walk(self,topdown=True, onerror=None, followlinks", "label": 0}, {"snippet_id": 75024, "code": " user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords=sorted([kw.text for kw in db_keywords_info", "label": 0}, {"snippet_id": 65861, "code": " def close_tab(self, child_widget): page_num=self.container.page_num(child_widget) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_tab_close_button_clicked(self, sender, widget", "label": 0}, {"snippet_id": 9355, "code": "\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods", "label": 0}, {"snippet_id": 5210, "code": " full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self", "label": 0}, {"snippet_id": 28353, "code": " random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns", "label": 0}, {"snippet_id": 2977, "code": " self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate", "label": 0}, {"snippet_id": 79070, "code": ".close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator'", "label": 1}, {"snippet_id": 23680, "code": " logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler", "label": 1}, {"snippet_id": 80272, "code": " self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action=lock_menu.addAction", "label": 0}, {"snippet_id": 9695, "code": " pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string", "label": 0}, {"snippet_id": 34618, "code": ", template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient", "label": 0}, {"snippet_id": 29799, "code": " return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session, tagname", "label": 0}, {"snippet_id": 84310, "code": "(revision), **article_args) article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group)", "label": 0}, {"snippet_id": 49631, "code": "[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line", "label": 0}, {"snippet_id": 72017, "code": ".services.ganesha import Ganesha, GaneshaConf, NFSException from..services.rgw_client import RgwClient def NfsTask(name, metadata, wait_for): def composed_decorator(func): return Task(\"nfs/{}\".format(name),", "label": 0}, {"snippet_id": 66435, "code": "(filter_text) response=keyfile_chooser_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +keyfile_chooser_dialog.get_filename()) keyfile_chooser_dialog.close(", "label": 0}, {"snippet_id": 42352, "code": " self.assertEqual(response.url, f'/datagroup/{dgpk}/', \"Should go to detail page.\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username", "label": 0}, {"snippet_id": 56980, "code": " context['filter']=self.filter context['is_filtered']=self.is_filtered return context def get_queryset(self): data=QueryDict('', mutable=True) data.update(self.filter_data) data.update(self.request.GET) self", "label": 0}, {"snippet_id": 27506, "code": " LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def", "label": 1}, {"snippet_id": 10899, "code": " user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return", "label": 0}, {"snippet_id": 7728, "code": "=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try:", "label": 0}, {"snippet_id": 80773, "code": " components.\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else", "label": 0}, {"snippet_id": 66672, "code": ": composite_unlock_entry.get_style_context().add_class(\"error\") def open_database_page(self): self.clear_input_fields() keepassgtk.config_manager.create_config_entry_string(\"history\", \"last-opened-db\",", "label": 0}, {"snippet_id": 2728, "code": " self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request", "label": 0}, {"snippet_id": 71682, "code": ".session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) resp.request.session.user_id='1' resp._save_session() s_count=models.Session.query().count() self", "label": 0}, {"snippet_id": 29112, "code": "\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a", "label": 0}, {"snippet_id": 80799, "code": ".lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked): print(f\"{'Locking' if", "label": 0}, {"snippet_id": 34302, "code": "\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects", "label": 0}, {"snippet_id": 81235, "code": ".event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week=fields.Char(string='Dag', default=", "label": 0}, {"snippet_id": 22482, "code": " def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization", "label": 0}, {"snippet_id": 83470, "code": "(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor", "label": 0}, {"snippet_id": 56892, "code": " transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/concept_edit.html', extra_context) else: form=concept_form(instance=concept) extra_context['form", "label": 0}, {"snippet_id": 60395, "code": "(default_templates)}, delimiter=\":\" ), ] ) self.jinja_env=Environment(loader=template_loader, autoescape=True) self.jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[\"quote_plus", "label": 0}, {"snippet_id": 20251, "code": " there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients", "label": 0}, {"snippet_id": 13123, "code": "(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options", "label": 0}, {"snippet_id": 2335, "code": ".guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime)", "label": 0}, {"snippet_id": 31154, "code": " Django settings for the GitMate project. Generated by 'django-admin startproject' using Django 1.9.7. For more information on this file, see https://docs.djangoproject.com/en/1.9/topics/settings/ For the", "label": 0}, {"snippet_id": 65970, "code": ".databases_to_save: db.database_manager.save_database() self.quit_dialog.destroy() self.application.quit() def on_application_quit(self, window, event): unsaved_databases_list=[] for db in self.opened_databases: if db", "label": 0}, {"snippet_id": 59757, "code": " fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries", "label": 0}, {"snippet_id": 45029, "code": " django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from", "label": 0}, {"snippet_id": 70370, "code": "(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir):", "label": 1}, {"snippet_id": 50992, "code": " which optional steps to include in the build. \"default\" includes all default steps. \"all\" includes all steps. \"foo\" or \"+foo\" includes step foo. \"-foo\" excludes step foo, even if \"default\" or \"all\" is", "label": 0}, {"snippet_id": 38173, "code": ".prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self):", "label": 0}, {"snippet_id": 34298, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save", "label": 0}, {"snippet_id": 3770, "code": " drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email", "label": 0}, {"snippet_id": 54193, "code": "']) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query) politician=None for p in politicians: politician=p if politician !=None: politician", "label": 1}, {"snippet_id": 64257, "code": "(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) logout_redirect_url=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') next_page=session.get('next', logout_redirect_url", "label": 0}, {"snippet_id": 9880, "code": " descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the", "label": 0}, {"snippet_id": 32749, "code": " os.execv(self.full_command, self.args) else: self.pid=pid def wait(self): if self.pid: os.waitpid(self.pid, 0) @property def full_command(self): if os.path.exists(self.command): return self.command path", "label": 0}, {"snippet_id": 82112, "code": " request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w.']+\", urls) data_list=[] for url in urls_list: result", "label": 0}, {"snippet_id": 72899, "code": "/login/', redirect_field_name=None) def positions(request): try: sort_by=request.session['position_sort'] except KeyError: sort_by='-created' if request.method=='POST': if request.POST.get(\"sort-created", "label": 1}, {"snippet_id": 11388, "code": " Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration", "label": 0}, {"snippet_id": 28279, "code": " object is a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython", "label": 0}, {"snippet_id": 84515, "code": "=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request)) return", "label": 1}, {"snippet_id": 26090, "code": "=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler", "label": 0}, {"snippet_id": 48397, "code": "(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg}) @login_required", "label": 0}, {"snippet_id": 82902, "code": " def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent", "label": 0}, {"snippet_id": 17142, "code": ": t, 'round': r, 'formset': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', ", "label": 0}, {"snippet_id": 3815, "code": "\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/'", "label": 0}, {"snippet_id": 51282, "code": "*dependencies, **kwargs): kwargs=process_kwargs( \"fetch_dependencies\", kwargs, {\"platform\":None}) dependencies=flatten_string_list(dependencies) platform=kwargs['platform'] or self._context.env[\"PLATFORM\"", "label": 0}, {"snippet_id": 18368, "code": ".insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher from argon2, hashes the password, \tverifies if the hashing happened properly, re-hashes if the verification failed", "label": 1}, {"snippet_id": 41657, "code": "'extract_form'], ('ExtractForm should not be included in the page!')) self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup", "label": 0}, {"snippet_id": 21095, "code": "._redis_address, self._node_ip_address, self._raylet_socket_name, self._plasma_store_socket_name, self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources", "label": 0}, {"snippet_id": 35801, "code": ".pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if", "label": 0}, {"snippet_id": 32904, "code": ": self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type, value, traceback): if self.stack: self.stack.close() self.stack=None", "label": 0}, {"snippet_id": 66457, "code": " keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_SUGGESTED_ACTION) keyfile_unlock_select_button.set_label(ntpath.basename(keyfile_chooser_dialog.get_filename())) elif response==Gtk", "label": 0}, {"snippet_id": 19380, "code": " be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing", "label": 1}, {"snippet_id": 68932, "code": "/r7AauMA/9RALudQRHBdWIzfIg0Mlqb52yyTI IgQJHNGNX1T3z1XgZhI+Vi8SLFFSh8x9FeUZC6YJu0VXXj5iz+eZmk/nYjUt4Mtc pVsVYIB7oIDIbImODm8ggsgrIzqxOzQVP1zsCGek5U6QFc9GYrQ+Wv3/fG8hfkDn xXLww0OGaEQxfodm8cLFZ5b8JaG3+Yxfe7JkNclwvRimvlAjqIiW5OK0vvfHco", "label": 0}, {"snippet_id": 15073, "code": " NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super", "label": 0}, {"snippet_id": 55649, "code": "\t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn", "label": 0}, {"snippet_id": 19162, "code": "(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1)", "label": 1}, {"snippet_id": 8190, "code": "<b>', end_bold=u'</b>', enterprise_name=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings", "label": 0}, {"snippet_id": 53991, "code": " \"\"\" try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"\"\" Empties \"\"\" try: contents=self.stdout_interceptor", "label": 1}, {"snippet_id": 10628, "code": " if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode", "label": 1}, {"snippet_id": 45599, "code": " the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument", "label": 1}, {"snippet_id": 64877, "code": "\"this argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument", "label": 0}, {"snippet_id": 47543, "code": " HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm", "label": 0}, {"snippet_id": 27993, "code": " __future__ import absolute_import from __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import", "label": 0}, {"snippet_id": 19233, "code": "\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile(", "label": 0}, {"snippet_id": 11003, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in", "label": 0}, {"snippet_id": 35312, "code": " template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate(Max(", "label": 0}, {"snippet_id": 56297, "code": "('pachatary://app') \\ .given_a_dynamic_link('') \\ .when_call_experience_redirect('AsdE43E4') \\ .then_response_should_be_a_redirect_to('pachatary://app/experiences/AsdE43E4') class ScenarioMaker: def given_an_experience_on_db", "label": 0}, {"snippet_id": 48691, "code": " in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag", "label": 0}, {"snippet_id": 51424, "code": " __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message)", "label": 0}, {"snippet_id": 16571, "code": " %(rp.gameplayers().count(), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer())", "label": 0}, {"snippet_id": 25983, "code": "=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self):", "label": 1}, {"snippet_id": 79030, "code": " result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) validator.validate_datarequest_closing(context,", "label": 0}, {"snippet_id": 51353, "code": ".set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username, look_for_keys='True') def call(self, *args, **kwargs): stdin, stdout, stderr=self.ssh.exec_command(*args", "label": 0}, {"snippet_id": 60713, "code": " import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring", "label": 0}, {"snippet_id": 70073, "code": "\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title>", "label": 0}, {"snippet_id": 4839, "code": " paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 23546, "code": " function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus:", "label": 0}, {"snippet_id": 19942, "code": ".subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data", "label": 0}, {"snippet_id": 52233, "code": "\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session():", "label": 0}, {"snippet_id": 14026, "code": " \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth", "label": 0}, {"snippet_id": 45307, "code": "'month', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0", "label": 0}, {"snippet_id": 74742, "code": ".GET.get('type', '') if person_instance: person_form=PersonForm(instance=person_instance, degree_type=degree_type) else: person_form=PersonForm(initial=shib_info, degree_type=degree_type) candidate_form", "label": 0}, {"snippet_id": 3614, "code": " self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale,", "label": 0}, {"snippet_id": 59619, "code": " level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata() with table=specified but not database=\" databases=self._metadata.get(", "label": 0}, {"snippet_id": 32402, "code": " command(self): if self.accept(TokenType.WORD): command=self.last.lexeme args=[] while self.accept(TokenType.WORD): args.append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections() if", "label": 0}, {"snippet_id": 11187, "code": " enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 0}, {"snippet_id": 52279, "code": "\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc", "label": 0}, {"snippet_id": 81346, "code": ".registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False) for registration in reg_ids: if registration.state=='open': if counter==1: attendee_list +=registration.partner_id.sudo().name", "label": 0}, {"snippet_id": 73380, "code": " InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm, ImportApplicationsText from", "label": 1}, {"snippet_id": 63612, "code": ", }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self)", "label": 1}, {"snippet_id": 29376, "code": ".auth.forms import RegistrationForm @auth.before_request def before_request(): g.user=current_user @auth.route('/test') def test(): if current_user.is_authenticated: return str(current_user.username) +str", "label": 1}, {"snippet_id": 5256, "code": ") response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path", "label": 0}, {"snippet_id": 17045, "code": "=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game", "label": 0}, {"snippet_id": 29055, "code": "\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return", "label": 0}, {"snippet_id": 72998, "code": ", 'userVisibleText': PositionsViewText, 'position': position }) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid():", "label": 0}, {"snippet_id": 17594, "code": "=ip_address(flask.request.remote_addr).packed user.last_login_ip=user.registration_ip db.session.add(user) db.session.commit() if models.RangeBan.is_rangebanned(user.registration_ip): flask.flash(flask.Markup", "label": 0}, {"snippet_id": 60760, "code": "=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check, otherwise", "label": 0}, {"snippet_id": 56638, "code": "=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self def then_response_should_be_json(self, json_string): assert json.loads(self.response.content", "label": 0}, {"snippet_id": 39217, "code": " import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.raw_chem", "label": 1}, {"snippet_id": 11995, "code": " initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string)", "label": 0}, {"snippet_id": 84589, "code": "=changes_qs.filter(article__content_type=get_ct(group), article__object_id=group.id) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group,", "label": 0}, {"snippet_id": 58731, "code": " accounts.models import Instructor from chat.models import EnrollUnitCode from core.common import onboarding from core.common.utils import update_onboarding_step from ct.models import Course STATUS_CHOICES", "label": 0}, {"snippet_id": 52038, "code": " tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[] invites_list=[] user_id=session.get(\"user_id\") user_object=q.get_user_object", "label": 0}, {"snippet_id": 5937, "code": " True) app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com', 'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL", "label": 0}, {"snippet_id": 79742, "code": "(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data", "label": 0}, {"snippet_id": 74779, "code": " candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse(", "label": 0}, {"snippet_id": 37321, "code": "'priority'] def __init__(self, *args, **kwargs): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority'].widget.attrs.update({ 'onchange': 'form.submit", "label": 0}, {"snippet_id": 72452, "code": " for p in paths if p !=root_dir] return{'paths': paths} except(cephfs.ObjectNotFound, cephfs.PermissionError): return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self): return CephFS", "label": 0}, {"snippet_id": 4324, "code": " test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +", "label": 0}, {"snippet_id": 41863, "code": "'ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product", "label": 0}, {"snippet_id": 22588, "code": " so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box", "label": 0}, {"snippet_id": 76344, "code": ".Pair(user_width, user_height)) tilepixel_rect, rect_of_tiles=tilecalcs.CalcTileRects( proj, user_log_rect, zoom_level) logger.info(\"Done tile calcs\") tiles_array=_FetchTiles(rect_of_tiles, zoom_level,", "label": 0}, {"snippet_id": 33181, "code": " LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self", "label": 0}, {"snippet_id": 12608, "code": ", pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if", "label": 0}, {"snippet_id": 66245, "code": "-symbolic\") self.overlay.add(stack) self.unlock_database_stack_box.add(self.overlay) self.unlock_database_stack_box.show_all() self.parent_widget.add(self.unlock_database_stack_box) def connect_events(self):", "label": 0}, {"snippet_id": 53058, "code": "'current_rent_form':{'current_rent': 321.49}, 'how_soon_form':{'how_soon': HS_3}, 'personal_profile_form':{ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': ", "label": 0}, {"snippet_id": 56471, "code": "() profile=ORMProfile.objects.create(username=username, bio=bio, person=orm_person) profile.picture=pic profile.save() return self def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN", "label": 0}, {"snippet_id": 1174, "code": " 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath):", "label": 0}, {"snippet_id": 70203, "code": " True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(", "label": 0}, {"snippet_id": 26218, "code": "=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"", "label": 0}, {"snippet_id": 82235, "code": " return context class CategoryDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()", "label": 0}, {"snippet_id": 54857, "code": "\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text].append(assignment.student) \t\tfor t,s in problem_text_students.items(): \t\t\tif len(s) > 1: \t\t\t\tprint(t,s) def process_problem_scores", "label": 1}, {"snippet_id": 295, "code": "<li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory", "label": 0}, {"snippet_id": 36665, "code": " import login_required from dashboard.models import * from dashboard.models import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime", "label": 0}, {"snippet_id": 81798, "code": " url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request", "label": 0}, {"snippet_id": 53724, "code": " **kwargs) def __getattribute__(self, item): \"\"\" :param item: :return: \"\"\" abort_thread() if item=='write': return self.write_both elif item=='close': return super(RedirectBuffer, self).__getattribute__", "label": 0}, {"snippet_id": 62194, "code": " validate_security_header(page, \"Pragma\", \"no-cache\") def validate_expires(page): return validate_security_header(page, \"Expires\", \"-1\") def validate_cache_control_set(page): if 'Cache-Control' in page.headers:", "label": 0}, {"snippet_id": 7375, "code": " WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' import logging from flask import", "label": 0}, {"snippet_id": 14301, "code": ", cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order", "label": 0}, {"snippet_id": 52063, "code": ": team_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name, \"desc\": userteam.team.desc} teams_list.append(team_dict) elif userteam.is_member is None: invite_dict={\"team_id\": userteam.team_id,", "label": 0}, {"snippet_id": 8657, "code": " \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration", "label": 0}, {"snippet_id": 4518, "code": "/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile", "label": 0}, {"snippet_id": 77532, "code": " as model import ckan.plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras", "label": 0}, {"snippet_id": 17977, "code": ".redirect('/profile') return flask.render_template('profile.html', form=form) def redirect_url(): home_url=flask.url_for('main.home') url=flask.request.args.get('next') or \\ flask.request.referrer or \\", "label": 1}, {"snippet_id": 58386, "code": ".INTRODUCTION_INTRO:{ \"done\": False, \"settings\":{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" } }, onboarding.CREATE_COURSE:{ \"done\": True, \"settings\":{ \"html\"", "label": 1}, {"snippet_id": 46803, "code": "'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group=datagroup) doc.save() text.append(str(doc.pk)+','+','.join(line.values())+'\\n') if errors", "label": 0}, {"snippet_id": 67924, "code": " import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone", "label": 0}, {"snippet_id": 56830, "code": "(request, *args, **kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs(**kwargs) extra_context['concept']=concept transaction=concept.transaction extra_context['transaction", "label": 0}, {"snippet_id": 62389, "code": " @acs_action('change-password-action') def chpass_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-chpass) and redirect back to the app that asked", "label": 0}, {"snippet_id": 9989, "code": "=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key", "label": 0}, {"snippet_id": 33438, "code": ". values('extracted_text__data_document')) dd=dds[0] ds=dd.data_group.data_source p=Product.objects.create(data_source=ds, title='Test Product', upc='Test UPC for ProductToPUC') pd=ProductDocument.objects", "label": 0}, {"snippet_id": 24192, "code": "(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported", "label": 1}, {"snippet_id": 7490, "code": "=exams.filter_by(**search_kwargs) result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}, 200 except exc.SQLAlchemyError as error: logging.error(error, exc_info=True)", "label": 0}, {"snippet_id": 64831, "code": " over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The name of the function the student was supposed to implement\") parser.add_argument('-p', '--points', type=int, default=0", "label": 0}, {"snippet_id": 14001, "code": " to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={", "label": 0}, {"snippet_id": 33866, "code": "+'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn", "label": 0}, {"snippet_id": 81874, "code": "'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm(request.POST or None) if form.is_valid(): object.count +=1 ip=get_client_ip(request)", "label": 1}, {"snippet_id": 75709, "code": "=[{'text': 'FAST results', 'children':[{'id': '', 'text': 'Error retrieving FAST results.'}]}] url=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger", "label": 0}, {"snippet_id": 22817, "code": " extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called.", "label": 0}, {"snippet_id": 75943, "code": "=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField(choices=STATUS_CHOICES, default=True) create_dt", "label": 0}, {"snippet_id": 12357, "code": " enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data'", "label": 0}, {"snippet_id": 12535, "code": " to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as", "label": 0}, {"snippet_id": 54689, "code": "[assignment.book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert(assignment.chapter==int(sys.argv[1])) \t\t\tnum_probs=len(assignment.problems) \t\t\tprint \"num_probs was \"+str", "label": 1}, {"snippet_id": 63568, "code": ", '200 OK') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php', json.loads(response2.data)['payload']['location']) def test_logout_service_startingSP(self): came_from", "label": 0}, {"snippet_id": 11799, "code": " import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 34603, "code": ") context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number", "label": 1}, {"snippet_id": 66216, "code": "-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property(keyfile_unlock_stack_page, \"icon-name\", \"mail-attachment-symbolic\") stack", "label": 0}, {"snippet_id": 58682, "code": " from django.db import models from django.db.models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib.auth.models import User from", "label": 0}, {"snippet_id": 15492, "code": " result def get_run_form(): run_form=RunForm() run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form, commands): def get_command(command_name): return[item for item", "label": 0}, {"snippet_id": 51976, "code": " template=h.handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to SamePage\") return redirect", "label": 0}, {"snippet_id": 67090, "code": ".getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp') count=context['events", "label": 0}, {"snippet_id": 70516, "code": "\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{%", "label": 0}, {"snippet_id": 28859, "code": " ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total", "label": 0}, {"snippet_id": 74484, "code": " import settings from django.core.exceptions import PermissionDenied from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect", "label": 0}, {"snippet_id": 55436, "code": "\t\treturn os.rename(self.path,other) \tdef renames(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) \tdef rmdir(self): \t", "label": 0}, {"snippet_id": 8439, "code": " a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get", "label": 0}, {"snippet_id": 9372, "code": "'POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note:", "label": 0}, {"snippet_id": 45195, "code": "]=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date", "label": 0}, {"snippet_id": 6397, "code": "'exp']): logger.error('Token has expired') return False if id_token['iat'] <(self.time() -self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token.get('hd')", "label": 0}, {"snippet_id": 8770, "code": " def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year", "label": 0}, {"snippet_id": 69410, "code": "\" if not admins: return logger.info(\"Setting up admin users\") config_path=CONFIG_FILE if os.path.exists(config_path): with open(config_path, 'r') as f: config=yaml.load(f) else: config={} config['users", "label": 0}, {"snippet_id": 36089, "code": ") def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two", "label": 0}, {"snippet_id": 16306, "code": "(form.fields['player'], e) i.delete() return render(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset", "label": 1}, {"snippet_id": 77890, "code": "['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required", "label": 0}, {"snippet_id": 15156, "code": "(self, csrf_enabled=False, *args, **kwargs): super(ChangeInputNewValue, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators", "label": 0}, {"snippet_id": 39294, "code": ", null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) weight_fraction_type", "label": 0}, {"snippet_id": 73975, "code": " these partials with your own views if you are implementing callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view. docs / reference: -https://docs", "label": 0}, {"snippet_id": 66641, "code": ".show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context().add_class(\"error\") composite_unlock_select_button.get_style_context().remove_class(\"suggested", "label": 0}, {"snippet_id": 31239, "code": "'auto_label_pending_or_wip', 'pr_size_labeller', 'issue_labeller', 'bug_spotter', 'ack', ] INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django", "label": 0}, {"snippet_id": 30247, "code": " to upgrade the authorization code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token url=('https://www.googleapis.com/oauth2/v1/tokeninfo", "label": 0}, {"snippet_id": 42616, "code": "=Unidentified') self.assertContains(response, 'Showing 1 -20 of') response=self.c.get('/find/?q=diatom&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result found') def test_faceted_search_renders_div", "label": 1}, {"snippet_id": 50734, "code": " to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a build step name.\".format(name", "label": 0}, {"snippet_id": 43160, "code": ".assertIn(elp_flagged.raw_cas.encode(), response.content) elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged.raw_cas.encode(), response.content) def test_every_extractedtext_qa", "label": 0}, {"snippet_id": 6005, "code": "(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def set_cookie_id_token(self, id_token): \"\"\" Cooperates with @after_request to set a new ID token", "label": 0}, {"snippet_id": 34233, "code": " test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add", "label": 1}, {"snippet_id": 69391, "code": ".0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"\"\" Setup given list of users as admins. \"\"\" if not admins: return", "label": 0}, {"snippet_id": 22305, "code": " self.include_log_monitor=include_log_monitor self.autoscaling_config=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config", "label": 0}, {"snippet_id": 54358, "code": ".constituency, 'wiki': pol.wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians=politicians) \"\"\"Array of datums for politicians Format: JSON \"\"\" @app.route(", "label": 0}, {"snippet_id": 15879, "code": " password=PasswordField('Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self)", "label": 0}, {"snippet_id": 19225, "code": " the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"): with profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run", "label": 0}, {"snippet_id": 37826, "code": ".CharField(max_length=400) self.fields['true_chemname'].initial=self.instance.dsstox.true_chemname self.fields['true_chemname'].disabled=True self.fields['SID']=forms.CharField(max_length=50) self.fields", "label": 0}, {"snippet_id": 74292, "code": ".GET[\"next\"] return next_url def dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ) and self._passphrase_next_url", "label": 1}, {"snippet_id": 73365, "code": ", redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText", "label": 0}, {"snippet_id": 76517, "code": " def _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles for a given image. Args: rect_of_tiles: is ul -lr(lr is exclusive!) addresses of tiles at a given zoom_level. zoom_level", "label": 0}, {"snippet_id": 14597, "code": "'preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled():", "label": 0}, {"snippet_id": 56091, "code": "=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, PROFILE_DEEPLINK_PATH, username) response=HttpResponse(", "label": 0}, {"snippet_id": 37094, "code": " 'download_script', 'data_source', 'csv'] widgets={'downloaded_at': DatePickerInput()} labels={'csv': _('Register Records CSV File'), 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects", "label": 0}, {"snippet_id": 23336, "code": " ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str,", "label": 0}, {"snippet_id": 76622, "code": ", rect_of_tiles) world_extent_in_tiles=2 ** zoom_level tiles_array=images.ImagesArray( rect_of_tiles.Width(), rect_of_tiles.Height()) logger.debug(\"World extent in tiles: %s\", str(world_extent_in_tiles", "label": 0}, {"snippet_id": 18017, "code": "=email.EmailHolder( subject='Verify your{} account'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/verify.txt', **tmpl_context), html=flask.render_template('email", "label": 0}, {"snippet_id": 81374, "code": "): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled', '=', True)]) for repeating_event in repeating_event_ids: _logger.info('Found repeating event: ' +repeating_event.name) if", "label": 0}, {"snippet_id": 84604, "code": "=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() template_params={'changes': changes_qs.order_by('-modified'), 'allow_write", "label": 0}, {"snippet_id": 43999, "code": "): def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self", "label": 1}, {"snippet_id": 81468, "code": "%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+7) new_end_date=end_date +relativedelta", "label": 1}, {"snippet_id": 66975, "code": " TemplateView, DetailView from.forms import SearchForm from lib.vt import VT from lib.threatminer import ThreatMiner from django.db.models import Q from apps.threat.models import Event, Attribute from apps", "label": 0}, {"snippet_id": 15758, "code": " commands, 'html': render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add", "label": 0}, {"snippet_id": 51646, "code": "=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params", "label": 0}, {"snippet_id": 16666, "code": "=set() for gp in g.gameplayer_set.all(): game.add((gp.tournamentplayer(), gp.power)) assert len(game)==7 seeder.add_played_game(game) for tp in tourney_players: for sb in tp.seederbias_set.all(): seeder", "label": 0}, {"snippet_id": 67646, "code": "=event_obj.getUniqCategory() context['types']=event_obj.getUniqType() context['count']=self.object_list.count() return context def get_queryset(self): pk=self.kwargs['pk'] query=Attribute.objects.filter", "label": 0}, {"snippet_id": 81987, "code": "(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view') class CustomShortURLCreateView(View): def get(self, request, *args, **kwargs): form=JustURLForm", "label": 0}, {"snippet_id": 79668, "code": ". Data QLD modification Will send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string", "label": 0}, {"snippet_id": 34156, "code": "( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made", "label": 0}, {"snippet_id": 70888, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 17063, "code": ".get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue try: g.full_clean() except ValidationError as e: f.add_error(None, e) g.delete", "label": 0}, {"snippet_id": 38552, "code": " the group type ``organization`` ``note`` \"\"\" filename=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models", "label": 0}, {"snippet_id": 22345, "code": " in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs): \"", "label": 0}, {"snippet_id": 31412, "code": ".MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'gitmate.disable_csrf.DisableCSRF', ] ROOT_URLCONF='gitmate.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django", "label": 0}, {"snippet_id": 74576, "code": "(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def faq(request): return render(request, 'etd_app/faq.html') def copyright(request): return render(request", "label": 0}, {"snippet_id": 57686, "code": "): \"\"\" Custom decorator to disable signals. Reference: https://devblog.kogan.com/blog/disable-signal-receivers-in-your-django-tests \"\"\" def our_wrapper(func): @receiver(signal, **decorator_kwargs) @functools", "label": 0}, {"snippet_id": 13711, "code": " 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method", "label": 0}, {"snippet_id": 34388, "code": " qa_checked attribute should be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url", "label": 0}, {"snippet_id": 17652, "code": " send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']", "label": 0}, {"snippet_id": 50138, "code": ": parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(\"/signup\") def", "label": 0}, {"snippet_id": 22669, "code": "=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this as a thread to flush profile data in the background.\"\"\" try: while True: time", "label": 1}, {"snippet_id": 19784, "code": ": redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port", "label": 1}, {"snippet_id": 41998, "code": " test_bulk_create_post(self): '''test the POST to create Products and link if needed''' doc=DataDocument.objects.create(data_group=self.objects.dg) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/'", "label": 0}, {"snippet_id": 41305, "code": ": ''' Confirm that the inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass", "label": 0}, {"snippet_id": 46681, "code": "'organization'] if not table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form})", "label": 0}, {"snippet_id": 12866, "code": "=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime", "label": 0}, {"snippet_id": 72709, "code": "'key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: account_key", "label": 1}, {"snippet_id": 31606, "code": " url(r'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page, name='search'), url(r'^error', home_page, name='error", "label": 0}, {"snippet_id": 73738, "code": ": position, 'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form,", "label": 0}, {"snippet_id": 4618, "code": "=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client", "label": 0}, {"snippet_id": 37146, "code": " script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label", "label": 0}, {"snippet_id": 54772, "code": "\tself.problem_groups[prob_id].append(prob_code+\"\\n\"+(\"=\"*50)+\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group in self.problem_groups.values(): \t\t\tself.count_by_groups", "label": 1}, {"snippet_id": 61921, "code": "/support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support.chartbeat.com/docs/ Quantcast: https://quantcast.zendesk.com/hc/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly", "label": 0}, {"snippet_id": 30838, "code": " return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete) @app.route('/grudget/<int:grudget_id>/') @app.route('/grudget/", "label": 0}, {"snippet_id": 2736, "code": ".OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client authentication initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE'", "label": 0}, {"snippet_id": 72577, "code": " return render(request, 'registration/register.html', {'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register", "label": 0}, {"snippet_id": 83366, "code": " title=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title).count() if cs > 0", "label": 1}, {"snippet_id": 54975, "code": ":///Users/chenan/Other/python-2.7.2-docs-html/library/os.path.html \tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder", "label": 0}, {"snippet_id": 17378, "code": ", 'danger') return flask.redirect(flask.url_for('account.login')) username=form.username.data.strip() password=form.password.data user=models.User.by_username(username) if not user: user=models.User.by_email", "label": 0}, {"snippet_id": 12892, "code": "': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append", "label": 0}, {"snippet_id": 11273, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context", "label": 0}, {"snippet_id": 14799, "code": "): db.set('user:ids', '0') def auth_add_user(email, password): user_id=db.incr('user:ids') db.hset('user:emails', email, user_id) db.hmset('user:%s' % user_id,{ 'user_id': user_id, 'email': email, 'password_hash", "label": 0}, {"snippet_id": 65002, "code": " expr=None if not expr: raise ValueError('Failed to parse test case %d' % i) valid=False if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators", "label": 0}, {"snippet_id": 17521, "code": ".modified=True return flask.redirect(redirect_url()) return flask.render_template('login.html', form=form) @bp.route('/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session", "label": 0}, {"snippet_id": 9664, "code": " platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string':", "label": 0}, {"snippet_id": 50004, "code": "\", None) if tempFilePath: shutil.copy(tempFilePath, saveFilePath) if \"diagram\" in request.referrer or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename=%s'%name", "label": 0}, {"snippet_id": 29892, "code": "['GET', 'POST']) @login_required def delete_comment(post_id, comment_id): comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment.owner(current_user): db.session.delete", "label": 0}, {"snippet_id": 22933, "code": " \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps", "label": 0}, {"snippet_id": 46592, "code": "=include_clean_comp_data_form(dg) else: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group", "label": 0}, {"snippet_id": 11287, "code": ".extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request", "label": 0}, {"snippet_id": 42693, "code": "(TestCase): fixtures=fixtures_standard def setUp(self): self.factory=RequestFactory() self.client.login(username='Karyn', password='specialP@55word') def test_qa_begin(self): \"\"\" Check that starting the", "label": 0}, {"snippet_id": 59531, "code": "] self.template_dir=template_dir self.plugins_dir=plugins_dir self.static_mounts=static_mounts or[] self._config=dict(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures", "label": 0}, {"snippet_id": 44361, "code": ": self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_cas\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname\"]') with", "label": 0}, {"snippet_id": 66067, "code": ".unlocked_database import UnlockedDatabase import keepassgtk.config_manager from keepassgtk.logging_manager import LoggingManager import gi gi.require_version('Gtk', '3.0') import ntpath import threading", "label": 0}, {"snippet_id": 69208, "code": "-extension', '@jupyter-widgets/jupyterlab-manager' ] subprocess.check_output([ os.path.join(USER_ENV_PREFIX, 'bin/jupyter'), 'labextension', 'install' ] +extensions) def ensure_jupyterhub_package(prefix)", "label": 0}, {"snippet_id": 46580, "code": "['msg']=(f'{len(good_records)} clean composition data records ' 'uploaded successfully.') context['clean_comp_data_form']=include_clean_comp_data_form(dg) else: context['clean_comp_data_form'].collapsed", "label": 0}, {"snippet_id": 84006, "code": " not None: changeset=get_object_or_404( article.changeset_set, revision=revision) article.content=changeset.get_content() template_params={'article': article, 'revision': revision, 'redirected_from': redirected_from", "label": 0}, {"snippet_id": 16883, "code": " the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power=power) current", "label": 0}, {"snippet_id": 374, "code": " something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're", "label": 0}, {"snippet_id": 53169, "code": "(update_url, data) self.assertEqual(self.view.get_object().budget, None) data={'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data", "label": 0}, {"snippet_id": 68070, "code": "(UpdateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_edit_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' def hunt_del(request, pk): hunt=get_object_or_404", "label": 0}, {"snippet_id": 30227, "code": " oauth_flow=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri='postmessage' credentials=oauth_flow.step2_exchange(code) except FlowExchangeError: response=make_response( json.dumps", "label": 0}, {"snippet_id": 54045, "code": " while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents \"\"\" try: return self.stderr_interceptor.read_all() except Exception: return '' def flush_stderr", "label": 1}, {"snippet_id": 69670, "code": ".ensure_conda_packages(USER_ENV_PREFIX, conda_packages) pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages()))) if pip_packages: logger.info('Installing{} pip packages collected from plugins:", "label": 0}, {"snippet_id": 10821, "code": " password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest)", "label": 0}, {"snippet_id": 29197, "code": " images from benwaonline.user import user from benwaonline.auth import auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__", "label": 1}, {"snippet_id": 77597, "code": " update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination.action.package_patch(id=package_id,", "label": 0}, {"snippet_id": 35468, "code": " detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request):", "label": 0}, {"snippet_id": 34122, "code": ")) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem", "label": 0}, {"snippet_id": 84870, "code": ".changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z", "label": 0}, {"snippet_id": 53230, "code": ", OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return direct_to_template(request", "label": 1}, {"snippet_id": 73235, "code": ")).exists(): message=forms.ValidationError( format(ErrorMessages.user_already_exists % email)) self.add_error('email', message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText", "label": 0}, {"snippet_id": 70390, "code": " part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os", "label": 1}, {"snippet_id": 23544, "code": " required by this function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked", "label": 0}, {"snippet_id": 26598, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"", "label": 0}, {"snippet_id": 55291, "code": " chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) \tdef chown(self,uid=-1,gid=-1): \t\treturn", "label": 0}, {"snippet_id": 80822, "code": ".lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked) self.lock_thin_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_piezo_etalon_lock(self, checked): print(f\"{'Locking", "label": 0}, {"snippet_id": 46415, "code": ", document=doc) stub +=1 context['bulk']=0 if request.method=='POST' and 'clean_comp_data_button' in request.POST: clean_comp_data_form=CleanCompDataForm(request.POST, request.FILES) if clean_comp_data_form", "label": 0}, {"snippet_id": 70105, "code": "<li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %", "label": 0}, {"snippet_id": 75896, "code": "') class Redirect(models.Model): \"\"\"A HTTP redirect associated with a Project.\"\"\" project=models.ForeignKey( Project, verbose_name=_('Project'), related_name='redirects', ) redirect_type=models.CharField", "label": 0}, {"snippet_id": 71498, "code": " self.assertRaises(Exception, app._load_strategy, 'enron') from engineauth.strategies.appengine_openid import\\ AppEngineOpenIDStrategy strategy_class=app._load_strategy('appengine_openid') self.assertEqual", "label": 0}, {"snippet_id": 7493, "code": ") result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}, 200 except exc.SQLAlchemyError as error: logging.error(error, exc_info=True) return{\"message\": \"api is down\"", "label": 0}, {"snippet_id": 4391, "code": "', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response", "label": 0}, {"snippet_id": 57946, "code": "\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title</p>\", \"description\": \"Here is some description\", \"title\": \"Title\" ", "label": 0}, {"snippet_id": 26699, "code": " wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 77884, "code": " in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity", "label": 0}, {"snippet_id": 22750, "code": "\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event", "label": 0}, {"snippet_id": 31652, "code": " in[lc for lc, ll in settings.LANGUAGES]: if request.user.is_authenticated(): request.user.locale=locale request.user.save() max_age=10 * 365 * 24 * 60 * 60 resp.set_cookie(settings.LANGUAGE_COOKIE_NAME", "label": 0}, {"snippet_id": 68226, "code": " datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name='twitter/index.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 60380, "code": "\"] for plugin in get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( [ FileSystemLoader(template_paths), PrefixLoader( {\"default\": FileSystemLoader", "label": 0}, {"snippet_id": 55709, "code": "(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder(t) \t\telif what is File:", "label": 0}, {"snippet_id": 26070, "code": " redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def", "label": 0}, {"snippet_id": 65137, "code": " code') break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef, ast.AsyncFunctionDef", "label": 0}, {"snippet_id": 62404, "code": " reauthn-for-chpass) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User ", "label": 0}, {"snippet_id": 2829, "code": " url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op", "label": 0}, {"snippet_id": 36756, "code": ".html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra", "label": 0}, {"snippet_id": 14265, "code": " no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 43785, "code": "/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec", "label": 0}, {"snippet_id": 80536, "code": "\") dialog.exec() @handled_slot(bool) def clear_log_area(self, checked): self.log_area.clear() @handled_slot(bool) def open_idle(self, checked): print('Opening IDLE.') subprocess.Popen('python -m idlelib", "label": 0}, {"snippet_id": 34543, "code": ".models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ ", "label": 0}, {"snippet_id": 63125, "code": "'hubba-bubba' def _check(): self.assertIn('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check", "label": 0}, {"snippet_id": 60038, "code": " click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading the SpatiaLite module.\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite.html\" ", "label": 0}, {"snippet_id": 25346, "code": " for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info.get(\"AuxAddress\") or local_scheduler_info", "label": 0}, {"snippet_id": 9491, "code": " limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take", "label": 0}, {"snippet_id": 79770, "code": " organisation_updated=data_req.organization_id !=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session", "label": 0}, {"snippet_id": 31822, "code": "): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8')", "label": 1}, {"snippet_id": 37943, "code": "(document, 'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude): formset_fields=model.detail_fields() if exclude: formset_fields=[in_field", "label": 0}, {"snippet_id": 35269, "code": ", pk, template_name='product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator", "label": 0}, {"snippet_id": 4049, "code": "'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin", "label": 0}, {"snippet_id": 39825, "code": " ValidationError from.weight_fraction_type import WeightFractionType from.extracted_chemical import ExtractedChemical from.script import Script def validate_wf_analysis(value): if value < 0 or value > 1", "label": 1}, {"snippet_id": 2618, "code": "'oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request,", "label": 0}, {"snippet_id": 19187, "code": " import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported", "label": 1}, {"snippet_id": 43876, "code": "( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name of the new object should match what", "label": 0}, {"snippet_id": 84474, "code": ": group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not(allow_read or allow_write", "label": 0}, {"snippet_id": 64952, "code": " one. Level 1 or greater outputs additional \" \"information about exceptions that occur\") args=parser.parse_args() vlevel=args.verbose name=args.name if not name.isidentifier() or keyword.iskeyword(name)", "label": 0}, {"snippet_id": 78885, "code": ", data_dict) organisation_updated=data_req.organization_id !=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req", "label": 0}, {"snippet_id": 50008, "code": "(tempFilePath, saveFilePath) if \"diagram\" in request.referrer or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename=%s'%name) else: return redirect('/?filename=%s", "label": 0}, {"snippet_id": 22830, "code": " the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or", "label": 0}, {"snippet_id": 52856, "code": ") instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ 'id': instance.id.__str__(), 'timestamp': instance.time_ago, 'timestamp_string': instance.timestamp_string", "label": 0}, {"snippet_id": 66351, "code": "\") if password_unlock_entry.get_text() !=\"\": try: self.database_manager=DatabaseManager(self.database_filepath, password_unlock_entry.get_text()) self.open_database_page() self.logging_manager.log_debug", "label": 1}, {"snippet_id": 68262, "code": "'30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=tweet.objects.order_by('-datetime') keyword=self.request.GET.get('keyword", "label": 0}, {"snippet_id": 10854, "code": " HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded", "label": 0}, {"snippet_id": 51402, "code": ".start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel.recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self): return self def", "label": 0}, {"snippet_id": 46933, "code": "(request.POST or None, instance=datagroup) header=f'Update Data Group for Data Source \"{datagroup.data_source}\"' if form.is_valid(): if form.has_changed(): form.save() return redirect('data_group_detail',", "label": 0}, {"snippet_id": 66323, "code": ", eventbutton): if widget.get_visibility(): widget.set_invisible_char(\"\u25cf\") widget.set_visibility(False) else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window", "label": 0}, {"snippet_id": 29800, "code": "(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template('image_upload.html', form=form) def get_or_create_tag(session, tagname): instance", "label": 0}, {"snippet_id": 65266, "code": " quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True) opened_databases=[] databases_to_save", "label": 0}, {"snippet_id": 5876, "code": " if credentials_store is not None\\ else MemoryCredentials() self.http=http if http is not None else httplib2.Http() self.time=time if time is not None else time_module.time self.urandom=urandom if urandom", "label": 0}, {"snippet_id": 29443, "code": ".route('/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response() if not resp: flash(u'You denied the request to sign in.') return redirect(url_for('gallery.show_posts')) user_id=resp[", "label": 0}, {"snippet_id": 7166, "code": " current_user.is_authenticated and current_user.role.role_code in self.roles_allowed def get_query(self): return self.session.query(self.model) create_modal=False edit_modal=False column_list=[ 'exam_type_name',", "label": 1}, {"snippet_id": 56150, "code": " from django.urls import reverse from experiences.models import ORMExperience from people.models import ORMPerson from profiles.models import ORMProfile class RedirectConfirmEmailTestCase(TestCase): def", "label": 0}, {"snippet_id": 4199, "code": " redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,", "label": 0}, {"snippet_id": 12852, "code": ".is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders'", "label": 0}, {"snippet_id": 38887, "code": "=='CP' @property def is_hh(self): return self.type=='HH' def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, ", "label": 0}, {"snippet_id": 82891, "code": "): \"\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name", "label": 0}, {"snippet_id": 63148, "code": " test_token_login_new_user(self): eppn='hubba-fooo' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2", "label": 0}, {"snippet_id": 70172, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this", "label": 0}, {"snippet_id": 78598, "code": " request. The function checks the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters", "label": 0}, {"snippet_id": 83034, "code": "(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.", "label": 0}, {"snippet_id": 9336, "code": ", settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 4471, "code": " self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\"", "label": 0}, {"snippet_id": 4853, "code": " status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit", "label": 0}, {"snippet_id": 3417, "code": " url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op", "label": 0}, {"snippet_id": 49221, "code": " the data document detail view or the extracted text QA page template ''' referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm", "label": 0}, {"snippet_id": 24094, "code": " new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def is_main_thread(): return threading.current_thread", "label": 0}, {"snippet_id": 33041, "code": " num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number')", "label": 0}, {"snippet_id": 71984, "code": " RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import CephX from..services.exception", "label": 1}, {"snippet_id": 17850, "code": " return flask.redirect(flask.url_for('account.login')) return flask.render_template('password_reset.html', form=form) @bp.route('/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return", "label": 0}, {"snippet_id": 65587, "code": "\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self.filechooser_creation_dialog=Gtk.FileChooserDialog( \"Create new Database\"", "label": 0}, {"snippet_id": 20674, "code": " additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits", "label": 0}, {"snippet_id": 72833, "code": " create_position_form.is_valid(): position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form, ", "label": 1}, {"snippet_id": 65548, "code": "=self.create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response==Gtk.ResponseType", "label": 1}, {"snippet_id": 35991, "code": " blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by", "label": 0}, {"snippet_id": 33870, "code": "('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name", "label": 0}, {"snippet_id": 4340, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']", "label": 1}, {"snippet_id": 46440, "code": " script_pk=int(request.POST['script_selection']) script=Script.objects.get(pk=script_pk) csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()", "label": 0}, {"snippet_id": 63171, "code": "(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with self.app.test_client() as c: resp=c.post('/token-login', data=data) self.assertEqual", "label": 0}, {"snippet_id": 14937, "code": " values in results.items(): ts={ 'id': name, 'values':{ 'x':[], 'y':[] } } dates=[key for key in values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]", "label": 0}, {"snippet_id": 65008, "code": "%d' % i) valid=False if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0] left_valid=False if type", "label": 0}, {"snippet_id": 7708, "code": "\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register", "label": 0}, {"snippet_id": 51331, "code": "._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient()", "label": 0}, {"snippet_id": 45401, "code": "=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type'", "label": 1}, {"snippet_id": 14011, "code": " that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, ", "label": 0}, {"snippet_id": 10725, "code": "'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset", "label": 0}, {"snippet_id": 54726, "code": "(assignment.book_edition,assignment.chapter,problem.number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself", "label": 1}, {"snippet_id": 6976, "code": ".data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token, form.password.data): flash('Your password has been updated.') return redirect(url_for('auth.login'))", "label": 0}, {"snippet_id": 34203, "code": "(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( ", "label": 0}, {"snippet_id": 38589, "code": ", through='ProductDocument') matched=models.BooleanField(default=False) extracted=models.BooleanField(default=False) document_type=models.ForeignKey(DocumentType, on_delete=models.PROTECT, null=True, blank", "label": 0}, {"snippet_id": 75765, "code": " return[{'text': 'FAST results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e) logger.error('fast response: %s -%s' %(r.status_code, r.text)", "label": 0}, {"snippet_id": 8768, "code": "': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year", "label": 0}, {"snippet_id": 65983, "code": "[] for db in self.opened_databases: if db.database_manager.changes is True: unsaved_databases_list.append(db) if unsaved_databases_list.__len__() > 0: builder=Gtk.Builder() builder.add_from_resource( \"", "label": 0}, {"snippet_id": 13714, "code": " HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password", "label": 0}, {"snippet_id": 17837, "code": " flask.flash(flask.Markup('Your password was reset. Log in now.'), 'info') return flask.redirect(flask.url_for('account.login')) return flask.render_template('password_reset.html', form=form) @bp.route(", "label": 0}, {"snippet_id": 37315, "code": ".ModelForm): class Meta: model=DataSource fields=['priority'] def __init__(self, *args, **kwargs): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority", "label": 0}, {"snippet_id": 74688, "code": "=request.user.username person_form=PersonForm(post_data, instance=get_person_instance(request)) candidate_form=CandidateForm(post_data) if person_form.is_valid() and candidate_form.is_valid(): person=person_form", "label": 0}, {"snippet_id": 25366, "code": ".local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must", "label": 0}, {"snippet_id": 57907, "code": " Return combined data with the status by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\"", "label": 0}, {"snippet_id": 3140, "code": " from urllib.parse import urlencode except ImportError: from urllib import urlencode from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib", "label": 0}, {"snippet_id": 35380, "code": " created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product", "label": 0}, {"snippet_id": 58724, "code": " import Http404 from django.template import loader, Context from accounts.models import Instructor from chat.models import EnrollUnitCode from core.common import onboarding from core.common.utils import", "label": 0}, {"snippet_id": 69661, "code": "}'.format( len(conda_packages), ' '.join(conda_packages) )) conda.ensure_conda_packages(USER_ENV_PREFIX, conda_packages) pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages()))) if", "label": 0}, {"snippet_id": 4704, "code": "\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 79351, "code": " action='show', id=datarequest.id, qualified=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict", "label": 0}, {"snippet_id": 78900, "code": ".add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition(datarequest_dict) users", "label": 0}, {"snippet_id": 25822, "code": "(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name", "label": 0}, {"snippet_id": 71741, "code": "'test:12345' user_info={ 'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create(auth_id, user_info) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() user_count", "label": 0}, {"snippet_id": 30719, "code": ".filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if editGrudget.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is", "label": 1}, {"snippet_id": 34247, "code": " of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/", "label": 1}, {"snippet_id": 483, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>", "label": 0}, {"snippet_id": 9184, "code": " '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 52962, "code": " self.user=self.make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get(", "label": 0}, {"snippet_id": 52144, "code": "(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(\"/team-invitation\", methods=[\"POST\"]) def update_team_membership", "label": 0}, {"snippet_id": 17523, "code": ")) return flask.render_template('login.html', form=form) @bp.route('/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session.modified=False response=flask.make_response(flask", "label": 0}, {"snippet_id": 82043, "code": " message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message}) created=JustURL.objects.create(input_url=url, short_url=f'{request.get_host()", "label": 0}, {"snippet_id": 23963, "code": ").format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class", "label": 0}, {"snippet_id": 38796, "code": ", on_delete=models.SET_DEFAULT, default=1) downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None, null=True, blank=True) data_source=models", "label": 0}, {"snippet_id": 54473, "code": " resource_owner_key=access_token, resource_owner_secret=access_token_secret, client_secret=consumer_secret ) base_url='https://api.twitter.com/1.1/' search_url='search/tweets.json' verify_url='account/verify_credentials", "label": 0}, {"snippet_id": 31127, "code": " Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id", "label": 0}, {"snippet_id": 34324, "code": ", f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser", "label": 0}, {"snippet_id": 52542, "code": "\"Action item is completed.{}\".format (random.choice(congratulatory_messages))) else: flash(\"Changes saved.\") db.session.commit() return redirect(\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\"", "label": 0}, {"snippet_id": 41885, "code": " linked to all DataDocuments, no bulk_create needed.') doc=DataDocument.objects.create(data_group=self.objects.dg) doc.matched=True self.objects.doc.matched=True doc.save() self.objects.doc.save() response", "label": 0}, {"snippet_id": 28127, "code": ": The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if", "label": 0}, {"snippet_id": 50647, "code": ".environ)\"' %(vsvars32, python), stdout=subprocess.PIPE, shell=True) stdout, _=process.communicate() exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode)", "label": 0}, {"snippet_id": 33142, "code": ") admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec) admin.site.register(PUCToTag, PUCToTagAdmin)", "label": 0}, {"snippet_id": 30723, "code": " login_session: return redirect('/login') if editGrudget.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to edit this grudget. Please", "label": 1}, {"snippet_id": 70616, "code": ", size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification", "label": 0}, {"snippet_id": 40838, "code": ".save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods", "label": 0}, {"snippet_id": 48934, "code": "{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request", "label": 0}, {"snippet_id": 18249, "code": ".get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef", "label": 1}, {"snippet_id": 52973, "code": " def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ", "label": 0}, {"snippet_id": 30593, "code": ".all() return jsonify(Grudge=[i.serialize for i in grudges]) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/JSON') def grudgeJSON(grudget_id, grudge_id): grudge=session.query(Grudge).filter_by", "label": 0}, {"snippet_id": 18026, "code": " recipient=user, text=flask.render_template('email/verify.txt', **tmpl_context), html=flask.render_template('email/verify.html', **tmpl_context), ) email.send_email(email_msg) def send_password_reset_email", "label": 0}, {"snippet_id": 48717, "code": " was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{", "label": 0}, {"snippet_id": 39102, "code": "()}/{self.get_name_as_slug()}.zip' if os.path.isfile(uuid_path): zip_url=uuid_path elif os.path.isfile(zip_file_path): zip_url=zip_file_path else: zip_url='no_path_found' return zip_url def get_extracted_template_fieldnames", "label": 0}, {"snippet_id": 37415, "code": " __init__(self, *args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required", "label": 0}, {"snippet_id": 33587, "code": " with ethylparaben') ec=ExtractedChemical.objects.get(rawchem_ptr_id=73) ec.raw_min_comp=0.1 ec.save() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self", "label": 0}, {"snippet_id": 21724, "code": " process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(", "label": 0}, {"snippet_id": 50623, "code": " vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools, 'vsvars32.bat') python=sys.executable process=subprocess.Popen('(\"%s\">nul)&&\"%s\" -c", "label": 0}, {"snippet_id": 38169, "code": ".gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o.name for o in obj", "label": 0}, {"snippet_id": 8505, "code": " \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 67498, "code": " not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None", "label": 0}, {"snippet_id": 66775, "code": " django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class", "label": 0}, {"snippet_id": 17354, "code": ".request.form) if flask.request.method=='POST' and form.validate(): if app.config['MAINTENANCE_MODE'] and not app.config['MAINTENANCE_MODE_LOGINS']: flask.flash(flask.Markup('<strong>Logins are currently", "label": 0}, {"snippet_id": 28861, "code": " if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte", "label": 0}, {"snippet_id": 54868, "code": "\tif len(s) > 1: \t\t\t\tprint(t,s) def process_problem_scores(code_list): \tproblems=[] \tclass problem(object): \t\tdef __init__(self,student,book_edition,chapter,number,code): \t\t\tself.student=student \t\t\tself", "label": 1}, {"snippet_id": 70587, "code": "(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/'", "label": 0}, {"snippet_id": 59659, "code": "\"tables\") or{} ).get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key", "label": 0}, {"snippet_id": 8627, "code": "(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login", "label": 0}, {"snippet_id": 59955, "code": " table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views", "label": 0}, {"snippet_id": 54939, "code": " Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code", "label": 1}, {"snippet_id": 39314, "code": "=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank", "label": 0}, {"snippet_id": 24868, "code": ".primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config,", "label": 0}, {"snippet_id": 19898, "code": " password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str", "label": 0}, {"snippet_id": 7017, "code": "(): form=ChangeEmailForm() if form.validate_on_submit(): if current_user.verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email", "label": 0}, {"snippet_id": 24246, "code": " range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given", "label": 1}, {"snippet_id": 46344, "code": "'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects", "label": 0}, {"snippet_id": 72946, "code": " id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() request.session['position_sort']=sort_by return render(request, 'positions.html',", "label": 0}, {"snippet_id": 36862, "code": "(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count", "label": 0}, {"snippet_id": 36298, "code": ", response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username", "label": 0}, {"snippet_id": 43292, "code": ".Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with", "label": 1}, {"snippet_id": 36296, "code": " the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar", "label": 0}, {"snippet_id": 12277, "code": " limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user", "label": 0}, {"snippet_id": 79085, "code": "[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email') return datarequest_dict def open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access", "label": 1}, {"snippet_id": 48932, "code": "(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform", "label": 0}, {"snippet_id": 61051, "code": " hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock: Lock \"", "label": 0}, {"snippet_id": 31190, "code": " import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s '*szo DEBUG=literal_eval(os.environ.get('DJANGO_DEBUG'", "label": 0}, {"snippet_id": 39137, "code": "='FU': return extract_fields if self.type=='CO': return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num", "label": 0}, {"snippet_id": 68380, "code": "=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse(", "label": 0}, {"snippet_id": 12068, "code": " ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request", "label": 1}, {"snippet_id": 73, "code": " django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to", "label": 0}, {"snippet_id": 68921, "code": "+Q36cym5Z1di6JQ kHl69q3zBdV3KTW+H1pdmnZlebYGz8paG9iQ/wS9gpnSeEyx0Enyi167Bzm0O4A1 GK0prkLnz/yROHHEfHjsTgMvFwAnf9uaxwWgE1d1RitIWgJpAnp1DZ5O0uVlsPPm XAhuBJ32mU8S5BezPTuJJICwBlLYECGb1Y65Cil4OALU7T7sbUqfLCuaRKxuPtcU VnJ6", "label": 0}, {"snippet_id": 11463, "code": "'number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account", "label": 0}, {"snippet_id": 77466, "code": ", and the ability to fetch tiles - everything a code client needs to know about and use, to get tiles from a server. Args: server_url: URL of the server on which command to be executed. target_path: Target", "label": 0}, {"snippet_id": 13569, "code": " configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link':", "label": 0}, {"snippet_id": 47009, "code": "'data_group_list') return render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg", "label": 0}, {"snippet_id": 28514, "code": " is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",", "label": 0}, {"snippet_id": 21325, "code": ", then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool", "label": 0}, {"snippet_id": 13972, "code": " return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request", "label": 0}, {"snippet_id": 79353, "code": "=datarequest.id, qualified=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset", "label": 0}, {"snippet_id": 33836, "code": ".webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def", "label": 0}, {"snippet_id": 24858, "code": " redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True", "label": 1}, {"snippet_id": 44907, "code": "(self.objects.doc) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed'", "label": 0}, {"snippet_id": 37368, "code": "), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name', 'data_document', 'qa_checked'] class ProductLinkForm(forms.ModelForm)", "label": 0}, {"snippet_id": 54211, "code": "!=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html", "label": 1}, {"snippet_id": 39837, "code": " value > 1: raise ValidationError( (f'Quantity{value} must be between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places", "label": 0}, {"snippet_id": 78467, "code": " action='show', id=datarequest.id, qualified=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict", "label": 0}, {"snippet_id": 78466, "code": ", action='show', id=datarequest.id, qualified=True) } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict", "label": 0}, {"snippet_id": 58127, "code": ": 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 13.0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding", "label": 1}, {"snippet_id": 54247, "code": " page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 \"\"\" ** JSON response routes ** \"\"\"", "label": 0}, {"snippet_id": 65465, "code": ".first_start_grid) def create_container(self): if self.first_start_grid !=NotImplemented: self.first_start_grid.destroy() self.container=Gtk.Notebook() self.container.set_border_width(0) self.container", "label": 0}, {"snippet_id": 38419, "code": ".common_info import CommonInfo from django.urls import reverse from django.utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument", "label": 0}, {"snippet_id": 1053, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb')", "label": 0}, {"snippet_id": 52202, "code": " return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return \"Pending my good lady\" @app.route(\"/view-team\") def view_team", "label": 0}, {"snippet_id": 34531, "code": " Q, Value, IntegerField, Subquery, OuterRef, F, Sum from django.forms.models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name", "label": 0}, {"snippet_id": 81430, "code": "%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta(days", "label": 1}, {"snippet_id": 21891, "code": " with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount of memory", "label": 0}, {"snippet_id": 33450, "code": "=ds, title='Test Product', upc='Test UPC for ProductToPUC') pd=ProductDocument.objects.create(document=dd, product=p) pd.save() dd.refresh_from_db() pid=dd.products.first().pk puc=PUC.objects.get(id=20", "label": 0}, {"snippet_id": 50542, "code": "\"]+\"/.openhome-build/\"+name+\".lock\") def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False", "label": 0}, {"snippet_id": 22373, "code": " keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter", "label": 0}, {"snippet_id": 14126, "code": "[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context", "label": 0}, {"snippet_id": 58069, "code": " \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email", "label": 1}, {"snippet_id": 84198, "code": ": 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article':", "label": 0}, {"snippet_id": 27573, "code": " argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click", "label": 0}, {"snippet_id": 80993, "code": " state to cancelled.') registration.state='cancel' subscription_update_counter +=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: existing_registration=http.request.env", "label": 0}, {"snippet_id": 47094, "code": ") @login_required() def habitsandpractices(request, pk, template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)',", "label": 0}, {"snippet_id": 35944, "code": " reverse from django.utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices", "label": 0}, {"snippet_id": 1566, "code": " endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\"", "label": 0}, {"snippet_id": 32380, "code": " base=self.command() if self.accept(TokenType.COMMAND_END): other=self.commands() if base and other: return DoubleNode(base, other) else: return other else: return base def command(self): if self.accept", "label": 0}, {"snippet_id": 27740, "code": " global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information", "label": 1}, {"snippet_id": 74915, "code": "=reverse('register') return HttpResponseRedirect(url) except Candidate.MultipleObjectsReturned: candidate=Candidate.objects.filter(person__netid=request.user.username)[0] context_data={'candidate': candidate}", "label": 0}, {"snippet_id": 25142, "code": "()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in", "label": 0}, {"snippet_id": 45995, "code": "=request.GET.get('page') paginator=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context={ 'datagroup' : dg, 'documents'", "label": 0}, {"snippet_id": 71931, "code": " req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/callback') req=EngineAuthRequest.blank('/auth/google", "label": 1}, {"snippet_id": 79867, "code": " send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data", "label": 0}, {"snippet_id": 5963, "code": "=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'], scope=app.config['OIDC_SCOPES']) assert isinstance(self.flow, OAuth2WebServerFlow) self.cookie_serializer=TimedJSONWebSignatureSerializer( app.config['SECRET_KEY']", "label": 0}, {"snippet_id": 80519, "code": "') not in item, stack) dialog=QMessageBox(icon=QMessageBox.Critical) dialog.setWindowTitle('Error') dialog.setText(f\"{description +'_' * desired_width}\\n\\n{''.join(stack)}\") dialog.exec() @handled_slot", "label": 0}, {"snippet_id": 26516, "code": ") if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process.wait() finally: timer.cancel() if process.poll() is not None: continue", "label": 0}, {"snippet_id": 34636, "code": " SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may", "label": 0}, {"snippet_id": 61449, "code": ".empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs", "label": 0}, {"snippet_id": 57710, "code": "(sender, **kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet", "label": 0}, {"snippet_id": 7825, "code": "'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME'", "label": 0}, {"snippet_id": 72966, "code": ": InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] }) @login_required", "label": 0}, {"snippet_id": 51776, "code": "'result/'+self.cate_str+'_attack'+str(self.count)+'.sh' with open(script_name, 'w') as f: f.write(script) def saveScope(self): file_name='result/'+self.cate_str+'_scope.json' with open(file_name,'w+') as", "label": 0}, {"snippet_id": 77445, "code": ": logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability to fetch tiles ", "label": 0}, {"snippet_id": 37130, "code": "'accept': '.csv'}) self.fields['download_script'].queryset=qs class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter", "label": 0}, {"snippet_id": 10596, "code": "=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to:", "label": 0}, {"snippet_id": 13381, "code": ".features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student", "label": 0}, {"snippet_id": 31435, "code": "'context_processors':[ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors", "label": 0}, {"snippet_id": 67346, "code": "(value__icontains=ip)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime')", "label": 0}, {"snippet_id": 55504, "code": "(self.path,topdown,onerror,followlinks) class FSPathList(list): \tdef _raw(self): \t\treturn map(lambda x: x.path,self) \t \t \tdef commonprefix(self): \t\treturn FSPath(os.path.commonprefix(self._raw())) \tdef", "label": 0}, {"snippet_id": 6149, "code": "'sub']]=credentials self.set_cookie_id_token(id_token) except AccessTokenRefreshError: logger.debug(\"Expired ID token, can't refresh credentials\", exc_info=True) del self.credentials_store[id_token['sub", "label": 0}, {"snippet_id": 21460, "code": " STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading", "label": 0}, {"snippet_id": 52655, "code": "=session.get(\"user_id\") projects_objects=q.get_projects_by_user(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]) def logout_user(", "label": 0}, {"snippet_id": 33095, "code": ".site.register(Script) admin.site.register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site", "label": 1}, {"snippet_id": 31169, "code": "://docs.djangoproject.com/en/1.9/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval import os import", "label": 0}, {"snippet_id": 18453, "code": " with the error. \tAfter confirming that no errors have occured, hashes the password and then inserts it into the \tMongoDB database by calling hash_password() and do_insert() respectively. \tFinally, sets", "label": 1}, {"snippet_id": 13153, "code": "'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={", "label": 0}, {"snippet_id": 4085, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id)", "label": 0}, {"snippet_id": 12115, "code": " redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name':", "label": 0}, {"snippet_id": 51647, "code": "() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method)", "label": 0}, {"snippet_id": 8824, "code": " UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{", "label": 0}, {"snippet_id": 21043, "code": ") self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should", "label": 0}, {"snippet_id": 8819, "code": ", 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1", "label": 0}, {"snippet_id": 19170, "code": " num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen", "label": 1}, {"snippet_id": 9667, "code": "{ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string", "label": 0}, {"snippet_id": 6957, "code": "): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None", "label": 0}, {"snippet_id": 29179, "code": " benwaonline.oauth import oauth from benwaonline.admin import setup_adminviews from benwaonline.models import user_datastore, User from benwaonline.gallery import gallery from benwaonline.gallery.forms import", "label": 1}, {"snippet_id": 78670, "code": ":returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context", "label": 0}, {"snippet_id": 67728, "code": ".order_by('category').distinct() context['types']=attr.values_list('type', flat=True).order_by('type').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET", "label": 0}, {"snippet_id": 70579, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f", "label": 0}, {"snippet_id": 78983, "code": " send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data", "label": 0}, {"snippet_id": 84087, "code": "{'title': title} if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) group_ct=get_ct(group) article_args.update({'content_type': group_ct, 'object_id': group.id", "label": 0}, {"snippet_id": 73656, "code": "(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect(", "label": 0}, {"snippet_id": 40684, "code": "+',' +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split", "label": 1}, {"snippet_id": 65431, "code": "-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database", "label": 1}, {"snippet_id": 68782, "code": "/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert", "label": 0}, {"snippet_id": 30098, "code": ".description, 'processed': self.processed, 'takeaway': self.takeaway, } engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.create_all(engine)", "label": 0}, {"snippet_id": 38531, "code": " primary key. ``document_type`` each type of data group may only contain certain types of data documents. The clean() method checks to make sure that the assigned document type is among the types allowed by", "label": 0}, {"snippet_id": 53289, "code": ": my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param project: :param step: :return: \"\"\" module_name=step.definition.name.rsplit('.', 1)[0", "label": 0}, {"snippet_id": 17889, "code": "=flask.g.user new_email=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!", "label": 0}, {"snippet_id": 35592, "code": " ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids", "label": 0}, {"snippet_id": 1232, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"", "label": 0}, {"snippet_id": 15909, "code": ".email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password.errors.append('Password should be at least 8 characters long') return", "label": 0}, {"snippet_id": 28985, "code": " size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver", "label": 0}, {"snippet_id": 40928, "code": ".loader import * @override_settings(ALLOWED_HOSTS=['testserver']) class DataDocumentDetailTest(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 5344, "code": ".client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http:/", "label": 1}, {"snippet_id": 68193, "code": " get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import tweet from.forms import", "label": 1}, {"snippet_id": 58480, "code": "\"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" } }, onboarding.PREVIEW_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>preview_courselet</p>\", \"description", "label": 0}, {"snippet_id": 40785, "code": ").content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*", "label": 0}, {"snippet_id": 7086, "code": " Province of British Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http", "label": 0}, {"snippet_id": 68375, "code": "=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request", "label": 0}, {"snippet_id": 56728, "code": " django.views.generic import ListView from django.contrib.auth.decorators import login_required from pure_pagination.mixins import PaginationMixin from django.http import HttpResponse, QueryDict from django", "label": 0}, {"snippet_id": 9550, "code": " else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the", "label": 0}, {"snippet_id": 34327, "code": " old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 16726, "code": "=_create_game_seeder(tournament, the_round.number()) sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games_and_powers(omitting_players=sitters, players_doubling_up", "label": 0}, {"snippet_id": 14223, "code": " \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 20999, "code": " self.prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address", "label": 0}, {"snippet_id": 82933, "code": " component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. ", "label": 0}, {"snippet_id": 35240, "code": "\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at", "label": 0}, {"snippet_id": 15417, "code": " in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days", "label": 0}, {"snippet_id": 50210, "code": " returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email already in use') return redirect('/signup') @app.route(\"/login\") def login(): if 'return_url' in request.args: session['return_url'", "label": 0}, {"snippet_id": 84218, "code": "'new_article': True} else: template_params={'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article':", "label": 0}, {"snippet_id": 31805, "code": "')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password", "label": 1}, {"snippet_id": 43134, "code": " response=self.client.get(f'/qa/extractedtext/254781/', follow=True) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 30)", "label": 0}, {"snippet_id": 19636, "code": ", help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\"", "label": 1}, {"snippet_id": 66699, "code": " clear_input_fields(self): password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") composite_unlock_entry=self.builder.get_object(\"composite_unlock_entry\") password_unlock_entry.set_text(\"", "label": 0}, {"snippet_id": 12033, "code": " '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 17860, "code": "/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form", "label": 0}, {"snippet_id": 81734, "code": " View from django.views.generic import CreateView, ListView, UpdateView, DeleteView from django.contrib.auth.mixins import LoginRequiredMixin from.forms import ShortUrlForm, JustURLForm, CategoryModelForm", "label": 0}, {"snippet_id": 4590, "code": " response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ ", "label": 0}, {"snippet_id": 66098, "code": "=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented logging_manager=LoggingManager(True) overlay=NotImplemented def __init__(self, window, widget, filepath): self.window=window self", "label": 0}, {"snippet_id": 37582, "code": ".ModelForm): required_css_class='required' tag=forms.ModelChoiceField(queryset=PUCTag.objects.none(), label='Attribute') id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput()) class", "label": 0}, {"snippet_id": 42265, "code": ".dg.save() response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertNotIn('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self", "label": 0}, {"snippet_id": 69952, "code": ") head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath", "label": 1}, {"snippet_id": 12211, "code": " \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation", "label": 0}, {"snippet_id": 19658, "code": " required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants", "label": 0}, {"snippet_id": 33299, "code": ".site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register", "label": 0}, {"snippet_id": 68436, "code": " BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection class IndexView(PaginationMixin, ListView): template_name", "label": 0}, {"snippet_id": 40775, "code": "): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to", "label": 0}, {"snippet_id": 67351, "code": " count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['tws'].count() if count ", "label": 0}, {"snippet_id": 56393, "code": "'Location']==url return self class RedirectProfileTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_profile(username", "label": 0}, {"snippet_id": 26368, "code": " usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this method", "label": 0}, {"snippet_id": 72684, "code": ".create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def login_form(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': request.GET", "label": 1}, {"snippet_id": 51345, "code": " username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username, look_for_keys='True') def call(self, *args", "label": 0}, {"snippet_id": 32533, "code": ".next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}'", "label": 0}, {"snippet_id": 51927, "code": "(): \"\"\"Load login form.\"\"\" return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]) def log_in_returning_user(): \"\"\"Validate login entry.\"\"\" num_attempts=h.get_login_attempts() remaining", "label": 0}, {"snippet_id": 66847, "code": ").get_context_data(**kwargs) context['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']=GeoIP().lookup(domain) except Exception as e: print(e) pass try: context['ipaddress']=socket", "label": 0}, {"snippet_id": 9834, "code": "[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context", "label": 0}, {"snippet_id": 84396, "code": " is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs,", "label": 0}, {"snippet_id": 52783, "code": ", 'file_link': message.attachment.path } \"\"\" model=Message serializer_class=MessageSerializer permission_classes=[IsAuthenticated,] def create(self, request, *args, **kwargs): room_id=self.request.data", "label": 0}, {"snippet_id": 63058, "code": "/login') def test_chpass_authn(self): self.authn('/chpass', force_authn=True) def test_terminate_authn(self): self.authn('/terminate', force_authn=True) def test_login_assertion_consumer_service(self):", "label": 0}, {"snippet_id": 20018, "code": "{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects", "label": 0}, {"snippet_id": 55286, "code": " \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) ", "label": 0}, {"snippet_id": 19656, "code": " \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices", "label": 0}, {"snippet_id": 21022, "code": " plasma_directory=self._ray_params.plasma_directory, huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert", "label": 1}, {"snippet_id": 49486, "code": " @login_required def extracted_child_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc", "label": 0}, {"snippet_id": 23914, "code": " pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker used to send warning message. \"\"\"", "label": 0}, {"snippet_id": 41756, "code": "'data_document_filename', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse','raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp", "label": 0}, {"snippet_id": 82301, "code": "(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=get_object_or_404(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by('timestamp') return render(request, 'clicktracking-detail", "label": 0}, {"snippet_id": 57349, "code": ") class TransactionList(PaginationMixin, ListView): model=Transaction context_object_name='transactions' paginate_by=8 queryset=None header=gettext_lazy('Transactions') request=None filter=None filter_data", "label": 0}, {"snippet_id": 18065, "code": " recipient=user, text=flask.render_template('email/reset.txt', user=user), html=flask.render_template('email/reset.html', user=user), ) email.send_email(email_msg) def send_password_reset_request_email(user):", "label": 0}, {"snippet_id": 630, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 38868, "code": ".type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=", "label": 0}, {"snippet_id": 26261, "code": "[ray_constants.PROCESS_TYPE_RAYLET_MONITOR]=[ process_info ] def start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and", "label": 0}, {"snippet_id": 57461, "code": "=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) if request.method=", "label": 0}, {"snippet_id": 3951, "code": " def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username", "label": 0}, {"snippet_id": 52120, "code": " and UserTeam model, updating database each time.\"\"\" name=request.form.get(\"name\", \"Untitled\") desc=request.form.get(\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc)", "label": 0}, {"snippet_id": 62422, "code": ": eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the", "label": 0}, {"snippet_id": 77571, "code": "=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in", "label": 0}, {"snippet_id": 34456, "code": " ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 63734, "code": "', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): del session['_saml2_session_name_id'", "label": 0}, {"snippet_id": 76027, "code": " lang=self.project.language, version=self.project.default_version, ) return '{from_url} ->{to_url}'.format( from_url=from_url, to_url=to_url, ) return '' def get_full_path(self, filename, language=None,", "label": 1}, {"snippet_id": 45608, "code": ".POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid", "label": 1}, {"snippet_id": 42814, "code": "/15/\\'> Continue QA\".encode(), response.content) def test_qa_script_without_ext_text(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode", "label": 0}, {"snippet_id": 25012, "code": ".ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i)", "label": 0}, {"snippet_id": 45257, "code": "=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month')) if len(document_stats) < 12: for i in range", "label": 0}, {"snippet_id": 74335, "code": " self.get_object()}) return self.access_form_class(**form_kwargs) def _render_access_form(self): self.object=self.report self.template_name=self.access_template_name context=self.get_context_data(form=self", "label": 0}, {"snippet_id": 1687, "code": " length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime", "label": 0}, {"snippet_id": 68217, "code": " import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name", "label": 0}, {"snippet_id": 43026, "code": " functional use data group with pk=5. Its QA page should hide the composition fields ''' response=self.client.get('/qa/extractionscript/15/', follow=True) response=self.client.get('/qa/extractedtext/5/", "label": 0}, {"snippet_id": 39531, "code": " def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url() def get_extractedtext(self):", "label": 0}, {"snippet_id": 71175, "code": " class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models.Session.get_by_value(value) if session is", "label": 0}, {"snippet_id": 70723, "code": " parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve", "label": 0}, {"snippet_id": 30884, "code": " login_session: return render_template('publicgrudges.html', grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return render_template('showgrudge.html', grudges=grudges, id=grudget_id,", "label": 0}, {"snippet_id": 35131, "code": ")) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def", "label": 0}, {"snippet_id": 20856, "code": ".path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def start_redis", "label": 0}, {"snippet_id": 42807, "code": "/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/15/\\'> Continue QA\".encode(), response.content) def test_qa_script_without_ext_text(self): response=self.client.get(f'/qa/extractionscript/", "label": 0}, {"snippet_id": 64805, "code": " print(repr(e), file=sys.stderr) dock_points(deductions, points_per_case, 'exception during test case %d' % i) return deductions def main(): parser=argparse.ArgumentParser(description=\"Grade student code", "label": 1}, {"snippet_id": 18782, "code": "\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web", "label": 1}, {"snippet_id": 50305, "code": ".route(\"/tmp\", methods=[\"POST\"]) def tmp(): with tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f", "label": 0}, {"snippet_id": 25263, "code": ".\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads", "label": 0}, {"snippet_id": 34956, "code": ").count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload file. \"+repr(e)", "label": 0}, {"snippet_id": 67385, "code": " from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event, Attribute, Org, Tag, Object, ObjectReference", "label": 0}, {"snippet_id": 4541, "code": " for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def", "label": 0}, {"snippet_id": 75727, "code": ": r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return error_response except Exception: import traceback logger.error('fast lookup exception: ", "label": 0}, {"snippet_id": 43581, "code": "(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*", "label": 1}, {"snippet_id": 79106, "code": " request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id:", "label": 0}, {"snippet_id": 25741, "code": " include_log_monitor=True, resources={}, include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1", "label": 0}, {"snippet_id": 40807, "code": "].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count", "label": 0}, {"snippet_id": 13486, "code": "[0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id", "label": 1}, {"snippet_id": 76852, "code": ".read()) im_tile=Image.open(f) im_tile.load() except IOError, e: im_tile=None logger.error(\"Failed to fetch tile:%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec)", "label": 1}, {"snippet_id": 43797, "code": "=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel", "label": 0}, {"snippet_id": 69382, "code": "==0.6.1', 'nbresuse==0.3.0', 'ipywidgets==7.4.2', 'tornado<6.0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"", "label": 0}, {"snippet_id": 41298, "code": " correct extracted_text parent') def test_extractedsubclasses(self): ''' Confirm that the inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in", "label": 0}, {"snippet_id": 21447, "code": ":\\n\" +f.read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler", "label": 0}, {"snippet_id": 35128, "code": "=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs)", "label": 0}, {"snippet_id": 19061, "code": " __future__ import absolute_import from __future__ import division from __future__ import print_function import threading import traceback import redis import ray from ray import ray_constants from ray", "label": 1}, {"snippet_id": 36185, "code": " can have ''' qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models", "label": 0}, {"snippet_id": 52520, "code": "\"completion\") updated_notes=request.form.get(\"notes\") project_object.notes=updated_notes congratulatory_messages=[\"High five!\", \"Nice work!\", \"You rock.\", \"Nice.\"] if checked_lst==\"is-checked\": project_object", "label": 0}, {"snippet_id": 22138, "code": ". include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file", "label": 0}, {"snippet_id": 30421, "code": " output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px", "label": 0}, {"snippet_id": 70747, "code": "\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 62125, "code": ".headers: return False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page,", "label": 0}, {"snippet_id": 6591, "code": " current_user.verify_auth_token(session['auth_token']): logout_user() flash('Your session has expired.') return redirect(url_for('auth.login')) if not current_user.confirmed \\ and request.endpoint[:5] !", "label": 0}, {"snippet_id": 70131, "code": "[ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[", "label": 0}, {"snippet_id": 27103, "code": " code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether", "label": 0}, {"snippet_id": 47314, "code": " datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority", "label": 0}, {"snippet_id": 57678, "code": " fail_silently=True ) def suspending_receiver(signal, **decorator_kwargs): \"\"\" Custom decorator to disable signals. Reference: https://devblog.kogan.com/blog/disable-signal-receivers-in-your-django-tests ", "label": 0}, {"snippet_id": 72264, "code": "': fsal, 'clients': clients }) daemons=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf", "label": 0}, {"snippet_id": 3943, "code": ": 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit", "label": 0}, {"snippet_id": 49510, "code": " from oauth import OAuthSignIn from subprocess import check_output, STDOUT, CalledProcessError from werkzeug import generate_password_hash, check_password_hash, secure_filename from database.database_create", "label": 0}, {"snippet_id": 55444, "code": " isinstance(other,FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) \tdef rmdir(self): \t\treturn os.rmdir(self.path) \tdef stat(self): \t\treturn os.stat(self", "label": 0}, {"snippet_id": 77228, "code": "(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1] !=\"", "label": 0}, {"snippet_id": 11829, "code": " HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie", "label": 0}, {"snippet_id": 35747, "code": "(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects", "label": 0}, {"snippet_id": 49081, "code": "'data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1 if doc.detail_page_editable else 0 ParentForm, ChildFormSet=create_detail_formset", "label": 0}, {"snippet_id": 37785, "code": ") class ExtractedChemicalForm(forms.ModelForm): def __init__(self, *args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox", "label": 0}, {"snippet_id": 82560, "code": " __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\"", "label": 0}, {"snippet_id": 74665, "code": ".netid !=request.user.username: raise PermissionDenied return candidate @login_required def register(request): from.forms import PersonForm, CandidateForm if request.method=='POST': post_data=request.POST", "label": 0}, {"snippet_id": 15578, "code": " not form.change_timeseries_value_several_days_add_delta: for command in get_command('change_timeseries_value_several_days_add_delta'): form.change_timeseries_value_several_days_add_delta.append_entry()", "label": 0}, {"snippet_id": 15064, "code": ", reverse=False) return render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled", "label": 0}, {"snippet_id": 32307, "code": ": ''' Utility iterator to allow easy creation of a stream of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into", "label": 0}, {"snippet_id": 71756, "code": "=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count()", "label": 0}, {"snippet_id": 10623, "code": ".get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to", "label": 1}, {"snippet_id": 8965, "code": " import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django", "label": 0}, {"snippet_id": 73977, "code": " own views if you are implementing callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en", "label": 0}, {"snippet_id": 10439, "code": " import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx", "label": 0}, {"snippet_id": 5544, "code": " full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self", "label": 0}, {"snippet_id": 47730, "code": "\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid", "label": 0}, {"snippet_id": 21189, "code": " \"\"\"Start the raylet monitor.\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file", "label": 0}, {"snippet_id": 84253, "code": "=RequestContext(request)) def view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name", "label": 0}, {"snippet_id": 1104, "code": " <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title", "label": 0}, {"snippet_id": 36129, "code": "): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC", "label": 0}, {"snippet_id": 48235, "code": "=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs", "label": 1}, {"snippet_id": 35624, "code": " return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/'", "label": 0}, {"snippet_id": 3478, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', ", "label": 0}, {"snippet_id": 49148, "code": ": pass if doc.is_extracted: extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form", "label": 0}, {"snippet_id": 69153, "code": " f: f.write(secrets.token_hex(32)) traefik.ensure_traefik_config(STATE_DIR) unit_params=dict( python_interpreter_path=sys.executable, jupyterhub_config_path=os.path.join(HERE, 'jupyterhub_config.py'), install_prefix", "label": 0}, {"snippet_id": 42744, "code": " test_new_qa_group_urls(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=15 response=self.client.get(f'/qa/extractionscript", "label": 0}, {"snippet_id": 22710, "code": " appear in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as", "label": 1}, {"snippet_id": 41212, "code": "'/extractedtext/edit/354784/', data=data, follow=True) doc=DataDocument.objects.get(pk=354784) self.assertTrue(doc.extracted, \"This document is not extracted \") page=html.fromstring(response.content) hhe_no", "label": 0}, {"snippet_id": 35351, "code": ".filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value()", "label": 0}, {"snippet_id": 62365, "code": " current_app.logger.debug('Redirecting to the RelayState: ' +relay_state) response=redirect(location=relay_state) session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user,", "label": 0}, {"snippet_id": 77039, "code": " _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self", "label": 0}, {"snippet_id": 60153, "code": " __version__} if self.version_note: datasette_version[\"note\"]=self.version_note return{ \"python\":{ \"version\": \".\".join(map(str, sys.version_info[:3])), \"full\": sys.version }, \"datasette\": datasette_version, ", "label": 0}, {"snippet_id": 71881, "code": " ]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error", "label": 0}, {"snippet_id": 36530, "code": " response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count()", "label": 0}, {"snippet_id": 79232, "code": "=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')", "label": 0}, {"snippet_id": 49613, "code": ".route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck", "label": 0}, {"snippet_id": 10118, "code": " the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter", "label": 0}, {"snippet_id": 78032, "code": " default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit", "label": 0}, {"snippet_id": 47328, "code": "): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() return redirect('data_source_list') return render(request, template_name,{'object_list': out}) @login_required()", "label": 0}, {"snippet_id": 72882, "code": ") create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) @login_required(login_url='/login", "label": 0}, {"snippet_id": 4619, "code": " def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username", "label": 0}, {"snippet_id": 11527, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference", "label": 0}, {"snippet_id": 48, "code": ".translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL", "label": 0}, {"snippet_id": 67361, "code": "=tweet.objects.filter(Q(text__icontains=ip)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=ip)).order_by", "label": 0}, {"snippet_id": 44236, "code": "(dg_detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back", "label": 0}, {"snippet_id": 19643, "code": ".add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the", "label": 1}, {"snippet_id": 19742, "code": " ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor", "label": 0}, {"snippet_id": 21185, "code": ".PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"\"\"Start the raylet monitor.\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info", "label": 0}, {"snippet_id": 67696, "code": " class AttributeListView(PaginationMixin, ListView): model=Attribute template_name='threat/attribute_list.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): attr", "label": 0}, {"snippet_id": 68974, "code": "/18aGZBYUAEQEAAYkCHwQYAQIACQUCU5sktgIbDAAK CRAWVaCraFdigIPQEACcYh8rR19wMZZ/hgYv5so6Y1HcJNARuzmffQKozS/rxqec 0xM3wceL1AIMuGhlXFeGd0wRv/RVzeZjnTGwhN1DnCDy1I66hUTgehONsfVanuP1 PZKoL38EAxsMzdYgkYH6T9a4wJH/IPt+uuFTFFy3o8TKMvKaJk98+Jsp2X", "label": 0}, {"snippet_id": 74562, "code": " BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, ", "label": 0}, {"snippet_id": 53880, "code": "', '{}.json'.format(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None", "label": 0}, {"snippet_id": 528, "code": " of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath", "label": 1}, {"snippet_id": 54310, "code": "=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def politicians_by_state", "label": 0}, {"snippet_id": 48052, "code": " ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return HttpResponseRedirect(f'/habitsandpractices/{doc.pk}') context={ 'doc' : doc, 'ext_form' ", "label": 0}, {"snippet_id": 80697, "code": ".query('MOTTE:POS?', numeric_result=True)) if success: print(f\"Setting thin etalon motor position to{target_pos}.\") self.matisse.set_thin_etalon_motor_pos(target_pos) @handled_slot(bool) def start_bifi_scan", "label": 0}, {"snippet_id": 27051, "code": "(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard", "label": 0}, {"snippet_id": 59277, "code": " ConfigOption=collections.namedtuple( \"ConfigOption\",(\"name\", \"default\", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(", "label": 0}, {"snippet_id": 10769, "code": " context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME", "label": 0}, {"snippet_id": 40420, "code": " >=100: random_20=math.ceil(len(doc_text_ids)/5) shuffle(doc_text_ids) texts=ExtractedText.objects.filter(pk__in=doc_text_ids[:random_20]) else: texts=None if texts is not None: for text in texts: text", "label": 0}, {"snippet_id": 79957, "code": ") session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title", "label": 1}, {"snippet_id": 42966, "code": ".pk response=self.client.get(f'/qa/extractedtext/{pk}/') self.assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self", "label": 0}, {"snippet_id": 70918, "code": ".st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=", "label": 0}, {"snippet_id": 18032, "code": "*tmpl_context), html=flask.render_template('email/verify.html', **tmpl_context), ) email.send_email(email_msg) def send_password_reset_email(user): ''' Alert user that their password has been successfully", "label": 0}, {"snippet_id": 33276, "code": "(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site.register(DataDocument) admin.site.register(Script) admin.site.register(Product) admin.site", "label": 1}, {"snippet_id": 63291, "code": ".config['TOKEN_SERVICE_URL'])) def test_cookie(self): token=('a7MPUEQQLAEEQEAQDGJOXKAMFM467EUW6HCETFI4VP5JCU3CDVJDQZSHMXAOSC' 'U25WPZA66NY5ZVAA4RPCVMHBQBJSVGYQPPLZNIBTP3Y') sessid=('fb1f42420b0109020203325d750185673df252de388932a3957f522a6c43a", "label": 0}, {"snippet_id": 50875, "code": "]=value else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser", "label": 0}, {"snippet_id": 58588, "code": ".ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course=course, progress__gte=70", "label": 1}, {"snippet_id": 28359, "code": " TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"", "label": 0}, {"snippet_id": 23679, "code": " _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close()", "label": 1}, {"snippet_id": 38820, "code": "=models.CASCADE) fs_id=models.UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey", "label": 0}, {"snippet_id": 22230, "code": ", include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config", "label": 0}, {"snippet_id": 12918, "code": " account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in", "label": 0}, {"snippet_id": 39223, "code": " ValidationError from.extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.raw_chem import RawChem def validate_ingredient_rank(value): if value", "label": 1}, {"snippet_id": 34199, "code": "=doc_type_select.first_selected_option doc_type_select.select_by_visible_text(\"ingredient disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser", "label": 0}, {"snippet_id": 82089, "code": "',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args", "label": 0}, {"snippet_id": 82134, "code": ".create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type=", "label": 0}, {"snippet_id": 82533, "code": " monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 29235, "code": ".init_app(app) @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor def security_context_processor", "label": 0}, {"snippet_id": 17563, "code": "'POST']) def register(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User(username", "label": 0}, {"snippet_id": 14906, "code": " return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results') def view_results", "label": 0}, {"snippet_id": 74232, "code": "(self): self._check_report_owner() try: passphrase=self.request.POST[\"key\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError", "label": 0}, {"snippet_id": 42517, "code": " def test_qa_approval_redirect(self): self.client.get(f'/qa/extractionscript/{self.objects.exscript.pk}/') pk=self.objects.extext.pk response=self.client.post(f'/qa/extractedtext/{pk}/',{'approve':[47]})", "label": 1}, {"snippet_id": 50437, "code": " if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime", "label": 0}, {"snippet_id": 37591, "code": "(queryset=PUCTag.objects.none(), label='Attribute') id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self,", "label": 0}, {"snippet_id": 65146, "code": "=ast.Module and len(tree.body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef, ast.AsyncFunctionDef]: if fdef.name !=name: fdef.name=name dock_points(deductions, 1, 'misnamed function') valid=True", "label": 0}, {"snippet_id": 48043, "code": "'POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return HttpResponseRedirect(f'", "label": 0}, {"snippet_id": 83183, "code": "(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug", "label": 0}, {"snippet_id": 83804, "code": "=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': articles,", "label": 0}, {"snippet_id": 49926, "code": " redirect('/login?return_url=saveAs&diagram=true') return redirect('/login?return_url=saveAs') else: return render_template('saveFile.html', diagram=diagram) @app.route('/saveAs', methods=['POST']) @app.route(", "label": 0}, {"snippet_id": 78626, "code": " if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data request :type title:", "label": 0}, {"snippet_id": 29674, "code": " redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items: return render_template('show.html", "label": 1}, {"snippet_id": 14046, "code": ".displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl", "label": 0}, {"snippet_id": 84345, "code": "'article': article, 'article_title': article.title, 'changeset': changeset, 'differences': changeset.compare_to(revision_from), 'from': from_value, 'to': revision, 'allow_write': allow_write} if group_slug", "label": 0}, {"snippet_id": 38783, "code": "=models.CharField(max_length=50) description=models.TextField(null=True, blank=True) downloaded_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) downloaded_at=models.DateTimeField", "label": 0}, {"snippet_id": 62898, "code": " to access the assertion consumer service and then check the side effects of this access. :param url: the url of the desired authentication mode. :type url: str :param eppn: the eppn of the user to access", "label": 0}, {"snippet_id": 35127, "code": "=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs", "label": 0}, {"snippet_id": 4487, "code": " specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=", "label": 0}, {"snippet_id": 42207, "code": ".objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>' self.assertIn(span, response, 'Check should be present if matched", "label": 0}, {"snippet_id": 34422, "code": ".browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel", "label": 0}, {"snippet_id": 41096, "code": " def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/') data={'title' :['Product Title'], 'upc' :['stub_9100", "label": 0}, {"snippet_id": 57554, "code": "(request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) filter_data={ 'closed': False, } listview=TransactionList.as_view() return listview(request,", "label": 1}, {"snippet_id": 53522, "code": " :param project: :return: \"\"\" filename=stack_frame.filename if filename.startswith(project.source_directory): filename=filename[len(project.source_directory) +1:] location=stack_frame.name if location=", "label": 0}, {"snippet_id": 33294, "code": " admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical", "label": 0}, {"snippet_id": 66310, "code": "\"activate\", self.on_password_unlock_button_clicked) password_unlock_entry.connect(\"icon-press\", self.on_password_unlock_entry_secondary_clicked) def on_password_unlock_entry_secondary_clicked(self, widget", "label": 0}, {"snippet_id": 30885, "code": " return render_template('publicgrudges.html', grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return render_template('showgrudge.html', grudges=grudges, id=grudget_id, grudget=grudget", "label": 0}, {"snippet_id": 5898, "code": " self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self, app): \"\"\" Do setup that requires a Flask app. \"\"\" self.app=app app.config.setdefault", "label": 0}, {"snippet_id": 68073, "code": " form_class=HuntForm template_name='threat_hunter/hunt_edit_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' def hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk", "label": 0}, {"snippet_id": 12911, "code": " user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the", "label": 0}, {"snippet_id": 33969, "code": "//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self", "label": 0}, {"snippet_id": 46597, "code": ".collapsed=False return render(request, template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource", "label": 0}, {"snippet_id": 18426, "code": " renders signup.html with the error if the regex fails to match the submitted value. \tThen checks if the submitted username and email already exist in database by calling check_if_exists \tif check_if_exists", "label": 1}, {"snippet_id": 54952, "code": " item in value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\", \"+str(book_edition)+\", \"+str(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups) \t\t \t\t def process_hwml(): \thp", "label": 1}, {"snippet_id": 50521, "code": " return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle) class PosixUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"HOME\"]+\"", "label": 0}, {"snippet_id": 53202, "code": "'TestLastName', 'zipcode': '10118', 'phone_number': '+26334465657456774567', 'email': 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, ''", "label": 0}, {"snippet_id": 72144, "code": "': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(ex_id).to_dict() def get(self, cluster_id, export_id): export_id", "label": 0}, {"snippet_id": 56845, "code": "=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context) @login_required() def concept_edit(request, *args,", "label": 0}, {"snippet_id": 70036, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"", "label": 0}, {"snippet_id": 4289, "code": " redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 26583, "code": " was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise", "label": 0}, {"snippet_id": 60527, "code": " self.plugins), r\"/-/plugins<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"config.json\", lambda: self._config), r\"/-/config<as_format:(\\.json)?$>\", ) app.add_route( DatabaseDownload", "label": 0}, {"snippet_id": 75205, "code": ": return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': person_form=CommitteeMemberPersonForm(request.POST) committee_member_form=CommitteeMemberForm", "label": 0}, {"snippet_id": 83506, "code": ".template import RequestContext from django.core.urlresolvers import reverse from django.http import(Http404, HttpResponseRedirect, HttpResponseNotAllowed, HttpResponse, HttpResponseForbidden) from django", "label": 0}, {"snippet_id": 55145, "code": "(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir(self.path)", "label": 0}, {"snippet_id": 61889, "code": " validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics(page): \"", "label": 0}, {"snippet_id": 7272, "code": " from qsystem import db class OfficeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal", "label": 0}, {"snippet_id": 23709, "code": " particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in", "label": 0}, {"snippet_id": 65758, "code": "( self, self.create_tab(tab_title, headerbar), self.database_manager) def create_tab(self, title, headerbar): if self.container==NotImplemented: self.create_container() page_instance=ContainerPage(headerbar", "label": 0}, {"snippet_id": 70619, "code": "\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 1625, "code": ": f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since", "label": 0}, {"snippet_id": 43077, "code": "=True) response=self.client.get('/qa/extractedtext/7/', follow=True) self.assertIn(b'rawchem-1-unit_type', response.content) def test_cpcat_qa(self): response=self.client.get(f'/qa/chemicalpresence/') self", "label": 0}, {"snippet_id": 81115, "code": "(e)) referer=str(http.request.httprequest.headers.environ['HTTP_REFERER']) redirect=str('/'+referer.split('/')[-1]) return http.request.redirect(redirect) def _update_counter_subscription(self, event, partner", "label": 1}, {"snippet_id": 7853, "code": ".SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']", "label": 0}, {"snippet_id": 32491, "code": ".O_CREAT | os.O_WRONLY | os.O_APPEND)) elif self.accept(TokenType.REDIRECT_IN): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(0,(filename, os.O_RDONLY)) else: return None def next", "label": 0}, {"snippet_id": 83225, "code": " if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs", "label": 0}, {"snippet_id": 65771, "code": "=NotImplemented: self.create_container() page_instance=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0) tab_label=Gtk.Label(title) tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon", "label": 0}, {"snippet_id": 54550, "code": "())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import pprint from hwml import Problem, Assignment from collections", "label": 0}, {"snippet_id": 38142, "code": "=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural", "label": 0}, {"snippet_id": 31267, "code": " 'corsheaders', 'db_mutex', 'coala_online', ] +['gitmate_'+plugin for plugin in GITMATE_PLUGINS] REST_FRAMEWORK={ 'DEFAULT_AUTHENTICATION_CLASSES':( 'rest_framework.authentication.BasicAuthentication',", "label": 0}, {"snippet_id": 33769, "code": ",%s,%s,%s\\r\\n' %(rc.extracted_text.data_document.data_group.id, rc.id, rc.raw_cas, rc.raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The", "label": 1}, {"snippet_id": 24543, "code": ".log_file_handles[log_filename].readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename", "label": 1}, {"snippet_id": 10518, "code": " enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view", "label": 0}, {"snippet_id": 7781, "code": "('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept", "label": 0}, {"snippet_id": 70753, "code": " structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root``", "label": 0}, {"snippet_id": 36226, "code": "=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\") ordering=('name',) def __str__", "label": 1}, {"snippet_id": 21469, "code": ".use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start()", "label": 0}, {"snippet_id": 58528, "code": "\n\nfrom django.core.management.base import BaseCommand from ct.models import Course, Role, UnitLesson, Unit, Lesson, Response from ctms.models import Invite from chat.models import Chat, EnrollUnitCode from", "label": 0}, {"snippet_id": 49235, "code": "(DataDocument, pk=pk) document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid() and document_type_form.has_changed(): document_type_form.save() return redirect(referer", "label": 0}, {"snippet_id": 48114, "code": " PUC=puc, extracted_habits_and_practices=hnp ) form=HabitsPUCForm() linked=ExtractedHabitsAndPracticesToPUC.objects.filter( extracted_habits_and_practices=hnp).values('PUC') hnp_puc=PUC.objects.filter(pk__in", "label": 0}, {"snippet_id": 56747, "code": " QueryDict from django.conf import settings from django.utils import timezone from django_xhtml2pdf.utils import generate_pdf @login_required() def concept_delete(request, *args, **kwargs): extra_context", "label": 0}, {"snippet_id": 1505, "code": ".st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <", "label": 0}, {"snippet_id": 77415, "code": "(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers processing done\") return layers_by_name class GEELayer(object): \"", "label": 0}, {"snippet_id": 22422, "code": "\"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers", "label": 0}, {"snippet_id": 39359, "code": "'weight_fraction_type', 'report_funcuse', 'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document(self)", "label": 0}, {"snippet_id": 64740, "code": " instr_globals={ k: globals()[k] for k in global_whitelist if k in globals() } instr_globals['__name__']=name instr_globals['__builtins__']={ k: __builtins__.__dict__[k] for k in builtins_whitelist if k in", "label": 0}, {"snippet_id": 48496, "code": " product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form", "label": 0}, {"snippet_id": 81791, "code": " **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category", "label": 0}, {"snippet_id": 74008, "code": "-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models -helper classes -access checks -redirect handlers and should not define: -templates -url names", "label": 0}, {"snippet_id": 61427, "code": "(self): \"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[]", "label": 0}, {"snippet_id": 42176, "code": "{DataGroup.objects.first().id}/' response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-trash\"></span>' self.assertIn(span, response, 'Trash button should be present if not matched", "label": 0}, {"snippet_id": 81062, "code": ".seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if", "label": 0}, {"snippet_id": 11766, "code": " state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), ", "label": 0}, {"snippet_id": 9321, "code": ") }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value", "label": 0}, {"snippet_id": 19967, "code": ")) for j in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources", "label": 0}, {"snippet_id": 52878, "code": ": self.request.user.user_type, 'message': instance.text, 'file_name': os.path.basename(urlparse(instance.attachment.path).path) if instance.attachment else None, 'file_link': instance.file_download_link", "label": 0}, {"snippet_id": 65799, "code": ".BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button.connect(\"clicked\", self.on_tab_close_button_clicked, page_instance) close_button", "label": 0}, {"snippet_id": 78853, "code": " ID has not been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._(", "label": 0}, {"snippet_id": 21319, "code": " the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool): If true, then we expect the process to be alive and will raise", "label": 0}, {"snippet_id": 66306, "code": ".get_object(\"password_unlock_entry\") password_unlock_entry.connect(\"activate\", self.on_password_unlock_button_clicked) password_unlock_entry.connect(\"icon-press\", self.on_password_unlock_entry_secondary_clicked)", "label": 0}, {"snippet_id": 20345, "code": " this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None", "label": 0}, {"snippet_id": 78778, "code": " be risen if some of these parameters are invalid. Data QLD modification Will send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of", "label": 0}, {"snippet_id": 7714, "code": " login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request)", "label": 0}, {"snippet_id": 54167, "code": ".search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=name, politician=politician) else: return render_template('politician_notfound.html', q=name) \"\"\"Search", "label": 1}, {"snippet_id": 59285, "code": " ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table or custom query \"\"\"", "label": 0}, {"snippet_id": 18319, "code": "(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email':self.email}) \t\tif(document_email!=None): \t\t\terror=\"Email exists already\" \t\treturn error \t\"\"\" do_insert(): ", "label": 1}, {"snippet_id": 80807, "code": " def toggle_thin_etalon_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} thin etalon.\") self.lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked", "label": 0}, {"snippet_id": 48548, "code": "' in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect('link_product_list', pk=doc.data_group.pk) else: pass return render(request, template_name,{'document'", "label": 0}, {"snippet_id": 30054, "code": "=Column(String(450),nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey", "label": 1}, {"snippet_id": 9432, "code": " been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning", "label": 0}, {"snippet_id": 36240, "code": " django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def setUp", "label": 0}, {"snippet_id": 23834, "code": "=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return", "label": 0}, {"snippet_id": 47486, "code": " data_source_delete(request, pk, template_name=('data_source/' 'datasource_confirm_delete.html')): datasource=get_object_or_404(DataSource, pk=pk) if request.method=='POST': datasource.delete() return redirect", "label": 0}, {"snippet_id": 6764, "code": "', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash('Your account is", "label": 0}, {"snippet_id": 30547, "code": ".id def getUserInfo(user_id): user=session.query(User).filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user.id except: return", "label": 1}, {"snippet_id": 4263, "code": ".get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains", "label": 0}, {"snippet_id": 31561, "code": ", projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/$', project, name='project'), url(r'^project", "label": 0}, {"snippet_id": 12389, "code": "=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise", "label": 0}, {"snippet_id": 56533, "code": "/dynamic.link/link={}&other=param') \\ .when_call_root_redirect() \\ .then_response_should_be_a_redirect_to('http://dynamic.link/link=http://pachatary.com/&other=param') def test_when_there_is_no_dynamic_link_returns_deep_link", "label": 1}, {"snippet_id": 1985, "code": "<body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\"", "label": 0}, {"snippet_id": 10849, "code": " HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\"", "label": 0}, {"snippet_id": 79066, "code": "'accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail", "label": 1}, {"snippet_id": 27979, "code": " extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time", "label": 0}, {"snippet_id": 64045, "code": "'POST']) @MarshalWith(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest. \"\"\" eppn", "label": 0}, {"snippet_id": 18239, "code": " \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web", "label": 1}, {"snippet_id": 25146, "code": ") % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix", "label": 0}, {"snippet_id": 57424, "code": "=\"{}.pdf\"'.format(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return", "label": 0}, {"snippet_id": 65933, "code": " tab, pagenum): headerbar=tab.get_headerbar() self.set_titlebar(headerbar) def on_save_check_button_toggled(self, check_button, db): if check_button.get_active(): self.databases_to_save.append(db) else:", "label": 0}, {"snippet_id": 84131, "code": "(**article_args) except ArticleClass.DoesNotExist: article=None if request.method=='POST': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request.user", "label": 1}, {"snippet_id": 33841, "code": " from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user", "label": 0}, {"snippet_id": 33671, "code": " ethylparaben_stats['products_n'], 'There should now be 1 product \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for", "label": 0}, {"snippet_id": 37241, "code": ".ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def", "label": 0}, {"snippet_id": 23012, "code": " of an exception thrown by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines", "label": 0}, {"snippet_id": 83584, "code": "() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug=None, group_slug_field=None, group_qs=None): group=None if group_slug is not None: group=get_object_or_404(group_qs", "label": 0}, {"snippet_id": 64643, "code": "'NotImplemented', 'NotImplementedError', 'object', 'oct', 'ord', 'OSError', 'OverflowError', '__package__', 'PendingDeprecationWarning', 'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', ", "label": 0}, {"snippet_id": 18863, "code": "\t\tdebug=True, \t\tasync_db=async_db, \t\tsync_db=sync_db, \t\t**settings \t) \thttp_server=tornado.httpserver.HTTPServer(application) \thttp_server.listen(options.port) \ttornado.ioloop.IOLoop.instance().start()", "label": 0}, {"snippet_id": 12168, "code": ".get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer", "label": 0}, {"snippet_id": 57756, "code": " status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()] return round( len(filter(lambda x:", "label": 0}, {"snippet_id": 22871, "code": " def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\"", "label": 0}, {"snippet_id": 81974, "code": " queryset=JustURL.objects.all() form_class=JustULRUpdateForm template_name='url-update-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html'", "label": 0}, {"snippet_id": 32111, "code": " The value of self.char. ''' self.position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from", "label": 0}, {"snippet_id": 30196, "code": " return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']) def gconnect(): if request.args.get('state') !=login_session['state']: response=make_response(json.dumps('Invalid", "label": 1}, {"snippet_id": 11686, "code": ":[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language", "label": 0}, {"snippet_id": 25646, "code": " try_to_create_directory) logger=logging.getLogger(__name__) class Node(object): \"\"\"An encapsulation of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes:", "label": 0}, {"snippet_id": 5463, "code": ".locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def", "label": 0}, {"snippet_id": 15427, "code": ".input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command': field.name", "label": 0}, {"snippet_id": 59633, "code": "=specified but not database=\" databases=self._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases.get(database) or{}) if table is not None: table_metadata", "label": 0}, {"snippet_id": 35333, "code": " doc.document_type, 'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type", "label": 0}, {"snippet_id": 57966, "code": "\"Here is some description\", \"title\": \"Title\" } }, \"invite_somebody\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_thread\":{ \"done\": false, \"settings\":{ \"html\": \"\",", "label": 0}, {"snippet_id": 56121, "code": " if len(dynamic_link) > 0: link=dynamic_link.format('{}/'.format(settings.PUBLIC_DOMAIN)) else: link='{}/'.format(settings.APP_DEEPLINK_DOMAIN) response=HttpResponse('', status=302) response['Location'", "label": 1}, {"snippet_id": 42362, "code": "\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co", "label": 0}, {"snippet_id": 6495, "code": "\"CSRF token mismatch\") return self.oidc_error() flow=self.flow_for_request() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token):", "label": 0}, {"snippet_id": 59680, "code": " in item: return item[key] return None else: m={} for item in search_list: m.update(item) return m def plugin_config( self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin", "label": 0}, {"snippet_id": 29632, "code": "/<string:tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all() else: split=tags.split(' ') posts=[] for s in split: results=Post.query.filter(Post.tags.any(name=s)) posts.extend(results", "label": 0}, {"snippet_id": 35493, "code": "=BulkPUCForm(request.POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter", "label": 0}, {"snippet_id": 13327, "code": ".djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as", "label": 0}, {"snippet_id": 14944, "code": "{ 'x':[], 'y':[] } } dates=[key for key in values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$', name): attrs=name.split", "label": 0}, {"snippet_id": 61876, "code": "): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just checking for", "label": 0}, {"snippet_id": 29379, "code": ".before_request def before_request(): g.user=current_user @auth.route('/test') def test(): if current_user.is_authenticated: return str(current_user.username) +str(current_user.user_id) return \"not logged in \" +str", "label": 1}, {"snippet_id": 48966, "code": ".get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' ", "label": 0}, {"snippet_id": 27190, "code": " this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker. java_worker_options(str):", "label": 0}, {"snippet_id": 41383, "code": " dd_child_model =get_extracted_models(dd.data_group.group_type.code)[1] childform_model=child_formset.__dict__.get('queryset').__dict__.get('model') self.assertEqual(dd_child_model, childform_model) def", "label": 0}, {"snippet_id": 66193, "code": "=self.builder.get_object(\"password_unlock_stack_page\") keyfile_unlock_stack_page=self.builder.get_object(\"keyfile_unlock_stack_page\") composite_unlock_stack_page=self.builder.get_object(\"composite_unlock_stack_page", "label": 0}, {"snippet_id": 33382, "code": " import * from dashboard.tests.loader import fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard def setUp(self): self.client=Client()", "label": 0}, {"snippet_id": 47775, "code": ") for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'", "label": 0}, {"snippet_id": 65725, "code": ".copy(new_database, Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self.database_manager=DatabaseManager( self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 10267, "code": "'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, ", "label": 0}, {"snippet_id": 25725, "code": " shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True", "label": 0}, {"snippet_id": 47739, "code": "').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField(", "label": 0}, {"snippet_id": 19377, "code": " process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a", "label": 1}, {"snippet_id": 79020, "code": " ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._(", "label": 0}, {"snippet_id": 27961, "code": "(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\"", "label": 0}, {"snippet_id": 43295, "code": " def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted", "label": 0}, {"snippet_id": 60819, "code": ").__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` ", "label": 0}, {"snippet_id": 30099, "code": "\nfrom flask import Flask, render_template, request, redirect, jsonify, url_for, flash from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from database_setup import Grudget, Base", "label": 0}, {"snippet_id": 81156, "code": ".sudo().search([('subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly')", "label": 0}, {"snippet_id": 38080, "code": ") kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='", "label": 0}, {"snippet_id": 83455, "code": "=False def save(self, *args, **kwargs): editor_ip=self.cleaned_data['user_ip'] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor',", "label": 0}, {"snippet_id": 22100, "code": " timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided", "label": 0}, {"snippet_id": 57753, "code": " get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()", "label": 0}, {"snippet_id": 76600, "code": "=1002&SERVICE=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching tiles\") logger.debug(", "label": 0}, {"snippet_id": 41368, "code": ".objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd, EXTRA) extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model =get_extracted_models", "label": 1}, {"snippet_id": 12875, "code": ", cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order", "label": 0}, {"snippet_id": 65348, "code": " self.set_titlebar(self.headerbar) def set_headerbar(self): self.set_titlebar(self.headerbar) def get_headerbar(self): return self.headerbar def custom_css(self): screen=Gdk.Screen.get_default() css_provider", "label": 0}, {"snippet_id": 12976, "code": " for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user", "label": 0}, {"snippet_id": 80308, "code": "') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action.setCheckable(True) self.lock_fast_piezo_action=lock_menu", "label": 0}, {"snippet_id": 16016, "code": " methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user,", "label": 0}, {"snippet_id": 67656, "code": "=self.object_list.count() return context def get_queryset(self): pk=self.kwargs['pk'] query=Attribute.objects.filter(event=pk).order_by('id') category=self.request.GET.get('category') type=self.request", "label": 0}, {"snippet_id": 37661, "code": ": class Meta(ExtractedCPCatForm.Meta): fields=ExtractedCPCatForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num', 'cpcat_code'] class ExtractedHHDocForm(ExtractedTextForm): class Meta: model=ExtractedHHDoc", "label": 0}, {"snippet_id": 24387, "code": " ray_constants from ray.services import get_ip_address from ray.services import get_port import ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log", "label": 1}, {"snippet_id": 57791, "code": "(use_secondary=True).find_one(find_crit) if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{'$set':{ step: True }}, upsert=True) ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 41540, "code": " have one more forms' ' than instances') self.assertEqual(num_forms, children +1, error) else: error=(f'{model.__module__} should have the same number' ' of forms as instances') self.assertEqual(num_forms", "label": 0}, {"snippet_id": 76170, "code": " version_slug: full_path=self.get_full_path(path, language, version_slug) if full_path==self.from_url: log.debug('Redirecting %s', self) return self.to_url if '$rest' in self.from_url: match=self.from_url", "label": 1}, {"snippet_id": 71617, "code": " s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req", "label": 0}, {"snippet_id": 62764, "code": " :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str \"\"\" session_id=self.add_outstanding_query", "label": 0}, {"snippet_id": 81715, "code": ".models import Post def home(request): posts=Post.objects.order_by('pub_date') return render(request, 'posts/home.html',{'posts':posts}) def post_details(request, post_id): return render(request, 'posts", "label": 1}, {"snippet_id": 66709, "code": " password_unlock_entry.set_text(\"\") composite_unlock_entry.set_text(\"\") def show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context=unlock_failed_box.get_style_context", "label": 0}, {"snippet_id": 49270, "code": " return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm,", "label": 0}, {"snippet_id": 47121, "code": ") if created: extext.doc_date='please add...' ExtractedTextForm, HPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST", "label": 0}, {"snippet_id": 53288, "code": ".CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep', ) -> dict: \"\"\" :param project: :param step: :return: \"\"\" module_name=step.definition.name.rsplit('", "label": 0}, {"snippet_id": 63308, "code": ".redis_instance.conn.set(sessid, json.dumps({'v1':{'id': '0'}})) eppn=self.test_user_data['eduPersonPrincipalName'] with self.session_cookie(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class", "label": 0}, {"snippet_id": 35081, "code": ".models import Max class FilteredLabelWidget(LabelWidget): def tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False)", "label": 0}, {"snippet_id": 27484, "code": ". Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None: raise ValueError(\"Should not specify `java-worker-options` \" \"without providing `include-java`", "label": 0}, {"snippet_id": 28729, "code": ".StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and", "label": 1}, {"snippet_id": 4987, "code": ".locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=", "label": 0}, {"snippet_id": 78246, "code": " updates=0 for org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])", "label": 0}, {"snippet_id": 45805, "code": "=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX", "label": 0}, {"snippet_id": 43579, "code": " disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser", "label": 1}, {"snippet_id": 24727, "code": " type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address", "label": 1}, {"snippet_id": 64726, "code": "'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points, test_case_objs, vlevel=0): deductions=[] points_per_case=points // len(test_case_objs) instr_globals={ k:", "label": 0}, {"snippet_id": 51580, "code": ".build_condition, 'default_platform':default_platform, 'get_vsvars_environment':get_vsvars_environment, 'SshSession':SshSession, 'select_optional_steps':builder.select_optional_steps, 'modify_optional_steps'", "label": 0}, {"snippet_id": 28796, "code": " with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return", "label": 0}, {"snippet_id": 7565, "code": " from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps", "label": 0}, {"snippet_id": 75323, "code": " except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) return render(request, 'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods(['POST", "label": 0}, {"snippet_id": 34827, "code": "'attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for", "label": 1}, {"snippet_id": 17785, "code": "=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp) > 6 * 3600: return flask.abort(404) sha1_password_hash_hash=binascii.hexlify(sha1_hash(user.password_hash", "label": 0}, {"snippet_id": 42728, "code": " the beginning') response=self.client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client", "label": 0}, {"snippet_id": 16218, "code": ".user) PlayerRoundFormset=formset_factory(PlayerRoundForm, extra=2, formset=BasePlayerRoundFormset) if round_num: r=get_round_or_404(t, round_num) round_set=t.round_set.filter(pk=r.pk) else: round_set=t", "label": 0}, {"snippet_id": 6117, "code": "(request.url) if self.time() >=id_token['exp']: try: credentials=self.credentials_store[id_token['sub']] except KeyError: logger.debug(\"Expired ID token, credentials missing\", exc_info=True) return self", "label": 0}, {"snippet_id": 75722, "code": "=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return error_response except Exception: import traceback logger", "label": 0}, {"snippet_id": 53006, "code": ".factory.get('/fake-url') request.user=self.user self.view.request=request def test_get_success_url(self): self.assertEqual( self.view.get_success_url(), '/users/~update/ ) def test_get_object(self): self", "label": 0}, {"snippet_id": 23411, "code": "\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def", "label": 0}, {"snippet_id": 12376, "code": ") context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received", "label": 0}, {"snippet_id": 49384, "code": ".get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk, template_name=('data_document/' 'data_document_form.html", "label": 0}, {"snippet_id": 63969, "code": ": abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user", "label": 0}, {"snippet_id": 52351, "code": "\"Session updated with board{}.\".format(board_id) return \"HTTP-status-code: 200\" @app.route(\"/claim-project\", methods=[\"POST\"]) def assign_user_to_project(): \"\"\"Update database with user_id for the project", "label": 0}, {"snippet_id": 15284, "code": " get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'], model['model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model(name): models=load_json(", "label": 0}, {"snippet_id": 1234, "code": "-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header", "label": 0}, {"snippet_id": 65058, "code": " valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', 'eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) obj=None if not obj:", "label": 0}, {"snippet_id": 23186, "code": " driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO", "label": 0}, {"snippet_id": 39134, "code": ", 'report_funcuse'] if self.type=='FU': return extract_fields if self.type=='CO': return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type", "label": 0}, {"snippet_id": 34629, "code": " chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated", "label": 0}, {"snippet_id": 10170, "code": ") HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth", "label": 0}, {"snippet_id": 69986, "code": "(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath", "label": 1}, {"snippet_id": 38135, "code": ", through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC')", "label": 0}, {"snippet_id": 56922, "code": "(PaginationMixin, ListView): template_name='transactions/concept_list.html' model=BaseConcept context_object_name='concepts' paginate_by=8 queryset=None header=gettext_lazy('Concepts') request=None filter", "label": 0}, {"snippet_id": 62240, "code": " validate_cache_control_header(page, 'no-transform') def validate_private(page): return validate_cache_control_header(page, 'private') def validate_no_referrer_policy(page): return validate_security_header(page,", "label": 0}, {"snippet_id": 40772, "code": " DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts(self): response=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To", "label": 0}, {"snippet_id": 77920, "code": ") self.patch_organisation_users(org['id'], users) else: print('-Nothing to update for organisation %s' % org['name']) print('-------------------------') return \"COMPLETED. Total updates %s\\n\" % updates", "label": 0}, {"snippet_id": 34096, "code": " parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML", "label": 0}, {"snippet_id": 22475, "code": " span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile", "label": 1}, {"snippet_id": 58542, "code": " ctms.models import Invite from chat.models import Chat, EnrollUnitCode from accounts.models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage from core.common", "label": 0}, {"snippet_id": 62470, "code": "-for-termination', session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code", "label": 0}, {"snippet_id": 6477, "code": " code=request.args['code'] except(KeyError, ValueError): logger.debug(\"Can't retrieve CSRF token, state, or code\", exc_info=True) return self.oidc_error() if csrf_token !=session_csrf_token: logger.debug", "label": 0}, {"snippet_id": 518, "code": ". You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create", "label": 0}, {"snippet_id": 29347, "code": " render_template, flash from flask_login import login_user, logout_user, current_user from flask_security import login_required from benwaonline.database import db from benwaonline.oauth import twitter from", "label": 1}, {"snippet_id": 14264, "code": " service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 48826, "code": ") form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product", "label": 0}, {"snippet_id": 74044, "code": " import HttpResponse from django.shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin", "label": 0}, {"snippet_id": 37723, "code": ").__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit();' }) def include_extract_form(dg): '''Returns the ExtractionScriptForm", "label": 0}, {"snippet_id": 5138, "code": ") self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"", "label": 0}, {"snippet_id": 8962, "code": " from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts", "label": 0}, {"snippet_id": 45976, "code": ", pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects.filter(document__in=docs) page=request.GET.get('page", "label": 0}, {"snippet_id": 51022, "code": " not in steps self._disabled_options=set(s[1:] for s in steps if s.startswith(\"-\")) self._enabled_options=set(s[1:] for s in steps if s.startswith(\"+\")) self._enabled_options=self._enabled_options.union", "label": 0}, {"snippet_id": 14072, "code": ", redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else", "label": 0}, {"snippet_id": 62648, "code": " Add a SAML2 authentication query to the queries cache. To be used before accessing the assertion consumer service. :param came_from: url to redirect back the client after finishing with the authn service", "label": 0}, {"snippet_id": 10571, "code": "(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode", "label": 0}, {"snippet_id": 12576, "code": ".is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled", "label": 0}, {"snippet_id": 72747, "code": "=token.user user.email_confirmed=True user.save() token.delete() return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user", "label": 1}, {"snippet_id": 16961, "code": " data.append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(the_round=r, initial=data) context={'tournament': t, 'round", "label": 0}, {"snippet_id": 8811, "code": " True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), ", "label": 0}, {"snippet_id": 71089, "code": " is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len", "label": 0}, {"snippet_id": 18257, "code": " class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself.render('signup.html',error='') \t \t\"\"\" check_if_exists(", "label": 1}, {"snippet_id": 27980, "code": "({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time\": self.start_time", "label": 0}, {"snippet_id": 81198, "code": "'subscription_partner', '=', partner.id)]) if ai_monthly.subscription_is_active: return; if event_cat=='bokszaktraining': if bz_tickets: bz_tickets.subscription_counter +=subscription_update_counter if", "label": 1}, {"snippet_id": 37375, "code": "=ExtractedText fields=['prod_name', 'data_document', 'qa_checked'] class ProductLinkForm(forms.ModelForm): required_css_class='required' document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(),", "label": 0}, {"snippet_id": 68277, "code": ".order_by('-datetime') keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=", "label": 0}, {"snippet_id": 17520, "code": "=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('login.html', form=form) @bp.route('/logout') def logout(): flask.g.user=None flask.session.permanent", "label": 0}, {"snippet_id": 289, "code": " directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body", "label": 0}, {"snippet_id": 32170, "code": "=='>': start=self.position if self.read()=='>': self.read() return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token", "label": 0}, {"snippet_id": 84379, "code": "']) def article_history(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki', extra_context=None, is_member=None", "label": 0}, {"snippet_id": 21560, "code": "): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the", "label": 0}, {"snippet_id": 21870, "code": " listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus", "label": 0}, {"snippet_id": 81065, "code": " registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner", "label": 0}, {"snippet_id": 14566, "code": "': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers", "label": 0}, {"snippet_id": 60877, "code": "%s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status", "label": 0}, {"snippet_id": 20843, "code": " If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path):", "label": 0}, {"snippet_id": 21561, "code": " Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log", "label": 0}, {"snippet_id": 20088, "code": " object_table_objects.items(): task_id_bin=ray._raylet.compute_task_id(object_id).binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin)", "label": 0}, {"snippet_id": 2001, "code": "\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template", "label": 0}, {"snippet_id": 65645, "code": ".CANCEL: self.filechooser_creation_dialog.close() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog.get_filename()): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal", "label": 0}, {"snippet_id": 25415, "code": "): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{", "label": 0}, {"snippet_id": 66499, "code": "=None, keyfile=keyfile_path) self.open_database_page() self.logging_manager.log_debug(\"Database successfully opened with keyfile\") except(OSError, IndexError): self.show_unlock_failed_revealer() keyfile_unlock_select_button", "label": 0}, {"snippet_id": 37933, "code": "''' group_type=document.data_group.type parent, child=get_extracted_models(group_type) extracted=hasattr(document, 'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form", "label": 0}, {"snippet_id": 28144, "code": " all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type", "label": 0}, {"snippet_id": 18217, "code": " import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll be used later when @tornado.web.authenticated", "label": 1}, {"snippet_id": 8766, "code": "'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 83251, "code": " if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers\") for subscriber in self.subscribed_queues: subscriber.put(ret) time.sleep", "label": 0}, {"snippet_id": 38916, "code": "**kwargs) def matched_docs(self): return self.datadocument_set.filter(matched=True).count() def all_matched(self): return all(self.datadocument_set.values_list('matched', flat=True)) def all_extracted(self", "label": 0}, {"snippet_id": 3199, "code": "'LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure", "label": 0}, {"snippet_id": 45076, "code": ".month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count()", "label": 0}, {"snippet_id": 6956, "code": " password_reset(token): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first", "label": 0}, {"snippet_id": 4687, "code": ".test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account", "label": 1}, {"snippet_id": 69935, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 63976, "code": "=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user=authenticate(current_app, session_info) if user is None: current_app", "label": 0}, {"snippet_id": 36693, "code": "{} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count() stats['datadocument_with_extracted_text_percent", "label": 0}, {"snippet_id": 34689, "code": "'curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\", "label": 0}, {"snippet_id": 58487, "code": "\"view_introduction\" } }, onboarding.PREVIEW_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } } status_mock", "label": 0}, {"snippet_id": 78798, "code": " of the data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string", "label": 0}, {"snippet_id": 66633, "code": "() self.logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context", "label": 0}, {"snippet_id": 27357, "code": "._internal_config=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"", "label": 0}, {"snippet_id": 66287, "code": "\"keyfile_unlock_select_button\") keyfile_unlock_select_button.connect(\"clicked\", self.on_keyfile_unlock_select_button_clicked) composite_unlock_select_button=self.builder.get_object(\"composite_unlock_select_button", "label": 0}, {"snippet_id": 45028, "code": " HttpResponse from django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import", "label": 0}, {"snippet_id": 21631, "code": "\"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note", "label": 0}, {"snippet_id": 66968, "code": ".shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.vt import VT from lib.threatminer import ThreatMiner from django.db", "label": 1}, {"snippet_id": 63697, "code": "', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request()", "label": 0}, {"snippet_id": 66228, "code": "(keyfile_unlock_stack_page, \"icon-name\", \"mail-attachment-symbolic\") stack.add_titled(composite_unlock_stack_page, \"composite_unlock\", \"Composite\") stack.child_set_property(composite_unlock_stack_page, \"icon-name\", \"insert", "label": 0}, {"snippet_id": 36659, "code": " import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.models import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y", "label": 0}, {"snippet_id": 20882, "code": ", redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards=self._ray_params", "label": 1}, {"snippet_id": 15013, "code": "']=model_name if re.search('input,source_type:', name): attrs=name.split(',') (ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name", "label": 0}, {"snippet_id": 39408, "code": " if hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_cas else: return None @property def true_chemname(self): if hasattr(self, 'curated_chemical'", "label": 0}, {"snippet_id": 39472, "code": " null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__(self): return self.raw_chem_name @classmethod def detail_fields(cls):", "label": 0}, {"snippet_id": 50559, "code": ".lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False def release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only one build at a", "label": 0}, {"snippet_id": 344, "code": "(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def", "label": 0}, {"snippet_id": 42487, "code": "/extractionscript/{pk}/') self.assertEqual(response.status_code,200) qa_group=QAGroup.objects.get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group", "label": 0}, {"snippet_id": 4903, "code": ".locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self", "label": 0}, {"snippet_id": 83732, "code": " def is_mine(self, request): return self.user_ip==get_real_ip(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise", "label": 0}, {"snippet_id": 12297, "code": ".POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound", "label": 0}, {"snippet_id": 70270, "code": " from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils", "label": 0}, {"snippet_id": 60581, "code": "><as_format:(\\.jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash(request, original_response): if original_response.status==404 and request.path", "label": 0}, {"snippet_id": 3469, "code": " self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\"", "label": 0}, {"snippet_id": 11974, "code": " import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie", "label": 0}, {"snippet_id": 65929, "code": ") def on_tab_switch(self, notebook, tab, pagenum): headerbar=tab.get_headerbar() self.set_titlebar(headerbar) def on_save_check_button_toggled(self, check_button, db): if check_button.get_active(): self", "label": 0}, {"snippet_id": 27884, "code": " value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key", "label": 0}, {"snippet_id": 57033, "code": " available concepts that can be added to the given transaction. :param employee: The employee executing the transaction(current user) :param transaction: The open transaction :return: A list of dictionaries. \"", "label": 0}, {"snippet_id": 6385, "code": "!=self.flow.client_id: logger.error('Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']): logger.error('Token has expired') return False if id_token['iat'] <(self.time(", "label": 0}, {"snippet_id": 23572, "code": " runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy(", "label": 0}, {"snippet_id": 40463, "code": "(null=True, blank=True) parent=models.ForeignKey('Taxonomy', on_delete=models.CASCADE, null=True, blank=True) source=models.ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField", "label": 0}, {"snippet_id": 60128, "code": "] for fts in(\"FTS5\", \"FTS4\", \"FTS3\"): try: conn.execute( \"CREATE VIRTUAL TABLE v{fts} USING{fts}(data)\".format(fts=fts) ) fts_versions.append(fts) except sqlite3.OperationalError: continue datasette_version", "label": 0}, {"snippet_id": 47728, "code": "=True)).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate", "label": 0}, {"snippet_id": 19799, "code": "\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port,", "label": 1}, {"snippet_id": 52130, "code": "=request.form.get(\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam", "label": 0}, {"snippet_id": 23126, "code": " error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the", "label": 0}, {"snippet_id": 7067, "code": ".') return render_template(\"auth/change_email.html\", form=form) @auth.route('/change-email/<token>') @login_required def change_email(token): if current_user.change_email(token): session['auth_token']=current_user", "label": 0}, {"snippet_id": 50646, "code": ".environ)\"' %(vsvars32, python), stdout=subprocess.PIPE, shell=True) stdout, _=process.communicate() exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode", "label": 0}, {"snippet_id": 11024, "code": ", render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer", "label": 0}, {"snippet_id": 64279, "code": ".form.get('RelayState', next_page) if 'SAMLResponse' in request.form: current_app.logger.debug('Receiving a logout response from the IdP') response=client.parse_logout_request_response( request.form['SAMLResponse", "label": 0}, {"snippet_id": 5291, "code": " redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 58788, "code": "=request.user.instructor) def testers(self): return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request): return self.filter( models.Q(user", "label": 0}, {"snippet_id": 20234, "code": " max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args", "label": 0}, {"snippet_id": 36781, "code": "\\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'), document_count=Count", "label": 0}, {"snippet_id": 83102, "code": " monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__()", "label": 0}, {"snippet_id": 79401, "code": " organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title", "label": 1}, {"snippet_id": 27601, "code": " this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used", "label": 0}, {"snippet_id": 26621, "code": ": Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the", "label": 0}, {"snippet_id": 1741, "code": " django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files", "label": 0}, {"snippet_id": 56899, "code": "=form return render(request, 'transactions/concept_edit.html', extra_context) else: form=concept_form(instance=concept) extra_context['form']=form return render(request, 'transactions/concept_edit.html", "label": 0}, {"snippet_id": 5482, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', ", "label": 0}, {"snippet_id": 16311, "code": "(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value", "label": 1}, {"snippet_id": 61006, "code": "\"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 61306, "code": " self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def __init__(self, queue): \"\"", "label": 0}, {"snippet_id": 60178, "code": ", \"compile_options\":[ r[0] for r in conn.execute(\"pragma compile_options;\").fetchall() ], }, } def plugins(self, show_all=False): ps=list(get_plugins(pm)) if not show_all: ps=[p for p in ps if p[\"name\"", "label": 0}, {"snippet_id": 22556, "code": " tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This", "label": 0}, {"snippet_id": 80986, "code": ": for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing registration, set state to cancelled.') registration.state='cancel' subscription_update_counter +=1 self", "label": 0}, {"snippet_id": 35236, "code": "'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat", "label": 0}, {"snippet_id": 71132, "code": " Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return session session.put() if session.user_id is not None", "label": 0}, {"snippet_id": 70473, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"", "label": 0}, {"snippet_id": 46754, "code": "['filename'].split('.')[0] if code=='': errors.append([count, \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type", "label": 0}, {"snippet_id": 64874, "code": " sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of", "label": 0}, {"snippet_id": 41910, "code": "{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create", "label": 0}, {"snippet_id": 40929, "code": " import * @override_settings(ALLOWED_HOSTS=['testserver']) class DataDocumentDetailTest(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 79859, "code": " not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string", "label": 0}, {"snippet_id": 5398, "code": "(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self):", "label": 0}, {"snippet_id": 46673, "code": "=['filename','title','document_type', 'url','organization'] if not table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames", "label": 0}, {"snippet_id": 16458, "code": ", round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) doubles=7 -sitters context={'tournament", "label": 0}, {"snippet_id": 76148, "code": ".get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and", "label": 0}, {"snippet_id": 45236, "code": ": current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate", "label": 0}, {"snippet_id": 60919, "code": " Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self", "label": 0}, {"snippet_id": 31945, "code": " shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline(self): ''' Read a command from stdin to execute. Returns: A raw string read from stdin. ''", "label": 0}, {"snippet_id": 64593, "code": "'__doc__', 'Ellipsis', 'enumerate', 'EnvironmentError', 'EOFError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'filter', 'float', 'FloatingPointError', 'format', 'frozenset', 'FutureWarning", "label": 0}, {"snippet_id": 44974, "code": " test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f", "label": 0}, {"snippet_id": 56423, "code": "'a_b.c') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/p/a_b.c&other=param' '&st=%40a_b.c&sd=my+info&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link", "label": 0}, {"snippet_id": 17463, "code": " return flask.redirect(flask.url_for('account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '<strong>Login failed!</strong> Account is not activated.'), 'danger') return", "label": 0}, {"snippet_id": 17129, "code": ".player=field.player try: i.full_clean() except ValidationError as e: f.add_error(None, e) i.delete() return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset", "label": 0}, {"snippet_id": 77746, "code": ": version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes' in pkg: notes=pkg['notes'] or pkg['title'] if 'update_frequency", "label": 0}, {"snippet_id": 34889, "code": ": data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is", "label": 0}, {"snippet_id": 19788, "code": " server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password", "label": 1}, {"snippet_id": 1790, "code": " the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like", "label": 0}, {"snippet_id": 81350, "code": ".date_open, reverse=False) for registration in reg_ids: if registration.state=='open': if counter==1: attendee_list +=registration.partner_id.sudo().name else: attendee_list +=', ' +registration.partner_id.sudo", "label": 0}, {"snippet_id": 73746, "code": "': PositionText}) return render(request, 'createposition/importposition.html', {'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText': PositionText}) if request.POST.get(\"save", "label": 0}, {"snippet_id": 2781, "code": "'OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name)", "label": 1}, {"snippet_id": 74274, "code": ".is_valid(): form.save() return True else: return False def _passphrase_next_url(self, request): next_url=None if \"next\" in request.GET: if re.search(r\"^/[\\W/-]*\", request.GET[\"next\"]): next_url=request.GET", "label": 1}, {"snippet_id": 7434, "code": ": csr=CSR.find_by_username(g.jwt_oidc_token_info['preferred_username']) ninety_day_filter=datetime.now() -timedelta(days=90) if csr.liaison_designate==1: exams=Exam.query.filter(Exam.deleted_date.is_(None", "label": 0}, {"snippet_id": 75259, "code": " candidate, 'person_form': person_form, 'committee_member_form': committee_member_form} return render(request, 'etd_app/candidate_committee.html', context) @login_required @require_http_methods(['POST'", "label": 0}, {"snippet_id": 51542, "code": " find scp(or pscp) in the path.\" subprocess.check_call([program] +list(args)) def run(buildname=\"build\", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies,", "label": 0}, {"snippet_id": 24865, "code": "=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config", "label": 1}, {"snippet_id": 3286, "code": " callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView", "label": 0}, {"snippet_id": 60815, "code": ": str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise", "label": 0}, {"snippet_id": 52308, "code": "=request.form.get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view", "label": 1}, {"snippet_id": 70011, "code": ".st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath,", "label": 0}, {"snippet_id": 79573, "code": ".init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict", "label": 0}, {"snippet_id": 57008, "code": "'page']) > 0: self.is_filtered=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by('-id') return self.queryset", "label": 0}, {"snippet_id": 9168, "code": "\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 75115, "code": " below.') if thesis.title !=form.cleaned_data['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve removed. Please make sure your title is correct in the information section", "label": 0}, {"snippet_id": 54942, "code": " Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter,problem_number=key \t\tfor item in value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\", \"+str(book_edition", "label": 1}, {"snippet_id": 12500, "code": "=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string'", "label": 0}, {"snippet_id": 32290, "code": ".read() return Token(TokenType.WORD, ''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy", "label": 0}, {"snippet_id": 77338, "code": " all the layers in a database. \"\"\" layers_by_name={} server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(\"projection\"): server_vars[\"dbType\"]=\"gemap\" else", "label": 0}, {"snippet_id": 66446, "code": " keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.get_style_context().remove_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button", "label": 0}, {"snippet_id": 63661, "code": "(self): eppn='hubba-bubba' came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app", "label": 0}, {"snippet_id": 55213, "code": "\t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self", "label": 0}, {"snippet_id": 69367, "code": "[ 'gcc' ]) conda.ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[ 'jupyterhub==0.9.4', 'notebook==5.7.0', 'jupyterlab==0.35.3', 'nteract-on-jupyter=", "label": 1}, {"snippet_id": 54739, "code": "\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student", "label": 1}, {"snippet_id": 15820, "code": "].pop_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run", "label": 0}, {"snippet_id": 73873, "code": "\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request.POST", "label": 0}, {"snippet_id": 18779, "code": "('postlogin.html') \t\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule", "label": 1}, {"snippet_id": 24109, "code": " import print_function import threading import traceback import redis import ray from ray import ray_constants from ray import cloudpickle as pickle from ray import profiling from ray import utils class", "label": 1}, {"snippet_id": 62299, "code": " login_action(session_info, user): \"\"\" Upon successful login in the IdP, store login info in the session and redirect back to the app that asked for authn. :param session_info: the SAML session info :type", "label": 0}, {"snippet_id": 44804, "code": "(note.qa_notes, None) note.qa_notes=\"A short QA note\" try: note.clean() except Exception as ex: template=\"An exception of type{0} occurred. Arguments:\\n{1!r}\" message=template.format(type(ex).__name__,", "label": 0}, {"snippet_id": 40286, "code": ".0f}%\".format(pct) def get_pct_checked_numeric(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count() / count * 100)) return pct def qa_button_text", "label": 0}, {"snippet_id": 6408, "code": " -self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: logger.error('Invalid google apps domain", "label": 0}, {"snippet_id": 50779, "code": " def set_optional(self, optional): self.is_optional=optional def test_conditions(self, env): if len(self.condition_sets)==0: return True for conditions in self.condition_sets: if all(key in env and env", "label": 0}, {"snippet_id": 69231, "code": ". We install all python packages from PyPI as much as possible in the hub environment. A lot of spawners & authenticators do not have conda-forge packages, but do have pip packages. Keeping all python packages", "label": 0}, {"snippet_id": 21503, "code": " process.wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True): \"\"\"Kill the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already dead. ", "label": 0}, {"snippet_id": 69432, "code": "['users']['admin']=list(admins) with open(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times", "label": 0}, {"snippet_id": 2946, "code": "(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request", "label": 0}, {"snippet_id": 5895, "code": " not None else time_module.time self.urandom=urandom if urandom is not None else os.urandom if app is not None: self.init_app(app) def init_app(self, app): \"\"\" Do setup that requires a Flask app. \"\"\" self", "label": 0}, {"snippet_id": 32055, "code": "). position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs", "label": 0}, {"snippet_id": 82410, "code": "(r'^category/add/$', CategoryCreateView.as_view(), name='category-create-view'), re_path(r'^categories/$', CategoryListView.as_view(), name='category-list-view'), re_path(r'^detail/category/(?P<pk>(\\d)", "label": 0}, {"snippet_id": 19333, "code": " print_function import argparse import logging import os import redis import time import ray.ray_constants as ray_constants from ray.services import get_ip_address from ray.services import get_port import", "label": 1}, {"snippet_id": 8017, "code": " else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status", "label": 0}, {"snippet_id": 14583, "code": "'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url'", "label": 0}, {"snippet_id": 50141, "code": ".parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(\"/signup\") def renderSignUp():", "label": 0}, {"snippet_id": 45579, "code": " '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type", "label": 0}, {"snippet_id": 35802, "code": " redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer", "label": 0}, {"snippet_id": 49063, "code": " from dashboard.forms import * from dashboard.forms import ExtractedListPresenceTagForm from factotum.settings import EXTRA from dashboard.models import * @login_required() def data_document_detail(request", "label": 0}, {"snippet_id": 84470, "code": "': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read", "label": 0}, {"snippet_id": 53176, "code": ").budget, None) data={'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self", "label": 0}, {"snippet_id": 4698, "code": ".assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username'", "label": 0}, {"snippet_id": 79297, "code": ".warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest", "label": 0}, {"snippet_id": 44402, "code": "=self.live_server_url +f'/datadocument/{doc.pk}/' self.browser.get(dd_url) try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') except NoSuchElementException: self.fail(", "label": 0}, {"snippet_id": 26013, "code": "=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store", "label": 0}, {"snippet_id": 82037, "code": "'category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message})", "label": 0}, {"snippet_id": 57892, "code": " ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT[setting_name] return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on", "label": 0}, {"snippet_id": 82193, "code": " template_name='category-list-view.html' paginate_by=15 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None)", "label": 0}, {"snippet_id": 84761, "code": " function that previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller \"", "label": 0}, {"snippet_id": 73546, "code": "(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def clear_get_data(request): request.GET._mutable", "label": 0}, {"snippet_id": 25753, "code": "\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java", "label": 0}, {"snippet_id": 63936, "code": "(action) current_app.logger.info('Redirecting the user to the IdP for ' +action) return redirect(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service", "label": 0}, {"snippet_id": 58884, "code": ").first() @classmethod def create_new(cls, commit, course, instructor, email, invite_type, enroll_unit_code): user=Invite.search_user_by_email(email) try: old_invite=Invite.get_by_user_or_404( user=user", "label": 0}, {"snippet_id": 64090, "code": ".get_user_by_eppn(eppn) current_app.logger.debug('Logout process started for user{!r}'.format(user)) state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config", "label": 0}, {"snippet_id": 70125, "code": " %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n'", "label": 0}, {"snippet_id": 72049, "code": " Scope.NFS_GANESHA) class NFSGaneshaExports(RESTController): RESOURCE_ID=\"cluster_id/export_id\" def list(self): result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict", "label": 0}, {"snippet_id": 58601, "code": " enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step(onboarding.STEP_2, instructor.user_id) if Course.objects.filter(addedBy=instructor.user).exists", "label": 0}, {"snippet_id": 3111, "code": "(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', ", "label": 0}, {"snippet_id": 27462, "code": " instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers", "label": 0}, {"snippet_id": 1500, "code": "-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 60743, "code": " component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self", "label": 0}, {"snippet_id": 70568, "code": "[ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[", "label": 0}, {"snippet_id": 40383, "code": ": return QAGroup.objects.filter(extraction_script=es).first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es, qa_checked=False", "label": 0}, {"snippet_id": 21429, "code": "\" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if", "label": 0}, {"snippet_id": 52217, "code": "\"Pending my good lady\" @app.route(\"/view-team\") def view_team(): \"\"\"Renders view of team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return", "label": 0}, {"snippet_id": 37107, "code": " 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None) super(DataGroupForm, self).__init__(*args, **kwargs) self.fields['csv", "label": 0}, {"snippet_id": 62077, "code": ".lower(page.headers['Server']) if 'nginx' in server_header or 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server", "label": 0}, {"snippet_id": 77755, "code": " notes=pkg['notes'] or pkg['title'] if 'update_frequency' in pkg: update_frequency=pkg['update_frequency'] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application", "label": 1}, {"snippet_id": 32360, "code": " node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands() self.expect(TokenType.EOF) return root def commands(self):", "label": 0}, {"snippet_id": 63745, "code": ": 'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state", "label": 0}, {"snippet_id": 22326, "code": " **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs", "label": 0}, {"snippet_id": 34992, "code": "'text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id',", "label": 1}, {"snippet_id": 37245, "code": "=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, ", "label": 0}, {"snippet_id": 50925, "code": "\"buildstep\"): f.buildstep=BuildStep(name or f.__name__, f) self._steps.append(f.buildstep) f.buildstep.add_conditions(conditions) return f return decorator_func def build_step(self, name=None, optional", "label": 0}, {"snippet_id": 2343, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding:", "label": 0}, {"snippet_id": 55169, "code": "(self.path) \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath", "label": 0}, {"snippet_id": 79856, "code": ". If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed ", "label": 0}, {"snippet_id": 60470, "code": "\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"/-/inspect<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView", "label": 0}, {"snippet_id": 36523, "code": " To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count", "label": 0}, {"snippet_id": 52289, "code": " without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id=request.form.get(\"team-id\") session[\"team_id", "label": 0}, {"snippet_id": 26014, "code": "=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store(self): \"", "label": 0}, {"snippet_id": 18177, "code": "//example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print \"[-]Domain is invalid\"\r", "label": 1}, {"snippet_id": 22233, "code": " logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java", "label": 0}, {"snippet_id": 7841, "code": "'SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 55553, "code": " Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self)", "label": 0}, {"snippet_id": 36644, "code": " import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models", "label": 0}, {"snippet_id": 63071, "code": "/terminate', force_authn=True) def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba' self.assertEquals(session['eduPersonPrincipalName'], eppn) self.acs('/login'", "label": 0}, {"snippet_id": 53663, "code": ".bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format(err) def flush_all(self", "label": 1}, {"snippet_id": 20020, "code": ")) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver", "label": 0}, {"snippet_id": 70865, "code": " os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime", "label": 0}, {"snippet_id": 896, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure.", "label": 0}, {"snippet_id": 73687, "code": "(request): request.user.positions.add(Position.objects.get( id=request.session['position_id'])) @login_required(login_url='/login/', redirect_field_name=None) def import_position(request): if request.method=", "label": 0}, {"snippet_id": 29003, "code": "(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is", "label": 0}, {"snippet_id": 16574, "code": "), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected", "label": 0}, {"snippet_id": 33654, "code": "(document=dd, product=p) pd.save() dd.refresh_from_db() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(1, ethylparaben_stats['products_n'],", "label": 0}, {"snippet_id": 58743, "code": " core.common import onboarding from core.common.utils import update_onboarding_step from ct.models import Course STATUS_CHOICES=( ('pendind', 'pending'), ('joined', 'joined'), ) TYPE_CHOICES=( ('student',", "label": 0}, {"snippet_id": 14702, "code": " Flask, render_template, request, redirect, url_for, session from flask_bootstrap import Bootstrap from flask_wtf import FlaskForm from flask_login import LoginManager, current_user, login_user, logout_user", "label": 1}, {"snippet_id": 50722, "code": ".rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self", "label": 0}, {"snippet_id": 9011, "code": ".djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login", "label": 0}, {"snippet_id": 51251, "code": "*kwargs): args=flatten_string_list(args) self._check_call(args, env=self._context.env, shell=True, **kwargs) def rsync(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([\"rsync\"] +args", "label": 0}, {"snippet_id": 58714, "code": ".mail import send_mail from django.core.urlresolvers import reverse from django.http.response import Http404 from django.template import loader, Context from accounts.models import Instructor from chat", "label": 0}, {"snippet_id": 62813, "code": ") cookie=response1.headers['Set-Cookie'] return cookie def authn(self, url, force_authn=False): \"\"\" Common code for the tests that need to send an authentication request. This checks that the client is", "label": 1}, {"snippet_id": 62423, "code": " eduid_userdb.User \"\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP", "label": 0}, {"snippet_id": 17983, "code": "', form=form) def redirect_url(): home_url=flask.url_for('main.home') url=flask.request.args.get('next') or \\ flask.request.referrer or \\ home_url if url==flask.request.url: return home_url return url def", "label": 1}, {"snippet_id": 67073, "code": ".getFileBehavior(filehash) tm=ThreatMiner() context['tm_meta']=tm.getMetaFromSample(filehash) context['tm_http']=tm.getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context[", "label": 0}, {"snippet_id": 12290, "code": " HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user", "label": 0}, {"snippet_id": 20366, "code": " is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed", "label": 0}, {"snippet_id": 71764, "code": " user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) user=models.User.query().get() self", "label": 0}, {"snippet_id": 57299, "code": "']=='True': transaction.delete() return redirect('index') if valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return", "label": 0}, {"snippet_id": 42965, "code": "().pk response=self.client.get(f'/qa/extractedtext/{pk}/') self.assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self", "label": 0}, {"snippet_id": 22324, "code": " update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self", "label": 0}, {"snippet_id": 19842, "code": ": self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes", "label": 0}, {"snippet_id": 32641, "code": " the input of another. Args: first: The node to pipe the output from. second: The node to pipe the input into. ''' def __init__(self, first, second): self.first=first self.second=second def execute(self", "label": 0}, {"snippet_id": 62376, "code": "(response) current_app.logger.info('Redirecting user{!r} to{!r}'.format(user, relay_state)) return response @acs_action('change-password-action') def chpass_action(session_info, user): \"\"\" Upon successful", "label": 0}, {"snippet_id": 17246, "code": ": continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/game_score.html', {'tournament': t", "label": 0}, {"snippet_id": 9633, "code": "): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings", "label": 0}, {"snippet_id": 49925, "code": " return redirect('/login?return_url=saveAs&diagram=true') return redirect('/login?return_url=saveAs') else: return render_template('saveFile.html', diagram=diagram) @app.route('/saveAs', methods=['POST'])", "label": 0}, {"snippet_id": 14841, "code": " if db.hlen(key)==0: return None user_data=db.hgetall(key) user=User() user.user_id=user_data['user_id'] user.email=user_data['email'] user.password_hash=generate_password_hash(user_data['password_hash", "label": 0}, {"snippet_id": 24239, "code": " num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key", "label": 0}, {"snippet_id": 81414, "code": ") def _handle_daily_event_repetition(self, old_repeating_event): _logger.info('Handling daily repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00') present=datetime", "label": 1}, {"snippet_id": 73613, "code": ".is_valid(): user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration", "label": 1}, {"snippet_id": 56517, "code": ".response['Location']==url return self class RedirectRootTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_public_domain(", "label": 1}, {"snippet_id": 30058, "code": ",nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget) user_id=Column(Integer, ForeignKey('user.id')) user", "label": 1}, {"snippet_id": 29417, "code": " oauthorize(): if g.user.is_authenticated: return redirect(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback", "label": 1}, {"snippet_id": 32455, "code": " > 0: return RedirectionsHelper(redirs) else: return None def redirection(self): if self.accept(TokenType.REDIRECT_OUT): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(1,(filename", "label": 0}, {"snippet_id": 23975, "code": "=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is used to create a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object", "label": 0}, {"snippet_id": 57369, "code": "([k for k in data.keys() if k !='page']) > 0: self.is_filtered=True self.filter=TransactionFilter(data) self.queryset=self.filter.qs.select_related('cashclose')\\ .prefetch_related('concepts__value__currency", "label": 0}, {"snippet_id": 74237, "code": ".request.POST[\"key\"] except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False", "label": 0}, {"snippet_id": 59872, "code": "\"about_url\": metadata.get(\"about_url\") or self.metadata(\"about_url\"), } ) def prepare_connection(self, conn): conn.row_factory=sqlite3.Row conn.text_factory=lambda x: str(x, \"utf-8\", \"replace\") for name", "label": 0}, {"snippet_id": 42170, "code": " documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-trash\"></span>' self.assertIn", "label": 0}, {"snippet_id": 41605, "code": "=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_detail_form_load(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects", "label": 0}, {"snippet_id": 22864, "code": ".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(.", "label": 0}, {"snippet_id": 25314, "code": "\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler", "label": 0}, {"snippet_id": 59690, "code": ": m.update(item) return m def plugin_config( self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata(", "label": 0}, {"snippet_id": 70433, "code": " does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 47549, "code": "=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value(", "label": 0}, {"snippet_id": 33134, "code": ".register(WeightFractionType) admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin)", "label": 0}, {"snippet_id": 578, "code": ", '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath", "label": 1}, {"snippet_id": 61288, "code": " event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host", "label": 0}, {"snippet_id": 32756, "code": " def wait(self): if self.pid: os.waitpid(self.pid, 0) @property def full_command(self): if os.path.exists(self.command): return self.command path=os.environ['PATH'].split(':') for di in path: cmd=os.path", "label": 0}, {"snippet_id": 8792, "code": "(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 15307, "code": " model=next(item for item in models if item['model_system_name']==name) return[( value['series_name_system'], value['series_name_system'] +':' +value['series_name_user'] ) for key, value in model['inputs", "label": 0}, {"snippet_id": 77229, "code": "(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1] !=\"/\"", "label": 0}, {"snippet_id": 11719, "code": ".PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs=", "label": 0}, {"snippet_id": 10982, "code": " return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer", "label": 0}, {"snippet_id": 10509, "code": " from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page", "label": 0}, {"snippet_id": 3319, "code": "(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get(self, request): \"\"\"OIDC client", "label": 0}, {"snippet_id": 56718, "code": " import ConceptFilter, TransactionFilter from clickgestion.core.utilities import invalid_permission_redirect from django.views.generic import ListView from django.contrib.auth.decorators import login_required", "label": 0}, {"snippet_id": 42995, "code": " response=self.client.get('/qa/extractedtext/5', follow=True) self.assertIn(b'/datadocument/5', response.content) def test_approval(self): response=self.client.get('/qa/extractionscript/5', follow=True)", "label": 0}, {"snippet_id": 84520, "code": ".is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request)) return redirect(article) messages.error( request, 'Reverting", "label": 0}, {"snippet_id": 28522, "code": " gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args", "label": 0}, {"snippet_id": 8010, "code": "(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter", "label": 0}, {"snippet_id": 40156, "code": "\nimport math from random import shuffle from django.db import models from django.urls import reverse from django.core.validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info", "label": 0}, {"snippet_id": 44235, "code": ".get(dg_detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should", "label": 0}, {"snippet_id": 78804, "code": " :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id", "label": 0}, {"snippet_id": 11127, "code": " to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as", "label": 0}, {"snippet_id": 72018, "code": " Ganesha, GaneshaConf, NFSException from..services.rgw_client import RgwClient def NfsTask(name, metadata, wait_for): def composed_decorator(func): return Task(\"nfs/{}\".format(name), metadata, wait_for", "label": 0}, {"snippet_id": 18385, "code": " hashing happened properly, re-hashes if the verification failed, \tand then returns hashed password. \t\"\"\" \tdef hash_password(self): \t\tph=PasswordHasher() \t\thashed_password=ph.hash(self.password) \t\ttry: \t\t", "label": 1}, {"snippet_id": 23216, "code": " function or method\"\"\" def check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method", "label": 0}, {"snippet_id": 77285, "code": " %s.\", e) return{} fp.close() logger.debug(\"Server definitions data read, start regex\") logger.debug(\"JSON vars: %s\", result) p=re.compile(r\"var geeServerDefs=\") result=p.sub(\"\", result) p=re.compile(r", "label": 1}, {"snippet_id": 71837, "code": "=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST MESSAGE') msgs=req.get_messages() self.assertEquals(msgs,[{'level': None, 'message':'TEST MESSAGE'}]) msgs=req.get_messages() self", "label": 0}, {"snippet_id": 50474, "code": ".release() unlocktime=datetime.datetime.now() print \"Lock released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self,", "label": 0}, {"snippet_id": 32798, "code": " node to operate on. redirections: The redirections to apply. ''' def __init__(self, base, redirections): self.base=base self.redirections=redirections def execute(self, builtins): with self.redirections", "label": 0}, {"snippet_id": 6200, "code": ".redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request", "label": 0}, {"snippet_id": 40812, "code": " 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None", "label": 0}, {"snippet_id": 84912, "code": " in articles_all: match=search_title.search(article.content) if match: found_links.append({'title': article.title}) for old_title in old_titles: if old_title in article.content: found_old_links.append({", "label": 0}, {"snippet_id": 7671, "code": " pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging", "label": 0}, {"snippet_id": 78600, "code": " the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and", "label": 0}, {"snippet_id": 54451, "code": "/<query>', methods=['GET']) def tweets_search(query): access_token='487593326-yu9WIClcUgs9vBWJGGgW4QC9pKedHMdm3NhhNoxe' access_token_secret='fMcsDcqTtbeM73qB7Cxo7dGKhZT9byGh7i5lKjOVscQzP' consumer_key=", "label": 0}, {"snippet_id": 1456, "code": " os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime", "label": 0}, {"snippet_id": 43013, "code": "=self.client.get('/qa/extractedtext/7', follow=True) def test_hidden_fields(self): '''ExtractionScript 15 includes a functional use data group with pk=5. Its QA page should hide the composition fields ", "label": 0}, {"snippet_id": 18100, "code": "'{} password reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset-request.txt', **tmpl_context), html=flask.render_template('email/reset-request", "label": 0}, {"snippet_id": 71193, "code": ".get_by_value(value) if session is not None: session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class", "label": 0}, {"snippet_id": 9235, "code": "=\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[", "label": 0}, {"snippet_id": 10513, "code": " from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile", "label": 0}, {"snippet_id": 77237, "code": " The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1] !=\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url", "label": 0}, {"snippet_id": 42156, "code": ".decode('utf8') self.assertIn('1 extracted', response, 'Data Group should contain a count of 1 total extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/", "label": 0}, {"snippet_id": 9348, "code": "'student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers", "label": 0}, {"snippet_id": 475, "code": " gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from", "label": 0}, {"snippet_id": 77399, "code": "\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug", "label": 0}, {"snippet_id": 63681, "code": "={'SAMLResponse': base64.b64encode(saml_response), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST', headers={", "label": 0}, {"snippet_id": 51410, "code": " return stdout.channel.recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class", "label": 0}, {"snippet_id": 46378, "code": ".id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if doc.title: new_prod_title='%s stub'", "label": 0}, {"snippet_id": 21941, "code": "(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we", "label": 0}, {"snippet_id": 56243, "code": "'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase", "label": 0}, {"snippet_id": 59618, "code": " level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata() with table=specified but not database=\" databases=self._metadata.get", "label": 0}, {"snippet_id": 32012, "code": "(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto(", "label": 0}, {"snippet_id": 64993, "code": " except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not expr: raise ValueError('Failed to parse test case %d' % i) valid=False if type(expr)==ast.Expression: comp=expr", "label": 0}, {"snippet_id": 31756, "code": " @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login", "label": 1}, {"snippet_id": 26313, "code": " allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in", "label": 0}, {"snippet_id": 49643, "code": ".replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile", "label": 0}, {"snippet_id": 83309, "code": ".ModelChoiceField( queryset=ContentType.objects.all(), required=False, widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput", "label": 0}, {"snippet_id": 50137, "code": "() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(\"/signup", "label": 0}, {"snippet_id": 72199, "code": " security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy", "label": 0}, {"snippet_id": 18117, "code": " payload_file=sys.argv[3]\r \r print(\"\\n--Testing open redirects on domains in \"+input_file+\" with output file, \"+output_file+\" --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r", "label": 0}, {"snippet_id": 70249, "code": " production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 38733, "code": " ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace", "label": 0}, {"snippet_id": 68201, "code": " from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import tweet from.forms import SearchForm from django.http import JsonResponse from urllib.parse import urlparse", "label": 0}, {"snippet_id": 24789, "code": "(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor for Ray processes. The monitor is in charge of cleaning up the tables in the", "label": 0}, {"snippet_id": 63128, "code": "('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check) def test_token_login_new_user(self)", "label": 0}, {"snippet_id": 29855, "code": " form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post) db.session.add(comment", "label": 0}, {"snippet_id": 11887, "code": ".login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig", "label": 0}, {"snippet_id": 29914, "code": "(object): BASE_DIR=BASE SQLALCHEMY_MIGRATE_REPO=os.path.join(BASE_DIR, 'db_repository') SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static", "label": 1}, {"snippet_id": 51969, "code": "\"/login\") else: if user_record.password !=pw: template=h.handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname)", "label": 0}, {"snippet_id": 34481, "code": "/*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted", "label": 0}, {"snippet_id": 84290, "code": "} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'article__content_type': get_ct(group), 'article__object_id': group.id}) changeset", "label": 0}, {"snippet_id": 45677, "code": "=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return", "label": 0}, {"snippet_id": 72078, "code": "'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons", "label": 0}, {"snippet_id": 84624, "code": " template_params['group']=group_slug if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance", "label": 0}, {"snippet_id": 23472, "code": " with the IDs of the GPUs. If it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i)", "label": 0}, {"snippet_id": 39747, "code": "): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is", "label": 1}, {"snippet_id": 76656, "code": " abs_tile_row, rel_tile_row) if rel_tile_row < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col ", "label": 0}, {"snippet_id": 51001, "code": " foo. \"-foo\" excludes step foo, even if \"default\" or \"all\" is present. ''' steps=flatten_string_list(steps) steps=flatten_comma_list(steps) self._enable_all_options=ALL_STEPS in steps self._disable_all_options", "label": 0}, {"snippet_id": 73915, "code": " 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position} @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request", "label": 1}, {"snippet_id": 42271, "code": ".content.decode('utf8') self.assertNotIn('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'", "label": 0}, {"snippet_id": 52500, "code": "=['POST']) def save_updated_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() checked_lst=request.form.get(\"completion\") updated_notes=request.form.get", "label": 0}, {"snippet_id": 70618, "code": " \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 25495, "code": " to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the", "label": 0}, {"snippet_id": 69335, "code": " environment...\") miniconda_version='4.5.4' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda.check_miniconda_version(USER_ENV_PREFIX, miniconda_version): logger.info('Downloading", "label": 0}, {"snippet_id": 24130, "code": " utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions", "label": 1}, {"snippet_id": 44555, "code": " document_type=dt, filename='example.pdf') p=Product.objects.create(data_source=ds, upc='Test UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family',", "label": 0}, {"snippet_id": 20690, "code": " interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address(), include_log_monitor=True, resources={}, include_webui=False, worker_path=os", "label": 0}, {"snippet_id": 63886, "code": " return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next", "label": 1}, {"snippet_id": 29607, "code": " Comment, Preview, Image from benwaonline.gallery import gallery from benwaonline.gallery.forms import CommentForm, PostForm @gallery.before_request def before_request(): g.user=current_user @gallery.route", "label": 0}, {"snippet_id": 2119, "code": "=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError,", "label": 0}, {"snippet_id": 15349, "code": "(form): result=[] for field in form: if field.name=='start_day': result.append({'command': field.name, 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name", "label": 0}, {"snippet_id": 78232, "code": "(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('---------", "label": 0}, {"snippet_id": 33293, "code": ".register(Product) admin.site.register(ProductToPUC) admin.site.register(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site", "label": 0}, {"snippet_id": 55026, "code": " os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized(p) class FSPath(object): \tdef __init__(self,path): \t\tself.path=path \tdef __sub__", "label": 0}, {"snippet_id": 30024, "code": "=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge' id=Column", "label": 0}, {"snippet_id": 46632, "code": " Group For Data Source \"' +str(datasource) +'\"' initial_values={'downloaded_by': request.user, 'name' : default_name, 'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST,", "label": 0}, {"snippet_id": 25335, "code": "\") message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id", "label": 0}, {"snippet_id": 12495, "code": "'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name", "label": 0}, {"snippet_id": 50540, "code": " os.environ[\"HOME\"]+\"/.openhome-build/\"+name+\".lock\") def tryacquire(self, filename): import fcntl self.f=file(filename, \"w\") try: fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close", "label": 0}, {"snippet_id": 76893, "code": "\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname +\"-\") image.save(t_path, image_spec.pil_format, **image.info) os.chmod(t_path, 777) except IOError, e: logger.error", "label": 0}, {"snippet_id": 71017, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f))", "label": 0}, {"snippet_id": 49056, "code": " import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms import * from dashboard.forms import ExtractedListPresenceTagForm from factotum.settings import EXTRA from dashboard", "label": 0}, {"snippet_id": 14892, "code": "(user_id) def load_json(name): filename=os.path.join(app.static_folder, name) return json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models')", "label": 0}, {"snippet_id": 27842, "code": " extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key,", "label": 0}, {"snippet_id": 22976, "code": " os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string(): id_hash=hashlib.sha1() id_hash.update(uuid", "label": 0}, {"snippet_id": 6433, "code": " self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the", "label": 0}, {"snippet_id": 45132, "code": ").distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date", "label": 0}, {"snippet_id": 54287, "code": "()) politician=None for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link", "label": 0}, {"snippet_id": 1715, "code": "\"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template", "label": 1}, {"snippet_id": 5044, "code": "{ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains", "label": 0}, {"snippet_id": 74088, "code": " storage_helper=view_helpers.ReportStorageHelper @property def storage(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin, _PassphrasePartial): def get(self, request, *args,", "label": 0}, {"snippet_id": 36188, "code": " qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey", "label": 0}, {"snippet_id": 58628, "code": ".objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_4, instructor.user_id) if Lesson.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding", "label": 1}, {"snippet_id": 71669, "code": "'_eauth']=s.serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue", "label": 0}, {"snippet_id": 31965, "code": " string read from stdin. ''' while True: raw=input('$ ') if len(raw) > 0: return raw def execute(self, raw): ''' Execute a command in the form of a raw string. ''' tokens=Tokenizer(raw) parser=Parser(tokens", "label": 0}, {"snippet_id": 2266, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 3382, "code": ".session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query", "label": 1}, {"snippet_id": 83362, "code": " Database level \"\"\" title=self.cleaned_data['title'] if not wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title).count", "label": 1}, {"snippet_id": 22427, "code": ".resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" ", "label": 0}, {"snippet_id": 70446, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 30015, "code": "(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self", "label": 1}, {"snippet_id": 38960, "code": " __str__(self): return self.name def get_absolute_url(self): return reverse('data_group_edit', kwargs={'pk': self.pk}) def get_name_as_slug(self): return self.name.replace(' ', '_') def get_dg_folder(self", "label": 0}, {"snippet_id": 61081, "code": ".host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass", "label": 1}, {"snippet_id": 60007, "code": "{ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3", "label": 0}, {"snippet_id": 2815, "code": " HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return", "label": 0}, {"snippet_id": 39897, "code": " import models from.common_info import CommonInfo from django.core.exceptions import ValidationError from django.utils.translation import ugettext_lazy as _ from dashboard.models import ExtractedText class", "label": 0}, {"snippet_id": 52738, "code": " import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models import Room logger=logging.getLogger", "label": 1}, {"snippet_id": 68701, "code": " hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url'", "label": 0}, {"snippet_id": 33381, "code": " dashboard.views.get_data import * from dashboard.tests.loader import fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard def setUp(self):", "label": 0}, {"snippet_id": 32354, "code": " ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed. ''' root=self.commands() self.expect", "label": 0}, {"snippet_id": 70845, "code": ") fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not", "label": 1}, {"snippet_id": 5403, "code": " terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories", "label": 0}, {"snippet_id": 29841, "code": ") return instance, True @gallery.route('/gallery/benwa/<int:post_id>/comment/add', methods=['POST']) @login_required def add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post", "label": 0}, {"snippet_id": 70225, "code": "))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 63664, "code": "' came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context(", "label": 0}, {"snippet_id": 37944, "code": "'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude): formset_fields=model.detail_fields() if exclude: formset_fields=[in_field for in_field", "label": 0}, {"snippet_id": 49733, "code": " render_template(\"editor.html\", editor_content=editor_content) @app.route('/openFile') def openFile(): if(not 'email' in session) and(not 'social' in session): if 'diagram' in request.args: return redirect", "label": 0}, {"snippet_id": 78315, "code": " ckan.lib.helpers as helpers import ckan.lib.mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator", "label": 0}, {"snippet_id": 79026, "code": ") tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base')", "label": 0}, {"snippet_id": 74903, "code": "'') if type_: url='%s?type=%s' %(reverse('register'), type_) else: url=reverse('register') return HttpResponseRedirect(url) except Candidate.MultipleObjectsReturned: candidate=Candidate.objects.filter(person__netid", "label": 0}, {"snippet_id": 7284, "code": " is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False column_list=['office_name', 'sb', 'services", "label": 1}, {"snippet_id": 1493, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding:", "label": 0}, {"snippet_id": 69184, "code": " systemd.reload_daemon() systemd.restart_service('jupyterhub') systemd.restart_service('traefik') systemd.enable_service('jupyterhub') systemd.enable_service('traefik') def ensure_jupyterlab_extensions()", "label": 0}, {"snippet_id": 75847, "code": "'Inactive')), ) TYPE_CHOICES=( ('prefix', _('Prefix Redirect')), ('page', _('Page Redirect')), ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir', _('Sphinx HTML ", "label": 0}, {"snippet_id": 73528, "code": " e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request, user): token=EmailAuthenticateToken", "label": 0}, {"snippet_id": 50089, "code": " elif 'tempFile' in session or 'currentFile' in session: if 'tempFile' in session: filepath=session['tempFile'] if 'currentFile' in session and('email' in session) or('social' in session): if 'email' in", "label": 0}, {"snippet_id": 16605, "code": " if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add", "label": 0}, {"snippet_id": 9676, "code": " branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and", "label": 0}, {"snippet_id": 16015, "code": " methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user", "label": 0}, {"snippet_id": 84100, "code": ".update({'content_type': group_ct, 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read", "label": 0}, {"snippet_id": 26893, "code": " and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports", "label": 0}, {"snippet_id": 16860, "code": ".delete() default_set=GameSet.objects.get(pk=1) data=[] if t.power_assignment==Tournament.AUTO: games=_seed_games_and_powers(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name", "label": 0}, {"snippet_id": 31300, "code": ".pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed', 'social.pipeline.social_auth.social_user', 'social.pipeline.user.get_username'", "label": 0}, {"snippet_id": 37091, "code": "'downloaded_by', 'downloaded_at', 'download_script', 'data_source', 'csv'] widgets={'downloaded_at': DatePickerInput()} labels={'csv': _('Register Records CSV File'), 'url': _('URL'),} def __init__(self", "label": 0}, {"snippet_id": 12321, "code": " reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request", "label": 0}, {"snippet_id": 63126, "code": "-bubba' def _check(): self.assertIn('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check) def", "label": 0}, {"snippet_id": 61724, "code": "[securedrop_domain],{'timeout': 10}) result=pshtt_data_to_result(securedrop, pshtt_results[0]) if commit: result.securedrop=securedrop result.save() return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet", "label": 1}, {"snippet_id": 27446, "code": ": if self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should", "label": 0}, {"snippet_id": 47441, "code": "{'form': form}) @login_required() def data_source_update(request, pk, template_name=('data_source/' 'datasource_form.html')): datasource=get_object_or_404(DataSource, pk=pk) form=DataSourceForm(request", "label": 0}, {"snippet_id": 12999, "code": " the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect", "label": 0}, {"snippet_id": 39999, "code": ".CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True", "label": 0}, {"snippet_id": 68897, "code": "/utxYiUIvZNKgaG/P8U7 89QyvxeRxAf93YFAVzMXhoKxu12IuH4VnSwAfb8gQyxKRyiGOUwk0YoBPpqRnMmD Dl7SdmY3oQHEJzBelTMjTM8AjbB9mWoPBX5G8t4u47/FZ6PgdfmRg9hsKXhkLJc7 C1btblOHNgDx19fzASWX+xOjZiKpP6MkEEzq1bilUFul6RDtxkTWsTa5TGixgCB", "label": 0}, {"snippet_id": 64809, "code": " points_per_case, 'exception during test case %d' % i) return deductions def main(): parser=argparse.ArgumentParser(description=\"Grade student code against \" \"given test cases. Results will be written over", "label": 1}, {"snippet_id": 52678, "code": ".route(\"/logout\", methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in", "label": 0}, {"snippet_id": 36079, "code": " tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self)", "label": 0}, {"snippet_id": 4874, "code": "/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200", "label": 0}, {"snippet_id": 68175, "code": ".setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable()", "label": 0}, {"snippet_id": 30859, "code": ") def showGrudge(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() creator=getUserInfo(grudget.user_id) grudges=session.query(Grudge).filter_by(grudget_id=grudget_id).all() if ", "label": 0}, {"snippet_id": 47130, "code": " ExtractedTextForm, HPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST or None, instance=extext, prefix='habits') context={", "label": 0}, {"snippet_id": 7886, "code": " 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ", "label": 0}, {"snippet_id": 71954, "code": ".set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a", "label": 1}, {"snippet_id": 69691, "code": " )) conda.ensure_pip_packages(USER_ENV_PREFIX, pip_packages) def ensure_config_yaml(plugin_manager): \"\"\" Ensure we have a config.yaml present \"\"\" for path in[CONFIG_DIR, os.path.join(CONFIG_DIR, 'jupyterhub_config", "label": 0}, {"snippet_id": 78569, "code": " notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'] if user.get('capacity')=='admin'", "label": 0}, {"snippet_id": 18298, "code": " or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username", "label": 1}, {"snippet_id": 28835, "code": " memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try", "label": 0}, {"snippet_id": 17886, "code": " and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '", "label": 0}, {"snippet_id": 41432, "code": ") for form in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else", "label": 0}, {"snippet_id": 80054, "code": " data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, ", "label": 1}, {"snippet_id": 18603, "code": "(): \tCreates an instance of PasswordHasher, finds if there is any document in the database with the \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument", "label": 1}, {"snippet_id": 37135, "code": " self.fields['download_script'].queryset=qs class ExtractionScriptForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'),", "label": 0}, {"snippet_id": 59088, "code": " passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user :param kwargs", "label": 0}, {"snippet_id": 79938, "code": ".ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session", "label": 0}, {"snippet_id": 78248, "code": " for org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if", "label": 0}, {"snippet_id": 74376, "code": " PermissionDenied class _ReportUpdatePartial(_ReportAccessPartial, views.edit.UpdateView): back_url=None @property def report(self): return self.get_object() class EncryptedWizardPartial( _ReportUpdatePartial,", "label": 0}, {"snippet_id": 17369, "code": " flask.flash(flask.Markup('<strong>Logins are currently disabled.</strong>'), 'danger') return flask.redirect(flask.url_for('account.login')) username=form.username.data.strip() password=form.password.data", "label": 0}, {"snippet_id": 41349, "code": ": pass def test_every_extractedtext(self): ''''Loop through all the ExtractedText objects and confirm that the new create_detail_formset method returns forms based on the correct models ''' for et in ExtractedText", "label": 0}, {"snippet_id": 7307, "code": "'invigilators') form_create_rules=('office_name', 'office_number', 'sb', 'services', 'deleted', 'exams_enabled_ind', 'appointments_enabled_ind', 'timezone') form_edit_rules=('office_name', 'office_number", "label": 1}, {"snippet_id": 53210, "code": "+26334465657456774567', 'email': 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, '') self.assertEqual(self.view.get_object().zipcode, None) self.assertEqual", "label": 0}, {"snippet_id": 65448, "code": " database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui\") self.first_start_grid=builder.get_object(\"first_start_grid\") self.add(self.first_start_grid)", "label": 0}, {"snippet_id": 40875, "code": "=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save() response=self.client", "label": 0}, {"snippet_id": 56893, "code": " transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/concept_edit.html', extra_context) else: form=concept_form(instance=concept) extra_context['form']", "label": 0}, {"snippet_id": 78296, "code": "'capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id'], users) else: print('", "label": 0}, {"snippet_id": 8959, "code": " django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest,", "label": 0}, {"snippet_id": 63429, "code": "['TOKEN_SERVICE_URL'])) def test_no_authn_util(self): no_authn_urls_before=[path for path in self.app.config['NO_AUTHN_URLS']] no_authn_path='/test3' no_authn_views(self.app,[no_authn_path]) self.assertEqual", "label": 0}, {"snippet_id": 80190, "code": ".message_received.connect(self.log) self.log_thread.start() def setup_window(self): self.window=window=QMainWindow() self.layout=QVBoxLayout() window.setWindowTitle('Matisse Controller') window.resize(600", "label": 0}, {"snippet_id": 62954, "code": " self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(authr), 'RelayState': came_from}): oq_cache=OutstandingQueriesCache(session)", "label": 0}, {"snippet_id": 4125, "code": "(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user", "label": 0}, {"snippet_id": 37758, "code": " return False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args,", "label": 0}, {"snippet_id": 43849, "code": "( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser", "label": 0}, {"snippet_id": 61542, "code": " combines those results into an unsaved ScanResult object \"\"\" try: page, soup=request_and_scrape_page(securedrop.landing_page_url) no_redirects_page, _=request_and_scrape_page( securedrop.landing_page_url", "label": 1}, {"snippet_id": 60075, "code": " unit in self.metadata(\"custom_units\") or[]: ureg.define(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection(conn) sqlite_version=conn.execute(\"select sqlite_version()\").fetchone", "label": 0}, {"snippet_id": 51557, "code": "'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder.get_dependency_args, 'add_option':builder.add_option, 'add_bool_option':builder.add_bool_option, 'python':builder.python, ", "label": 0}, {"snippet_id": 47660, "code": " where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc'))", "label": 0}, {"snippet_id": 12358, "code": ". \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc", "label": 0}, {"snippet_id": 2196, "code": ", put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You", "label": 0}, {"snippet_id": 62034, "code": "(max_age): if max_age and max_age >=16070400: return True else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if", "label": 0}, {"snippet_id": 23917, "code": " the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <", "label": 0}, {"snippet_id": 28362, "code": " want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np", "label": 0}, {"snippet_id": 19907, "code": ".info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args", "label": 0}, {"snippet_id": 38456, "code": " ``url`` an optional URL to the document's remote source ``raw_category`` ``data_group`` the DataGroup object to which the document belongs. The type of the data group determines which document types the", "label": 0}, {"snippet_id": 43365, "code": " displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas", "label": 0}, {"snippet_id": 9780, "code": ", redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else", "label": 0}, {"snippet_id": 34747, "code": "=dtxs).values('dsstox__sid').\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field", "label": 0}, {"snippet_id": 12353, "code": " it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields'", "label": 0}, {"snippet_id": 28321, "code": " random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state", "label": 0}, {"snippet_id": 75731, "code": " timeout=2) except requests.exceptions.Timeout: logger.error('fast lookup timed out') return error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc", "label": 0}, {"snippet_id": 80074, "code": " Opened Creator Email') if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job(_send_mail,[users, 'open_datarequest_organisation', datarequest_dict]", "label": 1}, {"snippet_id": 78914, "code": ".discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization", "label": 1}, {"snippet_id": 59751, "code": ": queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name", "label": 0}, {"snippet_id": 10441, "code": " openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 4196, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s", "label": 0}, {"snippet_id": 2188, "code": "\"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to", "label": 0}, {"snippet_id": 13865, "code": " Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields']", "label": 0}, {"snippet_id": 17191, "code": " GameScoreFormset=formset_factory(GameScoreForm, extra=0) data=[] the_list=r.game_set.all() for game in the_list: content={'game_name': game.name} for gp in game.gameplayer_set.all(): content[gp.power.name", "label": 0}, {"snippet_id": 37114, "code": ", **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None) super(DataGroupForm, self).__init__(*args, **kwargs) self.fields['csv'].widget.attrs.update({'accept': '.csv'}", "label": 0}, {"snippet_id": 76939, "code": " im_src: Source image to be copied. box: the dimentions of the image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs ", "label": 0}, {"snippet_id": 73199, "code": "=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data.get('email') email_domain=email.split('@')[1].lower() if", "label": 0}, {"snippet_id": 74898, "code": ".objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_: url='%s?type=%s' %(reverse('register'), type_) else: url=reverse('register')", "label": 0}, {"snippet_id": 75171, "code": " else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate, 'form': form, 'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app/candidate_metadata.html', context)", "label": 0}, {"snippet_id": 50991, "code": " Specify which optional steps to include in the build. \"default\" includes all default steps. \"all\" includes all steps. \"foo\" or \"+foo\" includes step foo. \"-foo\" excludes step foo, even if \"default\" or ", "label": 0}, {"snippet_id": 84507, "code": ".get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request", "label": 1}, {"snippet_id": 54069, "code": " from requests_oauthlib import OAuth1 from knowyourgov import app from knowyourgov.models import Politician from knowyourgov.scripts import insert_politicians_in_db from knowyourgov.scripts.scraping import", "label": 0}, {"snippet_id": 17373, "code": "'<strong>Logins are currently disabled.</strong>'), 'danger') return flask.redirect(flask.url_for('account.login')) username=form.username.data.strip() password=form.password.data user=models.User.by_username", "label": 0}, {"snippet_id": 16908, "code": " current[gp.id]=power data.append(current) else: games=_seed_games(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set", "label": 0}, {"snippet_id": 50344, "code": ".route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider) return oauth.authorize() @app.route('/callback/<provider>') def oauth_callback(provider): oauth=OAuthSignIn", "label": 0}, {"snippet_id": 49285, "code": " ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form=ExtractedTextForm(request.POST, instance=extracted_text) if ext_text_form.is_valid()", "label": 0}, {"snippet_id": 48504, "code": "'].value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists", "label": 0}, {"snippet_id": 8967, "code": ".core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext", "label": 0}, {"snippet_id": 25528, "code": " to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP", "label": 0}, {"snippet_id": 64916, "code": " form of of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5, 6], last=8)==None''\") parser.add_argument('-v',", "label": 0}, {"snippet_id": 8832, "code": "}, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options", "label": 0}, {"snippet_id": 83812, "code": ", is_private=None, *args, **kw): if request.method=='GET': articles, group=get_articles_by_group( article_qs, group_slug, group_slug_field, group_qs) allow_read=has_read_perm(request.user, group, is_member", "label": 0}, {"snippet_id": 79988, "code": " open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed", "label": 0}, {"snippet_id": 22838, "code": ".profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both", "label": 0}, {"snippet_id": 31118, "code": " return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method", "label": 0}, {"snippet_id": 58600, "code": ".user, enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step(onboarding.STEP_2, instructor.user_id) if Course.objects.filter(addedBy=instructor.user)", "label": 0}, {"snippet_id": 44383, "code": "\"id_rawchem-0-SID\"]') try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self.live_server_url", "label": 0}, {"snippet_id": 71195, "code": " if session is not None: session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class(self): try:", "label": 0}, {"snippet_id": 26177, "code": ".java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"\"\"Start a worker process.\"\"", "label": 0}, {"snippet_id": 22415, "code": "'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead", "label": 0}, {"snippet_id": 1116, "code": " /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{%", "label": 0}, {"snippet_id": 4136, "code": ") self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"", "label": 0}, {"snippet_id": 30850, "code": "/<int:grudget_id>/') @app.route('/grudget/<int:grudget_id>/grudge/') def showGrudge(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() creator=getUserInfo(grudget.user_id) grudges", "label": 0}, {"snippet_id": 81368, "code": " +registration.partner_id.sudo().name counter +=1 return attendee_list def start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled', '=', True", "label": 0}, {"snippet_id": 44337, "code": " def test_field_exclusion(self): doc=self.objects.doc qa_url=self.live_server_url +f'/qa/extractedtext/{doc.pk}/' self.browser.get(qa_url) with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 77888, "code": ".startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required", "label": 0}, {"snippet_id": 26811, "code": "(process_type, process_info.process)) return result def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes(", "label": 0}, {"snippet_id": 15777, "code": "/<field>', methods=['POST']) def view_run_add(field): run_form=get_run_form() run_form[field].append_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands", "label": 0}, {"snippet_id": 45522, "code": "=ParentForm(instance=extracted_text) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled", "label": 1}, {"snippet_id": 74152, "code": "({\"view\": self}) return kwargs class ReportCreatePartial(ReportBasePartial, views.edit.CreateView): form_class=forms.ReportCreateForm EVAL_ACTION_TYPE=\"CREATE\" def get_success_url(self): return reverse", "label": 0}, {"snippet_id": 23683, "code": "\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler.close() _default_handler=new_handler logger.addHandler", "label": 1}, {"snippet_id": 24695, "code": " \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices", "label": 0}, {"snippet_id": 83707, "code": " create_message(self, request): \"\"\"Send a message to the user if there is another user editing this article.\"\"\" if not self.is_mine(request): user=request.user user.message_set.create( message=self.message_template", "label": 0}, {"snippet_id": 33781, "code": " rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s", "label": 1}, {"snippet_id": 38026, "code": " ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO': one, 'UN': one, ", "label": 0}, {"snippet_id": 10455, "code": ".djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs", "label": 0}, {"snippet_id": 11926, "code": " import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request", "label": 0}, {"snippet_id": 65311, "code": ") def create_headerbar(self): builder=Gtk.Builder() builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui\") self.headerbar=builder.get_object(\"headerbar\") file_open_button=builder.get_object", "label": 0}, {"snippet_id": 62522, "code": " NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing import EduidAPITestCase from eduid_common.authn.cache import OutstandingQueriesCache from eduid_common.authn.utils import get_location, no_authn_views from", "label": 0}, {"snippet_id": 47510, "code": ".http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F", "label": 1}, {"snippet_id": 51286, "code": "\"fetch_dependencies\", kwargs, {\"platform\":None}) dependencies=flatten_string_list(dependencies) platform=kwargs['platform'] or self._context.env[\"PLATFORM\"] dependency_collection=self._dependency_collection", "label": 0}, {"snippet_id": 82313, "code": "(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by('timestamp') return render(request, 'clicktracking-detail-view.html',{'object': object, 'reports': reports}) def link_redirect(request, pk", "label": 1}, {"snippet_id": 31197, "code": ".abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s '*szo DEBUG=literal_eval(os.environ.get('DJANGO_DEBUG', 'False')) if DEBUG and not literal_eval(os.environ.get('FORCE_CELERY', 'False'))", "label": 0}, {"snippet_id": 23102, "code": " None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis", "label": 0}, {"snippet_id": 37066, "code": " _ from dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models class DataGroupForm(forms.ModelForm): required_css_class='required' class Meta: model=DataGroup", "label": 1}, {"snippet_id": 71179, "code": "=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models.Session.get_by_value(value) if session is not None: session_hash=session.hash() else:", "label": 0}, {"snippet_id": 5755, "code": " that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id)", "label": 0}, {"snippet_id": 35746, "code": ".objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc", "label": 0}, {"snippet_id": 69842, "code": " from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 83272, "code": " from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm", "label": 0}, {"snippet_id": 82231, "code": "=quantity context['urls_without_category']=urls_without_category return context class CategoryDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=Category.objects.get", "label": 0}, {"snippet_id": 21005, "code": "(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file,", "label": 0}, {"snippet_id": 31553, "code": "(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project, name='project'), url(r'^project/", "label": 0}, {"snippet_id": 43281, "code": "=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit(", "label": 1}, {"snippet_id": 49245, "code": " and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note", "label": 0}, {"snippet_id": 55927, "code": "='/e' PROFILE_PATH='/p' EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse('', status=302) response['Location']='{", "label": 0}, {"snippet_id": 25542, "code": ", choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants", "label": 0}, {"snippet_id": 69555, "code": " in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os.path.join(prefix, 'bin', 'tljh-config') tljh_config_dest='/usr/bin/tljh-config' if os", "label": 0}, {"snippet_id": 21797, "code": ": \"\"\"Return true if all remaining processes are still alive. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: True if any process", "label": 0}, {"snippet_id": 72119, "code": " dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag,", "label": 0}, {"snippet_id": 59685, "code": " m={} for item in search_list: m.update(item) return m def plugin_config( self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table", "label": 0}, {"snippet_id": 52677, "code": " @app.route(\"/logout\", methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings", "label": 0}, {"snippet_id": 36119, "code": "(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects", "label": 0}, {"snippet_id": 64601, "code": "'FileExistsError', 'FileNotFoundError', 'filter', 'float', 'FloatingPointError', 'format', 'frozenset', 'FutureWarning', 'GeneratorExit', 'getatter', 'globals', 'hasattr', 'hash', 'hex', 'id', 'ImportError', ", "label": 0}, {"snippet_id": 5577, "code": "'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"", "label": 0}, {"snippet_id": 31354, "code": " SOCIAL_AUTH_GITLAB_SCOPE=['api'] SOCIAL_AUTH_BITBUCKET_KEY=os.environ.get('SOCIAL_AUTH_BITBUCKET_KEY') SOCIAL_AUTH_BITBUCKET_SECRET=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET') AUTHENTICATION_BACKENDS", "label": 0}, {"snippet_id": 61597, "code": ", hsts_entire_domain=validate_hsts_entire_domain(pshtt_results['HSTS Entire Domain']), hsts_preloaded=pshtt_results['HSTS Preloaded'], subdomain=validate_subdomain(securedrop.landing_page_url), no_cookies", "label": 1}, {"snippet_id": 57914, "code": " on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\": \"\",", "label": 0}, {"snippet_id": 12293, "code": "=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email", "label": 0}, {"snippet_id": 18214, "code": " import tornado.options import tornado.web import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run on the given port\", type=int) \"\"\" BaseHandler(): Class that'll", "label": 1}, {"snippet_id": 70744, "code": " show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root'", "label": 0}, {"snippet_id": 48090, "code": "=pk,) form=HabitsPUCForm() if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) if not ExtractedHabitsAndPracticesToPUC.objects.filter", "label": 0}, {"snippet_id": 74607, "code": " person_instance=Person.objects.get(netid=request.user.username) except Person.DoesNotExist: if 'orcid' in request.POST: try: person_instance=Person.objects.get(orcid=request.POST['orcid']) except Person.DoesNotExist", "label": 0}, {"snippet_id": 22999, "code": "==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function. This method takes a traceback", "label": 0}, {"snippet_id": 57528, "code": ": extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form return render(request", "label": 0}, {"snippet_id": 46543, "code": " ingredient.upper_wf_analysis=row['upper_wf_analysis'] ingredient.script=script try: ingredient.full_clean() except ValidationError as e: context['clean_comp_err'][i+1]=e.message_dict good_records.append", "label": 0}, {"snippet_id": 83783, "code": " is None) or(is_member is None) or is_member(user, group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass", "label": 0}, {"snippet_id": 48535, "code": " document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value()", "label": 0}, {"snippet_id": 2135, "code": " SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified,", "label": 0}, {"snippet_id": 48781, "code": "(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids", "label": 0}, {"snippet_id": 64747, "code": "} instr_globals['__name__']=name instr_globals['__builtins__']={ k: __builtins__.__dict__[k] for k in builtins_whitelist if k in __builtins__.__dict__ } instr_locals={} try: exec(code_obj, instr_globals", "label": 1}, {"snippet_id": 6772, "code": "') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash('Your account is confirmed. Thank you!') else: flash('The confirmation", "label": 0}, {"snippet_id": 6383, "code": " and id_token['azp'] !=self.flow.client_id: logger.error('Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']): logger.error('Token has expired') return False if id_token", "label": 0}, {"snippet_id": 67513, "code": "(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp') return query def thirty_day_data(self): data", "label": 0}, {"snippet_id": 48282, "code": ".exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc", "label": 0}, {"snippet_id": 57413, "code": " transaction=get_object_or_404(Transaction, code=print_transaction) resp=HttpResponse(content_type='application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf\"'.format(transaction.code", "label": 0}, {"snippet_id": 73021, "code": "\nfrom django import forms from django.contrib.auth import get_user_model, authenticate from django.contrib.auth.forms import UserCreationForm from django.utils.translation import gettext as _ import magic", "label": 1}, {"snippet_id": 33591, "code": "(rawchem_ptr_id=73) ec.raw_min_comp=0.1 ec.save() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(2, ethylparaben_stats['dds_wf_n'], 'There should", "label": 0}, {"snippet_id": 45560, "code": " form in child_formset.forms: form.color=next(color) else: context['edit_text_form']=ParentForm() return render(request, template_name, context) @login_required() def save_doc_form(request, pk): '''Writes", "label": 1}, {"snippet_id": 19002, "code": " find_nextlocation(request, user): \"\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or", "label": 1}, {"snippet_id": 8688, "code": " string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view", "label": 0}, {"snippet_id": 2508, "code": " the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try", "label": 0}, {"snippet_id": 18458, "code": " errors have occured, hashes the password and then inserts it into the \tMongoDB database by calling hash_password() and do_insert() respectively. \tFinally, sets the secure cookie and logs in the user. \t", "label": 1}, {"snippet_id": 17104, "code": " try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist: i=GamePlayer(player=field.player, game=g,", "label": 0}, {"snippet_id": 44263, "code": "'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser.current_url, \"User should always", "label": 0}, {"snippet_id": 24006, "code": " _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self", "label": 0}, {"snippet_id": 84203, "code": "=ArticleFormClass(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article': True} else: template_params={", "label": 0}, {"snippet_id": 81061, "code": " event.seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name", "label": 0}, {"snippet_id": 46098, "code": "=doc.get_abstract_filename() fs.save(afn, f) zf.write(store +'/pdf/' +afn, afn) zf.close() form=include_extract_form(dg) context['all_documents']=dg.datadocument_set.get_queryset() context['extract_form", "label": 0}, {"snippet_id": 84545, "code": "' % old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES", "label": 0}, {"snippet_id": 3180, "code": " absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url", "label": 0}, {"snippet_id": 42408, "code": " ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp.status_code, 200) resp=self", "label": 0}, {"snippet_id": 10310, "code": "'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)", "label": 0}, {"snippet_id": 8123, "code": ", settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current", "label": 0}, {"snippet_id": 44300, "code": " tag=tag) ProductToPUC.objects.create(product=p, puc=puc) url=self.live_server_url +f'/product/{p.pk}/' self.browser.get(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit", "label": 0}, {"snippet_id": 15648, "code": "): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form", "label": 0}, {"snippet_id": 41683, "code": " in the page!')) self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response", "label": 0}, {"snippet_id": 75043, "code": " for kw in unsorted_user_keywords]) if user_keywords and(user_keywords !=db_keywords): return True return False @login_required def candidate_metadata(request, candidate_id): from.forms import MetadataForm", "label": 0}, {"snippet_id": 12315, "code": " destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email", "label": 0}, {"snippet_id": 55768, "code": "\t\tself.number=number \t\tself.text=text class File(FSItem): \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close", "label": 0}, {"snippet_id": 52871, "code": "'timestamp_string': instance.timestamp_string, 'user_handle': self.request.user.full_name, 'user_type': self.request.user.user_type, 'message': instance.text, 'file_name': os.path.basename(urlparse(instance", "label": 0}, {"snippet_id": 34730, "code": "=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id', distinct=True)).\\ order_by().values('sid','dds_wf_n') products_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid')", "label": 0}, {"snippet_id": 40685, "code": " +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split(", "label": 1}, {"snippet_id": 67871, "code": "']=count return context def get_queryset(self): query=Org.objects.order_by('id') return query class TagListView(ListView): model=Tag template_name='threat/tag_list.html' context_object_name='tags' def get_context_data", "label": 0}, {"snippet_id": 83895, "code": "(['GET']) def view_article(request, title, revision=None, ArticleClass=Article, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='view.html', template_dir='wiki", "label": 0}, {"snippet_id": 33241, "code": " u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag", "label": 0}, {"snippet_id": 56843, "code": "'concept']=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context) @login_required() def concept_edit(request", "label": 0}, {"snippet_id": 73847, "code": ": sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\"): return position(request, Position.objects", "label": 1}, {"snippet_id": 16700, "code": " a round\"\"\" seeder=_create_game_seeder(tournament, the_round.number()) sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games(omitting_players=sitters, players_doubling_up", "label": 0}, {"snippet_id": 75924, "code": ", ) from_url=models.CharField( _('From URL'), max_length=255, db_index=True, help_text=from_url_helptext, blank=True, ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext", "label": 0}, {"snippet_id": 6798, "code": "'main.index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user.generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm", "label": 0}, {"snippet_id": 12366, "code": "]['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else", "label": 0}, {"snippet_id": 5447, "code": " from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client", "label": 0}, {"snippet_id": 55970, "code": " def experience_redirect(request, experience_share_id): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: real_link='{}{}/{}'.format(settings.PUBLIC_DOMAIN, EXPERIENCE_PATH, experience_share_id", "label": 0}, {"snippet_id": 25072, "code": "/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string", "label": 0}, {"snippet_id": 83986, "code": ": article=ChangeSet.objects.filter( old_title=title).order_by('-revision')[0].article redirected_from=title except IndexError: article=ArticleClass(**article_args) if revision is not None: changeset=get_object_or_404", "label": 0}, {"snippet_id": 71098, "code": "[0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise", "label": 0}, {"snippet_id": 20638, "code": " lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams)", "label": 0}, {"snippet_id": 75618, "code": "(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0: return[{'text': 'Previously Used', 'children': _select2_list(keywords)}] else: return[] def _build_fast_url(term, index", "label": 0}, {"snippet_id": 75151, "code": " contained invisible characters that we\\'ve removed. Please make sure your keywords are correct in the information section below.') return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id'", "label": 0}, {"snippet_id": 979, "code": " newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 50508, "code": "\") def tryacquire(self, filename): self.handle=ctypes.windll.kernel32.CreateFileA(filename,7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle", "label": 0}, {"snippet_id": 21721, "code": " result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g.,", "label": 0}, {"snippet_id": 14965, "code": ":timeseries$', name): attrs=name.split(':') (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,", "label": 0}, {"snippet_id": 19402, "code": ": A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object", "label": 1}, {"snippet_id": 63343, "code": " __name__) @test_views.route('/test') def test(): return 'OK' @test_views.route('/test3') def test3(): return 'OK' self.app.register_blueprint(test_views) def update_config(self, config): \"\"\" Called from", "label": 0}, {"snippet_id": 14574, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 39793, "code": " get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models' is a query-set containing all items of which 'item' is a part of. direction is 'next' or 'prev'", "label": 0}, {"snippet_id": 78690, "code": ".init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict)", "label": 0}, {"snippet_id": 31040, "code": "'description']: editgrudge.description=request.form['description'] if request.form['processed']: editgrudge.processed=request.form['processed'] if request.form['takeaway']: editgrudge.takeaway=request.form", "label": 0}, {"snippet_id": 59200, "code": " concurrent import futures from pathlib import Path from markupsafe import Markup from jinja2 import ChoiceLoader, Environment, FileSystemLoader, PrefixLoader from sanic import Sanic, response from sanic", "label": 0}, {"snippet_id": 77830, "code": "={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"", "label": 0}, {"snippet_id": 66326, "code": " widget.get_visibility(): widget.set_invisible_char(\"\u25cf\") widget.set_visibility(False) else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window.set_headerbar() self", "label": 0}, {"snippet_id": 78851, "code": "._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound", "label": 0}, {"snippet_id": 75601, "code": "): select2_results=[] for r in search_results: select2_results.append({'id': r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order", "label": 0}, {"snippet_id": 6429, "code": "'email_verified', False) and \\ self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL']: logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback", "label": 0}, {"snippet_id": 15288, "code": "(model['model_system_name'], model['model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model(name): models=load_json('models.json') model=next(item for item in models", "label": 0}, {"snippet_id": 66739, "code": ".start() def hide_unlock_failed_revealer(self): unlock_failed_revealer=self.builder.get_object(\"unlock_failed_revealer\") unlock_failed_revealer.set_reveal_child(not unlock_failed_revealer.get_reveal_child", "label": 0}, {"snippet_id": 25466, "code": " self.update_local_scheduler_map() if self.autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__", "label": 0}, {"snippet_id": 48392, "code": "(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,", "label": 0}, {"snippet_id": 69031, "code": ": \"\"\" Ensure CHP is not running \"\"\" if os.path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try: systemd.stop_service", "label": 0}, {"snippet_id": 27893, "code": " ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns", "label": 0}, {"snippet_id": 32547, "code": " if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins", "label": 0}, {"snippet_id": 22547, "code": " display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of", "label": 0}, {"snippet_id": 46711, "code": "] count=0 for line in table: count+=1 doc_type=DocumentType.objects.get(pk=1) code=line['document_type'] if line['filename']=='': errors.append([count,\"Filename can't be empty!\"]) continue if len(line[", "label": 0}, {"snippet_id": 31818, "code": " test_election_not_open(client,create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\"", "label": 1}, {"snippet_id": 76435, "code": " range(rect_of_tiles.Width()): pos=( int(column * _TILE_PIXEL_SIZE), int(row * _TILE_PIXEL_SIZE), int((column +1) * _TILE_PIXEL_SIZE), int((row +1) * _TILE_PIXEL_SIZE) ) im_tile=tiles_array.ImageAt(column,", "label": 0}, {"snippet_id": 53275, "code": ": \"\"\" :param on: :return: \"\"\" my_thread=threading.current_thread() if isinstance(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects.ProjectStep", "label": 0}, {"snippet_id": 46010, "code": " context={ 'datagroup' : dg, 'documents' : paginator.page(1 if page is None else page), 'all_documents' : docs, 'extract_fields': dg.get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' ", "label": 0}, {"snippet_id": 8003, "code": ".is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens", "label": 0}, {"snippet_id": 8616, "code": "], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest", "label": 0}, {"snippet_id": 80282, "code": "'Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action=lock_menu.addAction('Lock All') self.lock_all_action.setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow", "label": 0}, {"snippet_id": 40464, "code": " blank=True) parent=models.ForeignKey('Taxonomy', on_delete=models.CASCADE, null=True, blank=True) source=models.ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField(max_length", "label": 0}, {"snippet_id": 73770, "code": " return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort", "label": 0}, {"snippet_id": 84833, "code": " backlinks(request, title): \"\"\"Simple text search for links in other wiki articles pointing to the current article. If we convert WikiWords to markdown wikilinks syntax, this view should be changed to use", "label": 0}, {"snippet_id": 50136, "code": ".read() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(", "label": 0}, {"snippet_id": 17832, "code": ".session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password was reset. Log in now.'), 'info') return flask.redirect(flask.url_for('account.login')) return", "label": 0}, {"snippet_id": 47470, "code": "() return redirect('data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required() def data_source_delete(request", "label": 0}, {"snippet_id": 64962, "code": ".parse_args() vlevel=args.verbose name=args.name if not name.isidentifier() or keyword.iskeyword(name): raise ValueError('Function name is not a valid identifier') test_case_objs=[] for i, test_case in", "label": 0}, {"snippet_id": 6526, "code": " account from the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect", "label": 1}, {"snippet_id": 59081, "code": " user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from", "label": 0}, {"snippet_id": 6800, "code": ".index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user.generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm',", "label": 0}, {"snippet_id": 66282, "code": " composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked) keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.connect(\"clicked\", self", "label": 0}, {"snippet_id": 80484, "code": " self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception(*sys.exc_info())) desired_width=min(max([len(line) for line", "label": 0}, {"snippet_id": 29792, "code": ") db.session.add(post) current_user.posts.append(post) db.session.commit() return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa') return render_template", "label": 0}, {"snippet_id": 81232, "code": "'event.event' _inherit=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week=fields", "label": 0}, {"snippet_id": 76553, "code": " big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST", "label": 0}, {"snippet_id": 39203, "code": ") @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\" Deletes datagroup directory from filesystem when datagroup instance is deleted.", "label": 0}, {"snippet_id": 83514, "code": ", HttpResponseRedirect, HttpResponseNotAllowed, HttpResponse, HttpResponseForbidden) from django.shortcuts import get_object_or_404, render_to_response, redirect from django.contrib.contenttypes.models", "label": 0}, {"snippet_id": 75148, "code": ", 'Your keywords contained invisible characters that we\\'ve removed. Please make sure your keywords are correct in the information section below.') return HttpResponseRedirect(reverse('candidate_home',", "label": 0}, {"snippet_id": 77937, "code": " import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras to datasets to their schema counterparts.", "label": 0}, {"snippet_id": 47629, "code": " list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or", "label": 0}, {"snippet_id": 25066, "code": " driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\" xray_task_table_prefix", "label": 0}, {"snippet_id": 39560, "code": " import ValidationError from django import forms from django.urls import reverse from.common_info import CommonInfo \t \t \t \t \t class ExtractedText(CommonInfo): data_document=models.OneToOneField('DataDocument", "label": 1}, {"snippet_id": 11809, "code": " settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from", "label": 0}, {"snippet_id": 1784, "code": "/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use", "label": 0}, {"snippet_id": 12113, "code": "'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or ''", "label": 0}, {"snippet_id": 22367, "code": " the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self", "label": 0}, {"snippet_id": 73708, "code": ".POST, request.FILES) if create_position_form.is_valid(): dictionary=parse_position_return_dictionary(create_position_form) errors=dictionary.get('errors') if errors: create_position_form.add_error('pdf'", "label": 0}, {"snippet_id": 75532, "code": " candidate_id})) @login_required def view_file(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) if candidate.person.netid !=request.user.username: if not request.user.has_perm", "label": 0}, {"snippet_id": 46564, "code": "'clean_comp_err']: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) if not context['clean_comp_err']: for ingredient in good_records: ingredient.save() context['msg", "label": 0}, {"snippet_id": 70856, "code": " if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path", "label": 1}, {"snippet_id": 51654, "code": "'&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint,", "label": 0}, {"snippet_id": 69273, "code": "-firstuseauthenticator==0.12', 'jupyterhub-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user", "label": 1}, {"snippet_id": 78091, "code": "\"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email", "label": 1}, {"snippet_id": 33672, "code": "'products_n'], 'There should now be 1 product \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball", "label": 0}, {"snippet_id": 67647, "code": ".getUniqCategory() context['types']=event_obj.getUniqType() context['count']=self.object_list.count() return context def get_queryset(self): pk=self.kwargs['pk'] query=Attribute.objects.filter(event=pk).order_by", "label": 0}, {"snippet_id": 62461, "code": " authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{!r} for{", "label": 0}, {"snippet_id": 46029, "code": "), 'clean_comp_data_form' : include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for", "label": 0}, {"snippet_id": 19435, "code": ".log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files", "label": 1}, {"snippet_id": 7489, "code": "(key) exams=exams.filter_by(**search_kwargs) result=self.exam_schema.dump(exams) return{'exams': result.data, 'errors': result.errors}, 200 except exc.SQLAlchemyError as error: logging.error(error, exc_info", "label": 0}, {"snippet_id": 1148, "code": " endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 17745, "code": ") flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching account was found.'), 'info') return flask.redirect(flask.url_for('main.home')) return flask.render_template", "label": 0}, {"snippet_id": 51845, "code": " def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user", "label": 0}, {"snippet_id": 84140, "code": "': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request.user.is_authenticated(): form.editor=request.user if((article is None) and(group_slug is", "label": 0}, {"snippet_id": 63836, "code": " __name__) @authn_views.route('/login') def login(): \"\"\" login view, redirects to SAML2 IdP \"\"\" return _authn('login-action') @authn_views.route('/chpass') def chpass(): \"\"\" Reauthn view, sends a SAML2", "label": 0}, {"snippet_id": 1460, "code": "%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 3406, "code": "(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '", "label": 0}, {"snippet_id": 16787, "code": ".cleaned_data['game_name'] g.the_set=f.cleaned_data['the_set'] try: g.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round'", "label": 0}, {"snippet_id": 56912, "code": "=form return render(request, 'transactions/concept_edit.html', extra_context) class ConceptList(PaginationMixin, ListView): template_name='transactions/concept_list.html' model=BaseConcept context_object_name", "label": 0}, {"snippet_id": 14047, "code": "): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 50201, "code": " password_hash) session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email already in use') return redirect('/signup')", "label": 0}, {"snippet_id": 6898, "code": "')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password", "label": 0}, {"snippet_id": 58429, "code": "} }, onboarding.NEXT_STEPS:{ \"done\": False, \"settings\":{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" } }, onboarding.INVITE_SOMEBODY:{ \"done\": True, \"settings\":", "label": 0}, {"snippet_id": 20495, "code": "\"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format", "label": 0}, {"snippet_id": 31787, "code": ":vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')=", "label": 0}, {"snippet_id": 34943, "code": ") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger", "label": 0}, {"snippet_id": 54285, "code": "\", politician.lower()) politician=None for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki", "label": 0}, {"snippet_id": 78884, "code": " validator.validate_datarequest(context, data_dict) organisation_updated=data_req.organization_id !=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id=data_req.organization_id", "label": 0}, {"snippet_id": 42137, "code": " contain a count of 0 total extracted documents') self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self", "label": 0}, {"snippet_id": 49322, "code": " extracted_list_presence in extracted_text.rawchem.select_subclasses('extractedlistpresence'): tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence) if tag_form.is_valid", "label": 0}, {"snippet_id": 24844, "code": " autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis(", "label": 1}, {"snippet_id": 18205, "code": " import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run", "label": 0}, {"snippet_id": 60657, "code": ".message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[", "label": 0}, {"snippet_id": 24286, "code": " profiling.profile( \"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key)) elif key.startswith(b\"FunctionsToRun\"): with profiling", "label": 0}, {"snippet_id": 59119, "code": "''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email: my_invite=invite break user_email_name, user_domain", "label": 0}, {"snippet_id": 40889, "code": " classification_method='MA') p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0]", "label": 0}, {"snippet_id": 20473, "code": "--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use", "label": 0}, {"snippet_id": 48517, "code": "=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type", "label": 0}, {"snippet_id": 5602, "code": "(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param", "label": 0}, {"snippet_id": 44579, "code": " Type', description='Test Product Description', last_edited_by=user, kind='FO') extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript )", "label": 0}, {"snippet_id": 40646, "code": "'0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html", "label": 0}, {"snippet_id": 38823, "code": "=models.UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete", "label": 0}, {"snippet_id": 19049, "code": "\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"", "label": 1}, {"snippet_id": 39483, "code": " blank=True) def __str__(self): return self.raw_chem_name @classmethod def detail_fields(cls): return['extracted_text','raw_cas','raw_chem_name','report_funcuse'] def get_extractedtext(self): return self", "label": 0}, {"snippet_id": 64491, "code": " to{}'.format(user, location_on_success)) return response except current_app.central_userdb.exceptions.UserDoesNotExist: current_app.logger.error('No user with eduPersonPrincipalName={} found'.format(eppn", "label": 0}, {"snippet_id": 50391, "code": " read_dependencies_from_filename import os import platform import threading import sys import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS=\"default\" ALL_STEPS", "label": 0}, {"snippet_id": 60315, "code": "=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args==('interrupted',): raise InterruptedError(e) print( \"ERROR: conn={}, sql={}, params", "label": 0}, {"snippet_id": 1807, "code": " view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath", "label": 1}, {"snippet_id": 50336, "code": " session.pop('tempFile', None) return \"\" @app.route('/authorize/<provider>') def oauth_authorize(provider): oauth=OAuthSignIn.get_provider(provider) return oauth.authorize() @app.route('/callback/<provider", "label": 0}, {"snippet_id": 4169, "code": "/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout()", "label": 0}, {"snippet_id": 78101, "code": "=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras',", "label": 0}, {"snippet_id": 54289, "code": " politician=None for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl", "label": 0}, {"snippet_id": 17391, "code": ".password.data user=models.User.by_username(username) if not user: user=models.User.by_email(username) if not user or password !=user.password_hash: flask.flash(flask.Markup( '<strong>Login failed!</strong", "label": 0}, {"snippet_id": 39910, "code": " ugettext_lazy as _ from dashboard.models import ExtractedText class QANotes(CommonInfo): extracted_text=models.OneToOneField(ExtractedText, on_delete=models.CASCADE) qa_notes=models.TextField(null=True", "label": 1}, {"snippet_id": 21364, "code": " following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes[process_type] if", "label": 0}, {"snippet_id": 83870, "code": "=ArticleClass(title='NewArticle') template_params['new_article']=new_article if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name", "label": 0}, {"snippet_id": 73764, "code": ": save_position_to_user(request) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText", "label": 0}, {"snippet_id": 2189, "code": "\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 46001, "code": "=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context={ 'datagroup' : dg, 'documents' : paginator.page(1 if page is None else", "label": 0}, {"snippet_id": 13989, "code": " Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override", "label": 0}, {"snippet_id": 70241, "code": " used during development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import", "label": 0}, {"snippet_id": 72586, "code": "'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model", "label": 0}, {"snippet_id": 9342, "code": " } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME", "label": 0}, {"snippet_id": 18194, "code": ".motor_tornado from argon2 import PasswordHasher from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from", "label": 1}, {"snippet_id": 72137, "code": ", 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons: ganesha_conf.reload_daemons(daemons) return", "label": 0}, {"snippet_id": 12870, "code": "'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT", "label": 0}, {"snippet_id": 23545, "code": " function or actor method. default_resources: The default custom resources required by this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus", "label": 0}, {"snippet_id": 77594, "code": "(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination", "label": 0}, {"snippet_id": 965, "code": " you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part:", "label": 1}, {"snippet_id": 79866, "code": " modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for", "label": 0}, {"snippet_id": 26142, "code": " self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params", "label": 0}, {"snippet_id": 70977, "code": " directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy", "label": 0}, {"snippet_id": 15765, "code": ") return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']) def view_run_add(field): run_form=get_run_form", "label": 0}, {"snippet_id": 46406, "code": ".create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product, document=doc) stub +=1 context['bulk']=0 if request.method==", "label": 0}, {"snippet_id": 16398, "code": "('seed_games', args=(tournament_id, r.number()))) return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect(reverse('create_games', args=(tournament_id", "label": 1}, {"snippet_id": 74838, "code": " HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance", "label": 0}, {"snippet_id": 73176, "code": "=CreateAccountFormText.create_account email_text=CreateAccountFormText.email_address password_text=CreateAccountFormText.choose_password password_confirm_text=CreateAccountFormText.confirm_password email=forms.EmailField", "label": 0}, {"snippet_id": 64968, "code": " not name.isidentifier() or keyword.iskeyword(name): raise ValueError('Function name is not a valid identifier') test_case_objs=[] for i, test_case in enumerate(args.test_case): test_case=name +test_case", "label": 0}, {"snippet_id": 43701, "code": ", f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser", "label": 0}, {"snippet_id": 12275, "code": "\"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email", "label": 0}, {"snippet_id": 29285, "code": "(app, FILE_SIZE_LIMIT) return app def register_blueprints(app): \"\"\" Register all blueprint modules Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline", "label": 0}, {"snippet_id": 9774, "code": ".get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to,", "label": 0}, {"snippet_id": 64228, "code": " pysaml2 help and log the user out. Note that the IdP can request a logout even when we didn't initiate the process as a single logout request started by another SP. \"\"\" current_app.logger.debug('Logout", "label": 0}, {"snippet_id": 35651, "code": ": p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product", "label": 1}, {"snippet_id": 23671, "code": " logger.addHandler(_default_handler) logger.propagate=False def try_update_handler(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler", "label": 1}, {"snippet_id": 57471, "code": " return redirect('message', message=gettext('Transaction Closed')) if request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']==", "label": 0}, {"snippet_id": 2026, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not", "label": 0}, {"snippet_id": 32689, "code": " def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH)", "label": 0}, {"snippet_id": 15744, "code": "=['POST']) def view_run_submit(): run_form=get_run_form() commands=get_commands(run_form) if run_form.validate_on_submit(): return json.dumps({ 'commands': commands, 'html': render_template('run_success", "label": 0}, {"snippet_id": 19491, "code": " if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell()) next_line=self.log_file_handles[log_filename].readline() if next_line ", "label": 1}, {"snippet_id": 44492, "code": "=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code", "label": 0}, {"snippet_id": 43555, "code": " for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"", "label": 1}, {"snippet_id": 78333, "code": " as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit", "label": 0}, {"snippet_id": 68632, "code": " tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition", "label": 0}, {"snippet_id": 82498, "code": " monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component ", "label": 0}, {"snippet_id": 27517, "code": "\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in", "label": 1}, {"snippet_id": 11121, "code": " pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string", "label": 0}, {"snippet_id": 37037, "code": "'description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description", "label": 1}, {"snippet_id": 53160, "code": ".assertEqual(self.view.get_object().house_cond, None) data={'budget': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().budget, None) data={'current_rent': 'TEXT'} self.client", "label": 0}, {"snippet_id": 44177, "code": "/*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") dg=DataGroup.objects", "label": 0}, {"snippet_id": 48634, "code": ".queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=", "label": 0}, {"snippet_id": 55903, "code": " import urlencode, quote_plus from django.http import HttpResponse, JsonResponse from django.conf import settings from experiences.factories import create_get_experience_interactor from profiles.factories", "label": 0}, {"snippet_id": 79721, "code": " model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk", "label": 0}, {"snippet_id": 6601, "code": " session has expired.') return redirect(url_for('auth.login')) if not current_user.confirmed \\ and request.endpoint[:5] !='auth.' \\ and request.endpoint !='static': return redirect(url_for('auth.unconfirmed'", "label": 0}, {"snippet_id": 84222, "code": " template_params={'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is", "label": 0}, {"snippet_id": 52331, "code": "\"/current-board\", methods=[\"POST\"]) def update_most_recently_clicked_board(): \"\"\" \"\"\" board_id=request.form.get(\"boardId\") session[\"current_board\"]=board_id print \"Session updated with board{}.\".format", "label": 0}, {"snippet_id": 25836, "code": " socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's", "label": 0}, {"snippet_id": 34341, "code": " attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field", "label": 0}, {"snippet_id": 74875, "code": " candidate_form}) @login_required def candidate_home(request, candidate_id=None): try: if candidate_id: candidate=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects", "label": 0}, {"snippet_id": 52712, "code": " urlparse from channels import Group from rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework", "label": 1}, {"snippet_id": 897, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 673, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=", "label": 0}, {"snippet_id": 42430, "code": "/raw_extracted_records/%s/' % dg_ids[0]) field_list='ExtractedChemical_id,raw_cas,raw_chem_name,raw_min_comp,raw_central_comp,raw_max_comp,unit_type' content=list(i.decode('utf-8') for i in resp.streaming_content", "label": 0}, {"snippet_id": 57637, "code": " to send an email to. template_subject(str): path to a subject template, e.g. 'ctms/email/subject.txt' template_text(str): path to a body template, e.g. 'ctms/email/text.txt' \"\"\" context=Context(context_data", "label": 0}, {"snippet_id": 9778, "code": ", pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if", "label": 0}, {"snippet_id": 51691, "code": "=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={ 'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } if", "label": 0}, {"snippet_id": 6969, "code": ".validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token, form.password.data): flash('Your password", "label": 0}, {"snippet_id": 72193, "code": " export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id", "label": 0}, {"snippet_id": 79139, "code": " Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound", "label": 0}, {"snippet_id": 18403, "code": "(hashed_password,self.password) \t\texcept VerifyMismatchError: \t\t\thashed_password=ph.hash(self.password) \t\treturn hashed_password \t\"\"\" post(): \tSets class variables, does rudimentary checks on username and", "label": 1}, {"snippet_id": 42767, "code": ".first() self.assertIn(f'/qa/extractedtext/{et.pk}/'.encode(), response.content) group_count=QAGroup.objects.filter(extraction_script_id=pk).count() self.assertTrue(group_count==1) self.assertTrue(Script", "label": 0}, {"snippet_id": 67695, "code": " query class AttributeListView(PaginationMixin, ListView): model=Attribute template_name='threat/attribute_list.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 19778, "code": " responsible for detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed", "label": 0}, {"snippet_id": 12888, "code": " 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines", "label": 0}, {"snippet_id": 20486, "code": " required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants", "label": 0}, {"snippet_id": 37564, "code": " Attribute to Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form.submit();' class BulkProductTagForm(forms.ModelForm): required_css_class='required", "label": 0}, {"snippet_id": 21279, "code": ": \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception", "label": 0}, {"snippet_id": 78770, "code": " the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD modification Will send email notification if organisation was changed to", "label": 0}, {"snippet_id": 51083, "code": "._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self, *args, **kwargs): ''' Deprecated", "label": 0}, {"snippet_id": 71978, "code": " import cherrypy import cephfs from. import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import", "label": 1}, {"snippet_id": 18007, "code": "=get_activation_link(user) tmpl_context={ 'activation_link': activation_link, 'user': user } email_msg=email.EmailHolder( subject='Verify your{} account'.format(app.config['GLOBAL_SITE_NAME']), recipient", "label": 0}, {"snippet_id": 34898, "code": ") try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks", "label": 0}, {"snippet_id": 76905, "code": "+\"-\") image.save(t_path, image_spec.pil_format, **image.info) os.chmod(t_path, 777) except IOError, e: logger.error(\"Failed to save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy", "label": 0}, {"snippet_id": 83701, "code": "=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60) def create_message(self, request): \"\"\"Send a message to the user if there is another user editing this article.\"\"\" if not self.is_mine(request): user", "label": 0}, {"snippet_id": 55629, "code": " class Folder(FSItem): \tdef __init__(self,path): \t\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir", "label": 0}, {"snippet_id": 54111, "code": " count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"", "label": 0}, {"snippet_id": 31266, "code": "', 'corsheaders', 'db_mutex', 'coala_online', ] +['gitmate_'+plugin for plugin in GITMATE_PLUGINS] REST_FRAMEWORK={ 'DEFAULT_AUTHENTICATION_CLASSES':( 'rest_framework.authentication.BasicAuthentication", "label": 0}, {"snippet_id": 44587, "code": " extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType", "label": 0}, {"snippet_id": 63538, "code": " eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from) csrft='csrf token' with self.app.test_request_context('/logout', method='POST', headers={'Cookie': cookie}, data={'csrf':", "label": 0}, {"snippet_id": 4371, "code": " account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 35770, "code": "].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment", "label": 0}, {"snippet_id": 13633, "code": "), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME", "label": 0}, {"snippet_id": 67267, "code": "(TemplateView): template_name='ip/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP()", "label": 0}, {"snippet_id": 82683, "code": " Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self", "label": 0}, {"snippet_id": 70553, "code": " %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index", "label": 0}, {"snippet_id": 28548, "code": "]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"\"Determine a", "label": 0}, {"snippet_id": 79, "code": ", serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the", "label": 0}, {"snippet_id": 8519, "code": "\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as", "label": 0}, {"snippet_id": 66064, "code": " DatabaseManager from keepassgtk.unlocked_database import UnlockedDatabase import keepassgtk.config_manager from keepassgtk.logging_manager import LoggingManager import gi gi.require_version('Gtk', '3.0'", "label": 0}, {"snippet_id": 64389, "code": "('/token-login', methods=['POST']) def token_login(): current_app.logger.debug('Starting token login') location_on_fail=current_app.config.get('TOKEN_LOGIN_FAILURE_REDIRECT_URL') location_on_success=current_app", "label": 0}, {"snippet_id": 72764, "code": ".email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form", "label": 0}, {"snippet_id": 20939, "code": " stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR", "label": 1}, {"snippet_id": 4804, "code": ") self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"", "label": 0}, {"snippet_id": 17765, "code": " return flask.render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User", "label": 0}, {"snippet_id": 60241, "code": "=page_size or self.page_size def sql_operation_in_thread(): conn=getattr(connections, db_name, None) if not conn: info=self.inspect()[db_name] if info[\"file\"]==\":memory:\": conn=sqlite3.connect(\":memory", "label": 0}, {"snippet_id": 18178, "code": ".com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print \"[-]Domain is invalid\"\r \r if is_closed", "label": 1}, {"snippet_id": 68265, "code": ".thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=tweet.objects.order_by('-datetime') keyword=self.request.GET.get('keyword') if keyword is", "label": 0}, {"snippet_id": 1867, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"", "label": 1}, {"snippet_id": 73852, "code": ".method=='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(", "label": 1}, {"snippet_id": 5507, "code": " paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 77979, "code": "( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency", "label": 0}, {"snippet_id": 40455, "code": ".CharField(max_length=100, blank=False, null=False) description=models.TextField(null=True, blank=True) parent=models.ForeignKey('Taxonomy', on_delete=models.CASCADE, null=True, blank=True) source=models", "label": 1}, {"snippet_id": 35784, "code": "'referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse", "label": 0}, {"snippet_id": 17288, "code": "}) def game_index(request, tournament_id, round_num): \"\"\"Display a list of games in the round\"\"\" t=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) the_list=r", "label": 0}, {"snippet_id": 27916, "code": " span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time", "label": 0}, {"snippet_id": 27759, "code": " may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically", "label": 1}, {"snippet_id": 17893, "code": ".data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!</strong> Incorrect password.')", "label": 0}, {"snippet_id": 81605, "code": "'] fit_subscriptions=fields.One2many(comodel_name='fit.subscription', inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions", "label": 0}, {"snippet_id": 72738, "code": "=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete() return render(request, 'registration/login.html', ", "label": 1}, {"snippet_id": 38765, "code": "{ 'CO':(ExtractedText, ExtractedChemical), 'FU':(ExtractedText, ExtractedFunctionalUse), 'CP':(ExtractedCPCat, ExtractedListPresence) } class DataGroup(CommonInfo): name=models.CharField(max_length=50)", "label": 0}, {"snippet_id": 52577, "code": ".form.getlist(\"email\") messages_list=request.form.getlist(\"email-message\") sender=session.get(\"displayname\") default_message=\"\"\"{sender} has invited you to join the team {team_name} on SamePage. Accept to", "label": 0}, {"snippet_id": 28258, "code": " check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if", "label": 0}, {"snippet_id": 31474, "code": "''), 'HOST': os.environ.get('DB_ADDRESS', ''), 'PORT': os.environ.get('DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator", "label": 0}, {"snippet_id": 63057, "code": ".authn('/login') def test_chpass_authn(self): self.authn('/chpass', force_authn=True) def test_terminate_authn(self): self.authn('/terminate', force_authn=True) def test_login_assertion_consumer_service", "label": 0}, {"snippet_id": 20399, "code": ".redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly. \"\"\" self", "label": 0}, {"snippet_id": 62740, "code": " the cookie has her eppn). This method returns the cookie that has to be sent with any subsequent request that needs to be athenticated. :param eppn: the eppn of the user to be logged in :type eppn: str", "label": 0}, {"snippet_id": 32235, "code": " self.read() start=self.position value=[] while self.char and self.char !=end: value.append(self.char) self.read() if self.char is None: raise ValueError('unexpected end of line while reading quoted word", "label": 0}, {"snippet_id": 32273, "code": " start=self.position value=[] while self.char and self.char.isprintable() and not self.char.isspace(): value.append(self.char) self.read() return Token(TokenType.WORD, ''.join(value), start) else: token", "label": 0}, {"snippet_id": 46236, "code": " else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script=script) if not created and ext.one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name'", "label": 0}, {"snippet_id": 7699, "code": " @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from", "label": 0}, {"snippet_id": 24083, "code": ": client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock", "label": 0}, {"snippet_id": 28315, "code": " def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves,", "label": 0}, {"snippet_id": 46167, "code": ".get_extracted_template_fieldnames())- set(table.fieldnames)) if missing: context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name", "label": 0}, {"snippet_id": 38237, "code": " return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk)", "label": 0}, {"snippet_id": 35031, "code": " django.shortcuts import redirect from django.db.models import Count, Q from django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms", "label": 0}, {"snippet_id": 75008, "code": "'form': form}) def _user_keywords_changed(thesis, user_request_keywords): db_keywords_info={} for kw in thesis.keywords.all(): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords", "label": 0}, {"snippet_id": 10923, "code": " return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a", "label": 0}, {"snippet_id": 54751, "code": " self.problems: \t\t\tprob_id, prob_data=problem \t\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data)) \t\t\tself.code_list.append", "label": 0}, {"snippet_id": 25947, "code": ".redis_password, redis_max_memory=self._ray_params.redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER", "label": 0}, {"snippet_id": 73113, "code": "=self.cleaned_data.get('url_ref') if not pdf and not url: msg=forms.ValidationError(ErrorMessages.empty_create_position_form) self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError", "label": 1}, {"snippet_id": 21463, "code": ") raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process", "label": 0}, {"snippet_id": 31010, "code": ".one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to edit this grudge.');}</script><body onload='myFunction()'>\" if request.method==", "label": 1}, {"snippet_id": 21458, "code": " message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate()", "label": 0}, {"snippet_id": 55678, "code": " \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t", "label": 0}, {"snippet_id": 39139, "code": "=='CO': return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields", "label": 0}, {"snippet_id": 5018, "code": ", 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self", "label": 1}, {"snippet_id": 56388, "code": ".status_code==302 assert self.response['Location']==url return self class RedirectProfileTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase", "label": 0}, {"snippet_id": 5121, "code": "'testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password", "label": 0}, {"snippet_id": 15167, "code": "(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField('Start day',[validators.required()], '%Y-%m", "label": 0}, {"snippet_id": 5442, "code": " import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation", "label": 0}, {"snippet_id": 77064, "code": " projection, request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type=request_type", "label": 0}, {"snippet_id": 2725, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID", "label": 0}, {"snippet_id": 76996, "code": " gethostname import urllib2 import urlparse import wms.ogc.common.projections as projections _LAYER_ARG_NAMES={ \"ImageryMaps\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"}, \"VectorMapsRaster\":{ \"x\": \"col\", \"y\": \"row\", ", "label": 1}, {"snippet_id": 20510, "code": "( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format", "label": 0}, {"snippet_id": 36739, "code": "]=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month", "label": 0}, {"snippet_id": 13238, "code": " import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth", "label": 0}, {"snippet_id": 60410, "code": "=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u: urllib.parse.quote_plus(u) self.jinja_env.filters[\"escape_sqlite\"]=escape_sqlite self.jinja_env.filters[\"to_css_class\"]=to_css_class pm", "label": 0}, {"snippet_id": 53221, "code": " from django.views.generic.simple import direct_to_template from oi.projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get", "label": 1}, {"snippet_id": 8483, "code": " **kwargs) return response.content def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode", "label": 0}, {"snippet_id": 82923, "code": ".comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name", "label": 0}, {"snippet_id": 74215, "code": " user in access request\" invalid_access_no_key_message=\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner", "label": 0}, {"snippet_id": 32876, "code": ".fd) class RedirectionsHelper: ''' Helps perform multiple file redirections. Args: redirections: A list of redirections. ''' def __init__(self, redirections): self.redirections=redirections self.stack=None", "label": 0}, {"snippet_id": 30727, "code": " editGrudget.user_id !=login_session['user_id']: return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to edit this grudget. Please create your own grudget in order to", "label": 1}, {"snippet_id": 67565, "code": " publish_timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute", "label": 0}, {"snippet_id": 43244, "code": ") body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input", "label": 0}, {"snippet_id": 44366, "code": " self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 5110, "code": " users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self)", "label": 0}, {"snippet_id": 72633, "code": ".split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) mail_sent", "label": 1}, {"snippet_id": 29692, "code": " if post.items: return render_template('show.html', post=post, form=CommentForm()) flash('That Benwa doesn\\'t exist yet') return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/add", "label": 0}, {"snippet_id": 50847, "code": "[flatten_string_list(x) for x in arglist],[]) def flatten_comma_list(arglist): return sum([s.split(\",\") for s in arglist],[]) def process_kwargs(func_name, kwarg_dict, defaults_dict): result=dict(defaults_dict) for key", "label": 0}, {"snippet_id": 18659, "code": "\terror=\"Password is wrong, try again!\" \t\treturn error\t\t\t \t\"\"\" post(): \tSets the class variables and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the", "label": 1}, {"snippet_id": 13577, "code": " settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages", "label": 0}, {"snippet_id": 76058, "code": " information. No protocol/domain is returned. \"\"\" if re.match('^https?://', filename): return filename return resolve_path( project=self.project, language=language, version_slug=version_slug, filename=filename, )", "label": 1}, {"snippet_id": 38696, "code": " pathlib import Path, PurePath from django.db import models from.common_info import CommonInfo from django.urls import reverse from django.db.models.signals import pre_save from django.dispatch import receiver", "label": 1}, {"snippet_id": 30161, "code": "'sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state", "label": 0}, {"snippet_id": 47678, "code": "'curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n=Count(", "label": 0}, {"snippet_id": 75651, "code": " index) url='%s&queryReturn=%s&suggest=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for", "label": 0}, {"snippet_id": 43775, "code": " can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit", "label": 0}, {"snippet_id": 77706, "code": " security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency", "label": 0}, {"snippet_id": 84005, "code": " if revision is not None: changeset=get_object_or_404( article.changeset_set, revision=revision) article.content=changeset.get_content() template_params={'article': article, 'revision': revision, 'redirected_from", "label": 0}, {"snippet_id": 24803, "code": " processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes: redis", "label": 0}, {"snippet_id": 44851, "code": " import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects() def test_habitsandpractices", "label": 0}, {"snippet_id": 74630, "code": " def get_shib_info_from_request(request): info={} info['last_name']=request.META.get('Shibboleth-sn', '') info['first_name']=request.META.get('Shibboleth-givenName', '') info['email']=request.META.get(", "label": 0}, {"snippet_id": 62997, "code": " corresponding to an authenticated session. :param session_id: the token for the session :type session_id: str :return: the cookie \"\"\" return dump_cookie(self.app.config.get('SESSION_COOKIE_NAME'), session_id,", "label": 0}, {"snippet_id": 25207, "code": "!=len(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel", "label": 0}, {"snippet_id": 53199, "code": "={ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': '+26334465657456774567', 'email': 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual", "label": 0}, {"snippet_id": 71232, "code": " and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id)) if self.user is None: pass else: self.user=None return self def _load_user_by_profile(self, profile): if", "label": 0}, {"snippet_id": 23662, "code": " _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger.propagate=False def try_update_handler(new_stream):", "label": 1}, {"snippet_id": 29496, "code": "'token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup')) @auth.route('/signup', methods=['GET', 'POST']) def signup(): form=RegistrationForm() if", "label": 0}, {"snippet_id": 17084, "code": " return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name", "label": 0}, {"snippet_id": 7836, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 83735, "code": ": return self.user_ip==get_real_ip(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or", "label": 0}, {"snippet_id": 49636, "code": " check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor", "label": 0}, {"snippet_id": 29028, "code": " given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object", "label": 0}, {"snippet_id": 31847, "code": "\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client", "label": 1}, {"snippet_id": 31390, "code": ".security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib", "label": 0}, {"snippet_id": 2703, "code": ".authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint", "label": 0}, {"snippet_id": 17619, "code": " <a href=\"{}\">ask a moderator</a> to manually ' 'activate your account <a href=\"{}\">\\'{}\\'</a>.' .format(flask.url_for('site.help') +' flask.url_for('users.view_user', user_name=user.username), user.username", "label": 0}, {"snippet_id": 27679, "code": " profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[]", "label": 1}, {"snippet_id": 69303, "code": ".ensure_group('jupyterhub-users') logger.info(\"Granting passwordless sudo to JupyterHub admins...\") with open('/etc/sudoers.d/jupyterhub-admins', 'w') as f: f.write('%jupyterhub-admins ALL=(ALL) NOPASSWD: ALL\\n')", "label": 0}, {"snippet_id": 62336, "code": "=code(session_info['name_id']) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info) session['eduPersonAssurance']", "label": 0}, {"snippet_id": 68023, "code": "=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data", "label": 0}, {"snippet_id": 23740, "code": " ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw", "label": 0}, {"snippet_id": 76499, "code": "(\"Stretching to requested: %s\", str( (user_width, user_height))) im_user=im_true.resize((user_width, user_height), Image.ANTIALIAS) return im_user def _FetchTiles(rect_of_tiles, zoom_level, layer_properties", "label": 0}, {"snippet_id": 36029, "code": ".ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable", "label": 0}, {"snippet_id": 24770, "code": ".cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id", "label": 0}, {"snippet_id": 6691, "code": "'auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET", "label": 0}, {"snippet_id": 25876, "code": " Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path): path=os", "label": 0}, {"snippet_id": 49355, "code": "=get_object_or_404(DataDocument, pk=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}", "label": 0}, {"snippet_id": 80383, "code": ") self.bifi_scan_action.triggered.connect(self.start_bifi_scan) self.thin_eta_scan_action.triggered.connect(self.start_thin_etalon_scan) self.lock_all_action.triggered.connect(self.toggle_lock_all) self", "label": 0}, {"snippet_id": 80027, "code": "')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found", "label": 0}, {"snippet_id": 77260, "code": " _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results ", "label": 1}, {"snippet_id": 1249, "code": "'re talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 26040, "code": ".prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self", "label": 0}, {"snippet_id": 11927, "code": " openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request", "label": 0}, {"snippet_id": 3362, "code": "': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request", "label": 0}, {"snippet_id": 82464, "code": " logging import sys import time import hyperion.lib.util.config as config from os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2", "label": 0}, {"snippet_id": 67684, "code": ".filter(category=category) if type is not None: query=query.filter(type=type) return query class AttributeListView(PaginationMixin, ListView): model=Attribute template_name='threat/attribute_list.html'", "label": 0}, {"snippet_id": 69802, "code": " static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re", "label": 0}, {"snippet_id": 39957, "code": " apps from django.db.models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText,", "label": 1}, {"snippet_id": 81274, "code": " string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user'): email=self.env.user.partner_id.email for event in self: domain=['&', '|',('email', '", "label": 0}, {"snippet_id": 29217, "code": " app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True) app.config.from_object('secrets') db.init_app(app) migrate=Migrate(app, db) oauth", "label": 0}, {"snippet_id": 13211, "code": ".has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins", "label": 0}, {"snippet_id": 6543, "code": ".credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized', code=None): return(message, 401,{", "label": 1}, {"snippet_id": 35794, "code": ".pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request", "label": 0}, {"snippet_id": 21867, "code": " primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure", "label": 0}, {"snippet_id": 70677, "code": " files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import", "label": 0}, {"snippet_id": 22025, "code": " number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients", "label": 0}, {"snippet_id": 8128, "code": " fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that", "label": 0}, {"snippet_id": 43006, "code": " def test_approval(self): response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext/7', follow=True) def test_hidden_fields(self): '''ExtractionScript 15", "label": 0}, {"snippet_id": 36577, "code": " response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked", "label": 0}, {"snippet_id": 36608, "code": "=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21, classification_method='MA') p2puc.save() response=self.client", "label": 0}, {"snippet_id": 35091, "code": "): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag", "label": 0}, {"snippet_id": 67651, "code": "=event_obj.getUniqType() context['count']=self.object_list.count() return context def get_queryset(self): pk=self.kwargs['pk'] query=Attribute.objects.filter(event=pk).order_by('id') category=self.request", "label": 0}, {"snippet_id": 67564, "code": "(publish_timestamp__gte=from_date, publish_timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today", "label": 0}, {"snippet_id": 71309, "code": "') if next_uri is not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try: return self.session.data.pop('_redirect_uri').encode('utf-8'", "label": 1}, {"snippet_id": 71269, "code": " load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self.session.data.get(key): self.session.data[key]=[] return self.session.data[key].append(", "label": 0}, {"snippet_id": 25120, "code": ") object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id, _ in object_table_objects.items(): task_id_bin=ray._raylet.compute_task_id(object_id).binary() if task_id_bin", "label": 0}, {"snippet_id": 70098, "code": "}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} ", "label": 0}, {"snippet_id": 52550, "code": "(congratulatory_messages))) else: flash(\"Changes saved.\") db.session.commit() return redirect(\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST']) def invite_new_teammates(team_id): \"\"\"", "label": 0}, {"snippet_id": 48474, "code": ".is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form[", "label": 0}, {"snippet_id": 22577, "code": " strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color.", "label": 0}, {"snippet_id": 44694, "code": " load_model_objects from dashboard.models import ExtractedText, QANotes class ExtractedTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_extracted_doc_date_validation(self): text", "label": 1}, {"snippet_id": 28574, "code": " this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources required by this function or actor", "label": 0}, {"snippet_id": 45300, "code": "(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc('created_at', 'month', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True))", "label": 0}, {"snippet_id": 4063, "code": ", 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test", "label": 0}, {"snippet_id": 56518, "code": "'Location']==url return self class RedirectRootTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_public_domain('http", "label": 1}, {"snippet_id": 68156, "code": "-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.notice==True: hunt.setNoticeFalse() else: hunt.setNoticeTrue()", "label": 0}, {"snippet_id": 46455, "code": " csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form'].collapsed=False context['msg'", "label": 0}, {"snippet_id": 25611, "code": " absolute_import from __future__ import division from __future__ import print_function import atexit import json import os import logging import signal import threading import time import ray import ray", "label": 0}, {"snippet_id": 83164, "code": " notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\")", "label": 0}, {"snippet_id": 30130, "code": " from oauth2client.client import flow_from_clientsecrets from oauth2client.client import FlowExchangeError import httplib2 import json from flask import make_response import requests app=Flask(__name__)", "label": 0}, {"snippet_id": 48666, "code": " form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'", "label": 0}, {"snippet_id": 71708, "code": ".Session.query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session", "label": 0}, {"snippet_id": 37640, "code": "'data_document': forms.HiddenInput(), 'extraction_script': forms.HiddenInput(), } class ExtractedCPCatForm(ExtractedTextForm): class Meta: model=ExtractedCPCat fields=['doc_date', 'cat_code', 'description_cpcat", "label": 1}, {"snippet_id": 56370, "code": ".APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_experience_redirect(self, share_id): client=Client() self.response=client.get(reverse('experience-redirect', args=[share_id])) return self def", "label": 0}, {"snippet_id": 16600, "code": ") assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter", "label": 0}, {"snippet_id": 30979, "code": ":grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') editgrudge=session.query(Grudge).filter_by(id=grudge_id)", "label": 0}, {"snippet_id": 75014, "code": "} for kw in thesis.keywords.all(): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw", "label": 0}, {"snippet_id": 27594, "code": " tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings.", "label": 0}, {"snippet_id": 76867, "code": ": fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the image. image_spec: all", "label": 1}, {"snippet_id": 24418, "code": " on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings", "label": 1}, {"snippet_id": 78769, "code": " note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD modification Will send email notification if organisation was", "label": 0}, {"snippet_id": 64123, "code": " 'The session does not contain ' 'the subject id for user{!r}'.format(user)) location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') else: logouts=client.global_logout(subject_id) loresponse=logouts", "label": 0}, {"snippet_id": 42614, "code": "/find/?q=diatom&group_type=Unidentified') self.assertContains(response, 'Showing 1 -20 of') response=self.c.get('/find/?q=diatom&group_type=BadGroupName') self.assertContains(response, 'Sorry, no result", "label": 1}, {"snippet_id": 48998, "code": " 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request,", "label": 0}, {"snippet_id": 43609, "code": ".current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA", "label": 1}, {"snippet_id": 15116, "code": "',[validators.required()], choices=[]) class ChangeAllModelsForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled", "label": 0}, {"snippet_id": 12749, "code": " The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs", "label": 0}, {"snippet_id": 5161, "code": ".test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get", "label": 0}, {"snippet_id": 68975, "code": " CRAWVaCraFdigIPQEACcYh8rR19wMZZ/hgYv5so6Y1HcJNARuzmffQKozS/rxqec 0xM3wceL1AIMuGhlXFeGd0wRv/RVzeZjnTGwhN1DnCDy1I66hUTgehONsfVanuP1 PZKoL38EAxsMzdYgkYH6T9a4wJH/IPt+uuFTFFy3o8TKMvKaJk98+Jsp2X/QuNxh qpcIGaVbtQ1bn7m", "label": 0}, {"snippet_id": 33301, "code": ".site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin", "label": 0}, {"snippet_id": 77240, "code": " specified target. \"\"\" if target_url[-1] !=\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]", "label": 1}, {"snippet_id": 77536, "code": ".toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"", "label": 0}, {"snippet_id": 7678, "code": " xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User", "label": 0}, {"snippet_id": 53934, "code": " append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer", "label": 0}, {"snippet_id": 18236, "code": ".web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles", "label": 1}, {"snippet_id": 7559, "code": " require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from", "label": 0}, {"snippet_id": 59134, "code": ".email==user.email: my_invite=invite break user_email_name, user_domain=clean_email_name(user.email) invite_email, invite_domain=clean_email_name(invite.email) if invite_domain !=user_domain: continue res", "label": 0}, {"snippet_id": 40796, "code": "??') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count", "label": 0}, {"snippet_id": 29531, "code": "(User.username==username).all() if name_exists: flash('Username %s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username", "label": 1}, {"snippet_id": 72697, "code": " request.user.is_authenticated: form=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user", "label": 1}, {"snippet_id": 36261, "code": " setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn(", "label": 0}, {"snippet_id": 22300, "code": ".plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self.include_log_monitor=include_log_monitor self.autoscaling_config=autoscaling_config", "label": 0}, {"snippet_id": 64922, "code": " value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5, 6], last=8)==None''\") parser.add_argument('-v', '--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time this flag is", "label": 0}, {"snippet_id": 35358, "code": ".queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create", "label": 0}, {"snippet_id": 45512, "code": " if doc.is_extracted: extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) extracted_text_form=ParentForm(instance=extracted_text) child_formset=ChildFormSet(instance=extracted_text) if not edit:", "label": 1}, {"snippet_id": 52034, "code": " to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[] invites_list", "label": 0}, {"snippet_id": 32250, "code": " self.read() if self.char is None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start) elif self.char.isprintable():", "label": 0}, {"snippet_id": 15419, "code": " result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days", "label": 0}, {"snippet_id": 72304, "code": "(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) export=ganesha_conf.remove_export(export_id) if reload_daemons: ganesha_conf", "label": 0}, {"snippet_id": 72836, "code": ".get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form, 'baseVisibleText': InterfaceText", "label": 1}, {"snippet_id": 1422, "code": " continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath)", "label": 1}, {"snippet_id": 44253, "code": " dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel", "label": 0}, {"snippet_id": 9943, "code": "(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to", "label": 0}, {"snippet_id": 70604, "code": " path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the", "label": 0}, {"snippet_id": 80089, "code": ".QtCore import pyqtSlot from PyQt5.QtGui import QTextCursor from PyQt5.QtWidgets import QVBoxLayout, QMainWindow, QWidget, QTextEdit, QInputDialog, QMessageBox, QApplication from matisse import Matisse", "label": 0}, {"snippet_id": 46825, "code": ".close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup.csv.path,'w') as f: myfile=File(f) myfile.write(''.join(text", "label": 0}, {"snippet_id": 51890, "code": ", pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname) session[\"new_user\"]=True flash(\"Account created!\") return redirect(", "label": 0}, {"snippet_id": 25139, "code": ".add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _ in range(len(self.state.redis_clients)", "label": 0}, {"snippet_id": 47642, "code": " weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears", "label": 0}, {"snippet_id": 84588, "code": " changes_qs=changes_qs.filter(article__content_type=get_ct(group), article__object_id=group.id) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user,", "label": 0}, {"snippet_id": 8747, "code": " if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js", "label": 0}, {"snippet_id": 7454, "code": ".exam_returned_date.is_(None), Exam.exam_returned_date > ninety_day_filter)) else: exams=Exam.query.filter(Exam.deleted_date.is_(None))\\ .filter_by(office_id=csr.office_id)\\ .filter(or_(Exam.exam_returned_date.is_", "label": 1}, {"snippet_id": 54520, "code": "=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates", "label": 0}, {"snippet_id": 46263, "code": "(row, ext) row['extracted_text']=ext if(ext_child==ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(", "label": 0}, {"snippet_id": 37604, "code": " model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields", "label": 0}, {"snippet_id": 39857, "code": " decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) central_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis])", "label": 0}, {"snippet_id": 7985, "code": " limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user", "label": 0}, {"snippet_id": 63925, "code": "=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action) current_app.logger.info('Redirecting the user to the IdP for ' +action", "label": 0}, {"snippet_id": 52983, "code": ".request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase): def setUp(self): super(TestUserUpdateView, self).setUp() self.view=UserUpdateView", "label": 0}, {"snippet_id": 24331, "code": "\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode", "label": 0}, {"snippet_id": 37632, "code": " ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num'] widgets={ 'data_document': forms.HiddenInput(), 'extraction_script': forms.HiddenInput(), } class", "label": 0}, {"snippet_id": 32026, "code": " REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto() UNKNOWN=enum.auto() class Token: ''' A string with an assigned meaning. Args", "label": 0}, {"snippet_id": 54864, "code": " t,s in problem_text_students.items(): \t\t\tif len(s) > 1: \t\t\t\tprint(t,s) def process_problem_scores(code_list): \tproblems=[] \tclass problem(object): \t\tdef __init__(self,student,book_edition,chapter,number", "label": 1}, {"snippet_id": 26946, "code": " that resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit", "label": 0}, {"snippet_id": 7742, "code": " in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 14375, "code": " \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration", "label": 0}, {"snippet_id": 67343, "code": "=count context['attributes']=Attribute.objects.filter(Q(value__icontains=ip)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet", "label": 0}, {"snippet_id": 39333, "code": "[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length=100, null=True, blank=True) def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else ", "label": 0}, {"snippet_id": 83298, "code": ") comment=forms.CharField(required=False) user_ip=forms.CharField(widget=forms.HiddenInput) content_type=forms.ModelChoiceField( queryset=ContentType.objects.all(), required=False, widget=forms.HiddenInput", "label": 0}, {"snippet_id": 68024, "code": ".objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data", "label": 0}, {"snippet_id": 28617, "code": " A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy() else", "label": 0}, {"snippet_id": 20099, "code": " driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[[] for _", "label": 0}, {"snippet_id": 79101, "code": " data_dict): \"\"\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the", "label": 0}, {"snippet_id": 36060, "code": "'PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj):", "label": 0}, {"snippet_id": 14451, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth", "label": 0}, {"snippet_id": 55601, "code": "*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list", "label": 0}, {"snippet_id": 54355, "code": "'constituency': pol.constituency, 'wiki': pol.wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians=politicians) \"\"\"Array of datums for politicians Format: JSON \"\"", "label": 0}, {"snippet_id": 77264, "code": "(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close", "label": 1}, {"snippet_id": 51762, "code": "['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript(self,script): script_name='result/'+self.cate_str+'_attack'+str(self.count)+'.sh' with open(script_name", "label": 0}, {"snippet_id": 7928, "code": " the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around", "label": 0}, {"snippet_id": 50028, "code": " return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in", "label": 0}, {"snippet_id": 39938, "code": "(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before approving, please add a note explaining your edits to the extracted data'", "label": 1}, {"snippet_id": 41093, "code": " 'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/') data={'title' :['Product Title'],", "label": 0}, {"snippet_id": 33710, "code": ") self.assertContains(response, 'Download PUCs') def test_download_raw_chem_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains(response", "label": 1}, {"snippet_id": 4317, "code": "\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param", "label": 0}, {"snippet_id": 48625, "code": ",assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True))", "label": 0}, {"snippet_id": 83961, "code": " if not allow_read: return HttpResponseForbidden() is_observing=False redirected_from=None try: article=article_qs.get(**article_args) if notification is not None: is_observing=notification.is_observing", "label": 0}, {"snippet_id": 32214, "code": ", self.position) self.read() return token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start=self", "label": 0}, {"snippet_id": 33140, "code": ".register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec) admin.site.register(PUCToTag,", "label": 0}, {"snippet_id": 37789, "code": "(self, *args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length", "label": 0}, {"snippet_id": 37551, "code": " __init__(self, *args, **kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs", "label": 0}, {"snippet_id": 33546, "code": " ethylparaben_stats=e self.assertEqual( 1, ethylparaben_stats['dds_n'], 'There should now be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\",", "label": 0}, {"snippet_id": 60563, "code": "?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view(self), r\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path", "label": 0}, {"snippet_id": 40185, "code": "'), ('PC', 'product categorization'), ('DC', 'data cleaning')) QA_COMPLETE_PERCENTAGE=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators", "label": 1}, {"snippet_id": 14462, "code": ") HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth", "label": 0}, {"snippet_id": 13251, "code": " django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest,", "label": 0}, {"snippet_id": 62147, "code": " mode=block\", ) def validate_no_sniff(page): return validate_security_header( page, \"X-Content-Type-Options\", \"nosniff\", ) def validate_download_options(page): return validate_security_header( page, \"X", "label": 0}, {"snippet_id": 82216, "code": "(urls_without_category) queryset=Category.objects.all() for cat in queryset: quantity +=cat.justurl_set.all().count() context['number_of_links']=quantity context['urls_without_category']=urls_without_category", "label": 0}, {"snippet_id": 23561, "code": " the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the", "label": 0}, {"snippet_id": 11221, "code": " enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline", "label": 0}, {"snippet_id": 60949, "code": " if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent \"\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s", "label": 0}, {"snippet_id": 5047, "code": "'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the", "label": 0}, {"snippet_id": 57473, "code": " redirect('message', message=gettext('Transaction Closed')) if request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True':", "label": 0}, {"snippet_id": 74015, "code": " -forms -models -helper classes -access checks -redirect handlers and should not define: -templates -url names \"\"\" import logging import re import ratelimit.mixins from nacl.exceptions import CryptoError", "label": 0}, {"snippet_id": 17922, "code": "(flask.Markup( '<strong>Email successfully changed!</strong>'), 'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed", "label": 0}, {"snippet_id": 25952, "code": ".redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER]=( process_infos) def start_log_monitor(self): \"", "label": 0}, {"snippet_id": 80159, "code": " self.window.setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True) self.log_queue=queue.Queue() self.log_stream=LoggingStream", "label": 0}, {"snippet_id": 55414, "code": ".remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.rename(self.path,other.path) \t\telse: \t\t\treturn os.rename", "label": 0}, {"snippet_id": 17423, "code": ".redirect(flask.url_for('account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If", "label": 0}, {"snippet_id": 52679, "code": " methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers", "label": 0}, {"snippet_id": 66256, "code": ".unlock_database_stack_box) def connect_events(self): password_unlock_button=self.builder.get_object(\"password_unlock_button\") password_unlock_button.connect(\"clicked\", self.on_password_unlock_button_clicked)", "label": 0}, {"snippet_id": 65052, "code": ", ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', 'eval') except BaseException as e", "label": 0}, {"snippet_id": 47622, "code": " with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data", "label": 0}, {"snippet_id": 3132, "code": " the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op", "label": 0}, {"snippet_id": 35639, "code": " def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip() if q > '': p=(Product", "label": 0}, {"snippet_id": 66711, "code": " composite_unlock_entry.set_text(\"\") def show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context=unlock_failed_box.get_style_context() context.add_class", "label": 0}, {"snippet_id": 26672, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that This", "label": 0}, {"snippet_id": 2515, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 24486, "code": " of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address), num_current_log_files, -1)", "label": 1}, {"snippet_id": 17177, "code": " enter scores for all the games in a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) GameScoreFormset=formset_factory(GameScoreForm, extra=0) data", "label": 0}, {"snippet_id": 32213, "code": " None, self.position) self.read() return token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start", "label": 0}, {"snippet_id": 7252, "code": " ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' from app.models.theq import Office from.base import Base from", "label": 0}, {"snippet_id": 71885, "code": "(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages", "label": 0}, {"snippet_id": 44858, "code": " load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects() def test_habitsandpractices(self): found=resolve(f'/habitsandpractices/{self.objects.doc.pk}/'", "label": 0}, {"snippet_id": 54685, "code": ".assignments: \t\t\tself.book_editions[assignment.book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert(assignment.chapter==int(sys.argv[1])) \t\t\tnum_probs=len(assignment.problems", "label": 1}, {"snippet_id": 79651, "code": " In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD modification Will send email notification", "label": 0}, {"snippet_id": 59707, "code": " from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self):", "label": 0}, {"snippet_id": 36814, "code": "='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date']=datetime.date.strftime((item['upload_date']),", "label": 0}, {"snippet_id": 32627, "code": ".second.execute(*args) self.second.wait() class PipeNode(DoubleNode): ''' A node that forwards the output of one node to the input of another. Args: first: The node to pipe the output from. second: The", "label": 0}, {"snippet_id": 64881, "code": " this argument is ommitted \" \"then this program just checks the validity of the test cases. \" \"The exit status indicates the validity of the cases\") parser.add_argument('-t', '--test_case', required=True", "label": 0}, {"snippet_id": 2890, "code": " OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE", "label": 0}, {"snippet_id": 76386, "code": " set_pixel_to_bgcolor else _TRANSPARENT_ALPHA if layer_properties.image_format==\"image/jpeg\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent", "label": 0}, {"snippet_id": 78518, "code": " None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title': config", "label": 1}, {"snippet_id": 74645, "code": ") info['email']=request.META.get('Shibboleth-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username", "label": 0}, {"snippet_id": 28410, "code": ": The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is only here to simplify upgrading", "label": 0}, {"snippet_id": 36698, "code": ") stats['datasource_count']=DataSource.objects.count() stats['datadocument_count']=DataDocument.objects.count() stats['datadocument_with_extracted_text_percent']=\\ DataDocument.objects.filter(extracted", "label": 0}, {"snippet_id": 28408, "code": " bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is only here to", "label": 0}, {"snippet_id": 64238, "code": " process as a single logout request started by another SP. \"\"\" current_app.logger.debug('Logout service started') state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app", "label": 0}, {"snippet_id": 31121, "code": "(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete", "label": 0}, {"snippet_id": 60143, "code": ") fts_versions.append(fts) except sqlite3.OperationalError: continue datasette_version={\"version\": __version__} if self.version_note: datasette_version[\"note\"]=self.version_note return{ \"python\":{ \"version", "label": 0}, {"snippet_id": 72447, "code": "(root_dir, depth) paths=[p[:-1] for p in paths if p !=root_dir] return{'paths': paths} except(cephfs.ObjectNotFound, cephfs.PermissionError): return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def", "label": 0}, {"snippet_id": 61477, "code": ".comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(", "label": 0}, {"snippet_id": 53556, "code": " render_error( project: 'projects.Project', error: Exception ) -> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack", "label": 0}, {"snippet_id": 43996, "code": " class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome", "label": 1}, {"snippet_id": 39085, "code": "''' if self.get_zip_url()!='no_path_found': return(self.get_zip_url) else: return False def get_zip_url(self): uuid_path=f'{self.get_dg_folder()}/{str(self.fs_id)}.zip' zip_file_path=f'{self.get_dg_folder", "label": 0}, {"snippet_id": 69401, "code": "(admins): \"\"\" Setup given list of users as admins. \"\"\" if not admins: return logger.info(\"Setting up admin users\") config_path=CONFIG_FILE if os.path.exists(config_path): with open(config_path, 'r') as", "label": 0}, {"snippet_id": 612, "code": " not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 61751, "code": " scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that are in the database and always commits", "label": 0}, {"snippet_id": 39091, "code": ") else: return False def get_zip_url(self): uuid_path=f'{self.get_dg_folder()}/{str(self.fs_id)}.zip' zip_file_path=f'{self.get_dg_folder()}/{self.get_name_as_slug()}.zip' if os.path.isfile(uuid_path):", "label": 0}, {"snippet_id": 77589, "code": " ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency", "label": 0}, {"snippet_id": 49160, "code": "=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance=extracted_text", "label": 0}, {"snippet_id": 28028, "code": "=hashlib.sha1() id_hash.update(uuid.uuid4().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False):", "label": 0}, {"snippet_id": 10564, "code": "['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on", "label": 0}, {"snippet_id": 52776, "code": "\", 'text':message.txt, 'file_name': message.attachment, 'file_link': message.attachment.path } \"\"\" model=Message serializer_class=MessageSerializer permission_classes=[IsAuthenticated,] def create(self", "label": 0}, {"snippet_id": 66023, "code": "(\"quit_button\") back_button.connect(\"clicked\", self.on_back_button_clicked) quit_button.connect(\"clicked\", self.on_quit_button_clicked) unsaved_databases_list_box=builder.get_object(\"unsaved_databases_list_box", "label": 0}, {"snippet_id": 25368, "code": " def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS", "label": 0}, {"snippet_id": 557, "code": " in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\", "label": 1}, {"snippet_id": 56877, "code": " request.method=='POST': form=concept_form(request.POST, instance=concept) if form.is_valid(): form.save() return redirect('transaction_edit', transaction_code=transaction.code) else: extra_context['form']", "label": 0}, {"snippet_id": 81785, "code": "',{'form': form}) def post(self, request, *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created", "label": 0}, {"snippet_id": 28714, "code": ".propagate=False def try_update_handler(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter", "label": 1}, {"snippet_id": 50365, "code": "=OAuthSignIn.get_provider(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect(url_for('login')) user=query_social_user(social); session[", "label": 0}, {"snippet_id": 58137, "code": "{onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1:", "label": 1}, {"snippet_id": 51665, "code": "'+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } script='' if method=", "label": 0}, {"snippet_id": 41618, "code": " response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should start w/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start w/", "label": 0}, {"snippet_id": 41239, "code": "].text self.assertIn('47', hhe_no) class TestDynamicDetailFormsets(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_fetch_extracted_records", "label": 1}, {"snippet_id": 50010, "code": " saveFilePath) if \"diagram\" in request.referrer or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash", "label": 0}, {"snippet_id": 50616, "code": "\"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools, 'vsvars32.bat') python=sys.executable", "label": 0}, {"snippet_id": 6849, "code": "(form.old_password.data): current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for", "label": 0}, {"snippet_id": 13455, "code": "(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request", "label": 0}, {"snippet_id": 69453, "code": " JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http:/", "label": 0}, {"snippet_id": 39458, "code": "\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\"", "label": 0}, {"snippet_id": 13180, "code": " user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context[", "label": 0}, {"snippet_id": 51844, "code": "\") def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user", "label": 0}, {"snippet_id": 21668, "code": " dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type", "label": 0}, {"snippet_id": 71763, "code": ") user_count=models.User.query().count() self.assertEqual(user_count, 0) req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) user=models.User.query().get(", "label": 0}, {"snippet_id": 55924, "code": "'/people/me/login' EXPERIENCE_PATH='/e' PROFILE_PATH='/p' EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse('', status", "label": 0}, {"snippet_id": 70709, "code": " import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import", "label": 0}, {"snippet_id": 79851, "code": " be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id", "label": 0}, {"snippet_id": 18906, "code": " reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user", "label": 0}, {"snippet_id": 3115, "code": "\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): ", "label": 0}, {"snippet_id": 47896, "code": ".name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too", "label": 0}, {"snippet_id": 9839, "code": "{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg", "label": 0}, {"snippet_id": 70539, "code": "> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable", "label": 0}, {"snippet_id": 30765, "code": "=request.form['name'] return redirect(url_for('showGrudgets')) else: return render_template('editGrudget.html', grudget=editedGrudget) @app.route('/grudget/<int:grudget_id>/delete/', methods=['GET', 'POST", "label": 0}, {"snippet_id": 49528, "code": ", User from database.database_insert import insert_user, insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil", "label": 0}, {"snippet_id": 45181, "code": "'id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds", "label": 0}, {"snippet_id": 3913, "code": ", status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains", "label": 0}, {"snippet_id": 49196, "code": " def save_doc_form(request, pk): '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked", "label": 0}, {"snippet_id": 53097, "code": "[form][form]='Update' response=self.client.post(update_url, data_to_pass) self.assertEqual(response.status_code, 302) self.assertTemplateUsed('users/update.html') data={'purchase_step': 8} self.client.post", "label": 1}, {"snippet_id": 23934, "code": "=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \"", "label": 0}, {"snippet_id": 3214, "code": " login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 ", "label": 0}, {"snippet_id": 81020, "code": ": if existing_registration: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('Found existing registration, set state to open(confirmed)') existing_registration.state=", "label": 0}, {"snippet_id": 67304, "code": ") context['tm_sample']=tm.getSamplesFromIP(ip) context['tm_report']=tm.getReportFromIP(ip) context['bls']=blacklist.objects.filter(Q(ip=ip)|Q(url__contains=ip)) count=context['bls'].count() if count > 0", "label": 0}, {"snippet_id": 76004, "code": ".format( self.get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self.to_url if self.redirect_type==", "label": 0}, {"snippet_id": 53032, "code": "'users:update') data={ 'purchase_step_form':{'purchase_step': PS_DAP}, 'marital_status_form':{'status': SC_SI}, 'first_home_form':{'firsthome': True}, 'house_type_form':{'house_type': HT_SF, 'house_age", "label": 0}, {"snippet_id": 41075, "code": " response=self.client.post('/link_product_form/167497/', data=data) self.assertRedirects(response,'/datadocument/167497/') response=self.client.get(response.url) self.assertContains(response, 'New Product')", "label": 0}, {"snippet_id": 68740, "code": " proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-serverextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE) extensions=[ 'jupyterlab 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12',", "label": 1}, {"snippet_id": 33849, "code": " import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login", "label": 0}, {"snippet_id": 12254, "code": " email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage", "label": 0}, {"snippet_id": 54444, "code": "=articles) \"\"\"Tweets for a search query Format: JSON \"\"\" @app.route('/json/tweets/search/<query>', methods=['GET']) def tweets_search(query): access_token='487593326-yu9WIClcUgs9vBWJGGgW4QC9pKedHMdm3NhhNoxe", "label": 0}, {"snippet_id": 18380, "code": " from argon2, hashes the password, \tverifies if the hashing happened properly, re-hashes if the verification failed, \tand then returns hashed password. \t\"\"\" \tdef hash_password(self): \t\tph=PasswordHasher()", "label": 1}, {"snippet_id": 74353, "code": ") return self.render_to_response(context) def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self", "label": 0}, {"snippet_id": 5325, "code": ") def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com", "label": 0}, {"snippet_id": 12692, "code": " retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account", "label": 0}, {"snippet_id": 7659, "code": " UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import", "label": 0}, {"snippet_id": 7744, "code": " try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider", "label": 0}, {"snippet_id": 141, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 15900, "code": "=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self", "label": 0}, {"snippet_id": 49641, "code": ", stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"", "label": 0}, {"snippet_id": 48990, "code": ") def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save", "label": 0}, {"snippet_id": 81465, "code": ", '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+7) new_end_date=end_date ", "label": 1}, {"snippet_id": 28060, "code": " exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback.format_exc()", "label": 0}, {"snippet_id": 26318, "code": ": \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception", "label": 0}, {"snippet_id": 66452, "code": ".remove_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_SUGGESTED_ACTION) keyfile_unlock_select_button.set_label(ntpath.basename(keyfile_chooser_dialog", "label": 0}, {"snippet_id": 65306, "code": ".connect(\"delete-event\", self.on_application_quit) self.custom_css() def create_headerbar(self): builder=Gtk.Builder() builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui\") self.headerbar", "label": 0}, {"snippet_id": 54271, "code": " for a particular politician \"\"\" @app.route('/json/politicians/<politician>') def json_politician(politician): politicians=Politician.all() politicians.filter(\"name=\", politician.lower()) politician=None", "label": 0}, {"snippet_id": 29207, "code": " 1024 security=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True", "label": 0}, {"snippet_id": 70038, "code": "(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {%", "label": 0}, {"snippet_id": 22266, "code": " self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self.node_manager_port=node_manager_port self.node_ip_address=node_ip_address self.num_workers", "label": 0}, {"snippet_id": 44543, "code": "='MSDS', code='MS', group_type=gt) doc=DataDocument.objects.create(title='test document', data_group=dg, document_type=dt, filename='example.pdf') p=Product.objects.create(data_source=ds, upc='Test UPC", "label": 0}, {"snippet_id": 28679, "code": ", logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level", "label": 1}, {"snippet_id": 79153, "code": "=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req", "label": 0}, {"snippet_id": 46024, "code": "}, 'clean_comp_err' :{}, 'extract_form' : include_extract_form(dg), 'clean_comp_data_form' : include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '', } if request.method=='POST", "label": 0}, {"snippet_id": 41708, "code": ") self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included", "label": 0}, {"snippet_id": 55298, "code": " chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod(self.path,mode) \tdef chown(self,uid=-1,gid=-1): \t\treturn os.chown(self.path,uid,gid) \tdef lchflags(self,flags): \t\treturn", "label": 0}, {"snippet_id": 64284, "code": "'SAMLResponse' in request.form: current_app.logger.debug('Receiving a logout response from the IdP') response=client.parse_logout_request_response( request.form['SAMLResponse'], BINDING_HTTP_REDIRECT )", "label": 0}, {"snippet_id": 78163, "code": " data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor", "label": 1}, {"snippet_id": 46967, "code": "].disabled=True groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) return render(request, template_name,{'datagroup': datagroup, 'form': form,", "label": 0}, {"snippet_id": 17072, "code": "['the_set']) except KeyError: continue try: g.full_clean() except ValidationError as e: f.add_error(None, e) g.delete() return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, ", "label": 0}, {"snippet_id": 7884, "code": " True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER", "label": 0}, {"snippet_id": 40055, "code": "'' @property def sid(self): '''If there is no DSSToxLookup record via the curated_chemical relationship, it evaluates to boolean False ''' try: return self.curated_chemical.sid except AttributeError: return", "label": 0}, {"snippet_id": 58572, "code": " preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print", "label": 1}, {"snippet_id": 50694, "code": ".architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path) logfile.write('Deleting \"'", "label": 0}, {"snippet_id": 11649, "code": " user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country'", "label": 0}, {"snippet_id": 32532, "code": ": self.next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token", "label": 0}, {"snippet_id": 39571, "code": " class ExtractedText(CommonInfo): data_document=models.OneToOneField('DataDocument',on_delete=models.CASCADE, primary_key=True) prod_name=models.CharField(max_length=500, null=True, blank=True) doc_date", "label": 0}, {"snippet_id": 44848, "code": " import * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects", "label": 1}, {"snippet_id": 16637, "code": " about the tournament so far\"\"\" tourney_players=tournament.tournamentplayer_set.all() seeder=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10) for tp in tourney_players: seeder.add_player", "label": 0}, {"snippet_id": 29480, "code": " flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret']", "label": 0}, {"snippet_id": 62902, "code": " service and then check the side effects of this access. :param url: the url of the desired authentication mode. :type url: str :param eppn: the eppn of the user to access the service :type eppn: str :param", "label": 0}, {"snippet_id": 67461, "code": " context['30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request", "label": 0}, {"snippet_id": 71462, "code": " models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2.WSGIApplication()) class TestAuthMiddleware(test_base.BaseTestCase): def setUp(self): super", "label": 0}, {"snippet_id": 34828, "code": "'attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat", "label": 1}, {"snippet_id": 20896, "code": ".num_redis_shards, redis_max_clients=self._ray_params.redis_max_clients, redirect_output=self._ray_params.redirect_output, redirect_worker_output=self._ray_params.redirect_worker_output, password=self._ray_params", "label": 0}, {"snippet_id": 11741, "code": " user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth'", "label": 0}, {"snippet_id": 28317, "code": "(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere", "label": 0}, {"snippet_id": 82199, "code": "(self, **kwargs): context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count() print(urls_without_category) queryset=Category.objects.all() for", "label": 0}, {"snippet_id": 32348, "code": ".last=None self.next() def parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of tokens is malformed", "label": 0}, {"snippet_id": 70221, "code": "[^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) >", "label": 0}, {"snippet_id": 15309, "code": " item in models if item['model_system_name']==name) return[( value['series_name_system'], value['series_name_system'] +':' +value['series_name_user'] ) for key, value in model['inputs'].iteritems()] def", "label": 0}, {"snippet_id": 54982, "code": ".path.html \tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods", "label": 0}, {"snippet_id": 10589, "code": "(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request", "label": 0}, {"snippet_id": 65182, "code": "=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points, 'failed to compile code", "label": 0}, {"snippet_id": 5744, "code": "(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id", "label": 0}, {"snippet_id": 12023, "code": " request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse", "label": 0}, {"snippet_id": 78992, "code": " request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id", "label": 0}, {"snippet_id": 58722, "code": ".http.response import Http404 from django.template import loader, Context from accounts.models import Instructor from chat.models import EnrollUnitCode from core.common import onboarding from core.common", "label": 0}, {"snippet_id": 40380, "code": "() > 1: return QAGroup.objects.filter(extraction_script=es).first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es, qa_checked", "label": 0}, {"snippet_id": 52852, "code": "(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ 'id': instance.id.__str__(), 'timestamp': instance.time_ago", "label": 0}, {"snippet_id": 82827, "code": " order to write to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process", "label": 0}, {"snippet_id": 12164, "code": " configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing'", "label": 0}, {"snippet_id": 31492, "code": "'django.contrib.auth.password_validation.' 'MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation.'", "label": 0}, {"snippet_id": 49049, "code": " django.shortcuts import render, redirect, get_object_or_404 from django.core.exceptions import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms import * from dashboard", "label": 0}, {"snippet_id": 51327, "code": "=flatten_string_list(dependencies) dependency_collection=self._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__(self, host,", "label": 0}, {"snippet_id": 10028, "code": "'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return", "label": 0}, {"snippet_id": 73654, "code": ".validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout", "label": 0}, {"snippet_id": 70169, "code": " 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the", "label": 0}, {"snippet_id": 1838, "code": " continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath", "label": 1}, {"snippet_id": 47050, "code": "['filename','title','document_type','url','organization'] dg=DataGroup.objects.filter(pk=pk).first() if dg: columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id=pk).values(*columnlist", "label": 0}, {"snippet_id": 23296, "code": " Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done", "label": 0}, {"snippet_id": 81612, "code": "'subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0 for subscription in self.fit_subscriptions: counter +=1 self", "label": 0}, {"snippet_id": 41303, "code": " test_extractedsubclasses(self): ''' Confirm that the inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try: extsub", "label": 0}, {"snippet_id": 78977, "code": " NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id", "label": 0}, {"snippet_id": 74431, "code": "\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super().form_invalid(form) def view_action(self): pass class", "label": 0}, {"snippet_id": 21922, "code": " to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port", "label": 0}, {"snippet_id": 33115, "code": ".register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register", "label": 0}, {"snippet_id": 60981, "code": ": return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job", "label": 0}, {"snippet_id": 57657, "code": ") subj_template=loader.get_template(template_subject) rendered_subj=subj_template.render(context) text_template=loader.get_template(template_text) rendered_text=text_template.render(context) send_mail(", "label": 0}, {"snippet_id": 36828, "code": "=datetime.date.strftime((item['upload_date']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if", "label": 0}, {"snippet_id": 67163, "code": " 0: context['exs_count']=count return context def getpcap(request, pk): response=HttpResponse(VT().getPcap(pk), content_type=\"application/vnd.tcpdump.pcap\") response[\"Content-Disposition\"]=\"filename=%s", "label": 0}, {"snippet_id": 69289, "code": "): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins') user.ensure_group('jupyterhub-users') logger.info(\"Granting passwordless sudo to JupyterHub admins...\") with open('/etc", "label": 0}, {"snippet_id": 39190, "code": "=\"The Group Type may not be changed once extracted documents have been associated with the group.\" raise ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def", "label": 0}, {"snippet_id": 49855, "code": " in request.referrer: return redirect('/diagram?filename=%s'%filename) return redirect('/?filename=%s'%filename) flash(\"Invalid file\") return redirect('/openFile') @app.route('/save') def save(): if(not", "label": 0}, {"snippet_id": 54309, "code": " wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def", "label": 0}, {"snippet_id": 63948, "code": " @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400)", "label": 0}, {"snippet_id": 27289, "code": " java_worker_options=None, _internal_config=None): self.object_id_seed=object_id_seed self.redis_address=redis_address self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory", "label": 0}, {"snippet_id": 79556, "code": " with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] db", "label": 0}, {"snippet_id": 28336, "code": ", we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO", "label": 0}, {"snippet_id": 51739, "code": "} class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count=0 def updateScope(self,scope): if(self.count): self.scope", "label": 0}, {"snippet_id": 63032, "code": " different modes of authentication. \"\"\" def init_data(self): \"\"\" Called from the parent class, so we can extend data initialized. \"\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb", "label": 0}, {"snippet_id": 45656, "code": "=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset", "label": 0}, {"snippet_id": 10785, "code": ".ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle", "label": 0}, {"snippet_id": 33959, "code": ".browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value') true_cas=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem", "label": 0}, {"snippet_id": 61353, "code": ".DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the", "label": 0}, {"snippet_id": 3365, "code": "'OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request", "label": 1}, {"snippet_id": 62499, "code": " from werkzeug.exceptions import NotFound from werkzeug.http import dump_cookie from flask import session from flask import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb", "label": 0}, {"snippet_id": 24396, "code": "=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is running", "label": 1}, {"snippet_id": 80595, "code": ": ', value=self.matisse.target_wavelength) if success: print(f\"Setting wavelength to{target_wavelength} nm...\") self.matisse.set_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_approx_wavelength_dialog", "label": 0}, {"snippet_id": 20718, "code": "(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis", "label": 0}, {"snippet_id": 14707, "code": " url_for, session from flask_bootstrap import Bootstrap from flask_wtf import FlaskForm from flask_login import LoginManager, current_user, login_user, logout_user, UserMixin from werkzeug.security import", "label": 1}, {"snippet_id": 10224, "code": "=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options':", "label": 0}, {"snippet_id": 11673, "code": "[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile", "label": 0}, {"snippet_id": 38865, "code": " @property def is_composition(self): return self.type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def", "label": 0}, {"snippet_id": 83682, "code": " self.user_ip=get_real_ip(request) self.created_at=datetime.now() if message_template is None: message_template=('Possible edit conflict:' ' another user started editing this article at %s') self.message_template", "label": 0}, {"snippet_id": 81166, "code": ".request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner', '=', partner.id)]) bc_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type", "label": 0}, {"snippet_id": 45987, "code": ".get_queryset() prod_link=ProductDocument.objects.filter(document__in=docs) page=request.GET.get('page') paginator=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter", "label": 0}, {"snippet_id": 25972, "code": ".start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR", "label": 1}, {"snippet_id": 81364, "code": " attendee_list +=', ' +registration.partner_id.sudo().name counter +=1 return attendee_list def start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search([('fit_repetition_enabled'", "label": 0}, {"snippet_id": 12257, "code": " HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\"", "label": 0}, {"snippet_id": 84867, "code": "=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A", "label": 0}, {"snippet_id": 19129, "code": " redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.", "label": 1}, {"snippet_id": 79892, "code": "'session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST,", "label": 0}, {"snippet_id": 45640, "code": " data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form", "label": 0}, {"snippet_id": 32118, "code": "=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated token.", "label": 0}, {"snippet_id": 32610, "code": "(self, first, second): self.first=first self.second=second def execute(self, *args): self.first.execute(*args) self.first.wait() self.second.execute(*args) self.second.wait() class PipeNode(DoubleNode): '", "label": 0}, {"snippet_id": 64822, "code": " parser=argparse.ArgumentParser(description=\"Grade student code against \" \"given test cases. Results will be written over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The name", "label": 0}, {"snippet_id": 57897, "code": " return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for according status name", "label": 0}, {"snippet_id": 14439, "code": ", there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully", "label": 0}, {"snippet_id": 11706, "code": "} }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 9803, "code": "=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]", "label": 0}, {"snippet_id": 66575, "code": "=Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() file_path=filechooser_opening_dialog.get_filename()", "label": 0}, {"snippet_id": 72758, "code": "': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error", "label": 0}, {"snippet_id": 62571, "code": ".abspath(os.path.dirname(__file__)) class AuthnAPITestBase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the", "label": 0}, {"snippet_id": 52616, "code": "=messages_list[i] flash_message=flash_message +emails_lst[i] +\"\\n\" h.send_team_invite(emails_lst[i], sender, message, team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(\"/actions-board", "label": 0}, {"snippet_id": 6846, "code": "): if current_user.verify_password(form.old_password.data): current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been", "label": 0}, {"snippet_id": 11984, "code": " User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration", "label": 0}, {"snippet_id": 27696, "code": " self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start()", "label": 1}, {"snippet_id": 27683, "code": " profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self)", "label": 1}, {"snippet_id": 25846, "code": ".\"\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket", "label": 0}, {"snippet_id": 36575, "code": ".decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should", "label": 0}, {"snippet_id": 23295, "code": " IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we", "label": 0}, {"snippet_id": 73198, "code": "=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data.get('email') email_domain=email.split('@')[1", "label": 0}, {"snippet_id": 53468, "code": " get_stack_frames(): \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename", "label": 0}, {"snippet_id": 73363, "code": " django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext", "label": 0}, {"snippet_id": 34831, "code": "\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat[", "label": 1}, {"snippet_id": 43138, "code": "/extractedtext/254781/', follow=True) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 30) elp_flagged=elps.filter(qa_flag=True", "label": 0}, {"snippet_id": 26952, "code": "(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of", "label": 0}, {"snippet_id": 38885, "code": "(self): return self.type=='CP' @property def is_hh(self): return self.type=='HH' def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type)", "label": 0}, {"snippet_id": 17279, "code": " return render(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) def game_index(request, tournament_id, round_num): \"\"\"Display a list of games in the round\"\"\" t", "label": 0}, {"snippet_id": 52053, "code": "(\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name", "label": 0}, {"snippet_id": 7593, "code": ".core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps", "label": 0}, {"snippet_id": 77438, "code": "\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the", "label": 0}, {"snippet_id": 39461, "code": " null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True", "label": 0}, {"snippet_id": 78335, "code": " ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE", "label": 0}, {"snippet_id": 47340, "code": "'object_list': out}) @login_required() def data_source_detail(request, pk, template_name='data_source/datasource_detail.html'): datasource=get_object_or_404(DataSource, pk=pk,) docs=DataDocument.objects", "label": 0}, {"snippet_id": 35247, "code": " ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource'", "label": 0}, {"snippet_id": 57615, "code": " template_subject, template_text): \"\"\" Send an email with specified content. Arguments: context_data(dict): data to be passed to templates. from_email(str): sender's email. to_email(list): list of addresses to send an", "label": 0}, {"snippet_id": 34290, "code": "'id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field", "label": 0}, {"snippet_id": 43495, "code": "( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select", "label": 0}, {"snippet_id": 79261, "code": ": log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id': organization_id}) except Exception as", "label": 0}, {"snippet_id": 80191, "code": "(self.log) self.log_thread.start() def setup_window(self): self.window=window=QMainWindow() self.layout=QVBoxLayout() window.setWindowTitle('Matisse Controller') window.resize(600, 200) def setup_menus", "label": 0}, {"snippet_id": 17613, "code": " flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator</a> to manually ' 'activate your account <a href=\"{}\">\\'{}\\'</a>.' .format(flask.url_for", "label": 0}, {"snippet_id": 79999, "code": " is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id", "label": 0}, {"snippet_id": 54226, "code": "=politician) else: return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other errors \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404) def page_not_found(error):", "label": 1}, {"snippet_id": 54516, "code": "(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" ", "label": 0}, {"snippet_id": 37297, "code": " required_css_class='required' class Meta: model=DataSource fields=['title', 'url', 'estimated_records', 'state', 'priority', 'description'] class PriorityForm(forms.ModelForm): class Meta: model=DataSource fields=", "label": 0}, {"snippet_id": 75756, "code": "(r.json()['response']['docs'], index) if select2_results: return[{'text': 'FAST results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e)", "label": 0}, {"snippet_id": 76108, "code": "(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting %s', self) cut_path=re.sub('^%s' % self.from_url, '', path) to=self.get_full_path( filename=cut_path", "label": 0}, {"snippet_id": 63020, "code": "=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"\"\" def", "label": 0}, {"snippet_id": 65785, "code": ") tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button", "label": 0}, {"snippet_id": 69168, "code": " install_prefix=INSTALL_PREFIX, ) systemd.install_unit('jupyterhub.service', hub_unit_template.format(**unit_params)) systemd.install_unit('traefik.service', traefik_unit_template.format(**unit_params)", "label": 0}, {"snippet_id": 6219, "code": ":return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for('oidc_callback', _external=True) return flow def redirect_to_auth_server(self, destination): \"\"\" Set a CSRF token in the session, and redirect", "label": 0}, {"snippet_id": 53907, "code": "'Report': \"\"\" Clear all user-data stored in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining \"\"\" self.body=[] self.data=SharedCache() self", "label": 0}, {"snippet_id": 47218, "code": " field_header_map={\"id\": \"ExtractedChemical_id\"}, use_verbose_names=False) else: qs=ExtractedChemical.objects.filter(extracted_text__data_document__id=pk).values(*columnlist) return render_to_csv_response", "label": 0}, {"snippet_id": 37637, "code": ", 'rev_num'] widgets={ 'data_document': forms.HiddenInput(), 'extraction_script': forms.HiddenInput(), } class ExtractedCPCatForm(ExtractedTextForm): class Meta: model=ExtractedCPCat fields=['doc_date'", "label": 1}, {"snippet_id": 499, "code": ".static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if", "label": 0}, {"snippet_id": 59366, "code": "\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files \"\"\".strip()), ConfigOption(\"suggest_facets\", True, \"\"\" Calculate and display suggested facets", "label": 0}, {"snippet_id": 27056, "code": "-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt", "label": 0}, {"snippet_id": 82654, "code": " monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of", "label": 0}, {"snippet_id": 48674, "code": " form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get", "label": 0}, {"snippet_id": 50144, "code": " render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException: pass return render_template(\"diagramEditor.html\") @app.route(\"/signup\") def renderSignUp(): if 'return_url'", "label": 0}, {"snippet_id": 6670, "code": " form.remember_me.data) session['auth_token']=user.auth_token return redirect(request.args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login", "label": 1}, {"snippet_id": 22683, "code": " background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default", "label": 1}, {"snippet_id": 55525, "code": "\tdef join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t", "label": 0}, {"snippet_id": 9547, "code": "'data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that", "label": 0}, {"snippet_id": 44906, "code": " HnPFormSet=create_detail_formset(self.objects.doc) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, ", "label": 0}, {"snippet_id": 65744, "code": ") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") CreateDatabase( self, self.create_tab(tab_title, headerbar), self", "label": 0}, {"snippet_id": 65361, "code": ".Screen.get_default() css_provider=Gtk.CssProvider() css_provider_resource=Gio.File.new_for_uri( \"resource:///run/terminal/KeepassGtk/keepassgtk.css\") css_provider.load_from_file(css_provider_resource)", "label": 0}, {"snippet_id": 60016, "code": ", \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3.OperationalError as e: if(e.args[0]=='no such module: VirtualSpatialIndex'", "label": 0}, {"snippet_id": 36685, "code": ".now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count", "label": 0}, {"snippet_id": 26717, "code": " ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type, check_alive=check_alive,", "label": 0}, {"snippet_id": 79239, "code": ".toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id", "label": 0}, {"snippet_id": 6527, "code": " the{0} domain.\" .format(self.app.config['OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination", "label": 1}, {"snippet_id": 73281, "code": "'email').lower() password=self.cleaned_data.get('password') user=authenticate(username=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error", "label": 0}, {"snippet_id": 35327, "code": "().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type': doc.document_type, 'return_url': request.META.get('HTTP_REFERER')} form=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type", "label": 0}, {"snippet_id": 11420, "code": " else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders:", "label": 0}, {"snippet_id": 9933, "code": "\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user", "label": 0}, {"snippet_id": 26449, "code": ".\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some errors in process of \" \"type{}. Error", "label": 0}, {"snippet_id": 11151, "code": "\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled", "label": 0}, {"snippet_id": 3385, "code": "['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url", "label": 1}, {"snippet_id": 77988, "code": " update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination.action.package_patch(id=package_id,", "label": 0}, {"snippet_id": 54464, "code": "'yd6lDwm3Ra9j7djyXHmrg' consumer_secret='BlBMf6kP98LwWepOVSypVwDi2x2782P2KQnJQomY' oauth=OAuth1(consumer_key, resource_owner_key=access_token, resource_owner_secret=access_token_secret, client_secret=consumer_secret )", "label": 0}, {"snippet_id": 74454, "code": ": EVAL_ACTION_TYPE=\"DELETE\" def view_action(self): self.report.delete() class WizardPDFPartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial", "label": 0}, {"snippet_id": 58235, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSE, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_THREAD, ONBOARDING_STEPS_DEFAULT_TEMPLATE),", "label": 0}, {"snippet_id": 27351, "code": "=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings", "label": 0}, {"snippet_id": 79921, "code": "(tk._('Data Request %s not found in the data base') % datarequest_id) validator.validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This", "label": 0}, {"snippet_id": 37042, "code": "(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc.get_level(), puc.product_count ] writer", "label": 0}, {"snippet_id": 15889, "code": " FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors", "label": 0}, {"snippet_id": 11195, "code": " enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 40321, "code": "\" Compare the derived percent checked against the threshold constant Return true when the percent checked is above the threshold \"\"\" return self.get_pct_checked_numeric() >=self.QA_COMPLETE_PERCENTAGE ", "label": 0}, {"snippet_id": 70867, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 77628, "code": ":return: \"\"\" self._load_config() context={'session': model.Session} package_ids=self.get_package_ids() for package_id in package_ids: default_security_classification=\"PUBLIC\" default_data_driven_application", "label": 0}, {"snippet_id": 37951, "code": ", exclude=exclude): formset_fields=model.detail_fields() if exclude: formset_fields=[in_field for in_field in formset_fields if not in_field in exclude] return forms.inlineformset_factory(parent_model=parent_model", "label": 0}, {"snippet_id": 7438, "code": "'preferred_username']) ninety_day_filter=datetime.now() -timedelta(days=90) if csr.liaison_designate==1: exams=Exam.query.filter(Exam.deleted_date.is_(None))\\ .filter(or_(Exam.exam_returned_date.is_(None),", "label": 0}, {"snippet_id": 609, "code": "'\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 59121, "code": " raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email: my_invite=invite break user_email_name, user_domain=clean_email_name", "label": 0}, {"snippet_id": 32347, "code": ".token=None self.last=None self.next() def parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream of", "label": 0}, {"snippet_id": 10833, "code": ", a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST", "label": 0}, {"snippet_id": 1646, "code": " \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the", "label": 0}, {"snippet_id": 24348, "code": ".mode==ray.SCRIPT_MODE and driver_id !=self.worker.task_driver_id.binary()): return try: function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback", "label": 0}, {"snippet_id": 55790, "code": "\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount", "label": 0}, {"snippet_id": 45595, "code": " browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST['referer'] if", "label": 1}, {"snippet_id": 25762, "code": " redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params=ray_params", "label": 0}, {"snippet_id": 47891, "code": " csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks", "label": 0}, {"snippet_id": 23959, "code": " or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy", "label": 0}, {"snippet_id": 33553, "code": " be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if", "label": 0}, {"snippet_id": 54820, "code": " in value: \t\t\t\tprint \"=\"*50 \t\t\t\tprint item \t\t\t\tprint \"=\"*50 \t\t\t\tanother_count_by_groups +=1 \t\t\t\tprint \"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing", "label": 1}, {"snippet_id": 47631, "code": " label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data,", "label": 0}, {"snippet_id": 71374, "code": "'/_ah/'): return self.app(environ, start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO']", "label": 1}, {"snippet_id": 5017, "code": ": self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in", "label": 1}, {"snippet_id": 8414, "code": "('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account", "label": 0}, {"snippet_id": 14245, "code": "\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned", "label": 0}, {"snippet_id": 7587, "code": ".external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps", "label": 0}, {"snippet_id": 27367, "code": "): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg", "label": 0}, {"snippet_id": 52894, "code": "': instance.file_download_link if instance.attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update", "label": 0}, {"snippet_id": 35696, "code": ".value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc']", "label": 0}, {"snippet_id": 53334, "code": " render_syntax_error(project, source_code, error) setattr(module, '__file__', step.source_path) setattr( module, '__package__', '.'.join( [project.id.replace('.', '-')] + step.filename.rsplit('.', 1)[0", "label": 0}, {"snippet_id": 37458, "code": "'title', 'long_description',) def __init__(self, *args, **kwargs): super(ProductForm, self).__init__(*args, **kwargs) for f in self.fields: self.fields[f].disabled=True class BasePUCForm(forms.ModelForm)", "label": 0}, {"snippet_id": 19740, "code": " ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object", "label": 0}, {"snippet_id": 11074, "code": "<b>', end_bold=u'</b>', enterprise_name=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings", "label": 0}, {"snippet_id": 62703, "code": " eppn, came_from): \"\"\" Add a SAML2 authentication query to the queries cache, build a cookie with a session id corresponding to the added query, build a SAML2 authn response for the added query, and send", "label": 0}, {"snippet_id": 60212, "code": " is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name", "label": 0}, {"snippet_id": 38063, "code": " ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES=( ('UN', 'unknown'), ('FO', 'formulations'), ('AR', 'articles'), ('OC',", "label": 1}, {"snippet_id": 75206, "code": " HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': person_form=CommitteeMemberPersonForm(request.POST) committee_member_form=CommitteeMemberForm(request", "label": 0}, {"snippet_id": 24461, "code": " monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self", "label": 1}, {"snippet_id": 39122, "code": " extract_fields=['data_document_id','data_document_filename', 'prod_name', 'doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse'] if self.type=='FU': return extract_fields if self.type=", "label": 0}, {"snippet_id": 82920, "code": " str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__", "label": 0}, {"snippet_id": 17436, "code": ">Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a mistake, contact ' 'a moderator on IRC.'.format(ban_reason)) flask.flash(flask.Markup(ban_str), 'danger') return", "label": 0}, {"snippet_id": 4344, "code": "=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 58869, "code": " added=models.DateTimeField('added datetime', auto_now_add=True) objects=InviteQuerySet.as_manager() @staticmethod def search_user_by_email(email): return User.objects.filter(email=email).first() @classmethod", "label": 0}, {"snippet_id": 43293, "code": " self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup", "label": 1}, {"snippet_id": 62129, "code": "\"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode", "label": 0}, {"snippet_id": 14950, "code": " values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$', name): attrs=name.split(':') (ts_name, ts_author), rest=attrs", "label": 0}, {"snippet_id": 14353, "code": "(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage", "label": 0}, {"snippet_id": 22993, "code": "(uuid.uuid4().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an", "label": 0}, {"snippet_id": 17909, "code": " change failed!</strong> Incorrect password.'), 'danger') return flask.redirect('/profile') user.email=form.email.data flask.flash(flask.Markup( '<strong>Email successfully changed!</strong>'), 'success", "label": 0}, {"snippet_id": 83228, "code": " ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job", "label": 0}, {"snippet_id": 56194, "code": " then_response_should_be_a_redirect_to_app_deeplink_with_params(self): assert self.response.status_code==302 assert self.response['Location']=='{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me", "label": 0}, {"snippet_id": 56657, "code": " urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people/me/login$', login_redirect, name='login-redirect", "label": 0}, {"snippet_id": 40666, "code": "=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%', extracted_doc_count) def test_PUC_download(self): p=self.objects.puc puc_line=(p.gen_cat +',' +p.prod_fam +',' +p", "label": 1}, {"snippet_id": 83703, "code": "(title, self, WIKI_LOCK_DURATION * 60) def create_message(self, request): \"\"\"Send a message to the user if there is another user editing this article.\"\"\" if not self.is_mine(request): user=request.user user", "label": 0}, {"snippet_id": 21534, "code": "\"\"\"Kill the plasma store. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def", "label": 0}, {"snippet_id": 78187, "code": "('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames starting with this", "label": 0}, {"snippet_id": 34119, "code": "((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 66736, "code": ".Timer(3.0, self.hide_unlock_failed_revealer) revealer_timer.start() def hide_unlock_failed_revealer(self): unlock_failed_revealer=self.builder.get_object(\"unlock_failed_revealer\") unlock_failed_revealer", "label": 0}, {"snippet_id": 35431, "code": " if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect('data_document', pk=doc.pk", "label": 0}, {"snippet_id": 81730, "code": " django.urls import reverse_lazy from django.views import View from django.views.generic import CreateView, ListView, UpdateView, DeleteView from django.contrib.auth.mixins import LoginRequiredMixin from", "label": 0}, {"snippet_id": 16755, "code": " round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) if request.method=='POST': PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset", "label": 0}, {"snippet_id": 29089, "code": "**kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which", "label": 0}, {"snippet_id": 291, "code": " endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\"", "label": 0}, {"snippet_id": 72324, "code": ".reload_daemons(export.daemons) @ApiController('/nfs-ganesha/daemon') class NFSGaneshaService(RESTController): def list(self): status_dict=Ganesha.get_daemons_status() if status_dict: return[ { 'daemon_id'", "label": 0}, {"snippet_id": 224, "code": "[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 58708, "code": " Site from django.conf import settings from django.core.mail import send_mail from django.core.urlresolvers import reverse from django.http.response import Http404 from django.template import loader, Context", "label": 0}, {"snippet_id": 53359, "code": " step.test_locals=dict() step.test_locals.update(module.__dict__) exec(code, step.test_locals) try: set_executing(True) threads.abort_thread() if environ.modes.has(environ.modes.TESTING): exec_test() else", "label": 0}, {"snippet_id": 28188, "code": " scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to use. error_type(str", "label": 0}, {"snippet_id": 45399, "code": "'' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam", "label": 1}, {"snippet_id": 58233, "code": " (onboarding.INTRODUCTION_INTRO, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSE, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding", "label": 0}, {"snippet_id": 24413, "code": " that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the", "label": 1}, {"snippet_id": 51503, "code": " subprocess.call([\"/bin/sh\", \"-c\", \"command -v \"+program], shell=False, stdout=open(os.devnull), stderr=open(os.devnull))==0 program_exists=windows_program_exists if platform.platform().startswith(\"Windows\")", "label": 1}, {"snippet_id": 2025, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if", "label": 0}, {"snippet_id": 48046, "code": " request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return HttpResponseRedirect(f'/habitsandpractices/{doc.pk", "label": 0}, {"snippet_id": 49603, "code": " in filename and \\ filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f:", "label": 0}, {"snippet_id": 45386, "code": "?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition", "label": 0}, {"snippet_id": 9520, "code": " it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']", "label": 0}, {"snippet_id": 68538, "code": ", pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'twitter_hunter/tweets.html', context) class HuntCreateView(CreateView): model=Hunt form_class", "label": 0}, {"snippet_id": 44003, "code": ".objects=load_model_objects() if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_hem", "label": 1}, {"snippet_id": 75958, "code": " ) status=models.BooleanField(choices=STATUS_CHOICES, default=True) create_dt=models.DateTimeField(auto_now_add=True) update_dt=models.DateTimeField(auto_now=True) objects=RedirectManager() class Meta:", "label": 0}, {"snippet_id": 69085, "code": "\") try: systemd.uninstall_unit('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot uninstall configurable-http-proxy...\") def ensure_jupyterhub_service(prefix):", "label": 0}, {"snippet_id": 24846, "code": "=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port", "label": 1}, {"snippet_id": 78486, "code": "'followers']=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict", "label": 0}, {"snippet_id": 56130, "code": " else: link='{}/'.format(settings.APP_DEEPLINK_DOMAIN) response=HttpResponse('', status=302) response['Location']=link return response def aasa_redirect(request): return JsonResponse({\"applinks\":{\"apps\":[]", "label": 1}, {"snippet_id": 73407, "code": ".redactor import parse_applications @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, ", "label": 0}, {"snippet_id": 66226, "code": "(keyfile_unlock_stack_page, \"icon-name\", \"mail-attachment-symbolic\") stack.add_titled(composite_unlock_stack_page, \"composite_unlock\", \"Composite\") stack.child_set_property(composite_unlock_stack_page,", "label": 0}, {"snippet_id": 77794, "code": "\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix', help='Only demote usernames", "label": 0}, {"snippet_id": 27219, "code": " testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None,", "label": 0}, {"snippet_id": 62785, "code": ".add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie'", "label": 0}, {"snippet_id": 72609, "code": ".create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST", "label": 0}, {"snippet_id": 59057, "code": "']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404(user, **kwargs): ''' Do a search for invite by passed parameters", "label": 0}, {"snippet_id": 12009, "code": " actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect", "label": 0}, {"snippet_id": 84229, "code": "'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context)", "label": 0}, {"snippet_id": 53791, "code": ".step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache() self.title=self.definition.get('title') self.subtitle=self.definition.get('subtitle') self.summary=self.definition.get", "label": 0}, {"snippet_id": 22204, "code": "=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None", "label": 1}, {"snippet_id": 78089, "code": " name, \"description\": description } resources.append(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version", "label": 1}, {"snippet_id": 39953, "code": " InheritanceManager from django.apps import apps from django.db.models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text", "label": 1}, {"snippet_id": 23776, "code": " return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None", "label": 0}, {"snippet_id": 67193, "code": " import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from", "label": 0}, {"snippet_id": 53812, "code": "'summary') self.library_includes=[] self.stdout_interceptor=None self.stderr_interceptor=None self._last_update_time=0 @property def last_update_time(self) -> float: \"\"\" The last time at which the report", "label": 0}, {"snippet_id": 65400, "code": "!=\"\" and exists(keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\")): self.logging_manager.log_debug( \"Found last opened database entry(\" + keepassgtk.config_manager.get_string( \"history\"", "label": 0}, {"snippet_id": 35168, "code": ".filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category", "label": 0}, {"snippet_id": 66668, "code": " wrong password\") else: composite_unlock_entry.get_style_context().add_class(\"error\") def open_database_page(self): self.clear_input_fields() keepassgtk.config_manager.create_config_entry_string(\"history\"", "label": 0}, {"snippet_id": 44693, "code": " import load_model_objects from dashboard.models import ExtractedText, QANotes class ExtractedTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_extracted_doc_date_validation(self)", "label": 1}, {"snippet_id": 22429, "code": "' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead", "label": 0}, {"snippet_id": 24797, "code": "(object): \"\"\"A monitor for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component", "label": 0}, {"snippet_id": 32854, "code": ".newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2", "label": 1}, {"snippet_id": 73423, "code": "'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid(", "label": 0}, {"snippet_id": 25922, "code": " process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards=self._ray_params.num_redis_shards", "label": 1}, {"snippet_id": 37227, "code": "['weight_fraction_type'] self.collapsed=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC')", "label": 0}, {"snippet_id": 21932, "code": " redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The", "label": 0}, {"snippet_id": 1279, "code": " serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http", "label": 0}, {"snippet_id": 29348, "code": " flash from flask_login import login_user, logout_user, current_user from flask_security import login_required from benwaonline.database import db from benwaonline.oauth import twitter from benwaonline", "label": 1}, {"snippet_id": 71648, "code": "() self.assertTrue(s_count2==1) def test_save_session(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req", "label": 0}, {"snippet_id": 24903, "code": " if len(addr_port) > 1: logger.warning( \"Monitor: \" \"TODO: if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split", "label": 0}, {"snippet_id": 69961, "code": ".replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 70824, "code": " part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 526, "code": " to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path", "label": 1}, {"snippet_id": 45262, "code": "(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month')) if len(document_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i ", "label": 0}, {"snippet_id": 22589, "code": " you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the", "label": 0}, {"snippet_id": 31214, "code": " CELERY_ALWAYS_EAGER=True CELERY_EAGER_PROPAGATES_EXCEPTIONS=True HOOK_DOMAIN=os.environ.get('HOOK_DOMAIN', 'localhost:8000') ALLOWED_HOSTS=['testing.com', 'localhost', '127.0.0.1', 'localhost:4200', HOOK_DOMAIN", "label": 0}, {"snippet_id": 1549, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 16281, "code": " if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer.objects.get_or_create(player=p, tournament=t) try: i.full_clean() except", "label": 0}, {"snippet_id": 36063, "code": "(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o", "label": 0}, {"snippet_id": 69997, "code": " not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 31233, "code": " CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True GITMATE_PLUGINS=[ 'code_analysis', 'welcome_commenter', 'auto_label_pending_or_wip', 'pr_size_labeller', 'issue_labeller', 'bug_spotter', ", "label": 0}, {"snippet_id": 2774, "code": "': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request", "label": 0}, {"snippet_id": 65163, "code": ", 1, 'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, ", "label": 0}, {"snippet_id": 74198, "code": ".mixins.RatelimitMixin ): ratelimit_key=\"user\" ratelimit_rate=settings.DECRYPT_THROTTLE_RATE class _ReportAccessPartial(_ReportLimitedDetailPartial): invalid_access_key_message=\"Invalid key in access request", "label": 0}, {"snippet_id": 84721, "code": "]) @login_required def stop_observing_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context", "label": 0}, {"snippet_id": 53773, "code": " step in a project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step", "label": 0}, {"snippet_id": 5030, "code": "']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 76305, "code": "-requested projected, ie map coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image", "label": 0}, {"snippet_id": 32857, "code": " except TypeError: self.newfd=newfd def close(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class", "label": 0}, {"snippet_id": 72538, "code": ".parseposter import parse_upload @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, ", "label": 0}, {"snippet_id": 45425, "code": "'PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc.get_level", "label": 1}, {"snippet_id": 72485, "code": " from django.core.mail import send_mail from django.shortcuts import render, redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth", "label": 0}, {"snippet_id": 47562, "code": " form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in", "label": 0}, {"snippet_id": 80066, "code": ".enqueue_job(_send_mail,[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator Email') if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict", "label": 1}, {"snippet_id": 82530, "code": " need to override this function in monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent", "label": 0}, {"snippet_id": 84901, "code": " found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match: found_links.append({'title':", "label": 0}, {"snippet_id": 79608, "code": "=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request", "label": 1}, {"snippet_id": 59512, "code": " memory: self.files=(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data self._metadata=metadata or{} self.sqlite_functions=[] self.sqlite_extensions=sqlite_extensions", "label": 0}, {"snippet_id": 61321, "code": " threading.Thread class.\"\"\" def __init__(self, queue): \"\"\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"", "label": 0}, {"snippet_id": 73409, "code": " @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}", "label": 0}, {"snippet_id": 62086, "code": " else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not in page.headers: return True else: matches=version_regex.search(page.headers['Server']) if not", "label": 0}, {"snippet_id": 62114, "code": "> 1: return False else: return True def validate_csp(page): if 'Content-Security-Policy' not in page.headers: return False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return", "label": 0}, {"snippet_id": 19390, "code": " the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for", "label": 1}, {"snippet_id": 3421, "code": "') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op", "label": 0}, {"snippet_id": 67033, "code": "'keyword'): filehash=request.GET.get('keyword') return HttpResponseRedirect(filehash) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name", "label": 1}, {"snippet_id": 9950, "code": " def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict,", "label": 0}, {"snippet_id": 58459, "code": ", onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_thread</p>\", \"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\": False,", "label": 0}, {"snippet_id": 53792, "code": ".step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache() self.title=self.definition.get('title') self.subtitle=self.definition.get('subtitle') self.summary=self.definition.get(", "label": 0}, {"snippet_id": 21115, "code": ".object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config", "label": 0}, {"snippet_id": 24823, "code": ": redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port", "label": 1}, {"snippet_id": 56807, "code": "'transaction_detail', kwargs={'transaction_code': concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core", "label": 0}, {"snippet_id": 20771, "code": ") @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address", "label": 0}, {"snippet_id": 50448, "code": "\"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback", "label": 0}, {"snippet_id": 17994, "code": " flask.request.referrer or \\ home_url if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context={ 'activation_link'", "label": 1}, {"snippet_id": 8016, "code": "() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status", "label": 0}, {"snippet_id": 43282, "code": " setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation", "label": 1}, {"snippet_id": 23263, "code": "(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users", "label": 0}, {"snippet_id": 23479, "code": " gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): ", "label": 0}, {"snippet_id": 54503, "code": "=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200", "label": 0}, {"snippet_id": 18739, "code": " \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tChecks if a secure_cookie exists, if it doesn't then it redirects the user to", "label": 1}, {"snippet_id": 58403, "code": "\"settings\":{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" } }, onboarding.CREATE_COURSELET:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_courselet</p", "label": 0}, {"snippet_id": 28747, "code": " vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii", "label": 0}, {"snippet_id": 44083, "code": ".click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url", "label": 0}, {"snippet_id": 28690, "code": " str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter", "label": 1}, {"snippet_id": 47369, "code": ".registered=(len(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or None, instance", "label": 0}, {"snippet_id": 25994, "code": " start_ui(self): \"\"\"Start the web UI.\"\"\" stdout_file, stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file", "label": 0}, {"snippet_id": 18897, "code": "\" from __future__ import unicode_literals from django.core.urlresolvers import reverse from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool", "label": 0}, {"snippet_id": 17098, "code": " power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist:", "label": 0}, {"snippet_id": 54360, "code": " 'wiki': pol.wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians=politicians) \"\"\"Array of datums for politicians Format: JSON \"\"\" @app.route('/json/politicians", "label": 0}, {"snippet_id": 69211, "code": "] subprocess.check_output([ os.path.join(USER_ENV_PREFIX, 'bin/jupyter'), 'labextension', 'install' ] +extensions) def ensure_jupyterhub_package(prefix): \"\"\" Install JupyterHub into our conda environment", "label": 0}, {"snippet_id": 71619, "code": " s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id", "label": 0}, {"snippet_id": 13679, "code": " user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django", "label": 0}, {"snippet_id": 82474, "code": " subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that", "label": 0}, {"snippet_id": 23670, "code": ")) logger.addHandler(_default_handler) logger.propagate=False def try_update_handler(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler", "label": 1}, {"snippet_id": 8743, "code": " login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account", "label": 0}, {"snippet_id": 47491, "code": "'datasource_confirm_delete.html')): datasource=get_object_or_404(DataSource, pk=pk) if request.method=='POST': datasource.delete() return redirect('data_source_list') return render(request, template_name", "label": 0}, {"snippet_id": 59305, "code": " \"\"\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads in the thread pool for executing SQLite queries \"\"\".strip()), ConfigOption(\"sql_time_limit_ms\", 1000, \"\"\" Time limit for a SQL query", "label": 0}, {"snippet_id": 34303, "code": "\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk", "label": 0}, {"snippet_id": 82242, "code": " get(self, request, pk, *args, **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request, 'category-detail-view.html',{'object': object", "label": 0}, {"snippet_id": 6532, "code": "'OIDC_GOOGLE_APPS_DOMAIN']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token)", "label": 1}, {"snippet_id": 28692, "code": "=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)", "label": 1}, {"snippet_id": 81004, "code": "._update_counter_subscription(event, partner, subscription_update_counter) else: existing_registration=http.request.env['event.registration'].sudo().search([('partner_id', '=', partner_id), ('event_id', ", "label": 0}, {"snippet_id": 40965, "code": ".status_code, 200, 'The page must return a 200 status code') try: extracted_text=ExtractedText.objects.get(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains(resp, 'No Extracted Text", "label": 0}, {"snippet_id": 36640, "code": " relativedelta from django.http import HttpResponse from django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from", "label": 0}, {"snippet_id": 15282, "code": " min_entries=0) def get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'], model['model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model", "label": 0}, {"snippet_id": 25488, "code": " parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\"", "label": 0}, {"snippet_id": 10130, "code": " made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this", "label": 0}, {"snippet_id": 39564, "code": ".common_info import CommonInfo \t \t \t \t \t class ExtractedText(CommonInfo): data_document=models.OneToOneField('DataDocument',on_delete=models.CASCADE, primary_key=True) prod_name=models.CharField(max_length=500", "label": 0}, {"snippet_id": 34296, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('/", "label": 0}, {"snippet_id": 84765, "code": " article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller \"\"\" rv=do_wl_markdown(request.POST['body", "label": 0}, {"snippet_id": 70959, "code": "\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href", "label": 0}, {"snippet_id": 81153, "code": ".request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type", "label": 0}, {"snippet_id": 4783, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self", "label": 0}, {"snippet_id": 4437, "code": " Client from drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword'", "label": 0}, {"snippet_id": 3879, "code": ", path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"", "label": 0}, {"snippet_id": 632, "code": ") content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified", "label": 0}, {"snippet_id": 39600, "code": " blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models.CASCADE, limit_choices_to={'script_type': 'EX'}) qa_checked=models", "label": 0}, {"snippet_id": 24520, "code": "\"\"Get any changes to the log files and push updates to Redis.\"\"\" for log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles", "label": 1}, {"snippet_id": 32654, "code": " input into. ''' def __init__(self, first, second): self.first=first self.second=second def execute(self, builtins): read, write=os.pipe() inp=RedirectionHelper(0, read) outp=RedirectionHelper(1, write)", "label": 0}, {"snippet_id": 25722, "code": ": If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address", "label": 0}, {"snippet_id": 49041, "code": ".http import HttpResponse from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.core.exceptions import ObjectDoesNotExist", "label": 0}, {"snippet_id": 63505, "code": " session['user_eppn']=eppn session['eduPersonPrincipalName']=eppn response=self.app.dispatch_request() self.assertEqual(response.status, '200 OK') self.assertIn(self.app.config['SAML2_LOGOUT_REDIRECT_URL'", "label": 0}, {"snippet_id": 21709, "code": " process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def", "label": 0}, {"snippet_id": 16047, "code": " for the Diplomacy Tournament Visualiser. \"\"\" from django.contrib.auth.decorators import permission_required from django.core.exceptions import ValidationError from django.forms.formsets import formset_factory", "label": 0}, {"snippet_id": 79004, "code": " request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"", "label": 0}, {"snippet_id": 78893, "code": " organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 32030, "code": " REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto() UNKNOWN=enum.auto() class Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme: The token", "label": 0}, {"snippet_id": 75199, "code": " CommitteeMemberForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked():", "label": 0}, {"snippet_id": 82693, "code": " super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return", "label": 0}, {"snippet_id": 17113, "code": ": i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist: i=GamePlayer(player=field.player, game=g, power=p) else: i.player=field.player try: i.full_clean() except ValidationError as e", "label": 0}, {"snippet_id": 64326, "code": " current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for", "label": 0}, {"snippet_id": 8053, "code": " produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context", "label": 0}, {"snippet_id": 29885, "code": "/benwa/<int:post_id>/comment/delete/<int:comment_id>', methods=['GET', 'POST']) @login_required def delete_comment(post_id, comment_id): comment=Comment.query.get_or_404(comment_id) if current_user.has_role", "label": 0}, {"snippet_id": 66390, "code": " wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk", "label": 0}, {"snippet_id": 80125, "code": " __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse(", "label": 0}, {"snippet_id": 61096, "code": "% self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self)", "label": 1}, {"snippet_id": 59908, "code": " extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb", "label": 0}, {"snippet_id": 65585, "code": "=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def create_filechooser(self, widget, none): self.filechooser_creation_dialog=Gtk.FileChooserDialog(", "label": 0}, {"snippet_id": 20317, "code": "\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split(\":\")[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the", "label": 0}, {"snippet_id": 57276, "code": ")) available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance", "label": 0}, {"snippet_id": 15858, "code": "), 'commands': item['commands'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required()]) password", "label": 0}, {"snippet_id": 60702, "code": " sys import time import hyperion.lib.util.config as config from os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue", "label": 0}, {"snippet_id": 41621, "code": "'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should start w/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start w/ extracted False')) self", "label": 0}, {"snippet_id": 49538, "code": ".database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY", "label": 1}, {"snippet_id": 69392, "code": " user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"\"\" Setup given list of users as admins. \"\"\" if not admins: return logger", "label": 0}, {"snippet_id": 67053, "code": "/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() filehash=self.kwargs['pk'] vt=VT() context['vt_hash']=vt.getFileReport", "label": 0}, {"snippet_id": 63135, "code": "(time.time()) self.assertTrue(now -then < 5) self.acs('/terminate', eppn, _check) def test_token_login_new_user(self): eppn='hubba-fooo' shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='", "label": 0}, {"snippet_id": 58164, "code": " 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6", "label": 1}, {"snippet_id": 3103, "code": "='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property", "label": 0}, {"snippet_id": 33243, "code": ".name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed')", "label": 0}, {"snippet_id": 29957, "code": "'consume' TWITTER_CONSUMER_SECRET='secret' WTF_CSRF_ENABLED=False SECRET_KEY='not-so-secret' class ProdConfig(Config): DEBUG=False app_config={ 'dev': DevConfig, 'test': TestConfig, 'prod': ProdConfig ", "label": 0}, {"snippet_id": 31745, "code": "=request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user", "label": 1}, {"snippet_id": 79333, "code": ", 'user': _get_user(datarequest.user_id), 'organization': None, 'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI", "label": 0}, {"snippet_id": 10037, "code": "'number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account", "label": 0}, {"snippet_id": 42292, "code": "/datagroup/{pk}/') self.assertContains(response,'<a href=\"/datasource/', msg_prefix='Should be able to get back to DataSource from here.') def test_edit_redirect(self): dgpk=self.objects.dg.pk dspk=str(self", "label": 0}, {"snippet_id": 35629, "code": ": puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe", "label": 0}, {"snippet_id": 50102, "code": "'email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] filename=session['currentFile'] userpath=os.path.join(app.config[", "label": 0}, {"snippet_id": 23016, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str)", "label": 0}, {"snippet_id": 22814, "code": " self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available", "label": 0}, {"snippet_id": 11078, "code": "=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 59694, "code": " self, plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback", "label": 0}, {"snippet_id": 53486, "code": " is_cauldron_code(test_filename: str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return True while len", "label": 0}, {"snippet_id": 1600, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if", "label": 0}, {"snippet_id": 20079, "code": "(hex_to_binary(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id, _ in object_table_objects.items(): task_id_bin=ray._raylet.compute_task_id(object_id)", "label": 0}, {"snippet_id": 80616, "code": " checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Approx. Wavelength', label='Wavelength(nm): ', value=self.matisse.query('MOTBI:WL?', numeric_result=True)) if success:", "label": 0}, {"snippet_id": 7322, "code": ", 'deleted', 'exams_enabled_ind', 'appointments_enabled_ind', 'timezone') column_labels={'sb': 'Smartboard', 'timezone.timezone_name': 'Timezone Name'} column_sortable_list=['office_name', 'sb', 'deleted", "label": 0}, {"snippet_id": 59085, "code": " get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user", "label": 0}, {"snippet_id": 54623, "code": ": \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint", "label": 1}, {"snippet_id": 8989, "code": " ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako", "label": 0}, {"snippet_id": 44086, "code": "/', self.browser.current_url, \"User should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 32336, "code": " execution. Args: tokens: The stream of tokens. ''' def __init__(self, tokens): self.tokens=iter(tokens) self.token=None self.last=None self.next() def parse(self): ''' Parse the stream of tokens. Returns:", "label": 0}, {"snippet_id": 37792, "code": " super(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields[", "label": 0}, {"snippet_id": 64482, "code": " current_app.logger.info('Successful token login, redirecting user{} to{}'.format(user, location_on_success)) return response except current_app.central_userdb.exceptions.UserDoesNotExist: current_app.logger", "label": 0}, {"snippet_id": 79466, "code": ".get('capacity')=='admin']) return users @tk.chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request. The function checks the access rights of", "label": 0}, {"snippet_id": 40868, "code": " orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod", "label": 0}, {"snippet_id": 8779, "code": " request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception", "label": 0}, {"snippet_id": 59238, "code": ".special import JsonDataView from.views.table import RowView, TableView from.utils import( InterruptedError, Results, escape_css_string, escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit", "label": 0}, {"snippet_id": 69288, "code": " ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins') user.ensure_group('jupyterhub-users') logger.info(\"Granting passwordless sudo to JupyterHub admins...\")", "label": 0}, {"snippet_id": 64106, "code": "=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The", "label": 0}, {"snippet_id": 43167, "code": " elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged.raw_cas.encode(), response.content) def test_every_extractedtext_qa(self): for et in ExtractedText.objects.all(): response=self", "label": 1}, {"snippet_id": 79228, "code": " from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE", "label": 0}, {"snippet_id": 24651, "code": ".check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument(", "label": 1}, {"snippet_id": 37720, "code": " super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit();' }) def include_extract_form(dg)", "label": 0}, {"snippet_id": 23341, "code": " numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this", "label": 0}, {"snippet_id": 51536, "code": " program_exists(p): program=p break if program is None: raise \"Cannot find scp(or pscp) in the path.\" subprocess.check_call([program] +list(args)) def run(buildname=\"build\", argv=None): builder=Builder()", "label": 0}, {"snippet_id": 51706, "code": ": params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script def genSCI(): pass def genSSCI(): pass def genCSRF(): pass def genOR(): pass render={", "label": 1}, {"snippet_id": 65243, "code": " import keepassgtk.config_manager import os from os.path import exists import ntpath import gi gi.require_version('Gtk', '3.0') gi.require_version('Gdk', '3.0') class MainWindow(Gtk.ApplicationWindow):", "label": 0}, {"snippet_id": 73954, "code": "='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form", "label": 0}, {"snippet_id": 31928, "code": "''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell. ''' while True: try: line=self.readline() self.execute", "label": 0}, {"snippet_id": 38131, "code": ".ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set", "label": 0}, {"snippet_id": 50656, "code": ") exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode) return eval(stdout.strip()) def default_platform(): if platform.system()=='Windows': return 'Windows", "label": 0}, {"snippet_id": 61408, "code": " this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread", "label": 0}, {"snippet_id": 57315, "code": "'transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_edit.html'", "label": 0}, {"snippet_id": 55776, "code": " \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines()", "label": 0}, {"snippet_id": 48944, "code": "(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc(", "label": 0}, {"snippet_id": 83749, "code": " Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private is not None) and is_private(group): return False return True def has_write_perm(user", "label": 0}, {"snippet_id": 16716, "code": "(omitting_players=sitters, players_doubling_up=two_gamers) def _seed_games_and_powers(tournament, the_round): \"\"\"Wrapper round GameSeeder to do the actual seeding for a round\"\"\" seeder=_create_game_seeder(tournament,", "label": 0}, {"snippet_id": 78898, "code": "(data_req, data_dict) session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization'] and organisation_updated: users=_get_admin_users_from_organasition", "label": 0}, {"snippet_id": 32773, "code": "':') for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs a number of", "label": 0}, {"snippet_id": 12685, "code": " descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the", "label": 0}, {"snippet_id": 27071, "code": " shard. redis_max_clients: If provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided.", "label": 0}, {"snippet_id": 19235, "code": " profiling.profile( \"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\"", "label": 0}, {"snippet_id": 77573, "code": ")[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query( Package ) ) for pkg in packages: package_ids", "label": 0}, {"snippet_id": 73625, "code": " not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)", "label": 1}, {"snippet_id": 51459, "code": "' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version", "label": 0}, {"snippet_id": 73682, "code": " parse_upload(create_position_form.save(commit=False)) def save_position_to_user(request): request.user.positions.add(Position.objects.get( id=request.session['position_id'])) @login_required(login_url='/login", "label": 0}, {"snippet_id": 55526, "code": " join(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self", "label": 0}, {"snippet_id": 79424, "code": "') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject", "label": 1}, {"snippet_id": 66654, "code": "\"suggested-action\") composite_unlock_select_button.get_style_context().add_class(\"destructive-action\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\"", "label": 0}, {"snippet_id": 63662, "code": "): eppn='hubba-bubba' came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context", "label": 0}, {"snippet_id": 32792, "code": "''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ''' def __init__(self, base, redirections): self.base=base self.redirections", "label": 0}, {"snippet_id": 58138, "code": "{onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding.STEP_1: 0,", "label": 1}, {"snippet_id": 25693, "code": "\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional processes like the Redis", "label": 0}, {"snippet_id": 21174, "code": "._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR", "label": 0}, {"snippet_id": 11408, "code": "() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client", "label": 0}, {"snippet_id": 44771, "code": ".extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) self.assertRaises(ValidationError, note.clean) def test_long_qa_notes(self):", "label": 1}, {"snippet_id": 83345, "code": " \"\"\"Check for some errors regarding the title: 1. Check for bad characters 2. Check for reserved titles Checking for existing articles is done by Django on Database level \"\"\" title=self.cleaned_data['title", "label": 1}, {"snippet_id": 3780, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username", "label": 0}, {"snippet_id": 39332, "code": " validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length=100, null=True, blank=True) def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name", "label": 0}, {"snippet_id": 67662, "code": "(self): pk=self.kwargs['pk'] query=Attribute.objects.filter(event=pk).order_by('id') category=self.request.GET.get('category') type=self.request.GET.get('type') if category is not None: query=query.filter", "label": 0}, {"snippet_id": 49535, "code": " insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__", "label": 1}, {"snippet_id": 5388, "code": "'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self", "label": 0}, {"snippet_id": 62140, "code": " validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode=block\", ) def validate_no_sniff(page): return validate_security_header( page, \"X-Content-Type-Options\", \"nosniff\", )", "label": 0}, {"snippet_id": 46501, "code": " ExtractedChemical.DoesNotExist as e: extracted_chemical=None context['clean_comp_err'][i +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical matches rawchem_ptr_id", "label": 0}, {"snippet_id": 41750, "code": ".get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name'", "label": 0}, {"snippet_id": 16586, "code": " elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert", "label": 0}, {"snippet_id": 44380, "code": "): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-SID\"]') try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas", "label": 0}, {"snippet_id": 39738, "code": " return self.extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload", "label": 1}, {"snippet_id": 35667, "code": ":max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid():", "label": 1}, {"snippet_id": 81658, "code": "> 0: _logger.info('Can subscribe for open event id: %s, name: %s', event.event_type_id.name, event.name) return True if event_start < datetime.now(): return False if(event_start +relativedelta(hours=-24", "label": 1}, {"snippet_id": 36102, "code": ": return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam", "label": 0}, {"snippet_id": 77189, "code": ".request_type) base_url +=_IMAGE_FMT % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the", "label": 0}, {"snippet_id": 78472, "code": " } if datarequest.organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id", "label": 0}, {"snippet_id": 20423, "code": "(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map() if self.autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds", "label": 0}, {"snippet_id": 10034, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render", "label": 0}, {"snippet_id": 17237, "code": ".cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean() except ValidationError as e", "label": 0}, {"snippet_id": 50253, "code": "] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else:", "label": 0}, {"snippet_id": 36963, "code": "'''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either", "label": 0}, {"snippet_id": 51661, "code": "\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method", "label": 0}, {"snippet_id": 36104, "code": " self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '", "label": 0}, {"snippet_id": 29369, "code": ".models import user_datastore, User from benwaonline.auth import auth from benwaonline.auth.forms import RegistrationForm @auth.before_request def before_request(): g.user=current_user @auth.route('/test'", "label": 1}, {"snippet_id": 49660, "code": "\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session: if not", "label": 0}, {"snippet_id": 58420, "code": "\"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" } }, onboarding.NEXT_STEPS:{ \"done\": False, \"settings\":{ \"html\": \"<p>next_steps</p>\", \"description\": ", "label": 0}, {"snippet_id": 72820, "code": ".save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position') request.session[", "label": 1}, {"snippet_id": 12612, "code": "=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"", "label": 0}, {"snippet_id": 83945, "code": " group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden", "label": 0}, {"snippet_id": 77142, "code": "\"ImageryMaps\") tile_arg_names=_LAYER_ARG_NAMES[request_type] version_info=server_layer_def.get(\"version\", None) layer=WmsLayer( target_url=target_url, name=layer_ns, layer_id=str(server_layer_def[\"id\"]", "label": 0}, {"snippet_id": 68588, "code": " def hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream", "label": 0}, {"snippet_id": 60448, "code": "(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[", "label": 0}, {"snippet_id": 52031, "code": "\"): flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list", "label": 0}, {"snippet_id": 50604, "code": "(name) def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools", "label": 0}, {"snippet_id": 32086, "code": " Args: string: The raw string on which to operate. ''' def __init__(self, string): self.string=string self.position=-1 self.char=None self.read() def read(self): ''' Read a single char from the stream and", "label": 0}, {"snippet_id": 60411, "code": "=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u: urllib.parse.quote_plus(u) self.jinja_env.filters[\"escape_sqlite\"]=escape_sqlite self.jinja_env.filters[\"to_css_class\"]=to_css_class pm.hook", "label": 0}, {"snippet_id": 55813, "code": " \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf.close() \t\treturn r \tdef writelines(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.writelines", "label": 0}, {"snippet_id": 21186, "code": ".PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"\"\"Start the raylet monitor.\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info=ray", "label": 0}, {"snippet_id": 75857, "code": ", _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir', _('Sphinx HTML -> HTMLDir')), ) from_url_helptext=_( 'Absolute path, excluding the domain. ' 'Example: <b>/docs/", "label": 0}, {"snippet_id": 18480, "code": "\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?", "label": 0}, {"snippet_id": 54528, "code": "\"application/json\" ) return resp else: return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once, will create", "label": 0}, {"snippet_id": 43, "code": " import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given", "label": 0}, {"snippet_id": 60422, "code": "[\"escape_sqlite\"]=escape_sqlite self.jinja_env.filters[\"to_css_class\"]=to_css_class pm.hook.prepare_jinja2_environment(env=self.jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?", "label": 0}, {"snippet_id": 34102, "code": "-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"", "label": 0}, {"snippet_id": 75284, "code": " candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) cm=CommitteeMember.objects.get(id=cm_id) candidate.committee_members", "label": 0}, {"snippet_id": 2908, "code": " @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect", "label": 0}, {"snippet_id": 2339, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length", "label": 0}, {"snippet_id": 28018, "code": " threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string(): id_hash=hashlib.sha1() id_hash.update(uuid.uuid4().bytes) id_bytes=id_hash.digest()", "label": 0}, {"snippet_id": 70206, "code": " modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re", "label": 0}, {"snippet_id": 62939, "code": ".test_client() as c: resp=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr=auth_response(token, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers", "label": 0}, {"snippet_id": 73971, "code": "-end functionality. Subclass these partials with your own views if you are implementing callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view", "label": 0}, {"snippet_id": 61277, "code": " crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with", "label": 0}, {"snippet_id": 56274, "code": "=param') \\ .when_call_experience_redirect('AsdE43E4') \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/e/AsdE43E4&other=param' '&st=a&sd=d&si=%2Fmedia%2Furl.small", "label": 0}, {"snippet_id": 11032, "code": " information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if", "label": 0}, {"snippet_id": 41645, "code": "'datagroup'].all_matched(), ('UploadForm should be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) self.objects.doc.matched", "label": 0}, {"snippet_id": 35408, "code": " product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form[", "label": 0}, {"snippet_id": 80132, "code": "*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self", "label": 0}, {"snippet_id": 79125, "code": " closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context[", "label": 0}, {"snippet_id": 9220, "code": " IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode", "label": 1}, {"snippet_id": 32116, "code": ".position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char def token(self): ''' Read a single token from the stream. Returns: The generated", "label": 0}, {"snippet_id": 71354, "code": ": self.app=app self._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/]+)/*(\\S*)' % (self._config['base_uri'])) def __call__(self, environ, start_response): if environ['PATH_INFO'].startswith", "label": 0}, {"snippet_id": 14189, "code": " return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept", "label": 0}, {"snippet_id": 34631, "code": " with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data", "label": 0}, {"snippet_id": 80794, "code": ") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked", "label": 0}, {"snippet_id": 24202, "code": " import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for", "label": 1}, {"snippet_id": 42034, "code": "=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all", "label": 0}, {"snippet_id": 45232, "code": "!=current_date: document_stats[type].append({'upload_date': current_date , 'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects", "label": 0}, {"snippet_id": 75120, "code": " thesis.title !=form.cleaned_data['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve removed. Please make sure your title is correct in the information section below.')", "label": 0}, {"snippet_id": 42371, "code": " self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f'/datagroup/%s", "label": 0}, {"snippet_id": 24830, "code": " client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental", "label": 1}, {"snippet_id": 37427, "code": "*kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required' class Meta: model=Product fields=['title', 'manufacturer', 'brand_name', ", "label": 0}, {"snippet_id": 45460, "code": " import * @login_required() def data_document_detail(request, pk): template_name='data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code", "label": 0}, {"snippet_id": 71447, "code": ".import_class(strategy_location) except Exception, e: raise(Exception, \"You must provide a location for the{0} \"\\ \"strategy. Add a 'location' key to the \"\\ \"'provider.{0}' config dict\".format(provider)", "label": 0}, {"snippet_id": 55360, "code": "\tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) ", "label": 0}, {"snippet_id": 26998, "code": " of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object", "label": 0}, {"snippet_id": 59841, "code": "( { \"source\": metadata.get(\"source\") or self.metadata(\"source\"), \"source_url\": metadata.get(\"source_url\") or self.metadata(\"source_url\"), \"license\": metadata.get(\"license\") or self.metadata(\"license\"),", "label": 0}, {"snippet_id": 9339, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers", "label": 0}, {"snippet_id": 43509, "code": "'test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser", "label": 0}, {"snippet_id": 65578, "code": "=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath) def", "label": 0}, {"snippet_id": 7407, "code": ".models.bookings import Exam from app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"/exams/\", methods=[", "label": 0}, {"snippet_id": 62267, "code": ".keys()) > 0: return False else: return True def validate_onion_address_not_in_href(page): links_on_landing_page=page.find_all(\"a\") for link in links_on_landing_page: try: if '.onion' in link.attrs['href", "label": 0}, {"snippet_id": 76858, "code": ": im_tile=None logger.error(\"Failed to fetch tile:%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image", "label": 1}, {"snippet_id": 54418, "code": " Format: JSON \"\"\" @app.route('/json/<newspaper>/<query>') def test(newspaper, query): \thinduscraper=scrapers[newspaper] \thinduscraper.getArticleLinks(query) \thinduscraper.addArticleContent() \tarticles=hinduscraper", "label": 0}, {"snippet_id": 44477, "code": ", priority='HI') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction Script', url", "label": 0}, {"snippet_id": 26139, "code": ", self._plasma_store_socket_name, self._ray_params.worker_path, self._ray_params.num_cpus, self._ray_params.num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port", "label": 0}, {"snippet_id": 30455, "code": " login_session['username']) print \"done!\" return output @app.route('/logout') def disconnect(): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id", "label": 1}, {"snippet_id": 23258, "code": "(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string", "label": 0}, {"snippet_id": 11957, "code": " import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter", "label": 0}, {"snippet_id": 79370, "code": "'followers']=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict", "label": 0}, {"snippet_id": 60636, "code": ": status=405 info={} message=exception.args[0] elif isinstance(exception, DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception.messagge_is_html: message", "label": 0}, {"snippet_id": 348, "code": ".isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): ", "label": 0}, {"snippet_id": 52734, "code": " settings from realpal.apps.chat.models import Message from realpal.apps.chat.serializers import MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models", "label": 1}, {"snippet_id": 38834, "code": "=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150", "label": 0}, {"snippet_id": 32700, "code": ": ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable. ''' def __init__(self", "label": 0}, {"snippet_id": 28173, "code": " message to the driver to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because", "label": 0}, {"snippet_id": 30052, "code": " nullable=False) description=Column(String(450),nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id')) grudget=relationship(Grudget)", "label": 1}, {"snippet_id": 57266, "code": "['transaction']=transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts", "label": 0}, {"snippet_id": 41658, "code": "], ('ExtractForm should not be included in the page!')) self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup']", "label": 0}, {"snippet_id": 32874, "code": " os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps perform multiple file redirections. Args: redirections: A list of redirections. ''' def __init__(self, redirections): self.redirections", "label": 0}, {"snippet_id": 64610, "code": "'getatter', 'globals', 'hasattr', 'hash', 'hex', 'id', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'input', 'int', 'InterruptedError', 'IOError', 'IsADirectoryError', 'isinstance', ", "label": 0}, {"snippet_id": 58111, "code": ".STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding", "label": 1}, {"snippet_id": 66886, "code": ".getSamplesFromDomain(domain) context['tm_report']=tm.getReportFromDomain(domain) context['bls']=blacklist.objects.filter(Q(domain=domain)|Q(url__contains=domain)) count=context['bls'].count() if count", "label": 0}, {"snippet_id": 29699, "code": "', post=post, form=CommentForm()) flash('That Benwa doesn\\'t exist yet') return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/add', methods=['GET', 'POST']) @login_required def", "label": 0}, {"snippet_id": 49648, "code": " CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\"", "label": 0}, {"snippet_id": 72535, "code": " Position from screendoor.parseposter import parse_upload @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html',", "label": 0}, {"snippet_id": 42495, "code": "=QAGroup.objects.get( extraction_script=self.objects.extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get(f'/qa/extractedtext", "label": 0}, {"snippet_id": 46789, "code": ".append([count,\"DocumentType code doesn't exist.\"]) filenames.append(line['filename']) doc=DataDocument(filename=line['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization", "label": 0}, {"snippet_id": 43703, "code": "' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 43961, "code": ".live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys(", "label": 0}, {"snippet_id": 75331, "code": "',{'candidate': candidate}) @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except", "label": 0}, {"snippet_id": 84023, "code": " allow_write} if notification is not None: template_params.update({'is_observing': is_observing, 'can_observe': True}) if group_slug is not None: template_params['group']=group if extra_context is not None:", "label": 0}, {"snippet_id": 34982, "code": " resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv", "label": 1}, {"snippet_id": 26797, "code": " self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result def any_processes_alive(self", "label": 0}, {"snippet_id": 79993, "code": " be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with", "label": 0}, {"snippet_id": 79805, "code": " datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition(org_dict) users.discard(context", "label": 1}, {"snippet_id": 39257, "code": " raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) raw_min_comp=models.CharField", "label": 0}, {"snippet_id": 62206, "code": "(page): if 'Cache-Control' in page.headers: return True else: return False def validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page", "label": 0}, {"snippet_id": 26274, "code": " node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is None: self.start_redis() self", "label": 0}, {"snippet_id": 14570, "code": ": TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 26232, "code": "\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file", "label": 0}, {"snippet_id": 45547, "code": "'extracted_text': extracted_text, 'detail_formset': child_formset} ) colors=[' color=(hex for hex in colors) for form in child_formset.forms: form.color=next(color) else: context['edit_text_form']=ParentForm", "label": 1}, {"snippet_id": 30432, "code": "\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are now logged in as %s\"", "label": 0}, {"snippet_id": 8009, "code": " request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset", "label": 0}, {"snippet_id": 48907, "code": "' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment", "label": 0}, {"snippet_id": 63576, "code": ", json.loads(response2.data)['payload']['location']) def test_logout_service_startingSP(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id", "label": 0}, {"snippet_id": 31420, "code": "'gitmate.disable_csrf.DisableCSRF', ] ROOT_URLCONF='gitmate.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS':[], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors'", "label": 0}, {"snippet_id": 14137, "code": " configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]", "label": 0}, {"snippet_id": 37603, "code": " class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products", "label": 0}, {"snippet_id": 10206, "code": " object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error", "label": 0}, {"snippet_id": 22060, "code": " worker_path(str): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory. include_webui", "label": 0}, {"snippet_id": 58458, "code": "\"invite_somebody\" } }, onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_thread</p>\", \"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\"", "label": 0}, {"snippet_id": 80402, "code": " self.lock_thin_etalon_action.triggered.connect(self.toggle_thin_etalon_lock) self.lock_piezo_etalon_action.triggered.connect(self.toggle_piezo_etalon_lock) self.lock_fast_piezo_action.triggered.connect", "label": 0}, {"snippet_id": 15071, "code": " time_series=time_series) class NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False,", "label": 0}, {"snippet_id": 52276, "code": "=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\"", "label": 0}, {"snippet_id": 48009, "code": ".objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...' ExtractedTextForm, HnPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request", "label": 0}, {"snippet_id": 13084, "code": "(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 69312, "code": "/jupyterhub-admins', 'w') as f: f.write('%jupyterhub-admins ALL=(ALL) NOPASSWD: ALL\\n') f.write('Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file): \"\"\"", "label": 0}, {"snippet_id": 23722, "code": ".check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output", "label": 0}, {"snippet_id": 43525, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self)", "label": 0}, {"snippet_id": 61349, "code": ".getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): ", "label": 0}, {"snippet_id": 55493, "code": ".path,times) \tdef walk(self,topdown=True, onerror=None, followlinks=False): \t\treturn os.walk(self.path,topdown,onerror,followlinks) class FSPathList(list): \tdef _raw(self): \t\treturn map(lambda x: x.path", "label": 0}, {"snippet_id": 5928, "code": "'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True) app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com',", "label": 0}, {"snippet_id": 61695, "code": " a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the result to the database. In that case, the passed DirectoryEntry", "label": 0}, {"snippet_id": 14715, "code": " import LoginManager, current_user, login_user, logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField, DateField,", "label": 1}, {"snippet_id": 59995, "code": " with sqlite3.connect( \"file:{}?immutable=1\".format(path), uri=True ) as conn: self.prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size", "label": 0}, {"snippet_id": 44935, "code": ") self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits", "label": 0}, {"snippet_id": 79586, "code": ") _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 24302, "code": "\"fetch_and_run_function\", worker=self.worker): self.fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(", "label": 0}, {"snippet_id": 22274, "code": "=node_manager_port self.node_ip_address=node_ip_address self.num_workers=num_workers self.local_mode=local_mode self.driver_mode=driver_mode self.redirect_worker_output=redirect_worker_output self.redirect_output", "label": 0}, {"snippet_id": 73330, "code": " name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form, name='confirm_account'), path('createnewposition", "label": 0}, {"snippet_id": 39265, "code": " blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) raw_min_comp=models.CharField(\"Raw minimum composition\", max_length=100, null=True, blank=True", "label": 0}, {"snippet_id": 53561, "code": " -> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ", "label": 0}, {"snippet_id": 32007, "code": "(self, name): wd=os.getcwd() print(wd) def _builtin_cd(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto", "label": 0}, {"snippet_id": 26695, "code": ". instead of kill, kill,..., wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type", "label": 0}, {"snippet_id": 27895, "code": "'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself", "label": 0}, {"snippet_id": 30468, "code": "]=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook': fbdisconnect() del login_session['facebook_id'] del login_session['username", "label": 0}, {"snippet_id": 38235, "code": ".is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter", "label": 0}, {"snippet_id": 48013, "code": ") if created: extext.doc_date='please add...' ExtractedTextForm, HnPFormSet=create_detail_formset(doc) ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HnPFormSet(request.POST", "label": 0}, {"snippet_id": 18306, "code": "): \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email'", "label": 0}, {"snippet_id": 56602, "code": ".response['Location']==url return self class AASATestCase(TestCase): def test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa()", "label": 0}, {"snippet_id": 81426, "code": ", '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date ", "label": 1}, {"snippet_id": 25231, "code": " a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries", "label": 0}, {"snippet_id": 47082, "code": "=DataDocument.objects.filter(data_group_id=0).values(*columnlist) return render_to_csv_response(qs, filename=\"registered_records.csv\", use_verbose_names=False) @login_required() def habitsandpractices(request, pk,", "label": 0}, {"snippet_id": 25506, "code": " use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str", "label": 0}, {"snippet_id": 23325, "code": " guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state(", "label": 0}, {"snippet_id": 58553, "code": ".models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage from core.common import onboarding from django.conf import settings class Command(BaseCommand): help=", "label": 0}, {"snippet_id": 76793, "code": " pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]=bgcolor +_OPAQUE_ALPHA else: (red, green, blue, alpha", "label": 0}, {"snippet_id": 52743, "code": " MessageSerializer from realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models import Room logger=logging.getLogger(__name__) class MessageCreateAPIView(CreateAPIView):", "label": 1}, {"snippet_id": 19782, "code": " failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive notifications about failed components. \"\"\" def __init__(self", "label": 1}, {"snippet_id": 29988, "code": " primary_key=True) name=Column(String(250), nullable=False) email=Column(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base): __tablename__='Grudget' id=Column(Integer, primary_key=True", "label": 0}, {"snippet_id": 42887, "code": "=scr).count() self.assertTrue(group_count==1) self.assertTrue(scr.qa_begun) new_group=QAGroup.objects.get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group", "label": 0}, {"snippet_id": 26979, "code": " redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the", "label": 0}, {"snippet_id": 75371, "code": " @permission_required('etd_app.change_candidate', raise_exception=True) def staff_home(request): return HttpResponseRedirect(reverse('review_candidates', kwargs={'status': 'all'})) @login_required @permission_required(", "label": 0}, {"snippet_id": 42982, "code": " test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains(response, '<b>Add New Habit and Practice</b>') def test_dd_link(self): response=self.client.get('/qa/extractedtext/5',", "label": 0}, {"snippet_id": 52720, "code": " CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework import status from django.conf import settings from realpal.apps.chat", "label": 1}, {"snippet_id": 66029, "code": ".on_back_button_clicked) quit_button.connect(\"clicked\", self.on_quit_button_clicked) unsaved_databases_list_box=builder.get_object(\"unsaved_databases_list_box\") for db in unsaved_databases_list: unsaved_database_row", "label": 0}, {"snippet_id": 11424, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()==", "label": 0}, {"snippet_id": 52912, "code": " rest_framework.validators import ValidationError from.models import Message class MessageSerializer(serializers.ModelSerializer): \"\"\" Message Serializer class \"\"\" class Meta: model=Message fields=('sent_by', 'room", "label": 1}, {"snippet_id": 27587, "code": " and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event", "label": 0}, {"snippet_id": 70841, "code": "=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory", "label": 1}, {"snippet_id": 14860, "code": "(user_data['password_hash']) return user def auth_check_password(user, password): print('auth_check_password', user.password_hash, password) return check_password_hash(user.password_hash, password) db_init(", "label": 1}, {"snippet_id": 22143, "code": " then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If True, the", "label": 0}, {"snippet_id": 41133, "code": ".get(response.url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product.id) data={'title' :['Product Title'], 'upc' :['stub_9101'], 'document_type'", "label": 0}, {"snippet_id": 40377, "code": " QAGroup.objects.filter(extraction_script=es).count() > 1: return QAGroup.objects.filter(extraction_script=es).first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText", "label": 0}, {"snippet_id": 7283, "code": " def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False column_list=['office_name', 'sb', ", "label": 1}, {"snippet_id": 20393, "code": " num_flushed{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages", "label": 0}, {"snippet_id": 30379, "code": " login_session['access_token']=credentials.access_token login_session['gplus_id']=gplus_id userinfo_url=\"https://www.googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt':", "label": 0}, {"snippet_id": 41711, "code": "['datagroup'].all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames", "label": 0}, {"snippet_id": 77991, "code": " version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination.action.package_patch(id=package_id, security_classification=security_classification, data_driven_application", "label": 0}, {"snippet_id": 18019, "code": " subject='Verify your{} account'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/verify.txt', **tmpl_context), html=flask.render_template('email/verify.html', ", "label": 0}, {"snippet_id": 22661, "code": " start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self)", "label": 1}, {"snippet_id": 58563, "code": " from core.common import onboarding from django.conf import settings class Command(BaseCommand): help='Onboarding preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects", "label": 1}, {"snippet_id": 46608, "code": " pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource", "label": 0}, {"snippet_id": 43154, "code": " elp_flagged=elps.filter(qa_flag=True).first() self.assertIn(elp_flagged.raw_cas.encode(), response.content) elp_not_flagged=elps.filter(qa_flag=False).first() self.assertNotIn(elp_not_flagged.raw_cas.encode", "label": 0}, {"snippet_id": 15989, "code": " redirect(url_for('view_home')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home')) return render_template", "label": 1}, {"snippet_id": 41548, "code": " import_module from django.test import Client from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard.views.data_group import ExtractionScriptForm,", "label": 1}, {"snippet_id": 70494, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta", "label": 0}, {"snippet_id": 64531, "code": " login failed, redirecting user to{}'.format(location_on_fail)) return redirect(location_on_fail) @authn_views.route('/saml2-metadata') def metadata(): \"\"\" Returns an XML with the SAML 2.0 metadata for", "label": 0}, {"snippet_id": 50837, "code": " be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list(x) for x in arglist],[]) def flatten_comma_list(arglist): return sum([s.split", "label": 0}, {"snippet_id": 80387, "code": ") self.thin_eta_scan_action.triggered.connect(self.start_thin_etalon_scan) self.lock_all_action.triggered.connect(self.toggle_lock_all) self.lock_slow_piezo_action.triggered.connect(self.toggle_slow_piezo_lock", "label": 0}, {"snippet_id": 43736, "code": ".get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes') self.browser.find_element_by_xpath('", "label": 1}, {"snippet_id": 31788, "code": "=request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request", "label": 0}, {"snippet_id": 38770, "code": "(ExtractedText, ExtractedFunctionalUse), 'CP':(ExtractedCPCat, ExtractedListPresence) } class DataGroup(CommonInfo): name=models.CharField(max_length=50) description=models.TextField(null=True, blank=True", "label": 0}, {"snippet_id": 72071, "code": " GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo,", "label": 0}, {"snippet_id": 53439, "code": " render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=stack ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', **render_data ", "label": 0}, {"snippet_id": 59244, "code": " import( InterruptedError, Results, escape_css_string, escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit, to_css_class ) from.inspect import inspect_hash, inspect_views, inspect_tables", "label": 0}, {"snippet_id": 76177, "code": " full_path==self.from_url: log.debug('Redirecting %s', self) return self.to_url if '$rest' in self.from_url: match=self.from_url.split('$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s' % match", "label": 0}, {"snippet_id": 71183, "code": " _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models.Session.get_by_value(value) if session is not None: session_hash=session.hash() else: session=models.Session.create()", "label": 0}, {"snippet_id": 6274, "code": "&{extra_params}'.format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token): \"\"\" Check", "label": 0}, {"snippet_id": 76666, "code": " rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles <=abs_tile_row: logger.debug(\"[%d] %d, ", "label": 0}, {"snippet_id": 33784, "code": " '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s,%s,%s\\r", "label": 1}, {"snippet_id": 60740, "code": ", comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name", "label": 0}, {"snippet_id": 23829, "code": "=\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None:", "label": 0}, {"snippet_id": 84219, "code": ": True} else: template_params={'form': form, 'new_article': False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article", "label": 0}, {"snippet_id": 55176, "code": ".islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn FSPath(os.path.realpath(self.path)) ", "label": 0}, {"snippet_id": 69339, "code": " miniconda_version='4.5.4' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda.check_miniconda_version(USER_ENV_PREFIX, miniconda_version): logger.info('Downloading & setting up user", "label": 0}, {"snippet_id": 36549, "code": "(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21", "label": 0}, {"snippet_id": 9565, "code": " fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS'", "label": 0}, {"snippet_id": 19845, "code": "(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards", "label": 0}, {"snippet_id": 36211, "code": "'PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo", "label": 1}, {"snippet_id": 46079, "code": ".ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc=DataDocument.objects.get(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store", "label": 0}, {"snippet_id": 40479, "code": ".ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1)", "label": 0}, {"snippet_id": 63639, "code": "'POST', data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302", "label": 0}, {"snippet_id": 18258, "code": ".web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself.render('signup.html',error='') \t \t\"\"\" check_if_exists(): \tUses the pymongo driver", "label": 1}, {"snippet_id": 25200, "code": " of the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted !=len(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format(", "label": 0}, {"snippet_id": 78004, "code": "=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self", "label": 0}, {"snippet_id": 2010, "code": " </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]", "label": 0}, {"snippet_id": 61529, "code": " Dict) -> ScanResult: \"\"\" Takes a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"\"\" try: page", "label": 1}, {"snippet_id": 38576, "code": "=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument') matched=models.BooleanField(default=False)", "label": 0}, {"snippet_id": 23073, "code": " be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID", "label": 0}, {"snippet_id": 68973, "code": "/18aGZBYUAEQEAAYkCHwQYAQIACQUCU5sktgIbDAAK CRAWVaCraFdigIPQEACcYh8rR19wMZZ/hgYv5so6Y1HcJNARuzmffQKozS/rxqec 0xM3wceL1AIMuGhlXFeGd0wRv/RVzeZjnTGwhN1DnCDy1I66hUTgehONsfVanuP1 PZKoL38EAxsMzdYgkYH6T9a4wJH/IPt", "label": 0}, {"snippet_id": 62568, "code": "=logging.getLogger(__name__) HERE=os.path.abspath(os.path.dirname(__file__)) class AuthnAPITestBase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update", "label": 0}, {"snippet_id": 65166, "code": "'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>", "label": 0}, {"snippet_id": 69522, "code": " environment to PATH for notebook terminals, but not the hub venv. This means tljh-config is not actually accessible. We symlink to /usr/bin and not /usr/local/bin, since /usr/local/bin is not place, and works", "label": 0}, {"snippet_id": 40032, "code": ".ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name)", "label": 1}, {"snippet_id": 15837, "code": " form=run_form) }) @app.route('/run/form/history', methods=['POST']) def view_run_history(): history=json.loads(request.data) history=[ { 'id': item['id'], 'date': datetime.fromtimestamp(item['date'] /", "label": 0}, {"snippet_id": 20503, "code": ", choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants", "label": 0}, {"snippet_id": 28560, "code": " runtime_resources): \"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs", "label": 0}, {"snippet_id": 24027, "code": " __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr)", "label": 0}, {"snippet_id": 15163, "code": "(ChangeInputNewValue, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField('Start", "label": 0}, {"snippet_id": 76161, "code": "(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path(path, language, version_slug) if full_path==self.from_url: log.debug('Redirecting", "label": 1}, {"snippet_id": 43464, "code": "(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent", "label": 0}, {"snippet_id": 5872, "code": " urandom=None): self.credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials() self.http=http if http is not None else httplib2.Http() self.time=time if time is not None", "label": 0}, {"snippet_id": 75243, "code": "(committee_member) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: person_form=CommitteeMemberPersonForm() committee_member_form=CommitteeMemberForm()", "label": 0}, {"snippet_id": 49206, "code": " request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted", "label": 0}, {"snippet_id": 28267, "code": " (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the object", "label": 0}, {"snippet_id": 53082, "code": "(username='testuser', password='password') self.assertTemplateUsed('users/update.html') for form in data: data_to_pass=data[form] data[form][form]='Update' response=self.client.post(update_url, data_to_pass", "label": 1}, {"snippet_id": 80165, "code": " setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True) self.log_queue=queue.Queue() self.log_stream=LoggingStream(self.log_queue) self.log_thread=LoggingThread(self.log_queue, parent", "label": 0}, {"snippet_id": 47955, "code": ".getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp", "label": 0}, {"snippet_id": 43233, "code": " log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in'", "label": 0}, {"snippet_id": 18340, "code": ": \tForms a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password): ", "label": 1}, {"snippet_id": 15016, "code": "', name): attrs=name.split(',') (ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name", "label": 0}, {"snippet_id": 75706, "code": " _get_fast_results(term, index='suggestall'): error_response=[{'text': 'FAST results', 'children':[{'id': '', 'text': 'Error retrieving FAST results.'}]}] url=_build_fast_url(term, index) try: r=requests.get(url", "label": 0}, {"snippet_id": 74556, "code": " Server error. Please contact %s for assistance.' % BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home", "label": 0}, {"snippet_id": 66397, "code": ".FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name", "label": 0}, {"snippet_id": 17646, "code": ".config['USE_EMAIL_VERIFICATION']: send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask", "label": 0}, {"snippet_id": 36346, "code": "-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode", "label": 0}, {"snippet_id": 45430, "code": "(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc.get_level(), puc.product_count ] writer.writerow(row) return response", "label": 0}, {"snippet_id": 84132, "code": "*article_args) except ArticleClass.DoesNotExist: article=None if request.method=='POST': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request.user", "label": 1}, {"snippet_id": 80182, "code": " self.log_thread=LoggingThread(self.log_queue, parent=self) self.log_thread.message_received.connect(self.log) self.log_thread.start() def setup_window(self): self.window=window=QMainWindow() self.layout", "label": 0}, {"snippet_id": 29254, "code": " return dict( admin_base_template=admin.base_template, admin_view=admin.index_view, h=helpers, get_url=url_for ) admin=Admin(app, name='benwaonline', template_mode='bootstrap3') setup_adminviews(admin, db", "label": 0}, {"snippet_id": 47759, "code": "=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'", "label": 0}, {"snippet_id": 4363, "code": ") self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 66413, "code": ".set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application", "label": 0}, {"snippet_id": 37486, "code": ".all(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=[", "label": 0}, {"snippet_id": 27121, "code": " flag indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename", "label": 0}, {"snippet_id": 13474, "code": " third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 80297, "code": ".addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action", "label": 0}, {"snippet_id": 73828, "code": " ImportApplicationsForm, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] } @login_required(login_url='/login/', redirect_field_name=None) def positions", "label": 0}, {"snippet_id": 77518, "code": "\", \"glb\"): if layers_by_name[layer_name].label !=\"Imagery\": layers_by_name.pop(layer_name) return layers_by_name def main(): obj=GEELayer() hostname=gethostname() target_path=\"merc\" server_url=\"http://", "label": 0}, {"snippet_id": 41904, "code": ".objects.doc.save() response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self.assertIn", "label": 0}, {"snippet_id": 67909, "code": " ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q, Count from.models import Hunt from apps", "label": 0}, {"snippet_id": 47014, "code": " datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg.get_zip_url(), 'rb') response=HttpResponse(zip_file, content_type", "label": 0}, {"snippet_id": 51643, "code": " params): keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint", "label": 0}, {"snippet_id": 49037, "code": "'product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data['products']=products return render(request, template_name", "label": 0}, {"snippet_id": 76578, "code": "&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,-30000000.0,30000000.0,30000000.0& WIDTH=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0.0410861968994s http://localhost/wms?LAYERS=1002", "label": 0}, {"snippet_id": 75710, "code": "'text': 'FAST results', 'children':[{'id': '', 'text': 'Error retrieving FAST results.'}]}] url=_build_fast_url(term, index) try: r=requests.get(url, timeout=2) except requests.exceptions.Timeout: logger", "label": 0}, {"snippet_id": 65223, "code": " DatabaseManager from keepassgtk.create_database import CreateDatabase from keepassgtk.container_page import ContainerPage from keepassgtk.unlock_database import UnlockDatabase import keepassgtk.config_manager", "label": 0}, {"snippet_id": 58917, "code": " return old_invite except Http404: pass code=Invite( instructor=instructor, user=user, email=email, code=uuid4().hex, status='pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ", "label": 0}, {"snippet_id": 23244, "code": ": The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether", "label": 0}, {"snippet_id": 73322, "code": " urlpatterns=[ path('', views.index, name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path(", "label": 0}, {"snippet_id": 64967, "code": ".name if not name.isidentifier() or keyword.iskeyword(name): raise ValueError('Function name is not a valid identifier') test_case_objs=[] for i, test_case in enumerate(args.test_case): test_case=name ", "label": 0}, {"snippet_id": 18958, "code": "\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"", "label": 1}, {"snippet_id": 61450, "code": "(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append", "label": 0}, {"snippet_id": 32937, "code": " SetUpOutputRedirect(cmd) if(\">>\" in cmd): SetUpAppendRedirect(cmd) def SetUpInputRedirect(cmd): import pdb; pdb.set_trace() pass def SetUpOutputRedirect(cmd): i=cmd.index(\">\") sys.stdout=open(cmd[i +1]", "label": 1}, {"snippet_id": 4881, "code": ", path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"", "label": 0}, {"snippet_id": 58924, "code": "=user, email=email, code=uuid4().hex, status='pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return", "label": 0}, {"snippet_id": 26889, "code": " scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a", "label": 0}, {"snippet_id": 73890, "code": " Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render(request, 'positions.html', positions_list_data(request, sort_by)) def position_detail_data(request,", "label": 0}, {"snippet_id": 7887, "code": "'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), }", "label": 0}, {"snippet_id": 58002, "code": " skip from ddt import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils", "label": 0}, {"snippet_id": 52702, "code": "-Control\"]=\"no-cache, no-store, must-revalidate\" return r if __name__==\"__main__\": app.debug=True app.jinja_env.auto_reload=app.debug connect_to_db(app) DebugToolbarExtension(app) app.run(host='0.0.0.0", "label": 0}, {"snippet_id": 28972, "code": " length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues.", "label": 0}, {"snippet_id": 75881, "code": "=_( 'Absolute or relative URL. Example: ' '<b>/tutorial/install.html</b>', ) redirect_type_helptext=_('The type of redirect you wish to use.') class Redirect(models.Model): \"\"\"A HTTP redirect associated", "label": 0}, {"snippet_id": 46137, "code": ".FILES,dg_type=dg.type) if extract_form.is_valid(): csv_file=request.FILES.get('extract_file') script_pk=int(request.POST['script_selection']) script=Script.objects.get(pk=script_pk) info=[x.decode('ascii'", "label": 0}, {"snippet_id": 81234, "code": "=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week=fields.Char(string='Dag'", "label": 0}, {"snippet_id": 38663, "code": "=self.filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self.data_group fn=self.get_abstract_filename() return f'/media/{dg.fs_id}/pdf/{fn}' def clean(self): this_type=self", "label": 0}, {"snippet_id": 47393, "code": ".is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource, 'datagroup_list", "label": 0}, {"snippet_id": 33541, "code": ": if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 1, ethylparaben_stats['dds_n'], 'There should now be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs", "label": 0}, {"snippet_id": 57052, "code": ".get_all_permissions() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept in settings.CONCEPTS: permission=concept.replace('.','.add_') concept_model=apps.get_model", "label": 0}, {"snippet_id": 80359, "code": ".triggered.connect(self.restart) self.set_wavelength_action.triggered.connect(self.set_wavelength_dialog) self.set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog) self", "label": 0}, {"snippet_id": 552, "code": "/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 51616, "code": "'+start_url+endpoint+'?' keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript", "label": 0}, {"snippet_id": 73156, "code": " ErrorMessages.incorrect_mime_type) self.add_error('pdf', msg) if url: msg=forms.ValidationError( ErrorMessages.url_upload_not_supported_yet) self.add_error('url_ref', msg) return self.cleaned_data class", "label": 1}, {"snippet_id": 25344, "code": " self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info", "label": 0}, {"snippet_id": 41580, "code": " django.test import Client from importlib import import_module from django.db.models import Max from dashboard.forms import * from dashboard.models import * class DataGroupDetailTest(TestCase): def setUp", "label": 0}, {"snippet_id": 77227, "code": "(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1]", "label": 0}, {"snippet_id": 2685, "code": ".login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if", "label": 0}, {"snippet_id": 81280, "code": "(self): if self.env.user !=self.env.ref('base.public_user'): email=self.env.user.partner_id.email for event in self: domain=['&', '|',('email', '=', email),('partner_id', '=', self.env.user.partner_id.id", "label": 0}, {"snippet_id": 47912, "code": "(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n", "label": 0}, {"snippet_id": 12793, "code": " request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register", "label": 0}, {"snippet_id": 44638, "code": ".create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product=p, document=doc) ehp=ExtractedHabitsAndPractices.objects.create(extracted_text=extext, product_surveyed='Test Product Surveyed", "label": 0}, {"snippet_id": 65095, "code": " deductions=[] tree=None while not tree: try: tree=ast.parse(code) except SyntaxError as se: fixed=fix_syntax_err(code, se) if not fixed: if vlevel >=1: print(repr(se), file=sys.stderr) dock_points(deductions", "label": 0}, {"snippet_id": 52583, "code": " sender=session.get(\"displayname\") default_message=\"\"\"{sender} has invited you to join the team {team_name} on SamePage. Accept to help complete projects for {team_name}.\"\"\".format(sender=sender, team_name", "label": 0}, {"snippet_id": 84099, "code": " article_args.update({'content_type': group_ct, 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else", "label": 0}, {"snippet_id": 82487, "code": " import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"", "label": 0}, {"snippet_id": 51332, "code": "._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh", "label": 0}, {"snippet_id": 14089, "code": "\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not", "label": 0}, {"snippet_id": 76767, "code": " tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile.getbands()==(\"R", "label": 0}, {"snippet_id": 65343, "code": ".connect(\"clicked\", self.create_filechooser, None) self.set_titlebar(self.headerbar) def set_headerbar(self): self.set_titlebar(self.headerbar) def get_headerbar(self): return self.headerbar def custom_css", "label": 0}, {"snippet_id": 20284, "code": " message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler=self.xray_driver_removed_handler else: raise Exception(\"This code should be unreachable.\")", "label": 0}, {"snippet_id": 83200, "code": "=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue.empty(): mon_job=self", "label": 0}, {"snippet_id": 51458, "code": "''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version", "label": 0}, {"snippet_id": 42561, "code": " def test_faceted_search_excludes_chemicals(self): response=self.c.get('/find/?q=ethyl') self.assertContains(response, 'Data Document') self.assertNotContains(response, 'Extracted Chemical') self.assertNotContains", "label": 0}, {"snippet_id": 409, "code": "([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime)", "label": 0}, {"snippet_id": 22124, "code": " socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor", "label": 0}, {"snippet_id": 67203, "code": " ThreatMiner import socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit", "label": 0}, {"snippet_id": 65148, "code": ".body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef, ast.AsyncFunctionDef]: if fdef.name !=name: fdef.name=name dock_points(deductions, 1, 'misnamed function') valid=True if not valid: dock_points", "label": 0}, {"snippet_id": 12258, "code": ": 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter", "label": 0}, {"snippet_id": 39964, "code": " django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null", "label": 1}, {"snippet_id": 39780, "code": "'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item", "label": 0}, {"snippet_id": 72354, "code": "} for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [{'daemon_id': daemon_id, 'cluster_id': cluster_id}", "label": 0}, {"snippet_id": 39391, "code": ".raw_chem_name, facet_model_name='Extracted Chemical', ) obj.save() return obj.to_dict(include_meta=True) def get_extractedtext(self): return self.extracted_text @property def true_cas(self): if hasattr", "label": 0}, {"snippet_id": 51680, "code": " params, 'method': method } ] } } script='' if method=='GET': script=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={ 'class':SI, 'results':{ start_url:[ { ", "label": 0}, {"snippet_id": 12390, "code": " return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer", "label": 0}, {"snippet_id": 17489, "code": "('account.login')) user.last_login_date=datetime.utcnow() user.last_login_ip=ip_address(flask.request.remote_addr).packed if not app.config['MAINTENANCE_MODE']: db.session.add(user) db.session.commit()", "label": 0}, {"snippet_id": 68939, "code": " xXLww0OGaEQxfodm8cLFZ5b8JaG3+Yxfe7JkNclwvRimvlAjqIiW5OK0vvfHco+Y gANhQrlMnTx//IdZssaxvYytSHpPZTYw+qPEjbBJOLpoLrz8ZafN1uekpAqQjffI AOqW9SdIzq/kSHgl0bzWbPJPw86XzzftewjKNbkCDQRTmyS2ARAAxSSdQi+WpPQZ fOflkx9sYJa0cWzLl2w+", "label": 0}, {"snippet_id": 61201, "code": "(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of", "label": 0}, {"snippet_id": 28761, "code": ".check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output", "label": 0}, {"snippet_id": 77205, "code": " def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles.\"\"\" tile_args=_TILE_ARGS %( self.tile_arg_names[\"x\"], x, self.tile_arg_names[\"y\"], y, self.tile_arg_names[\"z\"], z ) return tile_args", "label": 0}, {"snippet_id": 4742, "code": "(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id", "label": 0}, {"snippet_id": 9030, "code": ".login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig", "label": 0}, {"snippet_id": 21893, "code": ": Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start", "label": 0}, {"snippet_id": 23871, "code": "\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail", "label": 0}, {"snippet_id": 84333, "code": " revision_from=int(revision) -1 from_value=None if int(revision) is not int(revision_from) +1: from_value=revision_from template_params={'article': article, 'article_title': article.title, 'changeset':", "label": 0}, {"snippet_id": 55490, "code": "\treturn os.utime(self.path,times) \tdef walk(self,topdown=True, onerror=None, followlinks=False): \t\treturn os.walk(self.path,topdown,onerror,followlinks) class FSPathList(list): \tdef _raw(self): \t\treturn", "label": 0}, {"snippet_id": 40908, "code": ".urls import reverse from django.test import TestCase, override_settings from django.core.exceptions import ObjectDoesNotExist from dashboard.forms import * from factotum.settings import EXTRA from dashboard", "label": 0}, {"snippet_id": 54005, "code": " Empties \"\"\" try: contents=self.stdout_interceptor.flush_all() except Exception: return if len(contents) > 0: self.body.append(render_texts.preformatted_text(contents)) self._last_update_time=time.time(", "label": 1}, {"snippet_id": 80012, "code": "'session'] datarequest_id=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST,", "label": 0}, {"snippet_id": 71073, "code": " I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re", "label": 0}, {"snippet_id": 28414, "code": " allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns:", "label": 0}, {"snippet_id": 49247, "code": ".has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'", "label": 0}, {"snippet_id": 5289, "code": " \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password", "label": 0}, {"snippet_id": 24233, "code": ": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client", "label": 0}, {"snippet_id": 55065, "code": "[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn os.path.basename(self.path) \tdef dirname(self):", "label": 0}, {"snippet_id": 21677, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type, check_alive", "label": 0}, {"snippet_id": 29490, "code": ") else: session['user_id']=user_id session['token']=resp['oauth_token'] session['secret']=resp['oauth_token_secret'] return redirect(url_for('auth.signup')) @auth.route('/signup', methods=['GET', 'POST", "label": 0}, {"snippet_id": 1490, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]", "label": 0}, {"snippet_id": 40593, "code": "'specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa", "label": 0}, {"snippet_id": 47667, "code": " product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by()", "label": 0}, {"snippet_id": 13566, "code": " third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 82914, "code": " comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the", "label": 0}, {"snippet_id": 47309, "code": " if request.method=='POST': datasource=DataSource.objects.get(pk=request.POST['ds_pk']) form=PriorityForm(request.POST or None, instance=datasource) if form.is_valid(): priority=form.cleaned_data['priority", "label": 0}, {"snippet_id": 60738, "code": " __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid", "label": 0}, {"snippet_id": 34883, "code": "']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name", "label": 0}, {"snippet_id": 44764, "code": " unexpectedly!\") def test_extracted_text_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) self.assertRaises", "label": 1}, {"snippet_id": 53670, "code": ": return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format(err) def flush_all(self) -> str: \"\"\" :return: \"\"\" self.bytes_buffer.seek", "label": 1}, {"snippet_id": 51464, "code": " require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have version{0}, but need version", "label": 0}, {"snippet_id": 4554, "code": "(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client", "label": 0}, {"snippet_id": 26421, "code": " !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process.poll() is not None: if check_alive: raise Exception(\"Attempting", "label": 0}, {"snippet_id": 82946, "code": " \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__", "label": 0}, {"snippet_id": 36258, "code": " class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get('/').content.decode('utf8') response_html=html", "label": 0}, {"snippet_id": 75035, "code": " db_keywords=sorted([kw.text for kw in db_keywords_info.values()]) user_keywords=sorted([kw.split(ID_VAL_SEPARATOR)[-1] for kw in unsorted_user_keywords]) if user_keywords and(user_keywords !=db_keywords", "label": 0}, {"snippet_id": 5213, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in", "label": 0}, {"snippet_id": 16792, "code": ".cleaned_data['the_set'] try: g.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset}) g.save", "label": 0}, {"snippet_id": 6768, "code": ".route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token): flash('Your account is confirmed. Thank you", "label": 0}, {"snippet_id": 68364, "code": "=date.strftime('%Y-%m-%d') labels.append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse", "label": 0}, {"snippet_id": 36959, "code": " product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The", "label": 0}, {"snippet_id": 81181, "code": ".sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bz_tickets", "label": 0}, {"snippet_id": 77446, "code": " logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability to fetch tiles -", "label": 0}, {"snippet_id": 30464, "code": "'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook': fbdisconnect(", "label": 0}, {"snippet_id": 83586, "code": " ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug=None, group_slug_field=None, group_qs=None): group=None if group_slug is not None: group=get_object_or_404(group_qs, *", "label": 0}, {"snippet_id": 52627, "code": ", message, team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(\"/actions-board\") def display_user_actions_board(): \"\"\"Retrieve user and project data from db, render projects", "label": 0}, {"snippet_id": 7681, "code": ".bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']", "label": 0}, {"snippet_id": 17476, "code": "!</strong> Account is not activated.'), 'danger') return flask.redirect(flask.url_for('account.login')) user.last_login_date=datetime.utcnow() user.last_login_ip=ip_address(flask.request.remote_addr).packed", "label": 0}, {"snippet_id": 67690, "code": " query=query.filter(type=type) return query class AttributeListView(PaginationMixin, ListView): model=Attribute template_name='threat/attribute_list.html' context_object_name='attributes' paginate_by=30 def", "label": 0}, {"snippet_id": 442, "code": " mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context,", "label": 1}, {"snippet_id": 52470, "code": ", \"pTitle\": project_object.title, \"pNotes\": project_object.notes, \"pPhase\": project_object.phase_code, \"pUpvotes\": project_object.upvotes, \"pUpdated\": project_object.updated } if project_object.user_id", "label": 0}, {"snippet_id": 35228, "code": " data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource", "label": 0}, {"snippet_id": 6581, "code": " @auth.before_app_request def before_request(): if current_user.is_authenticated: current_user.ping() if not current_user.verify_auth_token(session['auth_token']): logout_user() flash('Your session has", "label": 0}, {"snippet_id": 9995, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status", "label": 0}, {"snippet_id": 34116, "code": "\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\")))", "label": 0}, {"snippet_id": 68487, "code": " get(self, request): self.object_list=self.get_queryset(request) context=self.get_context_data() return render(request, 'twitter_hunter/index.html', context) class TweetsView(PaginationMixin, ListView):", "label": 0}, {"snippet_id": 2183, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>", "label": 0}, {"snippet_id": 44145, "code": ".filter(kind='FO')) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser.find_elements_by_class_name('bubble') self.assertEqual(num_pucs, len(bubbles),('There should be", "label": 0}, {"snippet_id": 40496, "code": ", on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC', through='TaxonomyToPUC') class Meta: verbose_name_plural='Taxonomies' def __str__(self): return str(self.title)", "label": 0}, {"snippet_id": 45861, "code": "=get_object_or_404(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return", "label": 0}, {"snippet_id": 10312, "code": ", 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states", "label": 0}, {"snippet_id": 32068, "code": " lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical analysis on a raw string. Args: string: The raw string on which to operate. ''", "label": 0}, {"snippet_id": 74249, "code": "(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message) return False @property def access_form_valid(self)", "label": 0}, {"snippet_id": 10090, "code": ")) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the", "label": 0}, {"snippet_id": 75372, "code": ".change_candidate', raise_exception=True) def staff_home(request): return HttpResponseRedirect(reverse('review_candidates', kwargs={'status': 'all'})) @login_required @permission_required('etd_app.change_candidate'", "label": 0}, {"snippet_id": 30420, "code": ", ' output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius", "label": 0}, {"snippet_id": 14505, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context", "label": 0}, {"snippet_id": 6698, "code": "('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET', 'POST']) def register(): form=RegistrationForm", "label": 0}, {"snippet_id": 60821, "code": " comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent", "label": 0}, {"snippet_id": 24782, "code": ".services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor for Ray", "label": 0}, {"snippet_id": 26665, "code": " exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False):", "label": 0}, {"snippet_id": 59929, "code": ")) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect().get(database,{}).get(\"tables\") def inspect(self): \" Inspect the database and return a dictionary", "label": 0}, {"snippet_id": 27189, "code": " on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker. java_worker_options(str", "label": 0}, {"snippet_id": 9425, "code": " is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter", "label": 0}, {"snippet_id": 6277, "code": ".format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token): \"\"\" Check if `id_token` is", "label": 0}, {"snippet_id": 45310, "code": " ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime", "label": 0}, {"snippet_id": 78068, "code": "] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource=", "label": 0}, {"snippet_id": 42273, "code": "('utf8') self.assertNotIn('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}", "label": 0}, {"snippet_id": 62590, "code": " the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE", "label": 0}, {"snippet_id": 30343, "code": "'s.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session.get('access_token') stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not", "label": 0}, {"snippet_id": 52974, "code": "(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView", "label": 0}, {"snippet_id": 35548, "code": " 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag", "label": 0}, {"snippet_id": 56242, "code": "{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/login') return self class RedirectExperienceTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectExperienceTestCase", "label": 0}, {"snippet_id": 34256, "code": " Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click", "label": 1}, {"snippet_id": 42159, "code": ".assertIn('1 extracted', response, 'Data Group should contain a count of 1 total extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client", "label": 0}, {"snippet_id": 14930, "code": ".route('/results') def view_results(): results=load_json('results.json') time_series=[] for name, values in results.items(): ts={ 'id': name, 'values':{ 'x':[], 'y':[] } } dates=[key for key in values]", "label": 0}, {"snippet_id": 51750, "code": "'_'.join(category.split(' ')) self.count=0 def updateScope(self,scope): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript", "label": 0}, {"snippet_id": 74475, "code": " from django.contrib.auth.decorators import login_required, permission_required from django.contrib import messages from django.conf import settings from django.core.exceptions import PermissionDenied from", "label": 0}, {"snippet_id": 47367, "code": " datasource.registered=(len(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or", "label": 0}, {"snippet_id": 59829, "code": " get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view') def update_with_inherited_metadata(self, metadata): metadata.update( { \"source\": metadata.get(\"source\") or", "label": 0}, {"snippet_id": 75251, "code": "})) else: person_form=CommitteeMemberPersonForm() committee_member_form=CommitteeMemberForm() context={'candidate': candidate, 'person_form': person_form, 'committee_member_form': committee_member_form", "label": 0}, {"snippet_id": 76301, "code": " layer. user_log_rect: The user-requested projected, ie map coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height:", "label": 0}, {"snippet_id": 82070, "code": "('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success-url-view', kwargs={'pk': created.pk})) return render(request, 'home.html',{'form': form}) class ShortManyURLSView(View):", "label": 0}, {"snippet_id": 63858, "code": "): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('change-password-action', force_authn=True) @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn view, sends a SAML2", "label": 0}, {"snippet_id": 72939, "code": ".POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() request.session", "label": 1}, {"snippet_id": 5099, "code": " i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11, p_id) self.assertEqual(12, get_partition_id(11002", "label": 0}, {"snippet_id": 11321, "code": " descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json", "label": 0}, {"snippet_id": 55587, "code": ".path) \t\telse: \t\t\treturn Folder(r.dirname().path) \tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir))", "label": 0}, {"snippet_id": 6835, "code": "', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password(form.old_password.data): current_user.password=form.password.data", "label": 0}, {"snippet_id": 3372, "code": " params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params", "label": 1}, {"snippet_id": 64313, "code": " current_app.logger.error('Unknown error during the logout') abort(400) elif 'SAMLRequest' in request.form: current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session", "label": 0}, {"snippet_id": 80222, "code": "('Clear Log') self.open_idle_action=console_menu.addAction('Open Python Shell...') self.restart_action=console_menu.addAction('Restart') set_menu=menu_bar.addMenu('Set') self.set_wavelength_action=set_menu", "label": 0}, {"snippet_id": 10641, "code": "=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if", "label": 1}, {"snippet_id": 29360, "code": " benwaonline.database import db from benwaonline.oauth import twitter from benwaonline.models import user_datastore, User from benwaonline.auth import auth from benwaonline.auth.forms import RegistrationForm", "label": 1}, {"snippet_id": 13363, "code": " get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES", "label": 0}, {"snippet_id": 19580, "code": ".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It", "label": 1}, {"snippet_id": 23699, "code": "=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output", "label": 1}, {"snippet_id": 62435, "code": " term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info", "label": 0}, {"snippet_id": 26291, "code": ".start_monitor() self.start_raylet_monitor() self.start_plasma_store() self.start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def", "label": 0}, {"snippet_id": 68493, "code": " context=self.get_context_data() return render(request, 'twitter_hunter/index.html', context) class TweetsView(PaginationMixin, ListView): template_name='twitter_hunter/tweets.html' context_object_name='tws'", "label": 0}, {"snippet_id": 50376, "code": "'Authentication failed.') return redirect(url_for('login')) user=query_social_user(social); session['social']=social if user is None: insert_social_user(social) return redirect('/') if __name__==\"__main__\":", "label": 0}, {"snippet_id": 77595, "code": " return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources): destination=LocalCKAN() destination", "label": 0}, {"snippet_id": 72450, "code": " paths=[p[:-1] for p in paths if p !=root_dir] return{'paths': paths} except(cephfs.ObjectNotFound, cephfs.PermissionError): return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self):", "label": 0}, {"snippet_id": 45841, "code": "() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit(request, pk", "label": 0}, {"snippet_id": 50234, "code": "'return_url'] return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]) def loginButton(): email=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user", "label": 0}, {"snippet_id": 44195, "code": " cancel\") dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source.pk}' self.browser.get(ds_detail_url) self.browser.find_elements_by_xpath('//*[@title=\"edit\"]')[1", "label": 0}, {"snippet_id": 45153, "code": ".created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id')) \\ .order_by('upload_date'))", "label": 0}, {"snippet_id": 6352, "code": "'We are not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple audiences and not authorized party') return False else: if id_token['aud'] !=self.flow.client_id: logger.error", "label": 0}, {"snippet_id": 1624, "code": "(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something", "label": 0}, {"snippet_id": 40140, "code": " def pre_save(sender, **kwargs): instance=kwargs.get('instance') previous_raw_cas=instance.tracker.previous('raw_cas') previous_raw_chem_name=instance.tracker.previous('raw_chem_name') if instance.tracker", "label": 0}, {"snippet_id": 70517, "code": " /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}", "label": 0}, {"snippet_id": 25792, "code": "._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful", "label": 0}, {"snippet_id": 36117, "code": " '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self", "label": 0}, {"snippet_id": 70549, "code": " f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static", "label": 0}, {"snippet_id": 15497, "code": ") run_form.exe_models.choices=get_models_choices() return run_form def set_form_defaults(form, commands): def get_command(command_name): return[item for item in commands if item['command']==command_name", "label": 0}, {"snippet_id": 78458, "code": "'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest.id, qualified=True) } if datarequest", "label": 0}, {"snippet_id": 2942, "code": "() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del", "label": 0}, {"snippet_id": 27427, "code": " is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None", "label": 0}, {"snippet_id": 46528, "code": ".rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis=row['lower_wf_analysis'] ingredient.central_wf_analysis=row", "label": 0}, {"snippet_id": 25019, "code": " i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources", "label": 0}, {"snippet_id": 50478, "code": " print \"Lock released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ", "label": 0}, {"snippet_id": 35066, "code": " ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget", "label": 0}, {"snippet_id": 26596, "code": " the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self", "label": 0}, {"snippet_id": 14341, "code": "(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if", "label": 0}, {"snippet_id": 61043, "code": " :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write", "label": 0}, {"snippet_id": 37740, "code": " include_extract_form(dg): '''Returns the ExtractionScriptForm based on conditions of DataGroup type as well as whether all records are matched, but not extracted ''' if not dg.type in['FU', 'CO', 'CP']:", "label": 0}, {"snippet_id": 43707, "code": " raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]", "label": 0}, {"snippet_id": 31734, "code": ") request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code", "label": 1}, {"snippet_id": 45808, "code": ", pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects", "label": 0}, {"snippet_id": 73194, "code": ".username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data", "label": 0}, {"snippet_id": 68101, "code": ": stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event in Event.objects.filter(id__in=Hunt(id=pk).events.all()).order_by('publish_timestamp'): dt=event.publish_timestamp", "label": 0}, {"snippet_id": 40980, "code": ".DoesNotExist: self.assertContains(resp, 'No Extracted Text exists for this Data Document') else: self.assertContains(resp, '<h4>Extracted Text') def test_script_links(self): doc=DataDocument.objects.first(", "label": 0}, {"snippet_id": 55177, "code": "(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn FSPath(os.path.realpath(self.path)) \tdef", "label": 0}, {"snippet_id": 79110, "code": " opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request", "label": 0}, {"snippet_id": 52286, "code": "\"\"Make a new board and update page without refresh; ajax.\"\"\" user_id=session.get(\"user_id\") name=request.form.get(\"new-board-name\", \"Untitled\") desc=request.form.get(\"new-board-desc\", None) team_id=request", "label": 0}, {"snippet_id": 82684, "code": " Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): ", "label": 0}, {"snippet_id": 69239, "code": " A lot of spawners & authenticators do not have conda-forge packages, but do have pip packages. Keeping all python packages in the hub environment be installed with pip prevents accidental mixing of python", "label": 0}, {"snippet_id": 51256, "code": "._context.env, shell=True, **kwargs) def rsync(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([\"rsync\"] +args, **kwargs) def _dependency_collection(self): return read_dependencies_from_filename", "label": 0}, {"snippet_id": 35869, "code": "(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation", "label": 0}, {"snippet_id": 54891, "code": "\t\tself.book_edition=book_edition \t\t\tself.chapter=chapter \t\t\tself.number=number \t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code", "label": 0}, {"snippet_id": 7844, "code": "'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages", "label": 0}, {"snippet_id": 14034, "code": "): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled", "label": 0}, {"snippet_id": 44272, "code": ".find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser.current_url, \"User should always return to detail page after submit\") def test_product(self): p=self.objects.p puc=self.objects", "label": 0}, {"snippet_id": 36322, "code": " password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"]", "label": 0}, {"snippet_id": 26075, "code": " ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False):", "label": 0}, {"snippet_id": 76565, "code": " faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,-30000000.0,30000000.0,30000000.0& WIDTH", "label": 0}, {"snippet_id": 32862, "code": "(self): os.close(self.newfd) def __enter__(self): os.dup2(self.newfd, self.fd) def __exit__(self, type, value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps perform multiple", "label": 0}, {"snippet_id": 36883, "code": ".order_by('upload_month')) if len(document_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] ", "label": 0}, {"snippet_id": 69278, "code": " 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins", "label": 1}, {"snippet_id": 48954, "code": ".POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set", "label": 0}, {"snippet_id": 46271, "code": "'extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean() good_records.append((d,ext,record)) except ValidationError as", "label": 0}, {"snippet_id": 43344, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute", "label": 0}, {"snippet_id": 65568, "code": " canceled\") filechooser_opening_dialog.close() def start_database_opening_routine(self, tab_title, filepath): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\"", "label": 0}, {"snippet_id": 79325, "code": " open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time, 'closed': datarequest.closed, 'user': _get_user(datarequest.user_id), 'organization': None, 'accepted_dataset'", "label": 0}, {"snippet_id": 1056, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response", "label": 0}, {"snippet_id": 36095, "code": " self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self", "label": 0}, {"snippet_id": 51300, "code": " dependency_collection=self._dependency_collection() delete_directory(os.path.join('dependencies', platform), logfile=sys.stdout) if len(dependencies) > 0: if not dependency_collection.fetch(dependencies, self._context", "label": 0}, {"snippet_id": 28870, "code": " sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min", "label": 0}, {"snippet_id": 34879, "code": "(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES", "label": 0}, {"snippet_id": 76598, "code": "//localhost/wms?LAYERS=1002&SERVICE=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching", "label": 0}, {"snippet_id": 31935, "code": "': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline(self): ''' Read a", "label": 0}, {"snippet_id": 39765, "code": " returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code']", "label": 0}, {"snippet_id": 19374, "code": " that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the", "label": 1}, {"snippet_id": 46538, "code": " ingredient.central_wf_analysis=row['central_wf_analysis'] ingredient.upper_wf_analysis=row['upper_wf_analysis'] ingredient.script=script try: ingredient.full_clean() except ValidationError as e: context", "label": 0}, {"snippet_id": 83733, "code": " is_mine(self, request): return self.user_ip==get_real_ip(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if", "label": 0}, {"snippet_id": 61434, "code": " None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue.empty(", "label": 0}, {"snippet_id": 18644, "code": ".username}) \t\tif(document_username==None): \t\t\terror=\"User doesn't exist. Please sign up first!\" \t\telif(ph.verify(document_username['password'],self.password)==False): \t\t\terror=\"Password is wrong, try again!\"", "label": 1}, {"snippet_id": 66233, "code": ".add_titled(composite_unlock_stack_page, \"composite_unlock\", \"Composite\") stack.child_set_property(composite_unlock_stack_page, \"icon-name\", \"insert-link-symbolic\") self.overlay.add(stack) self.unlock_database_stack_box", "label": 0}, {"snippet_id": 33694, "code": ", b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains(response", "label": 1}, {"snippet_id": 4043, "code": " User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response", "label": 0}, {"snippet_id": 80497, "code": ".exc_info())) desired_width=min(max([len(line) for line in stack]), 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in item", "label": 0}, {"snippet_id": 55779, "code": "\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines", "label": 0}, {"snippet_id": 78503, "code": " data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest)", "label": 1}, {"snippet_id": 33643, "code": ".create(data_source=ds, title='Test Product', upc='Test UPC for ProductToPUC') pd=ProductDocument.objects.create(document=dd, product=p) pd.save() dd.refresh_from_db() stats=stats_by_dtxsids(dtxs) for e", "label": 0}, {"snippet_id": 14224, "code": "\"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 25173, "code": " +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger", "label": 0}, {"snippet_id": 71532, "code": "=0) sess=req._load_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) def test_laod_session_session_id_no_user_id(self): s=models.Session.create() s_count=models.Session.query", "label": 0}, {"snippet_id": 61151, "code": " Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed", "label": 0}, {"snippet_id": 9148, "code": "\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login", "label": 0}, {"snippet_id": 22937, "code": " if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self", "label": 0}, {"snippet_id": 59115, "code": ":return: invite if found :raise: Http404 if not found ''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email:", "label": 0}, {"snippet_id": 1644, "code": ", size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification", "label": 0}, {"snippet_id": 8454, "code": " and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request", "label": 0}, {"snippet_id": 60271, "code": ".prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms if custom_time_limit and custom_time_limit < time_limit_ms: time_limit_ms=custom_time_limit with sqlite_timelimit", "label": 0}, {"snippet_id": 60778, "code": " check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__", "label": 0}, {"snippet_id": 45602, "code": " in the data document detail view or the extracted text QA page template ''' referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk=pk) document_type_form", "label": 1}, {"snippet_id": 26867, "code": " by Ray. Attributes: redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma", "label": 0}, {"snippet_id": 6855, "code": "=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for('main.index')) else: flash('Invalid password", "label": 0}, {"snippet_id": 30520, "code": "(name=login_session['username'], email=login_session[ 'email'], picture=login_session['picture']) session.add(newUser) session.commit() user=session.query(User).filter_by(email=login_session['email']).one", "label": 1}, {"snippet_id": 39908, "code": " django.utils.translation import ugettext_lazy as _ from dashboard.models import ExtractedText class QANotes(CommonInfo): extracted_text=models.OneToOneField(ExtractedText, on_delete=models.CASCADE) qa_notes", "label": 1}, {"snippet_id": 42412, "code": ",flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp.status_code, 200) resp=self.client.get(f'/datagroup/raw_extracted_records", "label": 0}, {"snippet_id": 47793, "code": ".get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv", "label": 0}, {"snippet_id": 19588, "code": "(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True:", "label": 1}, {"snippet_id": 56811, "code": " concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required()", "label": 0}, {"snippet_id": 15812, "code": "'POST']) def view_run_remove(field): run_form=get_run_form() run_form[field].pop_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, ", "label": 0}, {"snippet_id": 629, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 60661, "code": "=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html\".format(status)] +templates info", "label": 0}, {"snippet_id": 60860, "code": " info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for local component %s with pid %s\" ", "label": 0}, {"snippet_id": 60057, "code": "/latest/spatialite.html\" ) else: raise return self._inspect def register_custom_units(self): \"Register any custom units defined in the metadata.json with Pint\" for unit in self.metadata(\"custom_units\") or", "label": 0}, {"snippet_id": 47765, "code": " output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid", "label": 0}, {"snippet_id": 10924, "code": "(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer,", "label": 0}, {"snippet_id": 7698, "code": " @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual", "label": 0}, {"snippet_id": 43719, "code": " True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute", "label": 1}, {"snippet_id": 4083, "code": "\"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 73721, "code": ".add_error('pdf', errors) if create_position_form.is_valid(): position=dictionary.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {", "label": 0}, {"snippet_id": 56623, "code": ".myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse", "label": 0}, {"snippet_id": 53976, "code": " intermediate body values for display while the method is still executing. :return: A dom string for the current state of the print buffer contents \"\"\" try: contents=self.stdout_interceptor.read_all() except", "label": 1}, {"snippet_id": 41809, "code": "'raw_cas', 'raw_chem_name','report_funcuse'], \"Fieldnames passed are incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response", "label": 0}, {"snippet_id": 28543, "code": " GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus", "label": 0}, {"snippet_id": 66436, "code": "=keyfile_chooser_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File selected: \" +keyfile_chooser_dialog.get_filename()) keyfile_chooser_dialog.close() keyfile_unlock_select_button", "label": 0}, {"snippet_id": 83014, "code": " message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__", "label": 0}, {"snippet_id": 74452, "code": "(_ReportActionPartial): EVAL_ACTION_TYPE=\"DELETE\" def view_action(self): self.report.delete() class WizardPDFPartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass", "label": 0}, {"snippet_id": 35120, "code": " tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 42028, "code": " to Product, bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response", "label": 0}, {"snippet_id": 49946, "code": "'POST']) @app.route('/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name", "label": 0}, {"snippet_id": 43556, "code": " doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]'", "label": 1}, {"snippet_id": 70848, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath", "label": 1}, {"snippet_id": 41289, "code": "=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self): ''' Confirm that the inheritance", "label": 0}, {"snippet_id": 71770, "code": ") req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) user=models.User.query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank", "label": 0}, {"snippet_id": 37794, "code": "(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self", "label": 0}, {"snippet_id": 41198, "code": ".assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number':['47']} response=self.client.post('/extractedtext/edit/354784/', data=data, follow=True) doc=DataDocument", "label": 0}, {"snippet_id": 62521, "code": " NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing import EduidAPITestCase from eduid_common.authn.cache import OutstandingQueriesCache from eduid_common.authn.utils import get_location, no_authn_views", "label": 0}, {"snippet_id": 76001, "code": ") return ugettext( 'Redirect:{}'.format( self.get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self", "label": 0}, {"snippet_id": 40669, "code": "[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%', extracted_doc_count) def test_PUC_download(self): p=self.objects.puc puc_line=(p.gen_cat +',' +p.prod_fam +',' +p.prod_type +',' +p.description", "label": 1}, {"snippet_id": 7437, "code": "(g.jwt_oidc_token_info['preferred_username']) ninety_day_filter=datetime.now() -timedelta(days=90) if csr.liaison_designate==1: exams=Exam.query.filter(Exam.deleted_date.is_(None))\\ .filter(or_(Exam.exam_returned_date", "label": 0}, {"snippet_id": 65438, "code": "\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui", "label": 0}, {"snippet_id": 71706, "code": "=1) s1=models.Session.query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session", "label": 0}, {"snippet_id": 77088, "code": ".tile_arg_names=tile_arg_names self.image_format=\"image/jpeg\" @staticmethod def Make(target_url, server_layer_def): \"\"\"Make a WmsLayer object from a serverDefs layer. Args: target_url: The server's target url", "label": 0}, {"snippet_id": 56060, "code": " PROFILE_PATH, username) link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute", "label": 0}, {"snippet_id": 65116, "code": "(deductions, args.points, 'syntax error') break code=fixed except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, args.points, 'failed to parse code') break if not tree", "label": 0}, {"snippet_id": 61316, "code": " \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"\" def __init__(self, queue): \"\"\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor", "label": 0}, {"snippet_id": 34855, "code": "['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template", "label": 0}, {"snippet_id": 18044, "code": " send_password_reset_email(user): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']),", "label": 0}, {"snippet_id": 42459, "code": ".login(username='Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all", "label": 0}, {"snippet_id": 54901, "code": " import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number", "label": 0}, {"snippet_id": 21018, "code": ", object_store_memory=self._ray_params.object_store_memory, plasma_directory=self._ray_params.plasma_directory, huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name", "label": 1}, {"snippet_id": 47564, "code": "(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices", "label": 0}, {"snippet_id": 62425, "code": "\"\" return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp", "label": 0}, {"snippet_id": 53961, "code": " and returns a body-ready dom object of those contents without adding them to the actual report body. This is useful for creating intermediate body values for display while the method is still executing", "label": 0}, {"snippet_id": 69571, "code": "/bin/tljh-config' if os.path.exists(tljh_config_dest): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}", "label": 0}, {"snippet_id": 82811, "code": " host connected to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary.", "label": 0}, {"snippet_id": 19368, "code": ". Attributes: node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate", "label": 1}, {"snippet_id": 55367, "code": " os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs", "label": 0}, {"snippet_id": 47544, "code": " get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if", "label": 0}, {"snippet_id": 16719, "code": " players_doubling_up=two_gamers) def _seed_games_and_powers(tournament, the_round): \"\"\"Wrapper round GameSeeder to do the actual seeding for a round\"\"\" seeder=_create_game_seeder(tournament, the_round.number()) sitters,", "label": 0}, {"snippet_id": 14260, "code": " ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user", "label": 0}, {"snippet_id": 73122, "code": ".empty_create_position_form) self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type", "label": 1}, {"snippet_id": 45571, "code": " template_name, context) @login_required() def save_doc_form(request, pk): '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser to the appropriate", "label": 0}, {"snippet_id": 23228, "code": " (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the object", "label": 0}, {"snippet_id": 66182, "code": ".builder.get_object(\"unlock_database_stack_box\") unlock_database_stack_switcher=self.builder.get_object(\"unlock_database_stack_switcher\") unlock_database_stack_switcher.set_stack(stack) password_unlock_stack_page", "label": 0}, {"snippet_id": 77332, "code": " target database. Returns: layers_by_name: A dict of all the layers in a database. \"\"\" layers_by_name={} server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(", "label": 0}, {"snippet_id": 80467, "code": ".status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End)", "label": 0}, {"snippet_id": 73673, "code": " return redirect('login') def parse_position_return_dictionary(create_position_form): return parse_upload(create_position_form.save(commit=False)) def save_position_to_user(request): request.user.positions", "label": 0}, {"snippet_id": 69000, "code": " G3KaePvbnObKHXpfIKoAM7X2qfO+IFnLGTPyhFTcrl6vZBTMZTfZiC1XDQLuGUnd sckuXINIU3DFWzZGr0QrqkuE/jyr7FXeUJj9B7cLo+s/TXo+RaVfi3kOc9BoxIvy /qiNGs/TKy2/Ujqp/affmIMoMXSozKmga81JSwkADO1JMgUy6dApXz9kP4EE3g== =CLGF -----END", "label": 0}, {"snippet_id": 11988, "code": " @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to", "label": 0}, {"snippet_id": 53140, "code": "'house_cond': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None) self.assertEqual(self.view.get_object", "label": 0}, {"snippet_id": 2599, "code": "\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url", "label": 0}, {"snippet_id": 17048, "code": ", formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data", "label": 0}, {"snippet_id": 84459, "code": "*kw): if request.method=='POST': revision=int(request.POST['revision']) article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug", "label": 0}, {"snippet_id": 5472, "code": ") self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"", "label": 0}, {"snippet_id": 6354, "code": " not a valid audience') return False if 'azp' not in id_token: logger.error('Multiple audiences and not authorized party') return False else: if id_token['aud'] !=self.flow.client_id: logger.error('We are", "label": 0}, {"snippet_id": 36991, "code": " if when making the call to here from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''", "label": 0}, {"snippet_id": 11617, "code": ", 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 14204, "code": ".to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or", "label": 0}, {"snippet_id": 10783, "code": "\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def", "label": 0}, {"snippet_id": 32521, "code": ", None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else: return None def expect(self, ttype): result=self.accept(ttype) if result", "label": 0}, {"snippet_id": 76328, "code": " Returns: The image to be presented to the user. \"\"\" proj=layer_properties.projection zoom_level=tilecalcs.CalcZoomLevel(user_log_rect.Extent(), proj.InternalLogOuterBounds().Extent(), geom.Pair(user_width,", "label": 0}, {"snippet_id": 11278, "code": ".PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return", "label": 0}, {"snippet_id": 68591, "code": "(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer", "label": 0}, {"snippet_id": 1014, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath", "label": 1}, {"snippet_id": 77113, "code": " append '?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path=urlparse.urlsplit(target_url).path[1:] layer_ns=\"[%s]:%s\" %(target_path, str(server_layer_def[\"id\"])) if", "label": 0}, {"snippet_id": 51837, "code": ".undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route(\"/\") def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route", "label": 0}, {"snippet_id": 60677, "code": ".html\".format(status)] +templates info.update( {\"ok\": False, \"error\": message, \"status\": status, \"title\": title} ) if request is not None and request.path.split(\"?\")[0].endswith(\".json\"): return response", "label": 0}, {"snippet_id": 27254, "code": ", redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level", "label": 1}, {"snippet_id": 67962, "code": " template_name='threat_hunter/index.html' context_object_name='hunts' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self)", "label": 0}, {"snippet_id": 19702, "code": " redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args.node_ip_address, redis_password=args.redis_password", "label": 1}, {"snippet_id": 42737, "code": "(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\"", "label": 0}, {"snippet_id": 44862, "code": ": multi_db=True def setUp(self): self.objects=load_model_objects() def test_habitsandpractices(self): found=resolve(f'/habitsandpractices/{self.objects.doc.pk}/') self.assertEqual(found.func, views.habitsandpractices", "label": 0}, {"snippet_id": 32105, "code": " single char from the stream and store it in self.char. Returns: The value of self.char. ''' self.position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None", "label": 0}, {"snippet_id": 13641, "code": ".html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN", "label": 0}, {"snippet_id": 26654, "code": " check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type(", "label": 0}, {"snippet_id": 16280, "code": "=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer.objects.get_or_create(player=p, tournament=t) try: i.full_clean()", "label": 0}, {"snippet_id": 31674, "code": " pytest from django.shortcuts import reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert", "label": 1}, {"snippet_id": 43572, "code": "')) option=doc_type_select.first_selected_option doc_type_select.select_by_visible_text(\"ingredient disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/", "label": 1}, {"snippet_id": 29783, "code": "=Post(title=fname, created=datetime.utcnow(), image=image, tags=tags) db.session.add(post) current_user.posts.append(post) db.session.commit() return redirect(url_for('gallery.show_post', post_id=post.id))", "label": 0}, {"snippet_id": 34476, "code": "() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys(", "label": 0}, {"snippet_id": 23527, "code": " resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method", "label": 0}, {"snippet_id": 64900, "code": "--test_case', required=True, action='append', help=\"The test cases to run the students code against. Each test case \" \"must take the form of of a function call without the function \" \"name followed by a", "label": 0}, {"snippet_id": 49453, "code": "='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save()", "label": 1}, {"snippet_id": 402, "code": " item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len", "label": 0}, {"snippet_id": 55620, "code": ",a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): \tdef __init__(self,path): \t\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self", "label": 0}, {"snippet_id": 23485, "code": " return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is", "label": 0}, {"snippet_id": 47373, "code": ".estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or None, instance=datasource) if request.method=='POST': if", "label": 0}, {"snippet_id": 55379, "code": " mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self", "label": 0}, {"snippet_id": 44722, "code": "=self.objects.script) self.assertRaises(ValidationError, text.clean()) text=ExtractedText(doc_date='January 1984', data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean(", "label": 0}, {"snippet_id": 63640, "code": "), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingIDP", "label": 0}, {"snippet_id": 29007, "code": " push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is used to create a thread", "label": 0}, {"snippet_id": 6378, "code": " audience') return False if 'azp' in id_token and id_token['azp'] !=self.flow.client_id: logger.error('Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']): logger.error", "label": 0}, {"snippet_id": 12244, "code": " password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the", "label": 0}, {"snippet_id": 59961, "code": " self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect:", "label": 0}, {"snippet_id": 5219, "code": ".client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self", "label": 0}, {"snippet_id": 8460, "code": " used to get past the CSRF checks. Returns: str: The content of the response \"\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request", "label": 0}, {"snippet_id": 66650, "code": " composite_unlock_select_button.get_style_context().remove_class(\"suggested-action\") composite_unlock_select_button.get_style_context().add_class(\"destructive-action\") self.clear_input_fields() self.logging_manager.log_debug(", "label": 0}, {"snippet_id": 64841, "code": " the function the student was supposed to implement\") parser.add_argument('-p', '--points', type=int, default=0, help=\"The number of points this question is worth. This argument is \" \"only used when -c is", "label": 0}, {"snippet_id": 80305, "code": "=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action.setCheckable(True)", "label": 0}, {"snippet_id": 80470, "code": ".status_monitor.update_thread.wait() self.log_queue.put(ExitFlag()) self.log_thread.wait() @pyqtSlot(str) def log(self, message): self.log_area.moveCursor(QTextCursor.End) self.log_area.insertPlainText(message", "label": 0}, {"snippet_id": 23586, "code": ". \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy() else: resources={} if \"CPU\" in resources or \"GPU\" in resources", "label": 0}, {"snippet_id": 78732, "code": "(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action, context, data_dict):", "label": 1}, {"snippet_id": 57695, "code": "/devblog.kogan.com/blog/disable-signal-receivers-in-your-django-tests \"\"\" def our_wrapper(func): @receiver(signal, **decorator_kwargs) @functools.wraps(func) def fake_receiver(sender, **kwargs): if settings", "label": 0}, {"snippet_id": 2280, "code": " if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath)", "label": 1}, {"snippet_id": 60012, "code": " str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3.OperationalError as e: if(e.args[0]=", "label": 0}, {"snippet_id": 30790, "code": ".query(Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if grudgetToDelete.user_id !=login_session['user_id']: return \"<script>function myFunction()", "label": 1}, {"snippet_id": 33113, "code": ") admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin", "label": 0}, {"snippet_id": 27413, "code": " arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in", "label": 0}, {"snippet_id": 41543, "code": "\nfrom lxml import html from importlib import import_module from django.test import Client from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard", "label": 1}, {"snippet_id": 38721, "code": " from.group_type import GroupType from.extracted_text import ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical from.extracted_functional_use import", "label": 0}, {"snippet_id": 23023, "code": " and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback.format_exc(). Returns:", "label": 0}, {"snippet_id": 32968, "code": " from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam', 'prod_type', 'description','tags',]", "label": 1}, {"snippet_id": 76232, "code": ".get_full_path( filename=to, language=language, version_slug=version_slug, ) def redirect_sphinx_htmldir(self, path, language=None, version_slug=None): if path.endswith('.html'): log.debug('Redirecting %s', self", "label": 0}, {"snippet_id": 51191, "code": " def add_option(self, *args, **kwargs): self._optionParser.add_option(*args, **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in", "label": 0}, {"snippet_id": 56681, "code": " experience_redirect, name='experience-redirect'), url(r'^p/(?P<username>[a-zA-Z0-9._]+)$', profile_redirect, name='profile-redirect'), url(r'^apple-app-site-association$', aasa_redirect, name='aasa'), url(r", "label": 1}, {"snippet_id": 49910, "code": "(not 'email' in session) and(not 'social' in session): if 'diagram' in request.args or diagram: return redirect('/login?return_url=saveAs&diagram=true') return redirect('/login?return_url=saveAs') else:", "label": 0}, {"snippet_id": 65905, "code": "): self.override_dialog.destroy() self.filechooser_creation_dialog.destroy() def on_override_button_clicked(self, widget): self.copy_database_file() tab_title=self.create_tab_title_from_filepath( self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 24101, "code": " __future__ import absolute_import from __future__ import division from __future__ import print_function import threading import traceback import redis import ray from ray import ray_constants from ray import", "label": 1}, {"snippet_id": 38986, "code": "=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path.isdir(uuid_dir", "label": 0}, {"snippet_id": 55441, "code": ",other): \t\tif isinstance(other,FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) \tdef rmdir(self): \t\treturn os.rmdir(self.path) \tdef stat(self): \t\treturn", "label": 0}, {"snippet_id": 64653, "code": "'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', ", "label": 0}, {"snippet_id": 21987, "code": " not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr of worker", "label": 0}, {"snippet_id": 21489, "code": ".start() process.wait() finally: timer.cancel() if process.poll() is not None: continue process.kill() if wait: process.wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True", "label": 0}, {"snippet_id": 69036, "code": "\" if os.path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try: systemd.stop_service('configurable-http-proxy.service", "label": 0}, {"snippet_id": 6882, "code": "'/reset', methods=['GET', 'POST']) def password_reset_request(): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user", "label": 0}, {"snippet_id": 78457, "code": "'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest.id, qualified=True) } if", "label": 0}, {"snippet_id": 43536, "code": ".assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in", "label": 0}, {"snippet_id": 26533, "code": " finally: timer.cancel() if process.poll() is not None: continue process.kill() if wait: process.wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True): \"\"\"Kill the Redis servers.", "label": 0}, {"snippet_id": 29716, "code": " @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename) f.save(join( current_app.static_folder, current_app.config['STATIC_BENWA_DIR'], fname", "label": 1}, {"snippet_id": 46654, "code": ".POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid(): datagroup=form.save() info=[x.decode('ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info", "label": 0}, {"snippet_id": 59537, "code": " self._config=dict(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(", "label": 0}, {"snippet_id": 34679, "code": ".objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs", "label": 0}, {"snippet_id": 61793, "code": "(domain=result_data['Domain']) current_result=pshtt_data_to_result(securedrop, result_data) current_result.compute_grade() current_result.securedrop=securedrop try: prior_result=securedrop.results.latest()", "label": 1}, {"snippet_id": 5416, "code": " def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001", "label": 0}, {"snippet_id": 33011, "code": " get_data['last_edited_by']=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')", "label": 0}, {"snippet_id": 35749, "code": "=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects.get(id=form", "label": 0}, {"snippet_id": 27329, "code": "=redis_max_clients self.redis_password=redis_password self.plasma_directory=plasma_directory self.worker_path=worker_path self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name", "label": 0}, {"snippet_id": 42277, "code": ">Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertContains(response,'<a", "label": 0}, {"snippet_id": 42910, "code": "'/qa/extractionscript/{scr.pk}/\\'> Continue QA\".encode(), response.content) scr=Script.objects.annotate(num_ets=Count( 'extractedtext')).filter(num_ets__gt=100).first() pk=ExtractedText.objects.filter(extraction_script", "label": 0}, {"snippet_id": 4286, "code": " test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username':", "label": 0}, {"snippet_id": 79882, "code": " accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time,", "label": 0}, {"snippet_id": 67967, "code": " paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self): query=Hunt.objects.order_by('id') query=query.annotate(count=Count", "label": 0}, {"snippet_id": 20139, "code": "(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries", "label": 0}, {"snippet_id": 1046, "code": ".META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application", "label": 0}, {"snippet_id": 42731, "code": ".client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client.get(f'/qa/extractionscript/')", "label": 0}, {"snippet_id": 68792, "code": "=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc.stdout.decode() assert proc", "label": 0}, {"snippet_id": 53158, "code": " None) self.assertEqual(self.view.get_object().house_cond, None) data={'budget': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().budget, None) data={'current_rent': 'TEXT", "label": 0}, {"snippet_id": 66071, "code": " import gi gi.require_version('Gtk', '3.0') import ntpath import threading class UnlockDatabase: builder=NotImplemented parent_widget=NotImplemented window=NotImplemented database_filepath=NotImplemented", "label": 0}, {"snippet_id": 15399, "code": "'model_system_name': entry.model_system_name.data, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_input_series_all_models'", "label": 0}, {"snippet_id": 84306, "code": "( changes_qs, revision=int(revision), **article_args) article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({", "label": 0}, {"snippet_id": 10583, "code": " login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request)", "label": 0}, {"snippet_id": 38157, "code": " ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def", "label": 0}, {"snippet_id": 65550, "code": ".create_tab_title_from_filepath( filechooser_opening_dialog.get_filename()) self.start_database_opening_routine( tab_title, filechooser_opening_dialog.get_filename()) elif response==Gtk.ResponseType.CANCEL: self.logging_manager", "label": 1}, {"snippet_id": 2995, "code": " SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC", "label": 0}, {"snippet_id": 22537, "code": " keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding", "label": 0}, {"snippet_id": 30973, "code": ", grudget_id=grudget_id) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect", "label": 0}, {"snippet_id": 54773, "code": ".problem_groups[prob_id].append(prob_code+\"\\n\"+(\"=\"*50)+\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group in self.problem_groups.values(): \t\t\tself.count_by_groups +", "label": 1}, {"snippet_id": 77271, "code": ".urlopen(target_url) result=fp.read() except urllib2.HTTPError, e: logger.warning(\"Server definitions didn't return any results %s.\", e) return{} fp.close() logger.debug(\"Server definitions data read, start", "label": 1}, {"snippet_id": 81447, "code": "._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _handle_weekly_event_repetition(self, old_repeating_event): _logger.info(", "label": 0}, {"snippet_id": 33551, "code": "'], 'There should now be 1 datadocument associated with ethylaraben') def test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs", "label": 0}, {"snippet_id": 3070, "code": " import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session", "label": 0}, {"snippet_id": 2786, "code": "'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url", "label": 1}, {"snippet_id": 35694, "code": "['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form", "label": 0}, {"snippet_id": 81149, "code": "'ai_montly'), ('subscription_partner', '=', partner.id)]) cf_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]", "label": 0}, {"snippet_id": 9380, "code": " requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled", "label": 0}, {"snippet_id": 25713, "code": " additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits", "label": 0}, {"snippet_id": 82435, "code": "-view'), re_path(r'^update/category/(?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update-view'), re_path(r'^delete/category/(?P<pk>(\\d)+)/$', CategoryDeleteView.as_view(), name='category", "label": 0}, {"snippet_id": 50272, "code": " returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Incorrect Email/Password') return redirect('/login') @app.route(\"/logout\") def logout(): session.clear() if 'return_url' in request.args", "label": 0}, {"snippet_id": 28176, "code": " the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the", "label": 0}, {"snippet_id": 27732, "code": " flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed", "label": 1}, {"snippet_id": 51645, "code": ") values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint", "label": 0}, {"snippet_id": 7092, "code": " Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable", "label": 0}, {"snippet_id": 19595, "code": " once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep", "label": 1}, {"snippet_id": 22905, "code": "\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument", "label": 0}, {"snippet_id": 81774, "code": " class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm() return render(request, 'home.html',{'form': form}) def post(self, request, *args, **kwargs): form=ShortUrlForm(request", "label": 0}, {"snippet_id": 3670, "code": ": http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response", "label": 1}, {"snippet_id": 50825, "code": ", such as for a subprocess call. Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return", "label": 0}, {"snippet_id": 77789, "code": " admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix',", "label": 0}, {"snippet_id": 63398, "code": "('testing', config) def test_no_authn(self): with self.app.test_client() as c: resp=c.get('/test') self.assertEqual(resp.status_code, 200) def test_authn(self): with self.app.test_client() as c: resp=c", "label": 0}, {"snippet_id": 65527, "code": "\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self", "label": 0}, {"snippet_id": 31741, "code": " request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections:voting')) assert request.status_code==302 assert reverse('elections:vote')==request.url @pytest", "label": 1}, {"snippet_id": 53416, "code": " dict: \"\"\" :param project: :param code: :param error: :return: \"\"\" stack=[dict( filename=error.filename, location=None, line_number=error.lineno, line=error.text.rstrip() )] render_data=dict( type=error", "label": 0}, {"snippet_id": 1123, "code": " content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=", "label": 0}, {"snippet_id": 55204, "code": "\t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile", "label": 0}, {"snippet_id": 41309, "code": " returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document=doc) if doc.data_group", "label": 0}, {"snippet_id": 39479, "code": " functional use\", max_length=100, null=True, blank=True) def __str__(self): return self.raw_chem_name @classmethod def detail_fields(cls): return['extracted_text','raw_cas','raw_chem_name','report_funcuse'] def", "label": 0}, {"snippet_id": 30151, "code": ".json', 'r').read())['web']['client_id'] APPLICATION_NAME=\"Grudget Catalog\" engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine", "label": 0}, {"snippet_id": 42777, "code": " group_count=QAGroup.objects.filter(extraction_script_id=pk).count() self.assertTrue(group_count==1) self.assertTrue(Script.objects.get(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id", "label": 0}, {"snippet_id": 44514, "code": ".create(name='Data Group for Test', description='Testing...', data_source=ds, download_script=script, downloaded_by=user, downloaded_at=timezone.now(), group_type=gt, csv='register_records_matching.csv'", "label": 0}, {"snippet_id": 26098, "code": "): True if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name", "label": 0}, {"snippet_id": 27813, "code": ".lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being logged.", "label": 0}, {"snippet_id": 25158, "code": " sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix", "label": 0}, {"snippet_id": 60238, "code": " in a thread\"\"\" page_size=page_size or self.page_size def sql_operation_in_thread(): conn=getattr(connections, db_name, None) if not conn: info=self.inspect()[db_name] if info[\"file\"]==\":memory:\": conn", "label": 0}, {"snippet_id": 11094, "code": "'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, }", "label": 0}, {"snippet_id": 14464, "code": " HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{", "label": 0}, {"snippet_id": 504, "code": ", serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the", "label": 0}, {"snippet_id": 27870, "code": ". This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value", "label": 0}, {"snippet_id": 78996, "code": " string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description", "label": 0}, {"snippet_id": 17734, "code": ": user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching", "label": 0}, {"snippet_id": 62338, "code": "'name_id']) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info) session['eduPersonAssurance']=loa session.persist", "label": 0}, {"snippet_id": 1465, "code": "': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding", "label": 0}, {"snippet_id": 71485, "code": " def test_load_strategy(self): from engineauth.strategies.google import GoogleStrategy strategy_class=app._load_strategy('google') self.assertEqual(strategy_class, GoogleStrategy) self.assertRaises(Exception", "label": 0}, {"snippet_id": 34072, "code": "*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self", "label": 0}, {"snippet_id": 59601, "code": ".name) for option in CONFIG_OPTIONS } def metadata(self, key=None, database=None, table=None, fallback=True): \"\"\" Looks up metadata, cascading backwards from specified level. Returns None if metadata value", "label": 0}, {"snippet_id": 24574, "code": ".decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as", "label": 1}, {"snippet_id": 66379, "code": ".get_style_context().add_class(\"error\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog", "label": 0}, {"snippet_id": 60813, "code": " of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True", "label": 0}, {"snippet_id": 25150, "code": " sharded_keys=[[] for _ in range(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin", "label": 0}, {"snippet_id": 77218, "code": " y, self.tile_arg_names[\"z\"], z ) return tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns", "label": 0}, {"snippet_id": 38871, "code": " @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def", "label": 0}, {"snippet_id": 5479, "code": ".create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=(", "label": 0}, {"snippet_id": 64091, "code": ".get_user_by_eppn(eppn) current_app.logger.debug('Logout process started for user{!r}'.format(user)) state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache", "label": 0}, {"snippet_id": 45379, "code": " call to here from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse", "label": 0}, {"snippet_id": 23842, "code": "=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file", "label": 0}, {"snippet_id": 19535, "code": ".decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as", "label": 1}, {"snippet_id": 62609, "code": "'TOKEN_LOGIN_SUCCESS_REDIRECT_URL': 'http://test.localhost/success', 'TOKEN_LOGIN_FAILURE_REDIRECT_URL': 'http://test.localhost/failure' }) return config def load_app(self, config): \"\"\" Called from the parent", "label": 1}, {"snippet_id": 51201, "code": ", **kwargs) def _check_call(self, *args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in args])] kwargstring=[\", \".join([\"%s=%r\" %(k,v) for(k,v) in kwargs.items(", "label": 0}, {"snippet_id": 57062, "code": "=concept.replace('.','.add_') concept_model=apps.get_model(concept) if not permission in concepts_permitted_by_employee: continue disabled=False url=concept_model._url.format('new/{}'.format(transaction", "label": 0}, {"snippet_id": 24879, "code": " if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy", "label": 0}, {"snippet_id": 42824, "code": "/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=9 response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True) self.assertEqual(response", "label": 1}, {"snippet_id": 24565, "code": "\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles", "label": 1}, {"snippet_id": 49679, "code": " 'currentFile' in session: if not filename: if 'filename' in request.args: filename=request.args['filename'] else: filename=session['currentFile'] if('email' in session) or('social' in session): if 'email", "label": 0}, {"snippet_id": 31961, "code": " command from stdin to execute. Returns: A raw string read from stdin. ''' while True: raw=input('$ ') if len(raw) > 0: return raw def execute(self, raw): ''' Execute a command in the form of a raw string. ", "label": 0}, {"snippet_id": 43392, "code": ").click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical", "label": 0}, {"snippet_id": 84116, "code": "(request.user, group, is_member) else: allow_read=allow_write=True if not allow_write: return HttpResponseForbidden() try: article=article_qs.get(**article_args) except ArticleClass.DoesNotExist: article", "label": 1}, {"snippet_id": 61291, "code": "\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class", "label": 0}, {"snippet_id": 75310, "code": " @login_required def candidate_preview_submission(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse(", "label": 0}, {"snippet_id": 54172, "code": "+1 politician.put() return render_template('politician.html', q=name, politician=politician) else: return render_template('politician_notfound.html', q=name) \"\"\"Search -> Politician Page \"\"\" @app.route(", "label": 1}, {"snippet_id": 62330, "code": "(\"User{!r} logging in.\".format(user)) session['_saml2_session_name_id']=code(session_info['name_id']) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config", "label": 0}, {"snippet_id": 59242, "code": " RowView, TableView from.utils import( InterruptedError, Results, escape_css_string, escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit, to_css_class ) from.inspect import inspect_hash", "label": 0}, {"snippet_id": 1775, "code": " import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd", "label": 0}, {"snippet_id": 74653, "code": " def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise PermissionDenied return candidate @login_required def", "label": 0}, {"snippet_id": 9351, "code": " response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings", "label": 0}, {"snippet_id": 22450, "code": " absolute_import from __future__ import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class", "label": 0}, {"snippet_id": 48600, "code": "' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag", "label": 0}, {"snippet_id": 7503, "code": " information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import", "label": 0}, {"snippet_id": 79181, "code": " tk.enqueue_job(_send_mail,[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator Email') if datarequest_dict['organization']: users=_get_admin_users_from_organasition", "label": 1}, {"snippet_id": 46341, "code": ".method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a", "label": 0}, {"snippet_id": 56375, "code": " share_id): client=Client() self.response=client.get(reverse('experience-redirect', args=[share_id])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302", "label": 0}, {"snippet_id": 73982, "code": " callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https", "label": 0}, {"snippet_id": 50292, "code": ".clear() if 'return_url' in request.args: return redirect(request.args['return_url']) else: return redirect('/') @app.route(\"/tmp\", methods=[\"POST\"]) def tmp(): with tempfile.NamedTemporaryFile(mode=\"w+t\",", "label": 0}, {"snippet_id": 26783, "code": " command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in self.all_processes.items(): for", "label": 0}, {"snippet_id": 46609, "code": " template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource", "label": 0}, {"snippet_id": 77323, "code": " _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database. Returns: layers_by_name: A dict of all the layers in a database.", "label": 0}, {"snippet_id": 53726, "code": ", item): \"\"\" :param item: :return: \"\"\" abort_thread() if item=='write': return self.write_both elif item=='close': return super(RedirectBuffer, self).__getattribute__(item) source=super(RedirectBuffer,", "label": 0}, {"snippet_id": 16316, "code": " Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value in form.cleaned_data.items(): if r_name=='player': continue i", "label": 1}, {"snippet_id": 61730, "code": "'timeout': 10}) result=pshtt_data_to_result(securedrop, pshtt_results[0]) if commit: result.securedrop=securedrop result.save() return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet') -> None: \"\"", "label": 1}, {"snippet_id": 26769, "code": "(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring", "label": 0}, {"snippet_id": 38124, "code": " through='ProductToPUC') extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through", "label": 0}, {"snippet_id": 18939, "code": " nextlocation==\"None\": if request.user.role==\"SimpleUsers\": topredir=request.localconfig.parameters.get_value( \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir)", "label": 1}, {"snippet_id": 19355, "code": " ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process", "label": 1}, {"snippet_id": 7633, "code": ".errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import", "label": 0}, {"snippet_id": 59905, "code": ".sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"): conn.execute(", "label": 0}, {"snippet_id": 6991, "code": " flash('Your password has been updated.') return redirect(url_for('auth.login')) else: return redirect(url_for('main.index')) return render_template('auth/reset_password.html', form=form) @auth.route('", "label": 0}, {"snippet_id": 57296, "code": "=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail'", "label": 0}, {"snippet_id": 15906, "code": "=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password.errors.append('Password should be at", "label": 0}, {"snippet_id": 53669, "code": " if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format(err) def flush_all(self) -> str: \"\"\" :return: ", "label": 1}, {"snippet_id": 38687, "code": ".data_group.group_type doc_types=DocumentType.objects.filter(group_type=this_type) if not self.document_type in doc_types: raise ValidationError(('The document type must be allowed by ' 'the parent data group", "label": 1}, {"snippet_id": 30355, "code": "=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current user is already connected.'), 200) response.headers['Content-Type'", "label": 0}, {"snippet_id": 36348, "code": ") found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html", "label": 0}, {"snippet_id": 81219, "code": " from dateutil.relativedelta import relativedelta from odoo import fields, models, api _logger=logging.getLogger(__name__) class FitEvent(models.Model): _name='event.event' _inherit=['event.event'] fit_is_participating", "label": 0}, {"snippet_id": 74214, "code": "=\"Invalid user in access request\" invalid_access_no_key_message=\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self):", "label": 0}, {"snippet_id": 15842, "code": "/history', methods=['POST']) def view_run_history(): history=json.loads(request.data) history=[ { 'id': item['id'], 'date': datetime.fromtimestamp(item['date'] / 1000), 'commands': item['commands'] } for", "label": 0}, {"snippet_id": 10800, "code": " password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step", "label": 0}, {"snippet_id": 26207, "code": "._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, autoscaling_config=self._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_MONITOR", "label": 0}, {"snippet_id": 45215, "code": ".strftime((item['upload_date']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'", "label": 0}, {"snippet_id": 7730, "code": " if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse", "label": 0}, {"snippet_id": 78054, "code": " package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else", "label": 0}, {"snippet_id": 6142, "code": ".http) id_token=credentials.id_token self.credentials_store[id_token['sub']]=credentials self.set_cookie_id_token(id_token) except AccessTokenRefreshError: logger.debug(\"Expired ID token, can't refresh", "label": 0}, {"snippet_id": 16010, "code": "', form=register_form) @app.route('/login', methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit", "label": 0}, {"snippet_id": 23138, "code": " background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver", "label": 0}, {"snippet_id": 65174, "code": ", args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr", "label": 0}, {"snippet_id": 73460, "code": "}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password", "label": 0}, {"snippet_id": 13906, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url", "label": 0}, {"snippet_id": 276, "code": "> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\".", "label": 0}, {"snippet_id": 22721, "code": " profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically", "label": 1}, {"snippet_id": 1551, "code": "> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\".", "label": 0}, {"snippet_id": 31230, "code": ".get('DJANGO_ALLOWED_HOSTS', '').split() CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True GITMATE_PLUGINS=[ 'code_analysis', 'welcome_commenter', 'auto_label_pending_or_wip', 'pr_size_labeller", "label": 0}, {"snippet_id": 23260, "code": ") or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string", "label": 0}, {"snippet_id": 47039, "code": "-Disposition']='attachment; filename=%s' % zip_file_name return response @login_required def data_group_registered_records_csv(request, pk): columnlist=['filename','title','document_type','url','organization'", "label": 0}, {"snippet_id": 84636, "code": " return HttpResponseNotAllowed(['GET']) @login_required def observe_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html", "label": 0}, {"snippet_id": 84798, "code": " AJAX function that diffs the body of the article as it is currently displayed with the current version of the article.\"\"\" current_article=get_object_or_404( Article, pk=int(request.POST['article'])) content", "label": 0}, {"snippet_id": 66303, "code": ".on_composite_unlock_select_button_clicked) password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") password_unlock_entry.connect(\"activate\", self.on_password_unlock_button_clicked) password_unlock_entry.connect(", "label": 0}, {"snippet_id": 38801, "code": " downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None, null=True, blank=True) data_source=models.ForeignKey('DataSource', on_delete=models", "label": 0}, {"snippet_id": 46826, "code": ".close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup.csv.path,'w') as f: myfile=File(f) myfile.write(''.join(text)", "label": 0}, {"snippet_id": 67321, "code": "=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=ip)).order_by('-publish_timestamp') count=context['events'].count() if count > 0:", "label": 0}, {"snippet_id": 48477, "code": "=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value", "label": 0}, {"snippet_id": 33824, "code": " dashboard.models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium", "label": 0}, {"snippet_id": 82744, "code": " shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return", "label": 0}, {"snippet_id": 66551, "code": "\"composite_unlock_select_button\") filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text", "label": 0}, {"snippet_id": 60773, "code": " main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents", "label": 0}, {"snippet_id": 81814, "code": "=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return", "label": 0}, {"snippet_id": 11508, "code": "/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following", "label": 0}, {"snippet_id": 51608, "code": "\nfrom utility import * import json def createGetScript(endpoint, params): script='curl '+start_url+endpoint+'?' keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys", "label": 0}, {"snippet_id": 4661, "code": " that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),", "label": 0}, {"snippet_id": 10803, "code": " \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation", "label": 0}, {"snippet_id": 7273, "code": " qsystem import db class OfficeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False", "label": 0}, {"snippet_id": 45966, "code": "() def data_group_detail(request, pk, template_name='data_group/datagroup_detail.html'): dg=get_object_or_404(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg", "label": 0}, {"snippet_id": 79226, "code": " import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return", "label": 0}, {"snippet_id": 56779, "code": "'Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept.concept_type)) extra_context['message']=concept.description_short extra_context", "label": 0}, {"snippet_id": 23366, "code": " leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag. This", "label": 0}, {"snippet_id": 15614, "code": ".data=command.get('input_source_initial', '') sub_form.input_source_final.choices=get_inputs_choices() sub_form.input_source_final.data=command.get('input_source_final', '') for index, command in enumerate", "label": 0}, {"snippet_id": 50626, "code": " Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools, 'vsvars32.bat') python=sys.executable process=subprocess.Popen('(\"%s\">nul)&&\"%s\" -c \"import os; print repr(os", "label": 0}, {"snippet_id": 73216, "code": " email_domain !=\"canada.ca\": message=forms.ValidationError( format(ErrorMessages.invalid_email_domain % email_domain)) self.add_error('email', message) elif get_user_model().objects.filter(username=email.lower())", "label": 0}, {"snippet_id": 74314, "code": "): return self._redirect_from_passphrase(request) elif self.access_granted or self.access_form_valid: return super().dispatch(request, *args, **kwargs) else: return self._render_access_form() def _get_access_form", "label": 0}, {"snippet_id": 7807, "code": " account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url'", "label": 0}, {"snippet_id": 20668, "code": "(bool): True if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered", "label": 0}, {"snippet_id": 50383, "code": "')) user=query_social_user(social); session['social']=social if user is None: insert_social_user(social) return redirect('/') if __name__==\"__main__\": \tapp.run(host=\"localhost\", port=8000, debug=DEBUG)", "label": 0}, {"snippet_id": 8055, "code": " determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request", "label": 0}, {"snippet_id": 53622, "code": "=self.bytes_buffer, encoding=redirection_source.encoding, write_through=True ) @property def source_encoding(self): if self.redirection_source.encoding: return self.redirection_source.encoding return 'utf8", "label": 1}, {"snippet_id": 66643, "code": ".grab_focus() composite_unlock_entry.get_style_context().add_class(\"error\") composite_unlock_select_button.get_style_context().remove_class(\"suggested-action\") composite_unlock_select_button.get_style_context", "label": 0}, {"snippet_id": 72837, "code": ".session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form, 'baseVisibleText': InterfaceText, 'userVisibleText'", "label": 0}, {"snippet_id": 48262, "code": " product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt=0) qs_no_puc=Product", "label": 0}, {"snippet_id": 69923, "code": " but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('/')", "label": 1}, {"snippet_id": 72613, "code": ".POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')", "label": 0}, {"snippet_id": 81362, "code": ".sudo().name else: attendee_list +=', ' +registration.partner_id.sudo().name counter +=1 return attendee_list def start_automatic_event_creation(self): repeating_event_ids=self.env['event.event'].search(", "label": 0}, {"snippet_id": 82770, "code": "\"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 38693, "code": " factotum import settings from pathlib import Path, PurePath from django.db import models from.common_info import CommonInfo from django.urls import reverse from django.db.models.signals import pre_save", "label": 1}, {"snippet_id": 81143, "code": ".sudo().search([('subscription_type', '=', 'ai_montly'), ('subscription_partner', '=', partner.id)]) cf_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'cf_montly')", "label": 0}, {"snippet_id": 6536, "code": ") return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error(self, message='Not Authorized", "label": 1}, {"snippet_id": 77660, "code": "(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'", "label": 0}, {"snippet_id": 58873, "code": ", auto_now_add=True) objects=InviteQuerySet.as_manager() @staticmethod def search_user_by_email(email): return User.objects.filter(email=email).first() @classmethod def create_new(cls, commit, course, instructor", "label": 0}, {"snippet_id": 61545, "code": " an unsaved ScanResult object \"\"\" try: page, soup=request_and_scrape_page(securedrop.landing_page_url) no_redirects_page, _=request_and_scrape_page( securedrop.landing_page_url, allow_redirects=False )", "label": 1}, {"snippet_id": 9940, "code": "=\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce", "label": 0}, {"snippet_id": 2809, "code": "='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property", "label": 0}, {"snippet_id": 39715, "code": " group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index') else: return reverse('qa_extractionscript_index') def fetch_extracted_records(self): return self.rawchem.all() def pull_out_cp(self", "label": 1}, {"snippet_id": 82098, "code": ", **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls", "label": 0}, {"snippet_id": 42508, "code": " response=self.client.get(f'/qa/extractedtext/{ext.pk}/') def test_qa_approval_redirect(self): self.client.get(f'/qa/extractionscript/{self.objects.exscript.pk}/') pk=self.objects.extext.pk response=self", "label": 1}, {"snippet_id": 82050, "code": " 'custom-short-url.html',{'form': JustURLForm, 'message': message}) created=JustURL.objects.create(input_url=url, short_url=f'{request.get_host()}/{short_url}', category=category) created.save() if request", "label": 0}, {"snippet_id": 26870, "code": " redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager", "label": 0}, {"snippet_id": 49536, "code": " from database.database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config", "label": 1}, {"snippet_id": 34953, "code": "(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload", "label": 0}, {"snippet_id": 67481, "code": "('-publish_timestamp') tag=self.request.GET.get('tag') if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request", "label": 0}, {"snippet_id": 9354, "code": " configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return", "label": 0}, {"snippet_id": 39703, "code": " extracted text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index", "label": 0}, {"snippet_id": 75777, "code": "('fast response: %s -%s' %(r.status_code, r.text)) return error_response @login_required def autocomplete_keywords(request): term=request.GET['term'] results=_get_previously_used(Keyword, term) results", "label": 0}, {"snippet_id": 27570, "code": " passed as the \"extra_data\" argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome", "label": 0}, {"snippet_id": 49189, "code": " render(request, template_name, context) @login_required() def save_doc_form(request, pk): '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser", "label": 0}, {"snippet_id": 16381, "code": "(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number()==round_num): if t.seed_games: if(r.roundplayer_set.count() % 7)==0: return HttpResponseRedirect(reverse('seed_games', args=", "label": 1}, {"snippet_id": 28678, "code": " setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper())", "label": 1}, {"snippet_id": 2151, "code": " HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django", "label": 1}, {"snippet_id": 11969, "code": " xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__", "label": 0}, {"snippet_id": 84532, "code": ".revert_to(revision, get_real_ip(request)) return redirect(article) messages.error( request, 'Reverting not possible because an article with name \\'%s\\' already exists' % old_title) return redirect(article", "label": 0}, {"snippet_id": 44113, "code": "') self.assertEqual(btn.get_attribute(\"href\"), detail_url, \"User should go back to detail view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self", "label": 0}, {"snippet_id": 21865, "code": "): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number", "label": 0}, {"snippet_id": 16178, "code": "\"\"\"Just render the specified template with the round\"\"\" t=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) context={'tournament': t, 'round': r} return render", "label": 0}, {"snippet_id": 78363, "code": "=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show", "label": 0}, {"snippet_id": 77407, "code": "] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers", "label": 0}, {"snippet_id": 13254, "code": " from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts", "label": 0}, {"snippet_id": 66389, "code": " database, wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL", "label": 0}, {"snippet_id": 25007, "code": " for j in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources", "label": 0}, {"snippet_id": 83300, "code": ".CharField(required=False) user_ip=forms.CharField(widget=forms.HiddenInput) content_type=forms.ModelChoiceField( queryset=ContentType.objects.all(), required=False, widget=forms.HiddenInput) object_id", "label": 0}, {"snippet_id": 26915, "code": " will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the", "label": 0}, {"snippet_id": 66839, "code": "): template_name='domain/detail.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']", "label": 0}, {"snippet_id": 71428, "code": ") resp._save_session() return resp(environ, start_response) def _load_strategy(self, provider): try: strategy_location=self._config[ 'provider.{0}'.format(provider)]['class_path'] return utils.import_class", "label": 0}, {"snippet_id": 68930, "code": "+vIyt0s7cropfiwXoka 1iJB5nKyt/eqMnPQ9aRpqkm9ABS/r7AauMA/9RALudQRHBdWIzfIg0Mlqb52yyTI IgQJHNGNX1T3z1XgZhI+Vi8SLFFSh8x9FeUZC6YJu0VXXj5iz+eZmk/nYjUt4Mtc pVsVYIB7oIDIbImODm8ggsgrIzqxOzQVP1zsCGek5U6QFc9GYrQ", "label": 0}, {"snippet_id": 1146, "code": "\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\"", "label": 0}, {"snippet_id": 24725, "code": " required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address", "label": 1}, {"snippet_id": 16992, "code": " def create_games(request, tournament_id, round_num): \"\"\"Provide a form to create the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num)", "label": 0}, {"snippet_id": 39103, "code": "}/{self.get_name_as_slug()}.zip' if os.path.isfile(uuid_path): zip_url=uuid_path elif os.path.isfile(zip_file_path): zip_url=zip_file_path else: zip_url='no_path_found' return zip_url def get_extracted_template_fieldnames", "label": 0}, {"snippet_id": 77567, "code": " counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session.query", "label": 0}, {"snippet_id": 42602, "code": " response=self.c.get('/find/?q=diatom') self.assertContains(response, 'Filter by Group Type') response=self.c.get('/find/?q=diatom&group_type=Unidentified') self.assertContains(response, 'Showing 1 -20 of'", "label": 1}, {"snippet_id": 84444, "code": " def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method", "label": 0}, {"snippet_id": 84420, "code": "'article': article, 'changes': changes, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response", "label": 0}, {"snippet_id": 13859, "code": " don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 52692, "code": " add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate\" return r if __name__==\"__main__\": app.debug=True", "label": 0}, {"snippet_id": 48711, "code": "=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags", "label": 0}, {"snippet_id": 8076, "code": "']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context", "label": 0}, {"snippet_id": 38664, "code": ".filename.split('.')[-1] return f'document_{self.pk}.{ext}' def pdf_url(self): dg=self.data_group fn=self.get_abstract_filename() return f'/media/{dg.fs_id}/pdf/{fn}' def clean(self): this_type=self.data_group", "label": 0}, {"snippet_id": 19278, "code": ".imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def fetch_and_execute_function_to_run(self, key): \"\"\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function", "label": 0}, {"snippet_id": 50719, "code": "... ') shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def", "label": 0}, {"snippet_id": 43688, "code": ".browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have", "label": 0}, {"snippet_id": 16298, "code": " tournament=t) try: i.full_clean() except ValidationError as e: form.add_error(form.fields['player'], e) i.delete() return render(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament", "label": 0}, {"snippet_id": 53615, "code": "=redirection_source self.last_write_time=0 super(RedirectBuffer, self).__init__( buffer=self.bytes_buffer, encoding=redirection_source.encoding, write_through=True ) @property def source_encoding(self): if", "label": 0}, {"snippet_id": 42200, "code": " present if not matched.') self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>", "label": 0}, {"snippet_id": 63518, "code": ".assertEqual(response.status, '200 OK') self.assertIn(self.app.config['SAML2_LOGOUT_REDIRECT_URL'], json.loads(response.data)['payload']['location']) def test_logout_loggedin(self): eppn='hubba-bubba' came_from", "label": 0}, {"snippet_id": 22252, "code": "=None): self.object_id_seed=object_id_seed self.redis_address=redis_address self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory", "label": 0}, {"snippet_id": 48289, "code": ").\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item", "label": 0}, {"snippet_id": 55689, "code": "\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path", "label": 0}, {"snippet_id": 20301, "code": "): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info", "label": 0}, {"snippet_id": 48515, "code": ".value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type", "label": 0}, {"snippet_id": 67953, "code": " http.client import HTTPConnection class IndexView(PaginationMixin, ListView): model=Hunt template_name='threat_hunter/index.html' context_object_name='hunts' paginate_by=30 def get_context_data(self, ", "label": 0}, {"snippet_id": 35090, "code": " tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit", "label": 0}, {"snippet_id": 17413, "code": " failed!</strong> Incorrect username or password.'), 'danger') return flask.redirect(flask.url_for('account.login')) if user.is_banned: ban_reason=models.Ban.banned(user.id, None).first().reason ban_str=(", "label": 0}, {"snippet_id": 1758, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>", "label": 0}, {"snippet_id": 47173, "code": ": doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required def dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id','id'", "label": 0}, {"snippet_id": 20722, "code": ": redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java=( ray.services.include_java_from_redis(redis_client)) self._ray_params=ray_params", "label": 0}, {"snippet_id": 60647, "code": " DatasetteError): status=exception.status info=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message", "label": 0}, {"snippet_id": 18134, "code": "').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print \"\\n -Trying payload \"+payload+\" -\"\r for domain in domains:\r if domain !=\"\":\r \r url=\"https://\"", "label": 0}, {"snippet_id": 60689, "code": " not None and request.path.split(\"?\")[0].endswith(\".json\"): return response.json(info, status=status) else: template=self.jinja_env.select_template(templates) return response.html(template.render(info)", "label": 0}, {"snippet_id": 38711, "code": " import pre_save from django.dispatch import receiver from model_utils import FieldTracker from django.core.exceptions import ValidationError from.group_type import GroupType from.extracted_text import", "label": 1}, {"snippet_id": 24457, "code": " \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self", "label": 1}, {"snippet_id": 2062, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this", "label": 0}, {"snippet_id": 67933, "code": ".forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http", "label": 0}, {"snippet_id": 59634, "code": " but not database=\" databases=self._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases.get(database) or{}) if table is not None: table_metadata=( (databases", "label": 0}, {"snippet_id": 83094, "code": "\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG", "label": 0}, {"snippet_id": 20618, "code": " a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have", "label": 0}, {"snippet_id": 47761, "code": " .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if", "label": 0}, {"snippet_id": 82264, "code": " visits}) class CategoryUpdateView(LoginRequiredMixin, UpdateView): queryset=Category.objects.all() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy", "label": 0}, {"snippet_id": 76407, "code": ".AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str(rect_of_tiles), str(rect_of_tiles.Extent())) logger.debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range", "label": 0}, {"snippet_id": 44190, "code": " \"User should go back to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source.pk}' self.browser.get(ds_detail_url) self.browser", "label": 0}, {"snippet_id": 36565, "code": " p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name", "label": 0}, {"snippet_id": 72457, "code": " except(cephfs.ObjectNotFound, cephfs.PermissionError): return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self): return CephFS.list_filesystems() @Endpoint('GET', '/rgw/buckets')", "label": 0}, {"snippet_id": 67978, "code": " return context def get_queryset(self): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('events')) return query class EventListView(PaginationMixin, ListView): model=Event template_name", "label": 0}, {"snippet_id": 17819, "code": " flask.request.method=='POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password", "label": 0}, {"snippet_id": 61556, "code": " no_redirects_page, _=request_and_scrape_page( securedrop.landing_page_url, allow_redirects=False ) except requests.exceptions.RequestException: return ScanResult( securedrop=securedrop, live=pshtt_results['Live'],", "label": 1}, {"snippet_id": 69552, "code": " around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os.path.join(prefix, 'bin', 'tljh-config') tljh_config_dest", "label": 0}, {"snippet_id": 7525, "code": ".contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http import HttpRequest, HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from", "label": 0}, {"snippet_id": 45130, "code": ".objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date", "label": 0}, {"snippet_id": 70090, "code": " of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {%", "label": 0}, {"snippet_id": 59159, "code": " user_domain), \"{}@{}\".format(invite_email, invite_domain) ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return ", "label": 0}, {"snippet_id": 7477, "code": "={} if request.args: for key in request.args: if hasattr(Exam, key): search_kwargs[key]=request.args.get(key) exams=exams.filter_by(**search_kwargs) result=self.exam_schema.dump(exams) return{'exams': result", "label": 0}, {"snippet_id": 24920, "code": ") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command", "label": 0}, {"snippet_id": 70971, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {", "label": 0}, {"snippet_id": 10333, "code": "['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 76863, "code": ":%s\", e) finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the", "label": 1}, {"snippet_id": 3875, "code": "%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test", "label": 0}, {"snippet_id": 21312, "code": " process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool", "label": 0}, {"snippet_id": 33498, "code": ": dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 2, ethylparaben_stats", "label": 0}, {"snippet_id": 52463, "code": "\"user_id\") results={\"userId\": user_id, \"pOwnerId\": project_object.user_id, \"pTitle\": project_object.title, \"pNotes\": project_object.notes, \"pPhase\": project_object.phase_code, \"pUpvotes\": project_object", "label": 0}, {"snippet_id": 60854, "code": " pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running", "label": 0}, {"snippet_id": 32436, "code": " self.command()) else: return node else: return None def redirections(self): redirs=[] redir=self.redirection() while redir: redirs.append(redir) redir=self.redirection() if len(redirs) > 0: return RedirectionsHelper", "label": 0}, {"snippet_id": 82726, "code": "(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name,", "label": 0}, {"snippet_id": 75603, "code": " r in search_results: select2_results.append({'id': r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords", "label": 0}, {"snippet_id": 8138, "code": " Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if", "label": 0}, {"snippet_id": 49424, "code": "'HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset", "label": 0}, {"snippet_id": 14335, "code": " } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest", "label": 0}, {"snippet_id": 48511, "code": "=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p", "label": 0}, {"snippet_id": 38338, "code": " import DataSource from.group_type import GroupType from.data_group import DataGroup from.document_type import DocumentType from.data_document import DataDocument from.ingredient import Ingredient from", "label": 0}, {"snippet_id": 14836, "code": "(user_id) def auth_get_user_by_id(user_id): key='user:%s' % user_id if db.hlen(key)==0: return None user_data=db.hgetall(key) user=User() user.user_id=user_data['user_id'] user.email=user_data['email']", "label": 0}, {"snippet_id": 65647, "code": "() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog.get_filename()): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/override_dialog.ui\") self.override_dialog", "label": 0}, {"snippet_id": 25284, "code": " This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning. ", "label": 0}, {"snippet_id": 81141, "code": ".subscription'].sudo().search([('subscription_type', '=', 'ai_montly'), ('subscription_partner', '=', partner.id)]) cf_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', ", "label": 0}, {"snippet_id": 9583, "code": ".ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a", "label": 0}, {"snippet_id": 68681, "code": "') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index", "label": 0}, {"snippet_id": 75091, "code": ": thesis=form.save() if thesis.abstract !=form.cleaned_data['abstract']: messages.info(request, 'Your abstract contained invisible characters that we\\'ve removed. Please make sure your abstract is correct", "label": 0}, {"snippet_id": 43453, "code": ".browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '/", "label": 0}, {"snippet_id": 13645, "code": " configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ", "label": 0}, {"snippet_id": 25960, "code": ") def start_log_monitor(self): \"\"\"Start the log monitor.\"\"\" stdout_file, stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file", "label": 0}, {"snippet_id": 34214, "code": "=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS\") self.assertIn(doc_detail_link, self.browser.current_url) def test_qa_approval(self)", "label": 0}, {"snippet_id": 48835, "code": ", 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p", "label": 0}, {"snippet_id": 7238, "code": " in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language", "label": 0}, {"snippet_id": 12919, "code": "(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login", "label": 0}, {"snippet_id": 52711, "code": ".parse import urlparse from channels import Group from rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from", "label": 1}, {"snippet_id": 66198, "code": "=self.builder.get_object(\"keyfile_unlock_stack_page\") composite_unlock_stack_page=self.builder.get_object(\"composite_unlock_stack_page\") stack.add_titled(password_unlock_stack_page, \"password_unlock\", ", "label": 0}, {"snippet_id": 52320, "code": ".add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(\"/current-board\", methods=[\"POST\"]) def update_most_recently_clicked_board(): ", "label": 1}, {"snippet_id": 58883, "code": "(email=email).first() @classmethod def create_new(cls, commit, course, instructor, email, invite_type, enroll_unit_code): user=Invite.search_user_by_email(email) try: old_invite=Invite.get_by_user_or_404", "label": 0}, {"snippet_id": 82873, "code": "[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"", "label": 0}, {"snippet_id": 36535, "code": ".xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should", "label": 0}, {"snippet_id": 21470, "code": ".use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process", "label": 0}, {"snippet_id": 930, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory", "label": 0}, {"snippet_id": 67914, "code": " CreateView, UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import", "label": 0}, {"snippet_id": 26244, "code": ", stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password, config=self._config) assert(ray_constants.PROCESS_TYPE_RAYLET_MONITOR not in self.all_processes) self", "label": 0}, {"snippet_id": 60464, "code": " modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"/-/inspect<as_format:(\\.json)?$>", "label": 0}, {"snippet_id": 1736, "code": " Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None,", "label": 0}, {"snippet_id": 28745, "code": "): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode", "label": 0}, {"snippet_id": 28054, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str", "label": 0}, {"snippet_id": 52955, "code": " class BaseUserTestCase(TestCase): def setUp(self): self.user=self.make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self", "label": 0}, {"snippet_id": 84895, "code": "=re.compile(r\"\\/%s\\)\" % title) found_old_links=[] found_links=[] articles_all=Article.objects.all().exclude(title=title) for article in articles_all: match=search_title.search(article.content) if match:", "label": 0}, {"snippet_id": 62765, "code": " url to redirect back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str \"\"\" session_id=self.add_outstanding_query", "label": 0}, {"snippet_id": 23651, "code": " str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter", "label": 1}, {"snippet_id": 65989, "code": " unsaved_databases_list.append(db) if unsaved_databases_list.__len__() > 0: builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/quit_dialog.ui\") self.quit_dialog=builder.get_object(\"quit_dialog", "label": 0}, {"snippet_id": 51885, "code": " user_record is None: new_user=q.make_user(email, pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname) session[\"new_user\"]", "label": 0}, {"snippet_id": 30007, "code": " __tablename__='Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): ", "label": 1}, {"snippet_id": 12762, "code": "\"\" request=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response.content def _external_auth_intercept(request", "label": 0}, {"snippet_id": 52859, "code": " room=self.room) if not settings.IS_TESTING: data={ 'id': instance.id.__str__(), 'timestamp': instance.time_ago, 'timestamp_string': instance.timestamp_string, 'user_handle': self.request.user.full_name, ", "label": 0}, {"snippet_id": 45650, "code": "'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document'", "label": 0}, {"snippet_id": 15540, "code": "['start_day']) if get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if get_command('exe_models'): form.exe_models.data=get_command('exe_models')", "label": 0}, {"snippet_id": 70136, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not", "label": 0}, {"snippet_id": 10241, "code": "'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options", "label": 0}, {"snippet_id": 48732, "code": " return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/'", "label": 0}, {"snippet_id": 24627, "code": "(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True:", "label": 1}, {"snippet_id": 81075, "code": " partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner.mobile if partner.mobile else '', 'email': partner.email if partner.email else '', } ) subscription_update_counter", "label": 0}, {"snippet_id": 19775, "code": " The monitor is currently not responsible for detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client for the Redis server. This is used to receive", "label": 0}, {"snippet_id": 70414, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"", "label": 1}, {"snippet_id": 18104, "code": " reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset-request.txt', **tmpl_context), html=flask.render_template('email/reset-request.html', **tmpl_context", "label": 0}, {"snippet_id": 58296, "code": "\"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\"", "label": 0}, {"snippet_id": 65325, "code": ".get_object(\"headerbar\") file_open_button=builder.get_object(\"open_button\") file_open_button.connect(\"clicked\", self.open_filechooser, None) file_new_button=builder.get_object(\"new_button\") file_new_button", "label": 0}, {"snippet_id": 73454, "code": ", 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model", "label": 0}, {"snippet_id": 78109, "code": " update_frequency=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification", "label": 0}, {"snippet_id": 57661, "code": "(template_subject) rendered_subj=subj_template.render(context) text_template=loader.get_template(template_text) rendered_text=text_template.render(context) send_mail( rendered_subj, rendered_text, from_email", "label": 0}, {"snippet_id": 68174, "code": ".setNoticeFalse() else: hunt.setNoticeTrue() hunt.run() return redirect('threat_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable", "label": 0}, {"snippet_id": 53763, "code": "(object): \"\"\" The display management class for each step in a project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display", "label": 0}, {"snippet_id": 1016, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_(", "label": 1}, {"snippet_id": 12027, "code": " form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0", "label": 0}, {"snippet_id": 10999, "code": " Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields']", "label": 0}, {"snippet_id": 46504, "code": ".DoesNotExist as e: extracted_chemical=None context['clean_comp_err'][i +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical matches rawchem_ptr_id %s' % row", "label": 0}, {"snippet_id": 64463, "code": " session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn session['eduPersonAssurance']=loa session.persist() response=redirect(location_on_success) session.set_cookie(response) current_app", "label": 0}, {"snippet_id": 64755, "code": " __builtins__.__dict__[k] for k in builtins_whitelist if k in __builtins__.__dict__ } instr_locals={} try: exec(code_obj, instr_globals, instr_locals) except BaseException as e: if vlevel >=1: print(repr(e),", "label": 1}, {"snippet_id": 12410, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name", "label": 0}, {"snippet_id": 54500, "code": ": 'mixed'} response=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response", "label": 0}, {"snippet_id": 3610, "code": "'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\"", "label": 0}, {"snippet_id": 8800, "code": " log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender", "label": 0}, {"snippet_id": 70325, "code": ", serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the", "label": 0}, {"snippet_id": 84133, "code": ") except ArticleClass.DoesNotExist: article=None if request.method=='POST': form=ArticleFormClass(request.POST, instance=article) form.cache_old_content() if form.is_valid(): if request.user.is_authenticated", "label": 1}, {"snippet_id": 47336, "code": " return render(request, template_name,{'object_list': out}) @login_required() def data_source_detail(request, pk, template_name='data_source/datasource_detail.html'): datasource=get_object_or_404(DataSource", "label": 0}, {"snippet_id": 66400, "code": ".window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type", "label": 0}, {"snippet_id": 47253, "code": " DataGroupForm from django.db.models import Count, Q @login_required() def data_source_list(request, template_name='data_source/datasource_list.html'): datasources=DataSource.objects.all() ds_list, frm_list", "label": 1}, {"snippet_id": 83583, "code": ".objects.all() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug=None, group_slug_field=None, group_qs=None): group=None if group_slug is not None: group=get_object_or_404", "label": 0}, {"snippet_id": 69646, "code": ".join(apt_packages) )) apt.install_packages(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()))) if conda_packages: logger.info('Installing{} conda packages collected", "label": 0}, {"snippet_id": 36094, "code": " return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is", "label": 0}, {"snippet_id": 30685, "code": "'POST': newGrudget=Grudget(name=request.form['name']) session.add(newGrudget) session.commit() return redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget", "label": 0}, {"snippet_id": 83388, "code": ".ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action", "label": 1}, {"snippet_id": 78498, "code": " data_dict): data_request.title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else", "label": 0}, {"snippet_id": 17947, "code": " Incorrect password.'), 'danger') return flask.redirect('/profile') user.password_hash=form.new_password.data flask.flash(flask.Markup( '<strong>Password successfully changed!</strong>'), 'success') db", "label": 0}, {"snippet_id": 36789, "code": " .annotate(source_type=F('document_type__title'), document_count=Count('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats", "label": 0}, {"snippet_id": 69734, "code": ") with open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main(): from.log import init_logging init_logging() argparser=argparse.ArgumentParser() argparser.add_argument( '--admin', nargs='*', help=", "label": 0}, {"snippet_id": 81772, "code": " check_input_url import re class HomeView(View): def get(self, request, *args, **kwargs): form=ShortUrlForm() return render(request, 'home.html',{'form': form}) def post(self, request, *args, **kwargs)", "label": 0}, {"snippet_id": 50411, "code": " ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname=os.path.split(os.path.abspath", "label": 0}, {"snippet_id": 13668, "code": "(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process", "label": 0}, {"snippet_id": 32661, "code": "=first self.second=second def execute(self, builtins): read, write=os.pipe() inp=RedirectionHelper(0, read) outp=RedirectionHelper(1, write) with outp: self.first.execute(builtins) outp.close() with inp", "label": 0}, {"snippet_id": 71654, "code": ": s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() resp=req.get_response(app)", "label": 0}, {"snippet_id": 42672, "code": " RequestFactory from dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical, QAGroup from django.db.models import Count @override_settings(ALLOWED_HOSTS=['testserver']) class TestQaPage", "label": 0}, {"snippet_id": 33425, "code": "(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0] ds", "label": 0}, {"snippet_id": 40161, "code": ".db import models from django.urls import reverse from django.core.validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info import CommonInfo from.data_document import DataDocument", "label": 0}, {"snippet_id": 80643, "code": ".set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set BiFi Motor Position', label='Absolute Position:", "label": 0}, {"snippet_id": 33579, "code": " should be 1 extracted chemical \\ with weight fraction data associated with ethylparaben') ec=ExtractedChemical.objects.get(rawchem_ptr_id=73) ec.raw_min_comp=0.1 ec.save() stats=stats_by_dtxsids(dtxs) for", "label": 0}, {"snippet_id": 79673, "code": " if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the data request :type title", "label": 0}, {"snippet_id": 31462, "code": "'django.db.backends.postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER', 'postgres'), 'PASSWORD': os.environ.get('DB_PASSWORD', ''), 'HOST': os.environ", "label": 0}, {"snippet_id": 59814, "code": "\"n\": table, \"t\": type_}, ) ) if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name", "label": 0}, {"snippet_id": 76635, "code": " tiles: %s\", str(world_extent_in_tiles)) base_url=layer_properties.GetMapBaseUrl() for abs_tile_row in range(rect_of_tiles.y0, rect_of_tiles.y1): rel_tile_row=abs_tile_row -rect_of_tiles.y0 logger.debug", "label": 0}, {"snippet_id": 41614, "code": " test_detail_form_load(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(self.objects.doc.matched, ('Document should start w/ matched False')) self.assertFalse(self.objects.doc", "label": 0}, {"snippet_id": 16877, "code": ".objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player", "label": 0}, {"snippet_id": 24214, "code": " export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"", "label": 1}, {"snippet_id": 8886, "code": ", 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states", "label": 0}, {"snippet_id": 44484, "code": " Download Script', url='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX", "label": 0}, {"snippet_id": 15264, "code": "=FieldList(FormField(ChangeAllModelsForm), min_entries=0) change_timeseries_value_several_days=FieldList(FormField(ChangeInputNewValue), min_entries=0) change_timeseries_value_several_days_add_delta=FieldList", "label": 0}, {"snippet_id": 14576, "code": " settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url", "label": 0}, {"snippet_id": 35179, "code": "', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category", "label": 0}, {"snippet_id": 22878, "code": ". Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return", "label": 0}, {"snippet_id": 80050, "code": "=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id", "label": 0}, {"snippet_id": 80964, "code": " event_is_participating=event_is_participating event=http.request.env['event.event'].sudo().browse(event_id) subscription_update_counter=0 partner=http.request.env.user.partner_id partner_id=int(partner.id)", "label": 0}, {"snippet_id": 49598, "code": "=get_resource_as_string def allowed_file(filename): return '.' in filename and \\ filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with", "label": 0}, {"snippet_id": 36529, "code": "??') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count", "label": 0}, {"snippet_id": 2646, "code": "'oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session", "label": 0}, {"snippet_id": 53, "code": " def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 20051, "code": " xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex", "label": 0}, {"snippet_id": 46467, "code": ".fieldnames)) if missing: context['clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name", "label": 0}, {"snippet_id": 36275, "code": "'/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('factotum', response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in", "label": 0}, {"snippet_id": 54394, "code": " pol.name.title(), 'tokens': tokens, 'search_count': pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application/json\" ) return resp", "label": 0}, {"snippet_id": 43398, "code": "=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return", "label": 0}, {"snippet_id": 34148, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self)", "label": 0}, {"snippet_id": 56083, "code": ".format(profile.username), 'sd': profile.bio, 'si': profile.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}", "label": 0}, {"snippet_id": 73588, "code": "=True user.save() token.delete() return True return False def login_form(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': clear_get_data(request) form=LoginForm", "label": 1}, {"snippet_id": 11239, "code": " context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer", "label": 0}, {"snippet_id": 51161, "code": " in self._enabled_options: enabled=True if step.name in self._disabled_options: enabled=False if enabled: print step.name step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict", "label": 0}, {"snippet_id": 17372, "code": ".Markup('<strong>Logins are currently disabled.</strong>'), 'danger') return flask.redirect(flask.url_for('account.login')) username=form.username.data.strip() password=form.password.data user=models.User", "label": 0}, {"snippet_id": 62929, "code": " effects after accessing the acs :type check_fn: callable \"\"\" came_from='/camefrom/' with self.app.test_client() as c: resp=c.get(url) cookie=resp.headers['Set-Cookie'] token=session._session.token authr", "label": 1}, {"snippet_id": 27363, "code": " update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self", "label": 0}, {"snippet_id": 81019, "code": ")]) try: if existing_registration: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('Found existing registration, set state to open(confirmed)') existing_registration", "label": 0}, {"snippet_id": 5080, "code": ".assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 14837, "code": " def auth_get_user_by_id(user_id): key='user:%s' % user_id if db.hlen(key)==0: return None user_data=db.hgetall(key) user=User() user.user_id=user_data['user_id'] user.email=user_data['email'] user.password_hash", "label": 0}, {"snippet_id": 69866, "code": " path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(", "label": 0}, {"snippet_id": 60789, "code": "\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int ", "label": 0}, {"snippet_id": 17170, "code": ".change_gameplayer') def game_scores(request, tournament_id, round_num): \"\"\"Provide a form to enter scores for all the games in a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user)", "label": 0}, {"snippet_id": 44797, "code": " note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\" try: note.clean() except Exception as ex: template=\"An exception of", "label": 0}, {"snippet_id": 43889, "code": " load_model_objects from dashboard.models import * import os import csv import time import unittest import collections import json import re from selenium import webdriver from selenium.webdriver.support.select", "label": 1}, {"snippet_id": 65872, "code": ") self.update_tab_bar_visibility() def on_tab_close_button_clicked(self, sender, widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container.page_num(db.parent_widget", "label": 0}, {"snippet_id": 6008, "code": " SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def set_cookie_id_token(self, id_token): \"\"\" Cooperates with @after_request to set a new ID token cookie. \"\"\" g", "label": 0}, {"snippet_id": 60753, "code": " comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called in the", "label": 0}, {"snippet_id": 59280, "code": "\"name\", \"default\", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that", "label": 0}, {"snippet_id": 31554, "code": "?$', home_page, name='account'), url(r'^projects/$', projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project, name='project'), url(r'^project/(?P<proj_id>", "label": 0}, {"snippet_id": 8361, "code": ".get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: context[\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth", "label": 0}, {"snippet_id": 42584, "code": " Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find/?q=avcat') self.assertContains(response, 'stub_1845') def test_group_type_facet(self): response=self.c.get('/find/?q=diatom", "label": 0}, {"snippet_id": 58877, "code": "=InviteQuerySet.as_manager() @staticmethod def search_user_by_email(email): return User.objects.filter(email=email).first() @classmethod def create_new(cls, commit, course, instructor, email, invite_type", "label": 0}, {"snippet_id": 15508, "code": " def get_command(command_name): return[item for item in commands if item['command']==command_name] def str_to_datetime(str): if not str or str=='None': str=datetime.today().strftime('%Y-%m-%d') str=str", "label": 0}, {"snippet_id": 51699, "code": "[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script def genSCI(): pass def genSSCI(): pass def genCSRF(", "label": 1}, {"snippet_id": 71260, "code": "._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages'): if not self", "label": 0}, {"snippet_id": 61989, "code": " elif page.headers[header]==expected_value: return True else: return False def validate_cache_control_header(page, expected_directive): header=page.headers.get('Cache-Control', '') directives=[directive", "label": 0}, {"snippet_id": 28528, "code": "(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ", "label": 0}, {"snippet_id": 49606, "code": "'.', 1)[1] in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[", "label": 0}, {"snippet_id": 425, "code": "\n\"\"\" Views and functions for serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re", "label": 0}, {"snippet_id": 52598, "code": " complete projects for {team_name}.\"\"\".format(sender=sender, team_name=team_object.name) flash_message=\"Emails sent to\\n\" for i in xrange(len(emails_lst)): if not messages_list[i]: message=default_message", "label": 0}, {"snippet_id": 46250, "code": "') else 'prod_name' err_msg=['must be 1:1 with \"data_document_id\".'] context['ext_err'][i+1]={col: err_msg} if created: update_fields(row, ext) row['extracted_text']=ext if(ext_child==ExtractedListPresence", "label": 0}, {"snippet_id": 42253, "code": " should have Product column.') fu=GroupType.objects.create(title='Functional use') self.objects.dg.group_type=fu self.objects.dg.save() response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8", "label": 0}, {"snippet_id": 21239, "code": " STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address is None: self.start_redis() self.start_monitor() self.start_raylet_monitor() self.start_plasma_store()", "label": 0}, {"snippet_id": 54554, "code": " import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import pprint from hwml import Problem, Assignment from collections import defaultdict import string", "label": 0}, {"snippet_id": 68547, "code": " render(request, 'twitter_hunter/tweets.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def get_success_url(self): self.object", "label": 0}, {"snippet_id": 83781, "code": "\"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES,", "label": 0}, {"snippet_id": 43940, "code": " NoSuchElementException from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * def log_karyn_in(object): ''' Log user in for", "label": 1}, {"snippet_id": 65261, "code": "=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented filechooser_creation_dialog=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager", "label": 0}, {"snippet_id": 50367, "code": "(provider) social, username, email=oauth.callback() if social is None: flash('Authentication failed.') return redirect(url_for('login')) user=query_social_user(social); session['social']=social if user is None", "label": 0}, {"snippet_id": 66479, "code": " on_keyfile_unlock_button_clicked(self, widget): keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_path=keyfile_unlock_select_button.get_label() try: self.database_manager", "label": 0}, {"snippet_id": 9899, "code": " get_password_reset_form().to_json(), 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow", "label": 0}, {"snippet_id": 2993, "code": " raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View", "label": 0}, {"snippet_id": 23225, "code": "\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object", "label": 0}, {"snippet_id": 18180, "code": "+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print \"[-]Domain is invalid\"\r \r if is_closed==False:\r", "label": 1}, {"snippet_id": 71076, "code": " True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+", "label": 0}, {"snippet_id": 57480, "code": " request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid:", "label": 0}, {"snippet_id": 35611, "code": "(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form", "label": 0}, {"snippet_id": 62218, "code": " validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore(page): return validate_cache_control_header", "label": 0}, {"snippet_id": 49506, "code": " flash from flask.ext.sqlalchemy import SQLAlchemy from oauth import OAuthSignIn from subprocess import check_output, STDOUT, CalledProcessError from werkzeug import generate_password_hash, check_password_hash", "label": 0}, {"snippet_id": 6696, "code": ") @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET', 'POST']) def register(", "label": 0}, {"snippet_id": 60436, "code": ":(\\.jsono?)?$>\") app.add_route(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in", "label": 0}, {"snippet_id": 5902, "code": " os.urandom if app is not None: self.init_app(app) def init_app(self, app): \"\"\" Do setup that requires a Flask app. \"\"\" self.app=app app.config.setdefault('OIDC_SCOPES',['openid', 'email']) app.config.setdefault", "label": 0}, {"snippet_id": 82509, "code": " monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name=comp_name def run_check(self): \"\"\"You", "label": 0}, {"snippet_id": 26439, "code": "\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if process.returncode !=0", "label": 0}, {"snippet_id": 52137, "code": ".get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(", "label": 0}, {"snippet_id": 51595, "code": ".modify_optional_steps, 'specify_optional_steps':builder.specify_optional_steps, 'userlock':userlock, 'fail':fail, 'scp':scp, 'require_version':require_version } try: execfile(os.path.join('projectdata'", "label": 0}, {"snippet_id": 14940, "code": ": ts={ 'id': name, 'values':{ 'x':[], 'y':[] } } dates=[key for key in values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$", "label": 0}, {"snippet_id": 16566, "code": "=0, \"%d games already exist for %s in this round\" %(rp.gameplayers().count(), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count", "label": 0}, {"snippet_id": 68002, "code": ".html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): pk=self.kwargs['pk", "label": 0}, {"snippet_id": 41021, "code": "'utf-8')) def test_product_card_location(self): response=self.client.get('/datadocument/179486/') html=response.content.decode('utf-8') e_idx=html.index('<h4>Extracted Text') p_idx=html.index('<h4 class=", "label": 0}, {"snippet_id": 12016, "code": "\"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?'", "label": 0}, {"snippet_id": 27202, "code": " backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY", "label": 0}, {"snippet_id": 8542, "code": " ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user", "label": 0}, {"snippet_id": 64244, "code": " \"\"\" current_app.logger.debug('Logout service started') state=StateCache(session) identity=IdentityCache(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity", "label": 0}, {"snippet_id": 18124, "code": "+input_file+\" with output file, \"+output_file+\" --\")\r \r is_closed=True\r \r payloads=open(payload_file,'r').read().split('\\n')\r \r for payload in payloads: \r domains=open(input_file,'r').read().split('\\n') \r print", "label": 0}, {"snippet_id": 83422, "code": " kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup='", "label": 0}, {"snippet_id": 19897, "code": "[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions.ResponseError as e: logger.info( \"Monitor: \" \"Turning off flushing due to exception:{}\".format", "label": 0}, {"snippet_id": 42003, "code": " create Products and link if needed''' doc=DataDocument.objects.create(data_group=self.objects.dg) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'", "label": 0}, {"snippet_id": 4971, "code": ".locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ", "label": 0}, {"snippet_id": 52210, "code": "=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return \"Pending my good lady\" @app.route(\"/view-team\") def view_team(): \"\"\"Renders view of team page, with board\"\"\" team_id=session.get", "label": 0}, {"snippet_id": 12946, "code": " GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request):", "label": 0}, {"snippet_id": 46410, "code": " data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product, document=doc) stub +=1 context['bulk']=0 if request.method=='POST' and 'clean_comp_data_button' in request", "label": 0}, {"snippet_id": 15082, "code": "\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeOneModelForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) model_system_name=NoValidationSelectField", "label": 0}, {"snippet_id": 31729, "code": "' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client.get(reverse('elections", "label": 1}, {"snippet_id": 18621, "code": " inside the database if the \tdocument exists, returns None or the error message. \t\"\"\" \tdef check_database(self): \t\tph=PasswordHasher() \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username", "label": 1}, {"snippet_id": 21024, "code": ", huge_pages=self._ray_params.huge_pages, plasma_store_socket_name=self._plasma_store_socket_name, redis_password=self._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in", "label": 1}, {"snippet_id": 46668, "code": ".csv.readlines()] table=csv.DictReader(info) good_fields=['filename','title','document_type', 'url','organization'] if not table.fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return", "label": 0}, {"snippet_id": 25653, "code": " encapsulation of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list of", "label": 0}, {"snippet_id": 11086, "code": "'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name':", "label": 0}, {"snippet_id": 21444, "code": " as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message", "label": 0}, {"snippet_id": 63854, "code": "/chpass') def chpass(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('change-password-action', force_authn=True) @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn", "label": 0}, {"snippet_id": 35809, "code": ").path).url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product", "label": 0}, {"snippet_id": 38372, "code": " ExtractedFunctionalUse from.extracted_habits_and_practices import ExtractedHabitsAndPractices from.extracted_list_presence import ExtractedListPresence from.extracted_hhdoc import ExtractedHHDoc from.extracted_hhrec", "label": 1}, {"snippet_id": 2854, "code": " from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto", "label": 0}, {"snippet_id": 18052, "code": " successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/reset.txt', user=user)", "label": 0}, {"snippet_id": 83259, "code": " django.contrib.contenttypes.models import ContentType from django.utils.translation import ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras", "label": 0}, {"snippet_id": 62009, "code": " directive in header.split(',')] return expected_directive in directives def validate_no_redirects(page): if page.is_redirect: return False else: return True def validate_200_ok(page): if page.status_code==200", "label": 0}, {"snippet_id": 38357, "code": ".source_category import SourceCategory from.product_document import ProductDocument from.extracted_text import ExtractedText from.extracted_cpcat import ExtractedCPCat from.extracted_chemical import ExtractedChemical", "label": 0}, {"snippet_id": 36563, "code": ".first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html", "label": 0}, {"snippet_id": 16380, "code": ".filter(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number()==round_num): if t.seed_games: if(r.roundplayer_set.count() % 7)==0: return HttpResponseRedirect(reverse('seed_games", "label": 1}, {"snippet_id": 12969, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view", "label": 0}, {"snippet_id": 30734, "code": " return \"<script>function myFunction(){alert('As juicy as this is, you are not authorized to edit this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>", "label": 1}, {"snippet_id": 27795, "code": ".worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self.lock: self.events.append(event", "label": 0}, {"snippet_id": 51044, "code": " if s[0] not in \"+-\") def modify_optional_steps(self, *steps): ''' Add or remove optional steps in the build. \"+foo\" include step foo. \"-foo\" exclude step foo. ''' for name in steps: if name.startswith", "label": 0}, {"snippet_id": 18667, "code": "\t\t \t\"\"\" post(): \tSets the class variables and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie", "label": 1}, {"snippet_id": 71716, "code": ") def test__load_user(self): user=models.User.create_user('test:12345') req=EngineAuthRequest.blank('/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual", "label": 0}, {"snippet_id": 44226, "code": " go back to detail view when clicking cancel\") dg_detail_url=f'{self.live_server_url}/datagroup/{dg.pk}/' self.browser.get(dg_detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click()", "label": 0}, {"snippet_id": 56579, "code": "=deep_link_domain return self def when_call_root_redirect(self): client=Client() self.response=client.get(reverse('root-redirect')) return self def then_response_should_be_a_redirect_to(self, url): assert", "label": 1}, {"snippet_id": 78220, "code": "(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self):", "label": 0}, {"snippet_id": 50428, "code": ": dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname) while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not", "label": 0}, {"snippet_id": 26524, "code": " process.kill(), [process]) try: timer.start() process.wait() finally: timer.cancel() if process.poll() is not None: continue process.kill() if wait: process.wait() del self.all_processes[process_type] def", "label": 0}, {"snippet_id": 18694, "code": "\tdef post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tcheck_details=self.check_database() \t\tif(check_details!=None): \t\t\tself.render", "label": 0}, {"snippet_id": 55667, "code": " item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item", "label": 0}, {"snippet_id": 15356, "code": "='start_day': result.append({'command': field.name, 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name", "label": 0}, {"snippet_id": 78942, "code": "'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): ", "label": 1}, {"snippet_id": 24623, "code": " self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files", "label": 1}, {"snippet_id": 47011, "code": " render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg.get_zip_url(), 'rb", "label": 0}, {"snippet_id": 26150, "code": "._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file", "label": 0}, {"snippet_id": 32417, "code": ".append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command()) else", "label": 0}, {"snippet_id": 48993, "code": ", template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail", "label": 0}, {"snippet_id": 22486, "code": " NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code", "label": 0}, {"snippet_id": 57733, "code": "\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id", "label": 1}, {"snippet_id": 14303, "code": " ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order", "label": 0}, {"snippet_id": 78271, "code": "['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name", "label": 0}, {"snippet_id": 17986, "code": " home_url=flask.url_for('main.home') url=flask.request.args.get('next') or \\ flask.request.referrer or \\ home_url if url==flask.request.url: return home_url return url def send_verification_email(user)", "label": 1}, {"snippet_id": 41630, "code": "/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start w/ extracted False')) self.assertFalse(response.context['datagroup'].all_matched(), ('UploadForm should be included", "label": 0}, {"snippet_id": 43642, "code": "/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_chem=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_chem_name", "label": 1}, {"snippet_id": 34139, "code": "=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div", "label": 0}, {"snippet_id": 64713, "code": " 'deductions': deductions})) def dock_points(deductions, points, reason): deductions.append({'points': points, 'reason': reason}) def fix_syntax_err(code, err): return None def grade(code_obj, name, points", "label": 0}, {"snippet_id": 25628, "code": " ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name, get_raylet_socket_name, new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file", "label": 0}, {"snippet_id": 8622, "code": " @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse:", "label": 0}, {"snippet_id": 54390, "code": " politician={ 'value': pol.name.title(), 'tokens': tokens, 'search_count': pol.search_count } politicians.append(politician) resp=Response( response=json.dumps(politicians), status=200, mimetype=\"application", "label": 0}, {"snippet_id": 12464, "code": " 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 44494, "code": "') exscript=Script.objects.create(title='Test Extraction Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code='CO') dg=DataGroup.objects", "label": 0}, {"snippet_id": 7703, "code": " initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string)", "label": 0}, {"snippet_id": 23400, "code": " 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if", "label": 0}, {"snippet_id": 38067, "code": "('UN', 'unknown'), ('FO', 'formulations'), ('AR', 'articles'), ('OC', 'occupational')) kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length", "label": 0}, {"snippet_id": 16977, "code": "'round': r, 'games': games, 'formset': formset} return render(request, 'rounds/seeded_games.html', context) @permission_required('tournament.add_game') def create_games(request, tournament_id, round_num): \"", "label": 0}, {"snippet_id": 41116, "code": "/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc", "label": 0}, {"snippet_id": 43552, "code": " the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '", "label": 1}, {"snippet_id": 52112, "code": "\"/new-team\", methods=[\"POST\"]) def create_team(): \"\"\"Create Team model and UserTeam model, updating database each time.\"\"\" name=request.form.get(\"name\", \"Untitled\") desc=request.form.get(\"description\",", "label": 0}, {"snippet_id": 36203, "code": "): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default", "label": 0}, {"snippet_id": 14551, "code": "':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, ", "label": 0}, {"snippet_id": 55319, "code": " lchflags(self,flags): \t\treturn os.lchflags(self.path,flags) \tdef lchmod(self,mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn os.lchown(self.path,uid,gid) \tdef link(self", "label": 0}, {"snippet_id": 68833, "code": " subprocess import sys import time from urllib.error import HTTPError from urllib.request import urlopen, URLError import pluggy from tljh import( apt, conda, hooks, migrator, systemd, traefik, user, )", "label": 0}, {"snippet_id": 11558, "code": " user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and", "label": 0}, {"snippet_id": 24625, "code": ".files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to check if there are new log files to monitor. It will also store those log files in Redis. ", "label": 1}, {"snippet_id": 78637, "code": " assigned organisation with admin access :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id", "label": 0}, {"snippet_id": 40029, "code": " blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self):", "label": 1}, {"snippet_id": 27816, "code": " RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being logged. extra_data: Additional information", "label": 0}, {"snippet_id": 22113, "code": " the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary", "label": 0}, {"snippet_id": 22059, "code": " created. worker_path(str): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support. Requires plasma_directory", "label": 0}, {"snippet_id": 58071, "code": ", \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email/milestone_ortc_notify_text", "label": 1}, {"snippet_id": 63752, "code": " BINDING_HTTP_REDIRECT from saml2.ident import decode from saml2.client import Saml2Client from saml2.response import LogoutResponse from saml2.metadata import entity_descriptor from werkzeug.exceptions import Forbidden", "label": 0}, {"snippet_id": 73192, "code": "=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=('email',) def clean(self):", "label": 0}, {"snippet_id": 84627, "code": " render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def observe_article(request", "label": 0}, {"snippet_id": 82247, "code": " **kwargs): object=Category.objects.get(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request, 'category-detail-view.html',{'object': object, 'visits': visits}) class", "label": 0}, {"snippet_id": 77704, "code": "(update_resource) security_classification=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency", "label": 0}, {"snippet_id": 23065, "code": " error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str): The message", "label": 0}, {"snippet_id": 82812, "code": " to :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock", "label": 0}, {"snippet_id": 10330, "code": ".get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id", "label": 0}, {"snippet_id": 60119, "code": " sqlite_extensions[extension]=result.fetchone()[0] else: sqlite_extensions[extension]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\", \"FTS4\", \"FTS3\"): try: conn.execute( \"CREATE VIRTUAL TABLE v{fts}", "label": 0}, {"snippet_id": 76297, "code": " Args: layer_properties: Object with details about the layer. user_log_rect: The user-requested projected, ie map coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width:", "label": 0}, {"snippet_id": 71318, "code": "(self): try: return self.session.data.pop('_redirect_uri').encode('utf-8') except KeyError: return self._config['success_uri'] get_redirect_uri=_get_redirect_uri def _set_globals(self, environ): environ", "label": 0}, {"snippet_id": 17475, "code": " failed!</strong> Account is not activated.'), 'danger') return flask.redirect(flask.url_for('account.login')) user.last_login_date=datetime.utcnow() user.last_login_ip=ip_address(flask.request.remote_addr", "label": 0}, {"snippet_id": 82, "code": ": '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 73469, "code": "'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user", "label": 0}, {"snippet_id": 28357, "code": " are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants", "label": 0}, {"snippet_id": 37540, "code": " fields=['puc', 'id_pks'] class BulkPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select", "label": 0}, {"snippet_id": 38111, "code": " description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product', through='ProductToPUC')", "label": 0}, {"snippet_id": 47898, "code": ".endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f", "label": 0}, {"snippet_id": 1129, "code": "}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif", "label": 0}, {"snippet_id": 56646, "code": " import email_confirmation_redirect, login_redirect, experience_redirect, profile_redirect, \\ root_redirect, aasa_redirect urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect", "label": 1}, {"snippet_id": 40231, "code": " validators=[ MaxValueValidator(100), MinValueValidator(1)], default=1) def __str__(self): return str(self.title) def get_absolute_url(self): return reverse('extraction_script_edit', kwargs={'pk': self", "label": 0}, {"snippet_id": 29934, "code": "='sqlite:///' +os.path.join(BASE, 'db', 'benwaonline.db') DEBUG=True SECRET_KEY='not-so-secret' class TestConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite://' TESTING=True TWITTER_CONSUMER_KEY='consume'", "label": 0}, {"snippet_id": 74453, "code": "): EVAL_ACTION_TYPE=\"DELETE\" def view_action(self): self.report.delete() class WizardPDFPartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial", "label": 0}, {"snippet_id": 58366, "code": " desc\", \"title\": \"view_introduction\" }, onboarding.PREVIEW_COURSELET:{ \"html\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } return data[setting_name", "label": 0}, {"snippet_id": 39002, "code": "}' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): ''", "label": 0}, {"snippet_id": 45403, "code": "'text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type", "label": 1}, {"snippet_id": 55605, "code": " r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem): ", "label": 0}, {"snippet_id": 32912, "code": " os import contextlib def IO_redirection(cmd): \"\"\" Redirect input/output based characters < > >> in the command. < will be redirecting input, > will be output and >> is output append \"\"\" if(\"<\" in cmd):", "label": 0}, {"snippet_id": 32219, "code": " token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start=self.position value=[] while self.char", "label": 0}, {"snippet_id": 83274, "code": ".models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm): summary=forms.CharField(widget=forms", "label": 0}, {"snippet_id": 33707, "code": " self.assertEqual(response.status_code, 200) self.assertContains(response, 'Download PUCs') def test_download_raw_chem_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code", "label": 1}, {"snippet_id": 69921, "code": " but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip('/') newpath='' for part in path.split('", "label": 1}, {"snippet_id": 5183, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"", "label": 0}, {"snippet_id": 64071, "code": " None: current_app.logger.info('Session cookie has expired, no logout action needed') location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location}).data", "label": 0}, {"snippet_id": 73578, "code": "=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete() return True return False def login_form(request): if", "label": 1}, {"snippet_id": 34808, "code": "=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename", "label": 1}, {"snippet_id": 30271, "code": "=%s' % access_token) h=httplib2.Http() result=json.loads(h.request(url, 'GET')[1]) if result.get('error') is not None: response=make_response(json.dumps(result.get('error')), 500) response.headers['Content", "label": 0}, {"snippet_id": 80809, "code": " checked): print(f\"{'Locking' if checked else 'Unlocking'} thin etalon.\") self.lock_thin_etalon_action.setChecked(not checked) self.matisse.set_thin_etalon_lock(checked) self.lock_thin_etalon_action.setChecked", "label": 0}, {"snippet_id": 21006, "code": "( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self", "label": 0}, {"snippet_id": 39270, "code": " chemical name\", max_length=500, null=True, blank=True) raw_min_comp=models.CharField(\"Raw minimum composition\", max_length=100, null=True, blank=True) raw_max_comp=models.CharField(\"Raw maximum composition", "label": 0}, {"snippet_id": 65422, "code": " +\")\") tab_title=ntpath.basename(keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last", "label": 1}, {"snippet_id": 7556, "code": ".views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response", "label": 0}, {"snippet_id": 77306, "code": ") result=p.sub(\"\", result) p=re.compile(r\"([\\[\\{,])\\s*(\\w+)\\s*:\") result=p.sub(r'\\g<1>\"\\g<2>\":', result) return json.loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from", "label": 0}, {"snippet_id": 34597, "code": "'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return", "label": 1}, {"snippet_id": 32823, "code": " wait(self): self.base.wait() class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file descriptor to modify. newfd: The new file descriptor. ''' def __init__(self, fd, newfd", "label": 0}, {"snippet_id": 27122, "code": " indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line", "label": 0}, {"snippet_id": 13388, "code": " import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view", "label": 0}, {"snippet_id": 14015, "code": " been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account", "label": 0}, {"snippet_id": 20201, "code": "=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId(", "label": 0}, {"snippet_id": 48458, "code": ".objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc", "label": 0}, {"snippet_id": 40196, "code": " QA_COMPLETE_PERCENTAGE=0.2 title=models.CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators=[URLValidator()]) qa_begun=models.BooleanField(default=False)", "label": 1}, {"snippet_id": 4040, "code": "/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client", "label": 0}, {"snippet_id": 80910, "code": "/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views/fit_event_views.xml", "label": 0}, {"snippet_id": 56503, "code": ".response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response['Location'", "label": 0}, {"snippet_id": 9872, "code": " context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are ", "label": 0}, {"snippet_id": 12669, "code": "]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The", "label": 0}, {"snippet_id": 9941, "code": "\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce", "label": 0}, {"snippet_id": 48424, "code": " 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type", "label": 0}, {"snippet_id": 79960, "code": ".commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict], title=u'Data Request Closed Send Email", "label": 1}, {"snippet_id": 76865, "code": " finally: if fp: fp.close() return im_tile def _SaveImage(image, fname, image_spec): \"\"\"For debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the image. image_spec", "label": 1}, {"snippet_id": 77488, "code": ": Target published point. Returns: The layers from the server definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information for target url '%s'\", target_url", "label": 0}, {"snippet_id": 62982, "code": ", 302) self.assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param session_id: the token for the", "label": 0}, {"snippet_id": 59655, "code": "(databases.get(database) or{}).get(\"tables\") or{} ).get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None:", "label": 0}, {"snippet_id": 80213, "code": " menu_bar=self.window.menuBar() console_menu=menu_bar.addMenu('Console') self.clear_log_area_action=console_menu.addAction('Clear Log') self.open_idle_action=console_menu.addAction('Open Python Shell..", "label": 0}, {"snippet_id": 38530, "code": " id as its primary key. ``document_type`` each type of data group may only contain certain types of data documents. The clean() method checks to make sure that the assigned document type is among the types", "label": 0}, {"snippet_id": 33921, "code": ".quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText", "label": 0}, {"snippet_id": 15253, "code": "=SelectMultipleField('Execute models',[validators.required()]) change_input_series_one_model=FieldList(FormField(ChangeOneModelForm), min_entries=0) change_input_series_all_models=FieldList(FormField(ChangeAllModelsForm", "label": 0}, {"snippet_id": 31226, "code": ", HOOK_DOMAIN] ALLOWED_HOSTS +=os.environ.get('DJANGO_ALLOWED_HOSTS', '').split() CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True GITMATE_PLUGINS=[ 'code_analysis', 'welcome_commenter',", "label": 0}, {"snippet_id": 42784, "code": " self.assertTrue(group_count==1) self.assertTrue(Script.objects.get(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first()", "label": 0}, {"snippet_id": 74793, "code": "=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.'", "label": 0}, {"snippet_id": 39830, "code": " import ExtractedChemical from.script import Script def validate_wf_analysis(value): if value < 0 or value > 1: raise ValidationError( (f'Quantity{value} must be between 0 and 1'),params={'value': value", "label": 1}, {"snippet_id": 57195, "code": "=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required def transaction_detail(request, *args, **kwargs): extra_context", "label": 0}, {"snippet_id": 46894, "code": ": group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context={'form': form, 'header': header, 'datasource': datasource, 'groups': groups", "label": 0}, {"snippet_id": 2727, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get", "label": 0}, {"snippet_id": 75990, "code": ", 'page', 'exact']: return redirect_text.format( type=self.get_redirect_type_display(), from_to_url=self.get_from_to_url_display(), ) return ugettext( 'Redirect:{}'.format( self.get_redirect_type_display", "label": 0}, {"snippet_id": 31439, "code": " 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, },", "label": 0}, {"snippet_id": 63599, "code": "'Cookie': cookie}, data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response", "label": 1}, {"snippet_id": 16138, "code": ".game_seeder import GameSeeder from tournament.models import Tournament, Round, Game from tournament.models import TournamentPlayer, RoundPlayer, GamePlayer def get_round_or_404(tournament, round_num): \"\"\"Return", "label": 0}, {"snippet_id": 15882, "code": "'Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not rv: return False user", "label": 0}, {"snippet_id": 77838, "code": "): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org", "label": 0}, {"snippet_id": 75226, "code": ") and committee_member_form.is_valid(): person=person_form.save() committee_member=committee_member_form.save(commit=False) committee_member.person=person committee_member.save() candidate.committee_members", "label": 0}, {"snippet_id": 15959, "code": "=auth_get_user_by_email(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email or password') return False self.user=user return True", "label": 0}, {"snippet_id": 83820, "code": " articles, group=get_articles_by_group( article_qs, group_slug, group_slug_field, group_qs) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user,", "label": 0}, {"snippet_id": 59708, "code": "/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self): if not hasattr(self,", "label": 0}, {"snippet_id": 31183, "code": ".com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s", "label": 0}, {"snippet_id": 3749, "code": "\"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 80998, "code": "='cancel' subscription_update_counter +=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: existing_registration=http.request.env['event.registration'].sudo().search", "label": 0}, {"snippet_id": 64470, "code": "=user.eppn session['eduPersonAssurance']=loa session.persist() response=redirect(location_on_success) session.set_cookie(response) current_app.logger.info('Successful token login, redirecting user{} to", "label": 0}, {"snippet_id": 23118, "code": "(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background", "label": 0}, {"snippet_id": 45115, "code": "'product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values", "label": 0}, {"snippet_id": 24571, "code": ".node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\"", "label": 1}, {"snippet_id": 34345, "code": "/*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse", "label": 0}, {"snippet_id": 36394, "code": " response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%', extracted_doc_count) def test_PUC_download(self): p", "label": 1}, {"snippet_id": 30496, "code": "['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')) else: flash(\"You were not logged in\") return redirect(url_for('showGrudgets", "label": 0}, {"snippet_id": 4507, "code": "%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 7285, "code": " is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False column_list=['office_name', 'sb', 'services',", "label": 1}, {"snippet_id": 34025, "code": " now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter(", "label": 0}, {"snippet_id": 66679, "code": ".clear_input_fields() keepassgtk.config_manager.create_config_entry_string(\"history\", \"last-opened-db\", str(self.database_filepath)) keepassgtk.config_manager.save_config() self.unlock_database_stack_box.destroy", "label": 0}, {"snippet_id": 52673, "code": " logout_user(): \"\"\" \"\"\" session.clear() return redirect(\"/\") @app.route(\"/logout\", methods=[\"GET\"]) def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"", "label": 0}, {"snippet_id": 67082, "code": ".getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash) context['events']=Event", "label": 0}, {"snippet_id": 37693, "code": "): fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args", "label": 0}, {"snippet_id": 84197, "code": "': 'create'}) form=ArticleFormClass(initial=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article'", "label": 0}, {"snippet_id": 33565, "code": "=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(1, ethylparaben_stats['dds_wf_n'], 'There should be 1 extracted chemical \\ with weight fraction", "label": 0}, {"snippet_id": 76785, "code": " return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row,", "label": 0}, {"snippet_id": 956, "code": " index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/'", "label": 1}, {"snippet_id": 45756, "code": " doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)') exttext", "label": 1}, {"snippet_id": 20216, "code": ".DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): ", "label": 0}, {"snippet_id": 51936, "code": "\"POST\"]) def log_in_returning_user(): \"\"\"Validate login entry.\"\"\" num_attempts=h.get_login_attempts() remaining=h.calc_attempts_remaining(num_attempts) email=request.form.get('email') pw=request.form.get(", "label": 0}, {"snippet_id": 75018, "code": " db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw", "label": 0}, {"snippet_id": 51147, "code": ".env): enabled=True if step.is_optional: enabled=step.is_enabled_by_default if self._disable_all_options: enabled=False if step.name in self._enabled_options: enabled=True if step.name in self._disabled_options", "label": 0}, {"snippet_id": 28437, "code": " byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object", "label": 0}, {"snippet_id": 7907, "code": "', context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link", "label": 0}, {"snippet_id": 55114, "code": "(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self", "label": 0}, {"snippet_id": 60314, "code": " max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args==('interrupted',): raise InterruptedError(e) print( \"ERROR: conn={}", "label": 0}, {"snippet_id": 21138, "code": ".java_worker_options, ) assert ray_constants.PROCESS_TYPE_RAYLET not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_RAYLET]=[process_info] def start_worker(self): \"\"\"Start a worker process.\"\"", "label": 0}, {"snippet_id": 72197, "code": ", access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id", "label": 0}, {"snippet_id": 15039, "code": ".search('input,source_type:output', name): source_model_name, rest=source[1], source[2:] ts['source_model_name']=source_model_name ts['source_type']='model' else: ts['source_type']='timeseries' time_series", "label": 0}, {"snippet_id": 40094, "code": " into RawChem in ticket 654 ''' id=self.id try: return apps.get_model('dashboard.ExtractedChemical').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedChemical').DoesNotExist", "label": 0}, {"snippet_id": 82741, "code": ".pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info(self): \"\"\"Generate a status information for the job describing what is being", "label": 0}, {"snippet_id": 42568, "code": "=ethyl') self.assertContains(response, 'Data Document') self.assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self)", "label": 0}, {"snippet_id": 71214, "code": " _get_user_class(self): try: return utils.import_class(self._config['user_model']) except Exception: return models.User def _load_user(self): if self.session is not None and self.session.user_id: self.user", "label": 0}, {"snippet_id": 5863, "code": "\" def __init__(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self.credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials() self.http", "label": 0}, {"snippet_id": 74831, "code": " instance=candidate) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '') if banner_id: person.bannerid=banner_id", "label": 0}, {"snippet_id": 15353, "code": " in form: if field.name=='start_day': result.append({'command': field.name, 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field", "label": 0}, {"snippet_id": 37600, "code": "'Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl=", "label": 0}, {"snippet_id": 27305, "code": " self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self.node_manager_port=node_manager_port self.node_ip_address=node_ip_address self.num_workers", "label": 0}, {"snippet_id": 64704, "code": " for d in deductions) if score < 0: score=0 print(json.dumps({'score': score, 'deductions': deductions})) def dock_points(deductions, points, reason): deductions.append({'points': points, 'reason': reason", "label": 0}, {"snippet_id": 23997, "code": " lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def __init__(self", "label": 0}, {"snippet_id": 38342, "code": " GroupType from.data_group import DataGroup from.document_type import DocumentType from.data_document import DataDocument from.ingredient import Ingredient from.product import Product from.source_category", "label": 0}, {"snippet_id": 7675, "code": ".decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging", "label": 0}, {"snippet_id": 14012, "code": " return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\":", "label": 0}, {"snippet_id": 28006, "code": " import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants", "label": 0}, {"snippet_id": 4796, "code": "' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects", "label": 0}, {"snippet_id": 13987, "code": " pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string", "label": 0}, {"snippet_id": 75929, "code": ", max_length=255, db_index=True, help_text=from_url_helptext, blank=True, ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models", "label": 0}, {"snippet_id": 55009, "code": "\" import os import os.path import fnmatch def specialized(p): \tif os.path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn", "label": 0}, {"snippet_id": 68753, "code": " 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions", "label": 1}, {"snippet_id": 31392, "code": ".sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware", "label": 0}, {"snippet_id": 71189, "code": " session=None if value: session=models.Session.get_by_value(value) if session is not None: session_hash=session.hash() else: session=models.Session.create() session_hash='0' self.session=session self.session_hash", "label": 0}, {"snippet_id": 81818, "code": "'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success-url-view', kwargs", "label": 0}, {"snippet_id": 77653, "code": "\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size", "label": 0}, {"snippet_id": 43985, "code": "\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects", "label": 0}, {"snippet_id": 606, "code": " os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime", "label": 0}, {"snippet_id": 36333, "code": ") self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found", "label": 0}, {"snippet_id": 36041, "code": ".PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self)", "label": 0}, {"snippet_id": 30163, "code": "///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''", "label": 0}, {"snippet_id": 69095, "code": ".info(\"Cannot uninstall configurable-http-proxy...\") def ensure_jupyterhub_service(prefix): \"\"\" Ensure JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp", "label": 0}, {"snippet_id": 25107, "code": " task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add(hex_to_binary(task_id_hex)) object_table_objects", "label": 0}, {"snippet_id": 32382, "code": ".command() if self.accept(TokenType.COMMAND_END): other=self.commands() if base and other: return DoubleNode(base, other) else: return other else: return base def command(self): if self.accept(TokenType.WORD", "label": 0}, {"snippet_id": 61358, "code": ").__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__", "label": 0}, {"snippet_id": 60103, "code": "(\"spatialite\", \"SELECT spatialite_version()\", True), ): try: result=conn.execute(testsql) if hasversion: sqlite_extensions[extension]=result.fetchone()[0] else: sqlite_extensions[extension]=None except", "label": 0}, {"snippet_id": 10366, "code": " student's account information. \"\"\" import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth", "label": 0}, {"snippet_id": 7084, "code": "\n'''Copyright 2018 Province of British Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the", "label": 0}, {"snippet_id": 32910, "code": "\nimport sys import os import contextlib def IO_redirection(cmd): \"\"\" Redirect input/output based characters < > >> in the command. < will be redirecting input, > will be output and >> is output append \"\"\" if", "label": 0}, {"snippet_id": 15043, "code": "=source[1], source[2:] ts['source_model_name']=source_model_name ts['source_type']='model' else: ts['source_type']='timeseries' time_series.append(ts) time_series.sort(key=lambda ts_item: ts_item['result_type", "label": 0}, {"snippet_id": 50614, "code": " win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools, 'vsvars32.bat", "label": 0}, {"snippet_id": 61892, "code": " now this is just checking for Cloudflare\"\"\" if 'CF-Cache-Status' in page.headers or 'CF-RAY' in page.headers: return False else: return True def validate_not_using_analytics(page): \"\"\"Scan for common analytics", "label": 0}, {"snippet_id": 84398, "code": " is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args", "label": 0}, {"snippet_id": 52969, "code": " TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view", "label": 0}, {"snippet_id": 67235, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): ip=request.GET", "label": 0}, {"snippet_id": 59585, "code": " def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self, key=None, database=None", "label": 0}, {"snippet_id": 6843, "code": " if form.validate_on_submit(): if current_user.verify_password(form.old_password.data): current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token", "label": 0}, {"snippet_id": 8336, "code": "].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not", "label": 0}, {"snippet_id": 6973, "code": ".filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token, form.password.data): flash('Your password has been updated.') return redirect", "label": 0}, {"snippet_id": 14471, "code": " GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, })", "label": 0}, {"snippet_id": 21468, "code": " if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try", "label": 0}, {"snippet_id": 79679, "code": " with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data", "label": 0}, {"snippet_id": 54347, "code": ": pol.name, 'party': pol.party, 'state': pol.state, 'constituency': pol.constituency, 'wiki': pol.wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians", "label": 0}, {"snippet_id": 71509, "code": " strategy_class=app._load_strategy('appengine_openid') self.assertEqual(strategy_class, AppEngineOpenIDStrategy) def test_load_session_no_session(self): req=EngineAuthRequest.blank('/auth/google') s_count", "label": 1}, {"snippet_id": 79133, "code": " not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id", "label": 0}, {"snippet_id": 68388, "code": ": exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location')==None: return url return res.getheader('location'", "label": 0}, {"snippet_id": 23658, "code": ".setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger.propagate", "label": 1}, {"snippet_id": 43825, "code": " ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By", "label": 0}, {"snippet_id": 55575, "code": ".append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path) \t\telse: \t\t\treturn Folder(r.dirname().path) \tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args", "label": 0}, {"snippet_id": 1400, "code": " path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 84553, "code": " HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki'", "label": 0}, {"snippet_id": 39368, "code": "(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def indexing(self): obj=ExtractedChemicalIndex( meta={'id", "label": 0}, {"snippet_id": 12907, "code": "'lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request", "label": 0}, {"snippet_id": 11611, "code": "('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request", "label": 0}, {"snippet_id": 73377, "code": " login_required from.uservisibletext import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm", "label": 0}, {"snippet_id": 42369, "code": " setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects.filter(group_type__code='CO').first() resp=self.client.get(f", "label": 0}, {"snippet_id": 64225, "code": " view, which will process it with pysaml2 help and log the user out. Note that the IdP can request a logout even when we didn't initiate the process as a single logout request started by another SP. \"\"", "label": 0}, {"snippet_id": 23185, "code": " None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix", "label": 0}, {"snippet_id": 30016, "code": "), nullable=False) user_id=Column(Integer, ForeignKey('user.id')) user=relationship(User) @property def serialize(self): \"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name", "label": 1}, {"snippet_id": 61186, "code": " event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message=", "label": 0}, {"snippet_id": 47690, "code": "=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) |", "label": 0}, {"snippet_id": 16614, "code": "+len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters, two_gamers def _create_game_seeder(tournament, round_number):", "label": 0}, {"snippet_id": 62056, "code": ": return False if page.encoding.upper() in('UTF-8', 'ISO-8859-1'): return True else: return False def validate_server_software(page): if 'Server' not in page.headers: return True else: server_header=str", "label": 0}, {"snippet_id": 14547, "code": " released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth", "label": 0}, {"snippet_id": 80129, "code": "): super().__init__(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit", "label": 0}, {"snippet_id": 41457, "code": ": self.assertFalse( 'true_cas' in form.fields) self.assertFalse( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms", "label": 1}, {"snippet_id": 12513, "code": ", } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The", "label": 0}, {"snippet_id": 30217, "code": " parameter.'), 401) response.headers['Content-Type']='application/json' return response code=request.data try: oauth_flow=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri", "label": 1}, {"snippet_id": 34502, "code": "-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name of the new object should match what was entered\")", "label": 0}, {"snippet_id": 42943, "code": ".extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter( qa_group=new_group).count() self.assertTrue(initial_qa_count > 100) pk=ExtractedText", "label": 0}, {"snippet_id": 59243, "code": " from.utils import( InterruptedError, Results, escape_css_string, escape_sqlite, get_plugins, module_from_path, sqlite3, sqlite_timelimit, to_css_class ) from.inspect import inspect_hash, inspect_views", "label": 0}, {"snippet_id": 6148, "code": "[id_token['sub']]=credentials self.set_cookie_id_token(id_token) except AccessTokenRefreshError: logger.debug(\"Expired ID token, can't refresh credentials\", exc_info=True) del self.credentials_store[id_token", "label": 0}, {"snippet_id": 52001, "code": " def password_recovery(): \"\"\"Displays form to send email to user for password recovery\"\"\" return \"OOOOOOOPS\" @app.route(\"/dashboard\") def dashboard(): \"\"\"Renders dashboard view, grabbing existing teams", "label": 0}, {"snippet_id": 27480, "code": " \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None: raise ValueError(\"Should not specify `java-worker-options`", "label": 0}, {"snippet_id": 59178, "code": " def __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email) @receiver(post_save, sender=Invite) def onboarding_invite_created(sender, instance, **kwargs): update_onboarding_step(onboarding", "label": 1}, {"snippet_id": 74483, "code": " messages from django.conf import settings from django.core.exceptions import PermissionDenied from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect", "label": 0}, {"snippet_id": 883, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 3481, "code": "\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/'", "label": 0}, {"snippet_id": 47358, "code": ",) docs=DataDocument.objects.filter(data_group__in=DataGroup.objects.filter(data_source=datasource)) datasource.registered=(len(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len(docs", "label": 0}, {"snippet_id": 73073, "code": "=CreatePositionFormText.url pdf_text=CreatePositionFormText.browse_for_pdf url_text=CreatePositionFormText.link_to_job_description upload_text=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText", "label": 0}, {"snippet_id": 40491, "code": " last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC', through='TaxonomyToPUC') class Meta: verbose_name_plural='Taxonomies", "label": 0}, {"snippet_id": 42574, "code": "'Data Document') self.assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find/?q=avcat'", "label": 0}, {"snippet_id": 30164, "code": "/grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''.join(random", "label": 0}, {"snippet_id": 38897, "code": " def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs): super(DataGroup, self).save(*args, **kwargs) def", "label": 0}, {"snippet_id": 24955, "code": "( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises: Exception: An", "label": 0}, {"snippet_id": 63620, "code": "'302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) with", "label": 0}, {"snippet_id": 63456, "code": ".test_client() as c: resp=c.get('/test3') self.assertEqual(resp.status_code, 200) class LogoutRequestTests(AuthnAPITestBase): def test_metadataview(self): with self.app.test_client() as c: response=c.get", "label": 0}, {"snippet_id": 29180, "code": " import oauth from benwaonline.admin import setup_adminviews from benwaonline.models import user_datastore, User from benwaonline.gallery import gallery from benwaonline.gallery.forms import images from", "label": 1}, {"snippet_id": 3687, "code": ") self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\"", "label": 1}, {"snippet_id": 59551, "code": " self.max_returned_rows=self.config(\"max_returned_rows\") self.sql_time_limit_ms=self.config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir", "label": 0}, {"snippet_id": 20929, "code": " stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params", "label": 1}, {"snippet_id": 29108, "code": "(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's", "label": 0}, {"snippet_id": 3227, "code": "=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): ", "label": 0}, {"snippet_id": 74966, "code": " candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': form=UploadForm(request.POST, request.FILES) if form.is_valid(", "label": 0}, {"snippet_id": 42734, "code": "') self.assertTrue(Script.objects.get(pk=5).qa_begun, 'qa_begun should now be true') def test_new_qa_group_urls(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript", "label": 0}, {"snippet_id": 32056, "code": ". position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical", "label": 0}, {"snippet_id": 33900, "code": "(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def", "label": 0}, {"snippet_id": 32011, "code": " _builtin_cd(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN", "label": 0}, {"snippet_id": 17106, "code": "(name=power) except GreatPower.DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist: i=GamePlayer(player=field.player, game=g, power=p) else: i.player=field", "label": 0}, {"snippet_id": 50943, "code": ", optional=False, default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None: f.buildstep.name=name f", "label": 0}, {"snippet_id": 47415, "code": " return render(request, template_name, context) @login_required() def data_source_create(request, template_name=('data_source/' 'datasource_form.html')): form=DataSourceForm(request.POST or None) if form", "label": 0}, {"snippet_id": 55126, "code": "(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path", "label": 0}, {"snippet_id": 19804, "code": " autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis", "label": 1}, {"snippet_id": 41713, "code": ".all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames", "label": 0}, {"snippet_id": 57007, "code": " !='page']) > 0: self.is_filtered=True self.filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by('-id') return self.queryset", "label": 0}, {"snippet_id": 55048, "code": ",path): \t\tself.path=path \tdef __sub__(self,other): \t\tif(self.path.startswith(other.path)): \t\t\tr=self.path[len(other.path):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError", "label": 0}, {"snippet_id": 83574, "code": " notification import models as notification except ImportError: notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug", "label": 0}, {"snippet_id": 83384, "code": "=title).count() if cs > 0: raise forms.ValidationError( _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self)", "label": 1}, {"snippet_id": 11932, "code": " from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page", "label": 0}, {"snippet_id": 59574, "code": "(self.plugins_dir, filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self):", "label": 0}, {"snippet_id": 39454, "code": " RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models", "label": 0}, {"snippet_id": 45112, "code": "=datadocument_count_by_month() stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count", "label": 0}, {"snippet_id": 63003, "code": " :type session_id: str :return: the cookie \"\"\" return dump_cookie(self.app.config.get('SESSION_COOKIE_NAME'), session_id, max_age=float(self.app.config.get('PERMANENT_SESSION_LIFETIME')), path=self.app", "label": 0}, {"snippet_id": 27924, "code": "\"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log", "label": 0}, {"snippet_id": 15660, "code": "'input_source_initial', '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.new_value.data=command.get('new_value', '", "label": 0}, {"snippet_id": 28611, "code": " runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy(", "label": 0}, {"snippet_id": 63473, "code": "(self): with self.app.test_client() as c: response=c.get('/saml2-metadata') self.assertEqual(response.status, '200 OK') def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with self", "label": 0}, {"snippet_id": 36007, "code": " description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product', through='ProductToPUC')", "label": 0}, {"snippet_id": 35786, "code": ".get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META", "label": 0}, {"snippet_id": 37845, "code": ".fields['SID'].initial=self.instance.dsstox.sid self.fields['SID'].disabled=True class Meta: model=ExtractedChemical fields='__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm", "label": 0}, {"snippet_id": 5953, "code": ", True) app.route('/oidc_callback')(self.oidc_callback) app.before_request(self.before_request) app.after_request(self.after_request) self.flow=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'", "label": 0}, {"snippet_id": 45114, "code": ") stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC", "label": 0}, {"snippet_id": 6017, "code": " id_token): \"\"\" Cooperates with @after_request to set a new ID token cookie. \"\"\" g.oidc_id_token=id_token g.oidc_id_token_dirty=True def after_request(self, response): \"\"\" Set a new ID token cookie if the", "label": 0}, {"snippet_id": 75689, "code": "'id': '%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall'): error_response=[{'text':", "label": 0}, {"snippet_id": 57359, "code": " paginate_by=8 queryset=None header=gettext_lazy('Transactions') request=None filter=None filter_data=None is_filtered=False def get(self, request, *args, **kwargs): if not request.user.is_authenticated", "label": 0}, {"snippet_id": 23883, "code": " shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a", "label": 0}, {"snippet_id": 20853, "code": ". \"\"\" if not os.path.exists(socket_path): path=os.path.dirname(socket_path) if not os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def", "label": 0}, {"snippet_id": 77370, "code": " projection: %s\", server_vars[\"projection\"]) logger.debug(\"Server database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn", "label": 0}, {"snippet_id": 55218, "code": "(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead", "label": 0}, {"snippet_id": 68569, "code": " '/twitter_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_edit_form.html' def get_success_url(self): self.object.restart() return '/twitter_hunter", "label": 0}, {"snippet_id": 34976, "code": " file. \"+repr(e)) stats=stats_by_dtxsids(dtxsids) resp=download_chem_stats(stats) return resp def download_raw_chems(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']=", "label": 1}, {"snippet_id": 23887, "code": " shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is", "label": 0}, {"snippet_id": 5034, "code": "['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1", "label": 0}, {"snippet_id": 4812, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register", "label": 0}, {"snippet_id": 48715, "code": "{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request", "label": 0}, {"snippet_id": 78066, "code": "'size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'", "label": 0}, {"snippet_id": 43360, "code": ") self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self", "label": 0}, {"snippet_id": 38867, "code": " return self.type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return", "label": 0}, {"snippet_id": 10612, "code": " redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id", "label": 0}, {"snippet_id": 28856, "code": "=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte", "label": 0}, {"snippet_id": 49777, "code": "] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath, exist_ok=True) return render_template('openFile.html', files=files) @app.route(", "label": 0}, {"snippet_id": 68096, "code": " redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event in Event.objects.filter(id__in=Hunt(id=pk).events.all(", "label": 0}, {"snippet_id": 16040, "code": ") return redirect(url_for('view_home')) return render_template('login.html', form=login_form) @app.route('/logout') def view_logout(): logout_user() return redirect(url_for('view_home')) if __name__=='__main__", "label": 0}, {"snippet_id": 42674, "code": " dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical, QAGroup from django.db.models import Count @override_settings(ALLOWED_HOSTS=['testserver']) class TestQaPage(TestCase): fixtures", "label": 0}, {"snippet_id": 42953, "code": " qa_group=new_group).count() self.assertTrue(initial_qa_count > 100) pk=ExtractedText.objects.filter( extraction_script_id=scr.id).filter(qa_group=None).first().pk response=self.client.get(f'/qa/extractedtext/", "label": 0}, {"snippet_id": 34421, "code": ".browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say", "label": 0}, {"snippet_id": 82857, "code": " </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def", "label": 1}, {"snippet_id": 27132, "code": " level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided,", "label": 0}, {"snippet_id": 62586, "code": ", so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL", "label": 0}, {"snippet_id": 30174, "code": ") session=DBSession() @app.route('/login') def showLogin(): state=''.join(random.choice(string.ascii_uppercase +string.digits) for x in xrange(32)) login_session['state']=state return render_template('login", "label": 0}, {"snippet_id": 3084, "code": " request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url", "label": 1}, {"snippet_id": 38266, "code": " query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used", "label": 0}, {"snippet_id": 12984, "code": " the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter", "label": 0}, {"snippet_id": 59965, "code": "\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem %s\" % name", "label": 0}, {"snippet_id": 16079, "code": " django.utils.translation import ugettext as _ from tournament.forms import BaseGamePlayersFormset from tournament.forms import BasePlayerRoundFormset from tournament.forms import BasePowerAssignFormset", "label": 0}, {"snippet_id": 26381, "code": " exception if the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases", "label": 0}, {"snippet_id": 60844, "code": "\"\" try: proc=Process(self.pid) if proc.is_running(): return True except NoSuchProcess: pass return CrashEvent(self.comp_name) def info(self): \"\"\"Generate a status information for the job describing what", "label": 0}, {"snippet_id": 416, "code": "\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 16093, "code": " tournament.forms import BasePowerAssignFormset from tournament.forms import GamePlayersForm from tournament.forms import GameScoreForm from tournament.forms import GetSevenPlayersForm from tournament.forms", "label": 0}, {"snippet_id": 13596, "code": "': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION", "label": 0}, {"snippet_id": 58919, "code": " Http404: pass code=Invite( instructor=instructor, user=user, email=email, code=uuid4().hex, status='pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save(", "label": 0}, {"snippet_id": 13644, "code": " configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN),", "label": 0}, {"snippet_id": 53943, "code": ".body.append(dom) self._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer(if it exists) and returns a body-ready dom object of those contents without adding", "label": 0}, {"snippet_id": 33116, "code": "(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin", "label": 0}, {"snippet_id": 34941, "code": "\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger", "label": 0}, {"snippet_id": 37380, "code": ", 'qa_checked'] class ProductLinkForm(forms.ModelForm): required_css_class='required' document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True", "label": 0}, {"snippet_id": 50003, "code": "(\"tempFile\", None) if tempFilePath: shutil.copy(tempFilePath, saveFilePath) if \"diagram\" in request.referrer or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename", "label": 0}, {"snippet_id": 34089, "code": ".visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'))) parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div", "label": 0}, {"snippet_id": 70083, "code": " content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=", "label": 0}, {"snippet_id": 16934, "code": " for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment==Tournament.PREFERENCES: new_game.assign_powers_from_prefs() for tp in g: gp=GamePlayer.objects.get(player", "label": 0}, {"snippet_id": 38284, "code": " used to filter which PUCs a Product can have ''' qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase", "label": 0}, {"snippet_id": 40634, "code": ".fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects", "label": 0}, {"snippet_id": 16017, "code": "['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember", "label": 0}, {"snippet_id": 77283, "code": " return any results %s.\", e) return{} fp.close() logger.debug(\"Server definitions data read, start regex\") logger.debug(\"JSON vars: %s\", result) p=re.compile(r\"var geeServerDefs=\") result=p.sub(\"\", result) p", "label": 1}, {"snippet_id": 77815, "code": " usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def", "label": 0}, {"snippet_id": 57611, "code": ", from_email, to_email, template_subject, template_text): \"\"\" Send an email with specified content. Arguments: context_data(dict): data to be passed to templates. from_email(str): sender's email. to_email", "label": 0}, {"snippet_id": 57510, "code": "('transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']: transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) else: extra_context", "label": 0}, {"snippet_id": 42258, "code": "=GroupType.objects.create(title='Functional use') self.objects.dg.group_type=fu self.objects.dg.save() response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertNotIn('<th>Product<", "label": 0}, {"snippet_id": 68698, "code": "() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url)", "label": 0}, {"snippet_id": 26102, "code": " process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self._ray_params.raylet_socket_name", "label": 0}, {"snippet_id": 70003, "code": ") if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type", "label": 0}, {"snippet_id": 55676, "code": "\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files", "label": 0}, {"snippet_id": 36934, "code": ") ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month'] !=chart_month: product_stats", "label": 0}, {"snippet_id": 8146, "code": " depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME',", "label": 0}, {"snippet_id": 64655, "code": "', 'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', 'RuntimeError', 'RuntimeWarning', 'set', 'setattr', 'slice', 'sorted', ", "label": 0}, {"snippet_id": 82964, "code": "(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the", "label": 0}, {"snippet_id": 79205, "code": " mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import", "label": 0}, {"snippet_id": 40102, "code": "'dashboard.ExtractedChemical').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedChemical').DoesNotExist: try: return apps.get_model('dashboard.ExtractedFunctionalUse')", "label": 0}, {"snippet_id": 43963, "code": ") body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input", "label": 0}, {"snippet_id": 25404, "code": " if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush", "label": 0}, {"snippet_id": 75615, "code": " return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0: return[{'text': 'Previously Used', 'children': _select2_list(keywords", "label": 0}, {"snippet_id": 51401, "code": ")) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel.recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self):", "label": 0}, {"snippet_id": 39655, "code": ".ForeignKey('QAGroup', verbose_name=\"QA group\", on_delete=models.SET_NULL, null=True, blank=True) objects=InheritanceManager() def __str__(self): return str(self.data_document) def next_extracted_text_in_qa_group", "label": 0}, {"snippet_id": 13923, "code": "', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 21011, "code": ".start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self._ray_params.object_store_memory, plasma_directory=self._ray_params", "label": 0}, {"snippet_id": 55642, "code": "\t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items", "label": 0}, {"snippet_id": 34684, "code": "'curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid", "label": 0}, {"snippet_id": 80523, "code": ") dialog.setWindowTitle('Error') dialog.setText(f\"{description +'_' * desired_width}\\n\\n{''.join(stack)}\") dialog.exec() @handled_slot(bool) def clear_log_area(self, checked): self.log_area.clear() @handled_slot", "label": 0}, {"snippet_id": 631, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response", "label": 0}, {"snippet_id": 66047, "code": ".set_label(db.database_manager.database_path) check_button.connect(\"toggled\", self.on_save_check_button_toggled, db) unsaved_database_row.add(check_button) unsaved_database_row.show_all() unsaved_databases_list_box", "label": 0}, {"snippet_id": 60004, "code": ".prepare_connection(conn) self._inspect[name]={ \"hash\": inspect_hash(path), \"file\": str(path), \"size\": path.stat().st_size, \"views\": inspect_views(conn), \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{})", "label": 0}, {"snippet_id": 27973, "code": ".\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data", "label": 0}, {"snippet_id": 57948, "code": "{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title</p>\", \"description\": \"Here is some description\", \"title\": \"Title\" } }, \"invite_somebody", "label": 0}, {"snippet_id": 51389, "code": " args=(stdout, sys.stdout)) stderr_thread=threading.Thread(target=pump_output_thread, args=(stderr, sys.stderr)) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return", "label": 0}, {"snippet_id": 43880, "code": "\nfrom lxml import html from django.test import TestCase from dashboard.tests.loader import load_model_objects from dashboard.models import * import os import csv import time import unittest import collections", "label": 1}, {"snippet_id": 66742, "code": "\nfrom django.http import HttpResponse, HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm", "label": 1}, {"snippet_id": 69181, "code": " traefik_unit_template.format(**unit_params)) systemd.reload_daemon() systemd.restart_service('jupyterhub') systemd.restart_service('traefik') systemd.enable_service('jupyterhub') systemd.enable_service('traefik'", "label": 0}, {"snippet_id": 41114, "code": "['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product", "label": 0}, {"snippet_id": 3020, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID')", "label": 0}, {"snippet_id": 46088, "code": ".objects.get(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +'/pdf') afn=doc.get_abstract_filename() fs.save(afn, f) zf.write(store +'", "label": 0}, {"snippet_id": 22330, "code": " according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError", "label": 0}, {"snippet_id": 53931, "code": "._last_update_time=time.time() return self def append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time=time.time() def read_stdout(self)", "label": 0}, {"snippet_id": 75111, "code": " make sure your abstract is correct in the information section below.') if thesis.title !=form.cleaned_data['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve removed", "label": 0}, {"snippet_id": 10328, "code": " auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 14774, "code": "'localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self): return self.user_id def db_init(): db.flushdb() auth_init() auth_add_user('gleb.kondratenko@skybonds.com', 'pwd'", "label": 0}, {"snippet_id": 49259, "code": ", pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk):", "label": 0}, {"snippet_id": 25, "code": " Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date", "label": 1}, {"snippet_id": 20684, "code": " true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services.get_node_ip_address", "label": 0}, {"snippet_id": 58199, "code": " 1, onboarding.STEP_7: 1, onboarding.STEP_8: 1}, 100.0) ) def test_percentage_of_done(self, steps, result, mock): _mock=mock.return_value _mock.find_one.return_value=steps self.assertEqual(get_onboarding_percentage", "label": 1}, {"snippet_id": 12702, "code": " descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), ", "label": 0}, {"snippet_id": 57856, "code": " and save it to the MongoDB Argument: setting_name(str): name of setting e.g. `create_course` Return: dict object with the data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\" try: ONBOARDING_SETTINGS_DEFAULT", "label": 0}, {"snippet_id": 14890, "code": " return auth_get_user_by_id(user_id) def load_json(name): filename=os.path.join(app.static_folder, name) return json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html')", "label": 0}, {"snippet_id": 54873, "code": ") def process_problem_scores(code_list): \tproblems=[] \tclass problem(object): \t\tdef __init__(self,student,book_edition,chapter,number,code): \t\t\tself.student=student \t\t\tself.book_edition=book_edition \t\t", "label": 1}, {"snippet_id": 76151, "code": ".to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self", "label": 1}, {"snippet_id": 18664, "code": " \t\treturn error\t\t\t \t\"\"\" post(): \tSets the class variables and checks the database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets", "label": 1}, {"snippet_id": 16395, "code": ": return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, r.number()))) return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect", "label": 1}, {"snippet_id": 44837, "code": " import HttpRequest from lxml import html from dashboard import views from dashboard.models import * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects", "label": 1}, {"snippet_id": 80253, "code": " Wavelength') self.set_bifi_motor_pos_action=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position') scan_menu=menu_bar.addMenu('Scan') self", "label": 0}, {"snippet_id": 21399, "code": " raise Exception(\"Attempting to kill a process of type \" \"'{}', but this process is already dead.\" .format(process_type)) else: continue if process_info.use_valgrind: process.terminate() process.wait() if", "label": 0}, {"snippet_id": 12061, "code": " redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value", "label": 1}, {"snippet_id": 23621, "code": " if runtime_num_gpus is not None: resources[\"GPU\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus return resources _default_handler=None def setup_logger(logging_level", "label": 0}, {"snippet_id": 16036, "code": "(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html', form=login_form) @app.route('/logout') def view_logout(): logout_user() return redirect(url_for", "label": 0}, {"snippet_id": 14974, "code": "=attrs[:2], attrs[2:] ts['result_type']='Input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', '', name) attrs=name_wo_braces", "label": 0}, {"snippet_id": 27006, "code": " deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However, the same ID should not be used", "label": 0}, {"snippet_id": 40382, "code": " 1: return QAGroup.objects.filter(extraction_script=es).first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es, qa_checked=False", "label": 0}, {"snippet_id": 33708, "code": ".assertEqual(response.status_code, 200) self.assertContains(response, 'Download PUCs') def test_download_raw_chem_button(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code", "label": 1}, {"snippet_id": 44254, "code": " dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click", "label": 0}, {"snippet_id": 39739, "code": ".extractedcpcat else: return self def pull_out_hh(self): if hasattr(self, 'extractedhhdoc'): return self.extractedhhdoc else: return self def one_to_one_check(self, odict): ''' Used in the upload of extracted", "label": 1}, {"snippet_id": 63757, "code": " from saml2.client import Saml2Client from saml2.response import LogoutResponse from saml2.metadata import entity_descriptor from werkzeug.exceptions import Forbidden from flask import request, session", "label": 0}, {"snippet_id": 72072, "code": ".instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}', 'fsal': '{fsal.name}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo, tag,", "label": 0}, {"snippet_id": 24649, "code": ".update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")", "label": 1}, {"snippet_id": 56499, "code": "(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code", "label": 0}, {"snippet_id": 26685, "code": " allow_graceful=False): \"\"\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead of kill, kill,..., wait, wait,... Args: check_alive(bool", "label": 0}, {"snippet_id": 2268, "code": " part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os", "label": 1}, {"snippet_id": 47357, "code": "=pk,) docs=DataDocument.objects.filter(data_group__in=DataGroup.objects.filter(data_source=datasource)) datasource.registered=(len(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len", "label": 0}, {"snippet_id": 35877, "code": "' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request", "label": 0}, {"snippet_id": 643, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding:", "label": 0}, {"snippet_id": 28791, "code": " command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\"", "label": 0}, {"snippet_id": 44634, "code": ", rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product=p, document=doc) ehp=ExtractedHabitsAndPractices.objects.create(extracted_text=extext, product_surveyed", "label": 0}, {"snippet_id": 62789, "code": "(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': base64.b64encode(saml_response", "label": 0}, {"snippet_id": 44852, "code": " create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects=load_model_objects() def test_habitsandpractices(self", "label": 0}, {"snippet_id": 57143, "code": " concept_form def transaction_delete(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code'", "label": 0}, {"snippet_id": 46464, "code": ".get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing", "label": 0}, {"snippet_id": 40842, "code": ".decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should", "label": 0}, {"snippet_id": 83410, "code": "='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data", "label": 0}, {"snippet_id": 56824, "code": " else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail(request, *args, **kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs(", "label": 0}, {"snippet_id": 54997, "code": "\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder, and File \"\"\" import os import os.path import fnmatch def specialized(p): \tif os.path.isdir(p): \t\treturn Folder(p) \telif", "label": 0}, {"snippet_id": 79419, "code": "'ckan.site_title'), 'site_url': config.get('ckan.site_url') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type), extra_vars) body=base.render_jinja2('emails/bodies/{0}.txt'.format", "label": 0}, {"snippet_id": 47448, "code": " template_name=('data_source/' 'datasource_form.html')): datasource=get_object_or_404(DataSource, pk=pk) form=DataSourceForm(request.POST or None, instance=datasource) if form.is_valid(): if form.has_changed(", "label": 0}, {"snippet_id": 14041, "code": " enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, ", "label": 0}, {"snippet_id": 51468, "code": "'''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have version{0}, but need version{1}.\".format(VERSION, required_version", "label": 0}, {"snippet_id": 22273, "code": ".node_manager_port=node_manager_port self.node_ip_address=node_ip_address self.num_workers=num_workers self.local_mode=local_mode self.driver_mode=driver_mode self.redirect_worker_output=redirect_worker_output self", "label": 0}, {"snippet_id": 8500, "code": ". Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return", "label": 0}, {"snippet_id": 68214, "code": " SearchForm from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin,", "label": 0}, {"snippet_id": 63721, "code": " self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn='hubba-bubba' came_from", "label": 0}, {"snippet_id": 32699, "code": "(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable. ''' def __init__", "label": 0}, {"snippet_id": 18460, "code": " occured, hashes the password and then inserts it into the \tMongoDB database by calling hash_password() and do_insert() respectively. \tFinally, sets the secure cookie and logs in the user. \t\"\"\" \tasync def", "label": 1}, {"snippet_id": 413, "code": "=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime:", "label": 0}, {"snippet_id": 64040, "code": " @authn_views.route('/logout', methods=['POST']) @MarshalWith(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to", "label": 0}, {"snippet_id": 58170, "code": ".STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 75.0", "label": 1}, {"snippet_id": 50813, "code": " class BuildContext(object): pass def flatten_string_list(arglist): \"\"\" Assemble a list of string, such as for a subprocess call. Input should be a string or a list containing only strings or similar lists", "label": 0}, {"snippet_id": 41131, "code": "') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product.id) data={'title' :['Product Title'], 'upc' :['stub_9101", "label": 0}, {"snippet_id": 68328, "code": "=self.object_list.filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST'", "label": 0}, {"snippet_id": 68361, "code": "=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl", "label": 0}, {"snippet_id": 31846, "code": "=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request=client", "label": 1}, {"snippet_id": 84174, "code": ".method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip} if group_slug is not None: initial.update({'content_type': group_ct.id, 'object_id': group.id}) if article is None: initial.update", "label": 0}, {"snippet_id": 37648, "code": " ExtractedCPCatForm(ExtractedTextForm): class Meta: model=ExtractedCPCat fields=['doc_date', 'cat_code', 'description_cpcat', 'cpcat_sourcetype'] class ExtractedCPCatEditForm(ExtractedCPCatForm): class", "label": 1}, {"snippet_id": 54415, "code": " resp \"\"\"News articles from various news sources Format: JSON \"\"\" @app.route('/json/<newspaper>/<query>') def test(newspaper, query): \thinduscraper=scrapers[newspaper] \thinduscraper.getArticleLinks(query", "label": 0}, {"snippet_id": 59896, "code": " self.sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('", "label": 0}, {"snippet_id": 4570, "code": ".client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location", "label": 0}, {"snippet_id": 30223, "code": "='application/json' return response code=request.data try: oauth_flow=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri='postmessage' credentials=oauth_flow.step2_exchange", "label": 1}, {"snippet_id": 32669, "code": " write=os.pipe() inp=RedirectionHelper(0, read) outp=RedirectionHelper(1, write) with outp: self.first.execute(builtins) outp.close() with inp: self.second.execute(builtins) def wait(self): self.first.wait(", "label": 0}, {"snippet_id": 27301, "code": " self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port=object_manager_port self", "label": 0}, {"snippet_id": 57890, "code": "': ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT[setting_name] return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data", "label": 0}, {"snippet_id": 29337, "code": ".models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db(error): \"\"\"Closes the database again at the end of the request.\"\"\" if hasattr(g, 'sqlite_db'): g.sqlite_db.close()", "label": 0}, {"snippet_id": 10394, "code": ".urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from", "label": 0}, {"snippet_id": 342, "code": "[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse", "label": 0}, {"snippet_id": 11628, "code": " page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders", "label": 0}, {"snippet_id": 58784, "code": " request): return self.filter(instructor=request.user.instructor) def testers(self): return self.filter(type='tester') def students(self): return self.filter(type='student') def shared_for_me(self, request", "label": 0}, {"snippet_id": 61651, "code": "(page), http_1_0_caching_disabled=validate_pragma(page), expires_set=validate_expires(page), cache_control_set=validate_cache_control_set(page), cache_control_revalidate_set=validate_cache_must_revalidate", "label": 1}, {"snippet_id": 966, "code": " like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue", "label": 1}, {"snippet_id": 14030, "code": " if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint", "label": 0}, {"snippet_id": 33636, "code": "], 'There should be 0 products \\ associated with ethylparaben') self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid", "label": 0}, {"snippet_id": 76654, "code": " rel:%d\", abs_tile_row, rel_tile_row) if rel_tile_row < 0: logger.error(\"Tile row %d -must never be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col", "label": 0}, {"snippet_id": 8572, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()==", "label": 0}, {"snippet_id": 48924, "code": " else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail", "label": 0}, {"snippet_id": 12097, "code": " ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data'", "label": 0}, {"snippet_id": 78182, "code": " respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '--username_prefix', dest='username_prefix", "label": 0}, {"snippet_id": 82048, "code": "(request, 'custom-short-url.html',{'form': JustURLForm, 'message': message}) created=JustURL.objects.create(input_url=url, short_url=f'{request.get_host()}/{short_url}', category=category) created.save(", "label": 0}, {"snippet_id": 27242, "code": ", node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients", "label": 1}, {"snippet_id": 24581, "code": " log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{}", "label": 1}, {"snippet_id": 34841, "code": " writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response", "label": 0}, {"snippet_id": 47995, "code": "'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script", "label": 0}, {"snippet_id": 84472, "code": ", 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not(allow_read", "label": 0}, {"snippet_id": 69192, "code": ".restart_service('traefik') systemd.enable_service('jupyterhub') systemd.enable_service('traefik') def ensure_jupyterlab_extensions(): \"\"\" Install the JupyterLab extensions we want. \"\"\" extensions=[ '@jupyterlab/hub", "label": 0}, {"snippet_id": 35175, "code": "=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc", "label": 0}, {"snippet_id": 69711, "code": "]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files() if os.path.exists(CONFIG_FILE): with open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={} hook=plugin_manager", "label": 0}, {"snippet_id": 71636, "code": "() self.assertTrue(req.session.session_id !=old_sid) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_save_session(self): s=models.Session.create() s_count=models.Session.query", "label": 0}, {"snippet_id": 8718, "code": "/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200", "label": 0}, {"snippet_id": 83471, "code": ".save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group", "label": 0}, {"snippet_id": 32561, "code": ": ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins): ''' Execute the node. Args: builtins: A dict of builtin commands. ''' pass def wait(self): ''' Wait for the execution of", "label": 0}, {"snippet_id": 28891, "code": " memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns: The size of the shared memory file system in bytes. \"\"\" assert sys.platform", "label": 0}, {"snippet_id": 27206, "code": " java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address", "label": 0}, {"snippet_id": 40199, "code": ".CharField(max_length=50) url=models.CharField(max_length =100, null =True, blank =True, validators=[URLValidator()]) qa_begun=models.BooleanField(default=False) script_type=models.CharField( max_length=2", "label": 1}, {"snippet_id": 52546, "code": ".{}\".format (random.choice(congratulatory_messages))) else: flash(\"Changes saved.\") db.session.commit() return redirect(\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST']) def", "label": 0}, {"snippet_id": 38055, "code": " CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import ExtractedHabitsAndPractices class PUC(CommonInfo): KIND_CHOICES", "label": 1}, {"snippet_id": 6186, "code": " authentication. \"\"\" @wraps(view_func) def decorated(*args, **kwargs): if g.oidc_id_token is None: return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check", "label": 0}, {"snippet_id": 44703, "code": " def setUp(self): self.objects=load_model_objects() def test_extracted_doc_date_validation(self): text=ExtractedText(doc_date='Wednesday, January 21, 2014', data_document=self.objects.doc, extraction_script", "label": 0}, {"snippet_id": 76272, "code": "=256 _NO_DATA_PIXELS=(0, 0, 0) _OPAQUE_ALPHA=(255,) _TRANSPARENT_ALPHA=(0,) _ALPHA_THRESHOLD=128 ALL_WHITE_PIXELS=(255, 255, 255) def ProduceImage(layer_properties, user_log_rect, user_width, user_height", "label": 0}, {"snippet_id": 42849, "code": " scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter(script_type='EX').first() pk=ExtractedText.objects.filter(qa_group=None).filter(extraction_script=scr ).filter", "label": 0}, {"snippet_id": 63522, "code": ".app.config['SAML2_LOGOUT_REDIRECT_URL'], json.loads(response.data)['payload']['location']) def test_logout_loggedin(self): eppn='hubba-bubba' came_from='/afterlogin/' cookie=self.login(eppn, came_from)", "label": 0}, {"snippet_id": 59860, "code": "\"license_url\": metadata.get(\"license_url\") or self.metadata(\"license_url\"), \"about\": metadata.get(\"about\") or self.metadata(\"about\"), \"about_url\": metadata.get(\"about_url\") or self.metadata(\"about_url\"), }", "label": 0}, {"snippet_id": 18699, "code": ") \t\tself.password=self.get_argument(\"psword\").lower() \t\tcheck_details=self.check_database() \t\tif(check_details!=None): \t\t\tself.render('signin.html',error=check_details) \t\t\treturn \t\tself.set_secure_cookie", "label": 0}, {"snippet_id": 3411, "code": "'get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"", "label": 0}, {"snippet_id": 68802, "code": " for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc.stdout.decode() assert proc.stderr.decode()==' -Validating: \\x1b[32mOK\\x1b[0m\\n' * len(extensions) def test_labextensions(): \"", "label": 0}, {"snippet_id": 26577, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"", "label": 0}, {"snippet_id": 41740, "code": ".group_type),'Composition', 'Type of DataGroup needs to be \"composition\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id'", "label": 0}, {"snippet_id": 67297, "code": "'vt_ip']=vt.getIPReport(ip) tm=ThreatMiner() context['tm_url']=tm.getURIFromIP(ip) context['tm_sample']=tm.getSamplesFromIP(ip) context['tm_report']=tm.getReportFromIP(ip) context['bls']=blacklist.objects", "label": 0}, {"snippet_id": 50262, "code": " password): session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Incorrect Email/Password') return redirect('/login", "label": 0}, {"snippet_id": 10243, "code": ": list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice", "label": 0}, {"snippet_id": 69283, "code": "' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins') user.ensure_group('jupyterhub-users') logger.info(\"Granting", "label": 1}, {"snippet_id": 11997, "code": "\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login", "label": 0}, {"snippet_id": 19983, "code": ".ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i", "label": 0}, {"snippet_id": 38935, "code": "(self): return all(self.datadocument_set.values_list('extracted', flat=True)) def registered_docs(self): return self.datadocument_set.count() def extracted_docs(self): return self.datadocument_set.filter", "label": 0}, {"snippet_id": 12362, "code": " sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar", "label": 0}, {"snippet_id": 27690, "code": " events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=", "label": 1}, {"snippet_id": 61262, "code": " the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname)", "label": 0}, {"snippet_id": 63376, "code": "'NO_AUTHN_URLS':['^/test$'], }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing", "label": 0}, {"snippet_id": 22926, "code": " argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback", "label": 0}, {"snippet_id": 46323, "code": " fs.save(str(dg)+'_extracted.csv', csv_file) context['msg']=(f'{len(good_records)} extracted records ' 'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method=='POST", "label": 0}, {"snippet_id": 6703, "code": "'You have logged out.') return redirect(url_for('main.index')) @auth.route('/register', methods=['GET', 'POST']) def register(): form=RegistrationForm() if form.validate_on_submit(): user=User(email=form", "label": 0}, {"snippet_id": 62253, "code": " def validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page): if len(page.cookies.keys()) > 0: return False else: return", "label": 0}, {"snippet_id": 63629, "code": " test_logout_service_startingSP_already_logout(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) with self.app.test_request_context('/saml2-ls', method='POST', data={'SAMLResponse':", "label": 0}, {"snippet_id": 32039, "code": ".auto() UNKNOWN=enum.auto() class Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme: The token value(optional). position: The location of the token in the stream. ''' def", "label": 0}, {"snippet_id": 84357, "code": " 'to': revision, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join", "label": 0}, {"snippet_id": 65479, "code": "() self.container.set_border_width(0) self.container.set_scrollable(True) self.container.set_show_border(False) self.container.connect(\"switch-page\", self.on_tab_switch) self.add(self.container) self.show_all", "label": 0}, {"snippet_id": 39041, "code": ": return False @property def csv_url(self): '''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError", "label": 0}, {"snippet_id": 34202, "code": " disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser", "label": 0}, {"snippet_id": 25255, "code": ".DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): ", "label": 0}, {"snippet_id": 76150, "code": "=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path", "label": 1}, {"snippet_id": 64560, "code": " '__package__'] builtins_whitelist=[ 'abs', 'all', 'any', 'ArithmeticError', 'ascii', 'AssertionError', 'AttributeError', 'BaseException', 'bin', 'BlockingIOError', 'bool', 'BrokenPipeError', 'BufferError", "label": 0}, {"snippet_id": 33418, "code": "']) self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document", "label": 0}, {"snippet_id": 68994, "code": "/4 xxECi0l/BzNxeU1gK88hEaNjIfviPR/h6Gq6KOcNKZ8rVFdwFpjbvwHMQBWhrqfu G3KaePvbnObKHXpfIKoAM7X2qfO+IFnLGTPyhFTcrl6vZBTMZTfZiC1XDQLuGUnd sckuXINIU3DFWzZGr0QrqkuE/jyr7FXeUJj9B7cLo+s/TXo+RaVfi3kOc9BoxIvy /qiNGs", "label": 0}, {"snippet_id": 63716, "code": ") self.assertEqual(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id", "label": 0}, {"snippet_id": 60076, "code": " self.metadata(\"custom_units\") or[]: ureg.define(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection(conn) sqlite_version=conn.execute(\"select sqlite_version()\").fetchone", "label": 0}, {"snippet_id": 36182, "code": " filter which PUCs a Product can have ''' qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo", "label": 0}, {"snippet_id": 54929, "code": ",prob_code)) \t \tanother_count_by_groups=0 \tprint \"Answer ID Number, Book Edition, Student Name, Problem Number, Problem Order, Score, Notes\" \tfor key,value in problem_groups.items(): \t\tbook_edition,chapter", "label": 1}, {"snippet_id": 36901, "code": "'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month", "label": 0}, {"snippet_id": 72916, "code": " request.POST.get(\"sort-created\"): sort_by='-created' elif request.POST.get(\"sort-closed\"): sort_by='-date_closed' elif request.POST.get(\"sort-position\"): sort_by='position_title' elif request.POST.get(", "label": 1}, {"snippet_id": 31019, "code": "('You are not authorized to edit this grudge.');}</script><body onload='myFunction()'>\" if request.method=='POST': if request.form['name']: editgrudge.name=request.form['name'] if request.form['description", "label": 0}, {"snippet_id": 33951, "code": "'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute('value')", "label": 0}, {"snippet_id": 52809, "code": " self.room=Room.objects.get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room']=self.room.id self.request.data['text']=self.request.data.get('message') serializer=self", "label": 0}, {"snippet_id": 35463, "code": "': form}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required", "label": 0}, {"snippet_id": 62099, "code": " page.headers: return True else: matches=version_regex.search(page.headers['Server']) if not matches: return True elif len(matches.group()) > 1: return False else: return True def validate_csp(page): if", "label": 0}, {"snippet_id": 45149, "code": "\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count", "label": 0}, {"snippet_id": 45955, "code": " datagroup=DataGroup.objects.all() data={} data['object_list']=datagroup return render(request, template_name, data) @login_required() def data_group_detail(request, pk, template_name='data_group/datagroup_detail", "label": 0}, {"snippet_id": 59274, "code": "=threading.local() MEMORY=object() ConfigOption=collections.namedtuple( \"ConfigOption\",(\"name\", \"default\", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table", "label": 0}, {"snippet_id": 11528, "code": " logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference.", "label": 0}, {"snippet_id": 43776, "code": " one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted", "label": 0}, {"snippet_id": 55445, "code": ",FSPath): \t\t\treturn os.renames(self.path,other.path) \t\telse: \t\t\treturn os.renames(self.path,other) \tdef rmdir(self): \t\treturn os.rmdir(self.path) \tdef stat(self): \t\treturn os.stat(self.path) \tdef statvfs", "label": 0}, {"snippet_id": 34669, "code": " where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc'))", "label": 0}, {"snippet_id": 59203, "code": " Path from markupsafe import Markup from jinja2 import ChoiceLoader, Environment, FileSystemLoader, PrefixLoader from sanic import Sanic, response from sanic.exceptions import InvalidUsage, NotFound from", "label": 0}, {"snippet_id": 50588, "code": " per machine. While waiting for the lock, prints a notice to stdout every 30s. ''' if platform.system()=='Windows': return WindowsUserLock(name) return PosixUserLock(name) def get_vsvars_environment():", "label": 0}, {"snippet_id": 78247, "code": "=0 for org in self.get_organizations(): print('-------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if", "label": 0}, {"snippet_id": 82100, "code": "=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data", "label": 0}, {"snippet_id": 17777, "code": ") try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp) > 6 *", "label": 0}, {"snippet_id": 3296, "code": ".is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, ", "label": 0}, {"snippet_id": 25750, "code": "(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params", "label": 0}, {"snippet_id": 58101, "code": " @data( ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding", "label": 1}, {"snippet_id": 61471, "code": ": comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all", "label": 0}, {"snippet_id": 25449, "code": " about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True: self.update_local_scheduler_map", "label": 0}, {"snippet_id": 48276, "code": ".filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category", "label": 0}, {"snippet_id": 46266, "code": "'extracted_text']=ext if(ext_child==ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean(", "label": 0}, {"snippet_id": 71621, "code": ".query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !=old_sid) s_count2", "label": 0}, {"snippet_id": 15321, "code": " value in model['inputs'].iteritems()] def get_inputs_choices(): models=load_json('models.json') inputs_by_models=[get_inputs_choices_by_model(model['model_system_name']) for model in models] return[item", "label": 0}, {"snippet_id": 33782, "code": ".rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s", "label": 1}, {"snippet_id": 15918, "code": " len(self.password.data) < 8: self.password.errors.append('Password should be at least 8 characters long') return False self.user=auth_add_user(self.email.data, self.password.data) return True class LoginForm", "label": 0}, {"snippet_id": 71521, "code": "): req=EngineAuthRequest.blank('/auth/google') s_count=models.Session.query().count() self.assertTrue(s_count==0) sess=req._load_session() s_count=models.Session.query().count() self.assertTrue(s_count", "label": 1}, {"snippet_id": 84831, "code": "') def backlinks(request, title): \"\"\"Simple text search for links in other wiki articles pointing to the current article. If we convert WikiWords to markdown wikilinks syntax, this view should be changed", "label": 0}, {"snippet_id": 46355, "code": "=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 for doc in docs_needing_products", "label": 0}, {"snippet_id": 7047, "code": ") flash('An email with instructions for confirming your new email ' 'address has been sent.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_email", "label": 0}, {"snippet_id": 36221, "code": "\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC", "label": 1}, {"snippet_id": 11646, "code": ") for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None", "label": 0}, {"snippet_id": 81385, "code": " repeating_event_ids: _logger.info('Found repeating event: ' +repeating_event.name) if repeating_event.fit_repetition=='daily': self._handle_daily_event_repetition(repeating_event) if repeating_event.fit_repetition==", "label": 0}, {"snippet_id": 81790, "code": " *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category", "label": 0}, {"snippet_id": 64329, "code": "('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for user{0} ' 'Performing local", "label": 0}, {"snippet_id": 52451, "code": "=['GET']) def open_project_details(project_id): \"\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() user_id=session.get(\"user_id\") results={\"userId\": user_id, \"pOwnerId\": project_object", "label": 0}, {"snippet_id": 51450, "code": " def fail(*args, **kwargs): ''' fail(message, exitcode=1) Abort the build with an error message. ''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version", "label": 0}, {"snippet_id": 40084, "code": " of the classes, then return the datadocument id from it NOTE: this will be obsolete once we move the data_document foreign key into RawChem in ticket 654 ''' id=self.id try: return apps.get_model('dashboard", "label": 0}, {"snippet_id": 6177, "code": " require_login(self, view_func): \"\"\" Use this to decorate view functions if only some of your app's views require authentication. \"\"\" @wraps(view_func) def decorated(*args, **kwargs): if g.oidc_id_token", "label": 0}, {"snippet_id": 25714, "code": " processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self", "label": 0}, {"snippet_id": 39513, "code": "=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) qa_flag=models.BooleanField(default=False) @classmethod def detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__", "label": 0}, {"snippet_id": 12397, "code": " received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( ", "label": 0}, {"snippet_id": 43087, "code": ", response.content) def test_cpcat_qa(self): response=self.client.get(f'/qa/chemicalpresence/') self.assertIn( f\"/qa/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content", "label": 0}, {"snippet_id": 41257, "code": "'specialP@55word') def test_fetch_extracted_records(self): ''' Confirm that each detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all():", "label": 1}, {"snippet_id": 31456, "code": " WSGI_APPLICATION='gitmate.wsgi.application' DATABASES={ 'default':{ 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER',", "label": 0}, {"snippet_id": 12239, "code": ".password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400", "label": 0}, {"snippet_id": 81323, "code": "=False @api.onchange('date_begin') def update_day_of_week(self): start_date=self.date_begin_located if start_date: self.fit_day_of_week=datetime.strptime(start_date, '%Y-%m-%d %H:%M:%S').strftime('%a')", "label": 0}, {"snippet_id": 48521, "code": "() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type ", "label": 0}, {"snippet_id": 29601, "code": " benwaonline.models import Post, Tag, Comment, Preview, Image from benwaonline.gallery import gallery from benwaonline.gallery.forms import CommentForm, PostForm @gallery.before_request def before_request(", "label": 0}, {"snippet_id": 26509, "code": ".use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process", "label": 0}, {"snippet_id": 8051, "code": "\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy", "label": 0}, {"snippet_id": 82096, "code": "(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form", "label": 0}, {"snippet_id": 3314, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID')", "label": 0}, {"snippet_id": 75820, "code": ".resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log=logging.getLogger(__name__) HTTP_STATUS_CHOICES=( (301, _('301 -Permanent Redirect", "label": 0}, {"snippet_id": 48997, "code": "'product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return", "label": 0}, {"snippet_id": 36193, "code": " assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey", "label": 0}, {"snippet_id": 26977, "code": " the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP", "label": 0}, {"snippet_id": 48569, "code": "': doc, 'form': form}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p", "label": 0}, {"snippet_id": 72136, "code": "'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons: ganesha_conf.reload_daemons", "label": 0}, {"snippet_id": 52970, "code": "(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url", "label": 0}, {"snippet_id": 61196, "code": " the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash", "label": 0}, {"snippet_id": 26266, "code": " start_ray_processes(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path(", "label": 0}, {"snippet_id": 12818, "code": " \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned", "label": 0}, {"snippet_id": 84516, "code": " ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request)) return redirect(article)", "label": 1}, {"snippet_id": 7518, "code": " django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import resolve, reverse from django.http", "label": 0}, {"snippet_id": 17582, "code": "=form.username.data.strip(), email=form.email.data.strip(), password=form.password.data) user.registration_ip=ip_address(flask.request.remote_addr).packed user.last_login_ip=user.registration_ip db.session", "label": 0}, {"snippet_id": 10797, "code": "'POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note", "label": 0}, {"snippet_id": 47349, "code": "/datasource_detail.html'): datasource=get_object_or_404(DataSource, pk=pk,) docs=DataDocument.objects.filter(data_group__in=DataGroup.objects.filter(data_source=datasource)) datasource.registered=(len(docs", "label": 0}, {"snippet_id": 27684, "code": " profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t", "label": 1}, {"snippet_id": 77401, "code": "\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer", "label": 0}, {"snippet_id": 74123, "code": ".WizardFormPartial): model=models.Report storage_helper=view_helpers.EncryptedReportStorageHelper EVAL_ACTION_TYPE=\"VIEW\" @property def site_id(self): return self.request.site.id @property def decrypted_report", "label": 0}, {"snippet_id": 79299, "code": " _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id':", "label": 0}, {"snippet_id": 24458, "code": "\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self", "label": 1}, {"snippet_id": 45347, "code": " download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the", "label": 0}, {"snippet_id": 74641, "code": "]=request.META.get('Shibboleth-givenName', '') info['email']=request.META.get('Shibboleth-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id", "label": 0}, {"snippet_id": 60223, "code": " self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name in a thread\"\"\" page_size=page_size or self.page_size def sql_operation_in_thread", "label": 0}, {"snippet_id": 49446, "code": "=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm", "label": 1}, {"snippet_id": 70556, "code": "> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index',", "label": 0}, {"snippet_id": 30615, "code": "=session.query(Grudge).filter_by(id=grudge_id).one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session.query(Grudget).all() return jsonify(grudget=", "label": 0}, {"snippet_id": 9916, "code": " _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response", "label": 0}, {"snippet_id": 64269, "code": " next_page=session.get('next', logout_redirect_url) next_page=request.args.get('next', next_page) next_page=request.form.get('RelayState', next_page) if 'SAMLResponse' in request.form: current_app.logger", "label": 0}, {"snippet_id": 77716, "code": "=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras']: if extra['key']=='Security classification': security_classification", "label": 0}, {"snippet_id": 9841, "code": " a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages", "label": 0}, {"snippet_id": 79537, "code": " your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional). :type organization_id: string :returns: A dict with the data", "label": 0}, {"snippet_id": 67926, "code": " Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django", "label": 0}, {"snippet_id": 14872, "code": " check_password_hash(user.password_hash, password) db_init() login_manager=LoginManager(app) login_manager.login_view='view_login' @login_manager.user_loader def load_user(user_id): return auth_get_user_by_id(user_id", "label": 0}, {"snippet_id": 75589, "code": "['Content-Disposition']='attachment; filename=\"%s\"' % candidate.thesis.original_file_name return response def _select2_list(search_results): select2_results=[] for r in search_results: select2_results.append", "label": 0}, {"snippet_id": 71740, "code": " auth_id='test:12345' user_info={ 'auth_id': auth_id, 'info':{}, } p=models.UserProfile.get_or_create(auth_id, user_info) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user()", "label": 0}, {"snippet_id": 21815, "code": " print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the", "label": 0}, {"snippet_id": 14287, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status", "label": 0}, {"snippet_id": 35045, "code": " from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm,", "label": 0}, {"snippet_id": 68558, "code": "=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def get_success_url(self): self.object.start() return '/twitter_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm", "label": 0}, {"snippet_id": 8117, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field", "label": 0}, {"snippet_id": 38319, "code": ", related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name", "label": 1}, {"snippet_id": 27898, "code": " be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the", "label": 0}, {"snippet_id": 55786, "code": ".path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0", "label": 0}, {"snippet_id": 64415, "code": "=request.form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA'), None) if verify_auth_token(eppn", "label": 0}, {"snippet_id": 75381, "code": "'all'})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_view_candidates(request, status): if 'sort_by' in request.GET: candidates=Candidate.get_candidates_by_status", "label": 0}, {"snippet_id": 12368, "code": "']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context", "label": 0}, {"snippet_id": 29203, "code": " auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar", "label": 0}, {"snippet_id": 34561, "code": "={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table", "label": 0}, {"snippet_id": 15242, "code": "[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models',[validators.required", "label": 0}, {"snippet_id": 58931, "code": "'pending', type=invite_type, course=course, enroll_unit_code=enroll_unit_code ) if commit: code.save() return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else ", "label": 0}, {"snippet_id": 52191, "code": " user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]", "label": 0}, {"snippet_id": 48469, "code": "='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id)", "label": 0}, {"snippet_id": 34504, "code": " import logging import datetime from django import forms from django.db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import", "label": 0}, {"snippet_id": 16515, "code": ".cleaned_data['double_%d' % i] if rp: rp.game_count=2 rp.save() return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request, 'rounds/get_seven", "label": 0}, {"snippet_id": 43143, "code": ".objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 30) elp_flagged=elps.filter(qa_flag=True).first() self.assertIn(elp_flagged.raw_cas.encode(", "label": 0}, {"snippet_id": 1036, "code": " does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified", "label": 0}, {"snippet_id": 23757, "code": " with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return", "label": 0}, {"snippet_id": 62015, "code": " expected_directive in directives def validate_no_redirects(page): if page.is_redirect: return False else: return True def validate_200_ok(page): if page.status_code==200: return True else: return False", "label": 0}, {"snippet_id": 45834, "code": " data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse", "label": 0}, {"snippet_id": 15126, "code": " csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required", "label": 0}, {"snippet_id": 16197, "code": "%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify which players are playing each round", "label": 0}, {"snippet_id": 79503, "code": " checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access", "label": 0}, {"snippet_id": 84159, "code": " None) and(group_slug is not None)): form.group=group new_article, changeset=form.save() return redirect(new_article) elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip': user_ip", "label": 0}, {"snippet_id": 80202, "code": "=QVBoxLayout() window.setWindowTitle('Matisse Controller') window.resize(600, 200) def setup_menus(self): menu_bar=self.window.menuBar() console_menu=menu_bar.addMenu('Console') self.clear_log_area_action", "label": 0}, {"snippet_id": 61299, "code": " with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that", "label": 0}, {"snippet_id": 57770, "code": " x: x, steps)) / float(len(steps)) * 100, 0 ) return 0 def update_onboarding_step(step, user_id): find_crit={onboarding.USER_ID: user_id} onboarding_data=c_onboarding_status(use_secondary=True).find_one", "label": 0}, {"snippet_id": 331, "code": "=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath", "label": 0}, {"snippet_id": 68751, "code": " extensions=[ 'jupyterlab 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions()", "label": 1}, {"snippet_id": 9164, "code": "): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint", "label": 0}, {"snippet_id": 65730, "code": ".filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self.database_manager=DatabaseManager( self.filechooser_creation_dialog.get_filename(), \"liufhre86ewoiwejmrcu8owe\"", "label": 0}, {"snippet_id": 44276, "code": ") self.assertIn('/datagroups/', self.browser.current_url, \"User should always return to detail page after submit\") def test_product(self): p=self.objects.p puc=self.objects.puc tag=self.objects.pt PUCToTag", "label": 0}, {"snippet_id": 46012, "code": " : dg, 'documents' : paginator.page(1 if page is None else page), 'all_documents' : docs, 'extract_fields': dg.get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form' :", "label": 0}, {"snippet_id": 83844, "code": " articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group new_article=ArticleClass(title='NewArticle", "label": 0}, {"snippet_id": 75509, "code": "=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid(): format_form.handle_post(request.POST,", "label": 0}, {"snippet_id": 73312, "code": ".unconfirmed_email) self.add_error('email', message) return self.cleaned_data def get_user(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data.get('password') return authenticate(username", "label": 0}, {"snippet_id": 51246, "code": " **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args) self._check_call(args, env=self._context.env, shell=True, **kwargs) def rsync(self, *args, **kwargs): args=flatten_string_list", "label": 0}, {"snippet_id": 36809, "code": "]=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date", "label": 0}, {"snippet_id": 9619, "code": " settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer", "label": 0}, {"snippet_id": 61008, "code": " for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname", "label": 0}, {"snippet_id": 58594, "code": "\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step", "label": 1}, {"snippet_id": 65818, "code": " tab_hbox.pack_start(close_button, False, False, False) tab_hbox.show_all() self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self", "label": 0}, {"snippet_id": 54496, "code": " 'lang': 'en', 'result_type': 'mixed'} response=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp", "label": 0}, {"snippet_id": 15212, "code": ".required()], choices=[]) start_day=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) delta=FloatField", "label": 0}, {"snippet_id": 18244, "code": "\tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up", "label": 1}, {"snippet_id": 55721, "code": ",name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder(t) \t\telif what is File: \t\t\tf=open(t,\"w\") \t\t\tf.close() \t\t\treturn File(t) \t\telse: \t\t\traise NotImplementedError", "label": 0}, {"snippet_id": 59968, "code": "\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem %s\" % name) try: with sqlite3.connect", "label": 0}, {"snippet_id": 31588, "code": "'project_clone'), url(r'^project/(?P<proj_id>[0-9]+)/scenario/(?P<scenario_id>[0-9]+)/$', project, name='project'), url(r'^project/compare/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+", "label": 0}, {"snippet_id": 11081, "code": " platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name", "label": 0}, {"snippet_id": 55211, "code": ".path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile", "label": 0}, {"snippet_id": 53875, "code": ".project.results_path, '.cache', 'steps', '{}.json'.format(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self", "label": 0}, {"snippet_id": 68711, "code": "=request.GET.get('url', None) exurl=expand(url) while exurl !=url: url=exurl exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request(", "label": 0}, {"snippet_id": 25784, "code": "._internal_config else None) self._node_ip_address=ray_params.node_ip_address self._redis_address=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self", "label": 0}, {"snippet_id": 16517, "code": "' % i] if rp: rp.game_count=2 rp.save() return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request, 'rounds/get_seven.html', context)", "label": 0}, {"snippet_id": 43795, "code": "-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) self.assertEqual(\"Cancel\"", "label": 0}, {"snippet_id": 12593, "code": "\"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url", "label": 0}, {"snippet_id": 48753, "code": ".mark_safe(request.GET.get('q', '')).lstrip() if q > '': p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True", "label": 0}, {"snippet_id": 54203, "code": "\", query) politician=None for p in politicians: politician=p if politician !=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query,", "label": 1}, {"snippet_id": 40563, "code": " the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar", "label": 0}, {"snippet_id": 78768, "code": ", you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD modification Will send email notification if organisation", "label": 0}, {"snippet_id": 43546, "code": "' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url", "label": 0}, {"snippet_id": 20639, "code": " length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters", "label": 0}, {"snippet_id": 48340, "code": " template_name=('product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC", "label": 0}, {"snippet_id": 55139, "code": "): \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path)", "label": 0}, {"snippet_id": 14311, "code": "%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url", "label": 0}, {"snippet_id": 16397, "code": " HttpResponseRedirect(reverse('seed_games', args=(tournament_id, r.number()))) return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect(reverse('create_games", "label": 1}, {"snippet_id": 80530, "code": " * desired_width}\\n\\n{''.join(stack)}\") dialog.exec() @handled_slot(bool) def clear_log_area(self, checked): self.log_area.clear() @handled_slot(bool) def open_idle(self, checked): print('Opening IDLE.", "label": 0}, {"snippet_id": 31836, "code": " har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert", "label": 1}, {"snippet_id": 16882, "code": " i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power=power) current", "label": 0}, {"snippet_id": 17735, "code": " user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching", "label": 0}, {"snippet_id": 6137, "code": " self.redirect_to_auth_server(request.url) try: credentials.refresh(self.http) id_token=credentials.id_token self.credentials_store[id_token['sub']]=credentials self.set_cookie_id_token(id_token) except", "label": 0}, {"snippet_id": 15835, "code": ".html', form=run_form) }) @app.route('/run/form/history', methods=['POST']) def view_run_history(): history=json.loads(request.data) history=[ { 'id': item['id'], 'date': datetime.fromtimestamp(item['date", "label": 0}, {"snippet_id": 26622, "code": " Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor", "label": 0}, {"snippet_id": 83922, "code": "**kw): if request.method=='GET': article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct", "label": 0}, {"snippet_id": 74146, "code": " kwargs=super().get_form_kwargs() kwargs.update({\"view\": self}) return kwargs class ReportCreatePartial(ReportBasePartial, views.edit.CreateView): form_class=forms.ReportCreateForm EVAL_ACTION_TYPE=\"CREATE", "label": 0}, {"snippet_id": 8217, "code": "': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers", "label": 0}, {"snippet_id": 25857, "code": " self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if the directory", "label": 0}, {"snippet_id": 38999, "code": "=f'{settings.MEDIA_ROOT}{csv_folder}' if os.path.isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found'", "label": 0}, {"snippet_id": 3829, "code": "', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 78785, "code": " QLD modification Will send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param", "label": 0}, {"snippet_id": 17790, "code": ".abort(404) if(time.time() -request_timestamp) > 6 * 3600: return flask.abort(404) sha1_password_hash_hash=binascii.hexlify(sha1_hash(user.password_hash.hash)).decode() if pw_hash !=sha1_password_hash_hash", "label": 0}, {"snippet_id": 45684, "code": "=extracted_text) if ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return redirect(referer, pk=pk) @login_required() def data_document_delete(request, pk, template_name=", "label": 0}, {"snippet_id": 48766, "code": ")) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count()", "label": 0}, {"snippet_id": 6661, "code": " if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) session['auth_token']=user.auth_token return redirect(request.args.get('next') or url_for('main", "label": 1}, {"snippet_id": 55950, "code": ".GET.urlencode()) return response def login_redirect(request): response=HttpResponse('', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode(", "label": 0}, {"snippet_id": 16068, "code": " django.http import Http404, HttpResponseRedirect from django.shortcuts import render from django.urls import reverse from django.utils.translation import ugettext as _ from tournament.forms import BaseGamePlayersFormset", "label": 0}, {"snippet_id": 71129, "code": " Response from webob import Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return session session.put() if", "label": 0}, {"snippet_id": 15223, "code": " default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) delta=FloatField('New Value',[validators.required()]) class RunForm(FlaskForm): start_day=DateField('Start", "label": 0}, {"snippet_id": 63290, "code": ".location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_cookie(self): token=('a7MPUEQQLAEEQEAQDGJOXKAMFM467EUW6HCETFI4VP5JCU3CDVJDQZSHMXAOSC' 'U25WPZA66NY5ZVAA4RPCVMHBQBJSVGYQPPLZNIBTP3Y') sessid", "label": 0}, {"snippet_id": 67080, "code": " context['tm_http']=tm.getHttpFromSample(filehash) context['tm_host']=tm.getHostsFromSample(filehash) context['tm_av']=tm.getAVFromSample(filehash) context['tm_report']=tm.getReportFromSample(filehash)", "label": 0}, {"snippet_id": 47547, "code": "/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form[", "label": 0}, {"snippet_id": 32259, "code": " reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start) elif self.char.isprintable(): start=self.position value=[] while self.char and self.char.isprintable() and not", "label": 0}, {"snippet_id": 51228, "code": "+kwargstring)) subprocess.check_call(*args, **kwargs) def python(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self,", "label": 0}, {"snippet_id": 11157, "code": "\"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not", "label": 0}, {"snippet_id": 20964, "code": ") self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info", "label": 0}, {"snippet_id": 10927, "code": " provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include", "label": 0}, {"snippet_id": 31959, "code": "''' Read a command from stdin to execute. Returns: A raw string read from stdin. ''' while True: raw=input('$ ') if len(raw) > 0: return raw def execute(self, raw): ''' Execute a command in the form of", "label": 0}, {"snippet_id": 9986, "code": ".is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders'", "label": 0}, {"snippet_id": 41960, "code": " 0, 'Product linked to all DataDocuments, no bulk_create needed.') self.objects.dg.group_type=GroupType.objects.create( title='Habits and practices') response=self.client.get(f'/datagroup/{self.objects", "label": 0}, {"snippet_id": 2897, "code": " endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get", "label": 0}, {"snippet_id": 48198, "code": " tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit", "label": 1}, {"snippet_id": 44599, "code": "=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext,", "label": 0}, {"snippet_id": 11469, "code": " } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest", "label": 0}, {"snippet_id": 54140, "code": "'getlocation.html') \"\"\"Politician Page \"\"\" @app.route('/politicians/id/<name>') def politician_page(name): name=name.lower() politicians=Politician.all() politicians.filter(\"name=\", name) politician=None for p", "label": 1}, {"snippet_id": 50177, "code": " methods=[\"POST\"]) def signUpButton(): email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email,", "label": 0}, {"snippet_id": 10604, "code": " form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0", "label": 0}, {"snippet_id": 60359, "code": ").run_in_executor( self.executor, sql_operation_in_thread ) def app(self): app=Sanic(__name__) default_templates=str(app_root / \"datasette\" / \"templates\") template_paths=[] if self.template_dir: template_paths", "label": 0}, {"snippet_id": 77344, "code": " server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(\"projection\"): server_vars[\"dbType\"]=\"gemap\" else: server_vars[\"dbType\"]=\"gedb\" if not server_vars.has_key", "label": 0}, {"snippet_id": 42232, "code": " def test_detail_table_headers(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self.assertIn('<th>Product</th>', response, 'Data Group should have Product", "label": 0}, {"snippet_id": 33006, "code": " self).get_changeform_initial_data(request) get_data['last_edited_by']=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related", "label": 0}, {"snippet_id": 76513, "code": ", Image.ANTIALIAS) return im_user def _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles for a given image. Args: rect_of_tiles: is ul -lr(lr is exclusive!) addresses of", "label": 0}, {"snippet_id": 14286, "code": " else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders:", "label": 0}, {"snippet_id": 80014, "code": ".get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db", "label": 0}, {"snippet_id": 31485, "code": " 'django.contrib.auth.password_validation.' 'UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation", "label": 0}, {"snippet_id": 1799, "code": "'d like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``", "label": 0}, {"snippet_id": 56424, "code": " \\ .then_response_should_be_a_redirect_to( 'http://dynamic.link/link=http://pachatary.com/p/a_b.c&other=param' '&st=%40a_b.c&sd=my+info&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link", "label": 0}, {"snippet_id": 40151, "code": ".tracker.previous('raw_cas') previous_raw_chem_name=instance.tracker.previous('raw_chem_name') if instance.tracker.has_changed('raw_cas') or \\ instance.tracker.has_changed('raw_chem_name'): instance.dsstox", "label": 0}, {"snippet_id": 59859, "code": " \"license_url\": metadata.get(\"license_url\") or self.metadata(\"license_url\"), \"about\": metadata.get(\"about\") or self.metadata(\"about\"), \"about_url\": metadata.get(\"about_url\") or self.metadata(\"about_url", "label": 0}, {"snippet_id": 38332, "code": "(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\") ordering=('name',) def __str__(self): return", "label": 1}, {"snippet_id": 58816, "code": "=request.user.email) ) class Invite(models.Model): instructor=models.ForeignKey(Instructor) user=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code", "label": 0}, {"snippet_id": 61610, "code": " no_cookies=validate_no_cookies(page), safe_onion_address=validate_onion_address_not_in_href(soup), no_cdn=validate_not_using_cdn(page), http_no_redirect=validate_no_redirects(no_redirects_page), expected_encoding", "label": 1}, {"snippet_id": 76821, "code": "[row, col]=(red, green, blue) +_OPAQUE_ALPHA return tile def _FetchMapTile(url): \"\"\"Fetches and returns a tile, given an url. Args: url: the exact url of the tile to fetch. Returns: The tile bitmap. \"\"", "label": 0}, {"snippet_id": 37642, "code": ".HiddenInput(), 'extraction_script': forms.HiddenInput(), } class ExtractedCPCatForm(ExtractedTextForm): class Meta: model=ExtractedCPCat fields=['doc_date', 'cat_code', 'description_cpcat', 'cpcat_sourcetype", "label": 1}, {"snippet_id": 41378, "code": " extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model =get_extracted_models(dd.data_group.group_type.code)[1] childform_model=child_formset.__dict__.get('queryset').__dict__.get", "label": 1}, {"snippet_id": 33638, "code": " products \\ associated with ethylparaben') self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528", "label": 0}, {"snippet_id": 41435, "code": ".forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse( 'true_cas", "label": 0}, {"snippet_id": 46683, "code": ".fieldnames==good_fields: datagroup.csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +", "label": 0}, {"snippet_id": 37858, "code": "'__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm based on conditions of DataGroup type=Composition and at least 1 document extracted ''' if not dg.type in['CO']: return False", "label": 0}, {"snippet_id": 51077, "code": ".startswith(\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self", "label": 0}, {"snippet_id": 34347, "code": ".click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked", "label": 0}, {"snippet_id": 45221, "code": " document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type]", "label": 0}, {"snippet_id": 8260, "code": " An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl", "label": 0}, {"snippet_id": 77824, "code": ".get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id", "label": 0}, {"snippet_id": 15861, "code": "'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password", "label": 0}, {"snippet_id": 13799, "code": ": \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy", "label": 0}, {"snippet_id": 49859, "code": " redirect('/diagram?filename=%s'%filename) return redirect('/?filename=%s'%filename) flash(\"Invalid file\") return redirect('/openFile') @app.route('/save') def save(): if(not 'email' in session) and(not", "label": 0}, {"snippet_id": 5632, "code": "/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile", "label": 0}, {"snippet_id": 55653, "code": ".listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t", "label": 0}, {"snippet_id": 10399, "code": " HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie", "label": 0}, {"snippet_id": 71615, "code": " s_serialized=s.serialize() s.key.delete() s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session", "label": 0}, {"snippet_id": 37178, "code": ", **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update", "label": 0}, {"snippet_id": 64370, "code": ".form['RelayState'] ) state.sync() location=get_location(http_info) session.clear() return redirect(location) current_app.logger.error('No SAMLResponse or SAMLRequest parameter found') abort(400) @authn_views", "label": 0}, {"snippet_id": 83041, "code": " crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with", "label": 0}, {"snippet_id": 69102, "code": " ensure_jupyterhub_service(prefix): \"\"\" Ensure JupyterHub Services are set up properly \"\"\" os.makedirs(STATE_DIR, mode=0o700, exist_ok=True) remove_chp() systemd.reload_daemon() with open(os.path.join(HERE", "label": 0}, {"snippet_id": 19437, "code": ".log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames", "label": 1}, {"snippet_id": 25264, "code": ".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads", "label": 0}, {"snippet_id": 49261, "code": "=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST", "label": 0}, {"snippet_id": 67820, "code": " count=self.object_list.filter(timestamp__gte=from_date, timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9", "label": 0}, {"snippet_id": 56727, "code": " invalid_permission_redirect from django.views.generic import ListView from django.contrib.auth.decorators import login_required from pure_pagination.mixins import PaginationMixin from django.http import HttpResponse, QueryDict", "label": 0}, {"snippet_id": 41625, "code": ".objects.doc.matched, ('Document should start w/ matched False')) self.assertFalse(self.objects.doc.extracted, ('Document should start w/ extracted False')) self.assertFalse(response.context['datagroup'", "label": 0}, {"snippet_id": 76558, "code": " so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms?LAYERS=1002& SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG", "label": 0}, {"snippet_id": 28270, "code": " and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method", "label": 0}, {"snippet_id": 31603, "code": "/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page, name='search'), url(r'^error", "label": 0}, {"snippet_id": 76888, "code": " all details about type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname +\"-\") image.save(t_path, image_spec.pil_format, **image.info) os.chmod(t_path", "label": 0}, {"snippet_id": 64283, "code": " if 'SAMLResponse' in request.form: current_app.logger.debug('Receiving a logout response from the IdP') response=client.parse_logout_request_response( request.form['SAMLResponse'], BINDING_HTTP_REDIRECT", "label": 0}, {"snippet_id": 19372, "code": " IP address of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files:", "label": 1}, {"snippet_id": 84737, "code": "=get_object_or_404(article_qs, **article_args) if notification.is_observing(article, request.user): notification.stop_observing(article, request.user) return redirect(article) def article_preview(request):", "label": 0}, {"snippet_id": 47372, "code": "(datasource.estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or None, instance=datasource) if request.method=", "label": 0}, {"snippet_id": 22778, "code": " RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being logged. extra_data: Additional information to log. ", "label": 0}, {"snippet_id": 57993, "code": "\n\"\"\" Test core utility functions. \"\"\" import mock from unittest import skip from ddt import ddt, data, unpack from django.conf import settings from django.contrib.sites.models import Site from django.core", "label": 0}, {"snippet_id": 36711, "code": "'datadocument_with_extracted_text_percent']=\\ DataDocument.objects.filter(extracted=True).count()/DataDocument.objects.count()*100 stats['datadocument_count_by_date']=datadocument_count_by_date() stats['datadocument_count_by_month'", "label": 0}, {"snippet_id": 82338, "code": " CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView, link_redirect ) urlpatterns=[ re_path(r'admin/', admin.site.urls), re_path(r'^$', HomeView.as_view(), name='home-view'", "label": 0}, {"snippet_id": 50976, "code": ": return(step.name for step in self._steps if self.is_optional) def specify_optional_steps(self, *steps): ''' Specify which optional steps to include in the build. \"default\" includes all default steps.", "label": 0}, {"snippet_id": 6653, "code": ".validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) session['auth_token'", "label": 0}, {"snippet_id": 46260, "code": " err_msg} if created: update_fields(row, ext) row['extracted_text']=ext if(ext_child==ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean", "label": 0}, {"snippet_id": 38847, "code": ", default=1, null=True, blank=True) url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return str(self.group_type.code) @property def is_composition(self)", "label": 0}, {"snippet_id": 15005, "code": "'Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:', name): attrs=name.split(',') (ts_name, model_name, ts_author, _), source", "label": 0}, {"snippet_id": 12323, "code": " attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request, context): \"", "label": 0}, {"snippet_id": 54655, "code": "=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor problem in problems: \t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem.childNodes) \t\tself.assignments=map(Assignment", "label": 1}, {"snippet_id": 49269, "code": " return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm", "label": 0}, {"snippet_id": 58997, "code": "}) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render(context) text_template=loader.get_template('ctms/email/invite_text.txt') rendered_text=text_template", "label": 0}, {"snippet_id": 55019, "code": "\t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized(p) class FSPath", "label": 0}, {"snippet_id": 7129, "code": " WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' from app.models.bookings import ExamType", "label": 0}, {"snippet_id": 68051, "code": " class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' class HuntUpdateView(UpdateView", "label": 0}, {"snippet_id": 78045, "code": "'1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'", "label": 0}, {"snippet_id": 70000, "code": "': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding", "label": 0}, {"snippet_id": 24403, "code": " monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine which log files to track.", "label": 1}, {"snippet_id": 41817, "code": " incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertIsInstance(response", "label": 0}, {"snippet_id": 57010, "code": ".filter=ConceptFilter(data) self.queryset=self.filter.qs.select_related('transaction') \\ .prefetch_related('value__currency') \\ .order_by('-id') return self.queryset def get_available_concepts(employee,", "label": 0}, {"snippet_id": 12350, "code": " Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc", "label": 0}, {"snippet_id": 24808, "code": " tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A", "label": 0}, {"snippet_id": 41563, "code": " dashboard.views.data_group import ExtractionScriptForm, DataGroupForm from django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import Client", "label": 1}, {"snippet_id": 59794, "code": "[\"name\"]=query_name return query async def get_table_definition(self, database_name, table, type_=\"table\"): table_definition_rows=list( await self.execute( database_name, 'select sql from sqlite_master", "label": 0}, {"snippet_id": 19443, "code": "\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange( \"LOG_FILENAMES:{}\".format(self.node_ip_address", "label": 1}, {"snippet_id": 82297, "code": "-list-view') class ClickTrackingDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): object=get_object_or_404(JustURL, pk=pk) reports=object.clicktracking_set.all().order_by", "label": 0}, {"snippet_id": 5370, "code": " def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm", "label": 0}, {"snippet_id": 71838, "code": " self.assertEquals(msgs, None) req.add_message('TEST MESSAGE') msgs=req.get_messages() self.assertEquals(msgs,[{'level': None, 'message':'TEST MESSAGE'}]) msgs=req.get_messages() self.assertEquals(msgs,", "label": 0}, {"snippet_id": 23786, "code": " bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open", "label": 0}, {"snippet_id": 54176, "code": "'politician.html', q=name, politician=politician) else: return render_template('politician_notfound.html', q=name) \"\"\"Search -> Politician Page \"\"\" @app.route('/search', methods=['POST', 'GET']) def search():", "label": 1}, {"snippet_id": 82332, "code": ", URLUpdateView, URLDeleteView, CategoryCreateView, CategoryListView, CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView, link_redirect ) urlpatterns=[ re_path(r'admin/", "label": 0}, {"snippet_id": 27469, "code": " should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead", "label": 0}, {"snippet_id": 79493, "code": " a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data", "label": 0}, {"snippet_id": 36931, "code": "'puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month", "label": 0}, {"snippet_id": 63298, "code": "'a7MPUEQQLAEEQEAQDGJOXKAMFM467EUW6HCETFI4VP5JCU3CDVJDQZSHMXAOSC' 'U25WPZA66NY5ZVAA4RPCVMHBQBJSVGYQPPLZNIBTP3Y') sessid=('fb1f42420b0109020203325d750185673df252de388932a3957f522a6c43a' 'a47') self.redis_instance.conn.set(sessid, json.dumps({'v1':{'id':", "label": 0}, {"snippet_id": 22675, "code": " _periodically_flush_profile_events(self): \"\"\"Drivers run this as a thread to flush profile data in the background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): ", "label": 1}, {"snippet_id": 13744, "code": "\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email,", "label": 0}, {"snippet_id": 39936, "code": "{}'.format(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before approving, please add a note explaining your edits to the extracted", "label": 1}, {"snippet_id": 28079, "code": " by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def", "label": 0}, {"snippet_id": 67814, "code": "(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(timestamp__gte=from_date, timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[", "label": 0}, {"snippet_id": 19048, "code": "\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.", "label": 1}, {"snippet_id": 25191, "code": " num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted !=len(keys): logger.warning", "label": 0}, {"snippet_id": 10400, "code": ", HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from", "label": 0}, {"snippet_id": 19684, "code": "-logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format", "label": 0}, {"snippet_id": 63717, "code": "(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id", "label": 0}, {"snippet_id": 21948, "code": " object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of", "label": 0}, {"snippet_id": 34888, "code": "(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request", "label": 0}, {"snippet_id": 23598, "code": "() else: resources={} if \"CPU\" in resources or \"GPU\" in resources: raise ValueError(\"The resources dictionary must not \" \"contain the key 'CPU' or 'GPU'\") assert default_num_cpus is not None resources[", "label": 0}, {"snippet_id": 70693, "code": " mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context,", "label": 1}, {"snippet_id": 13047, "code": "=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request):", "label": 0}, {"snippet_id": 60461, "code": " if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self.inspect), r\"/-", "label": 0}, {"snippet_id": 53568, "code": " \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating", "label": 0}, {"snippet_id": 74092, "code": " def storage(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin, _PassphrasePartial): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return", "label": 0}, {"snippet_id": 516, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override", "label": 0}, {"snippet_id": 63746, "code": "'testing-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state", "label": 0}, {"snippet_id": 82544, "code": " is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"", "label": 0}, {"snippet_id": 70561, "code": " of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n", "label": 0}, {"snippet_id": 46474, "code": "['msg']=('The following columns need to be added or ' f'renamed in the csv:{missing}') return render(request, template_name, context) good_records=[] for i, row in enumerate(csv.DictReader(info)): try:", "label": 0}, {"snippet_id": 25271, "code": ", max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left", "label": 0}, {"snippet_id": 84274, "code": "=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title': title} if", "label": 0}, {"snippet_id": 15365, "code": ".data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append({'command': field.name, 'include': field.data", "label": 0}, {"snippet_id": 55914, "code": " settings from experiences.factories import create_get_experience_interactor from profiles.factories import create_get_profile_interactor EMAIL_CONFIRMATION_PATH='/people/me/email-confirmation' LOGIN_PATH='", "label": 0}, {"snippet_id": 58353, "code": "\"description\": \"create_thread desc\", \"title\": \"create_thread\" }, onboarding.VIEW_INTRODUCTION:{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\", \"title\": \"view_introduction\" }", "label": 0}, {"snippet_id": 45892, "code": ".core.files import File from django.core.exceptions import ValidationError from django.core.files.storage import FileSystemStorage from django.contrib.auth.decorators import login_required from django.shortcuts", "label": 0}, {"snippet_id": 65992, "code": ".__len__() > 0: builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/quit_dialog.ui\") self.quit_dialog=builder.get_object(\"quit_dialog\") self.quit_dialog.set_destroy_with_parent(True", "label": 0}, {"snippet_id": 60571, "code": "[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view(self), r\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response", "label": 0}, {"snippet_id": 70490, "code": "\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http", "label": 0}, {"snippet_id": 32707, "code": ": command: The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable. ''' def __init__(self, command, args): self.command=command self.args=args self", "label": 0}, {"snippet_id": 2512, "code": " If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError", "label": 0}, {"snippet_id": 23484, "code": " is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids", "label": 0}, {"snippet_id": 9685, "code": "(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently", "label": 0}, {"snippet_id": 44900, "code": ".objects.gt.code='HP' self.objects.gt.save() _, HnPFormSet=create_detail_formset(self.objects.doc) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS", "label": 0}, {"snippet_id": 65821, "code": " False, False, False) tab_hbox.show_all() self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return", "label": 0}, {"snippet_id": 46851, "code": "(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") new_zip_path=Path(settings.MEDIA_ROOT +\"/\" +str(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") zf=zipfile.ZipFile(str(new_zip_path), 'w', zipfile", "label": 0}, {"snippet_id": 22972, "code": " import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string(): id_hash", "label": 0}, {"snippet_id": 33815, "code": " load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import settings", "label": 0}, {"snippet_id": 49764, "code": "') files=[] if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except", "label": 0}, {"snippet_id": 63777, "code": ", make_response from flask import current_app, Blueprint from eduid_common.api.decorators import MarshalWith from eduid_common.authn.utils import get_location from eduid_common.authn.loa import get_loa", "label": 0}, {"snippet_id": 77605, "code": " destination=LocalCKAN() destination.action.package_patch(id=package_id, security_classification=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email", "label": 0}, {"snippet_id": 52559, "code": " @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST']) def invite_new_teammates(team_id): \"\"\" \"\"\" team_object=Team.query.filter_by(t_id=team_id).first() emails_lst=request.form.getlist(\"email\"", "label": 0}, {"snippet_id": 82414, "code": ".as_view(), name='category-create-view'), re_path(r'^categories/$', CategoryListView.as_view(), name='category-list-view'), re_path(r'^detail/category/(?P<pk>(\\d)+)/$', CategoryDetailView.as_view(), name", "label": 0}, {"snippet_id": 60968, "code": "\"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True def info", "label": 0}, {"snippet_id": 66803, "code": "'domain/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get(", "label": 0}, {"snippet_id": 67675, "code": ") type=self.request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) return query class AttributeListView(PaginationMixin", "label": 0}, {"snippet_id": 17401, "code": ".by_email(username) if not user or password !=user.password_hash: flask.flash(flask.Markup( '<strong>Login failed!</strong> Incorrect username or password.'), 'danger') return flask.redirect(flask.url_for", "label": 0}, {"snippet_id": 59192, "code": " import sys import threading import traceback import urllib.parse from concurrent import futures from pathlib import Path from markupsafe import Markup from jinja2 import ChoiceLoader, Environment, FileSystemLoader", "label": 0}, {"snippet_id": 25248, "code": "=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex", "label": 0}, {"snippet_id": 69086, "code": ") try: systemd.uninstall_unit('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot uninstall configurable-http-proxy...\") def ensure_jupyterhub_service(prefix): ", "label": 0}, {"snippet_id": 34475, "code": " add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box", "label": 0}, {"snippet_id": 79105, "code": " request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id", "label": 0}, {"snippet_id": 56719, "code": " ConceptFilter, TransactionFilter from clickgestion.core.utilities import invalid_permission_redirect from django.views.generic import ListView from django.contrib.auth.decorators import login_required", "label": 0}, {"snippet_id": 49962, "code": "=fname if fname else request.form['filename'] if name: if name[-4:] !=\".pml\": name +=\".pml\" if allowed_file(name): session['currentFile']=name if 'email' in session: email=session['email'] elif 'social'", "label": 0}, {"snippet_id": 39670, "code": "(self): return str(self.data_document) def next_extracted_text_in_qa_group(self): nextid=0 extextnext=get_next_or_prev(ExtractedText.objects.filter( qa_group=self.qa_group, qa_checked=False), self, 'next'", "label": 0}, {"snippet_id": 25564, "code": "(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os.path.expanduser(args", "label": 1}, {"snippet_id": 20582, "code": " import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name, get_raylet_socket_name", "label": 0}, {"snippet_id": 26978, "code": " sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address", "label": 0}, {"snippet_id": 25351, "code": " or \\ local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info.get(\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split(\":\")[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address", "label": 0}, {"snippet_id": 84523, "code": " article.revert_to(revision, get_real_ip(request), request.user) else: article.revert_to(revision, get_real_ip(request)) return redirect(article) messages.error( request, 'Reverting not possible because an", "label": 0}, {"snippet_id": 23457, "code": " get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs. If it is not set, this", "label": 0}, {"snippet_id": 48035, "code": ".POST or None, instance=extext, prefix='habits') if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save", "label": 0}, {"snippet_id": 15077, "code": " pre_validate(self, form): \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeOneModelForm, self).__init__(csrf_enabled", "label": 0}, {"snippet_id": 26037, "code": " get_object_store_socket_name()) self.prepare_socket_file(self._plasma_store_socket_name) stdout_file, stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self", "label": 0}, {"snippet_id": 29689, "code": ", 1, False) if post.items: return render_template('show.html', post=post, form=CommentForm()) flash('That Benwa doesn\\'t exist yet') return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery", "label": 0}, {"snippet_id": 45047, "code": " from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.models import * current_date=datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d') chart_start_datetime", "label": 0}, {"snippet_id": 21602, "code": "(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"", "label": 0}, {"snippet_id": 9013, "code": " import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx", "label": 0}, {"snippet_id": 83558, "code": " import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION except AttributeError: WIKI_LOCK_DURATION=15 try: from notification import models as", "label": 0}, {"snippet_id": 56685, "code": "), url(r'^p/(?P<username>[a-zA-Z0-9._]+)$', profile_redirect, name='profile-redirect'), url(r'^apple-app-site-association$', aasa_redirect, name='aasa'), url(r'^$', root_redirect, name='root-redirect')", "label": 1}, {"snippet_id": 67173, "code": "\nfrom django.http import HttpResponse, HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm", "label": 1}, {"snippet_id": 21357, "code": " question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero", "label": 0}, {"snippet_id": 49526, "code": " import Base, User from database.database_insert import insert_user, insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import json import", "label": 0}, {"snippet_id": 14911, "code": " @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results') def view_results(): results=load_json('results.json", "label": 0}, {"snippet_id": 84367, "code": ".join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) def article_history(request, title, group_slug=None, group_slug_field", "label": 0}, {"snippet_id": 37082, "code": "): required_css_class='required' class Meta: model=DataGroup fields=['name', 'description', 'url', 'group_type', 'downloaded_by', 'downloaded_at', 'download_script', 'data_source', 'csv'] widgets={'downloaded_at", "label": 0}, {"snippet_id": 62313, "code": " the app that asked for authn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{!r", "label": 0}, {"snippet_id": 26778, "code": " explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly killed. \"\"\" result=[] for process_type, process_infos in", "label": 0}, {"snippet_id": 49592, "code": ".decode(charset) app.jinja_env.globals['get_resource_as_string']=get_resource_as_string def allowed_file(filename): return '.' in filename and \\ filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS", "label": 0}, {"snippet_id": 61109, "code": "[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"", "label": 0}, {"snippet_id": 8436, "code": " _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the", "label": 0}, {"snippet_id": 10702, "code": "'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link", "label": 0}, {"snippet_id": 11857, "code": " from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps", "label": 0}, {"snippet_id": 38222, "code": " is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return", "label": 0}, {"snippet_id": 19031, "code": " \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation", "label": 1}, {"snippet_id": 75687, "code": " in fast_ids: results.append({'id': '%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall", "label": 0}, {"snippet_id": 30225, "code": " try: oauth_flow=flow_from_clientsecrets('client_secrets.json', scope='') oauth_flow.redirect_uri='postmessage' credentials=oauth_flow.step2_exchange(code) except FlowExchangeError: response=make_response", "label": 1}, {"snippet_id": 70058, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=", "label": 0}, {"snippet_id": 82115, "code": "=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w.']+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance", "label": 0}, {"snippet_id": 30416, "code": " login_session['email']=data['email'] output='' output +='<h1>Welcome, ' output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width:", "label": 0}, {"snippet_id": 65669, "code": "(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self.filechooser_creation_dialog) cancel_button=builder.get_object(\"cancel_button\") override_button=builder.get_object", "label": 0}, {"snippet_id": 15359, "code": "{'command': field.name, 'start_day': str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append", "label": 0}, {"snippet_id": 51971, "code": " else: if user_record.password !=pw: template=h.handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome", "label": 0}, {"snippet_id": 24648, "code": ".update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" ", "label": 1}, {"snippet_id": 16324, "code": " args=(tournament_id,)), 'formset': formset}) if created: i.save() for r_name, value in form.cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True", "label": 1}, {"snippet_id": 6830, "code": "(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password", "label": 0}, {"snippet_id": 3371, "code": ") params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params", "label": 1}, {"snippet_id": 49803, "code": " upload(): if(not 'email' in session) and(not 'social' in session): return \"\", 401 if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] file=request.files['file", "label": 0}, {"snippet_id": 27750, "code": " in the timeline until after the task has completed. For very long-running tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative", "label": 1}, {"snippet_id": 56493, "code": ": settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return", "label": 0}, {"snippet_id": 24362, "code": ": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR, traceback_str, driver_id=ray.DriverID(driver_id", "label": 0}, {"snippet_id": 25386, "code": " be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis", "label": 0}, {"snippet_id": 55869, "code": " def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item \t\t\telse: \t\t\t\tr=r.common_parent(item) ", "label": 0}, {"snippet_id": 22258, "code": "=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports", "label": 0}, {"snippet_id": 48883, "code": "(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer", "label": 0}, {"snippet_id": 15363, "code": ": str(field.data)}) elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append({'command': field.name, 'include", "label": 0}, {"snippet_id": 63901, "code": "'SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len(idps)==1 idp=idps.keys()[0] idp=request.args.get('idp', idp) loa=request.args", "label": 1}, {"snippet_id": 81811, "code": " category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs=", "label": 0}, {"snippet_id": 2068, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is", "label": 0}, {"snippet_id": 19811, "code": ".state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password", "label": 1}, {"snippet_id": 70061, "code": " load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content", "label": 0}, {"snippet_id": 22998, "code": ".digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function", "label": 0}, {"snippet_id": 79907, "code": ")) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found", "label": 0}, {"snippet_id": 39545, "code": " chain from datetime import datetime from model_utils.managers import InheritanceManager from django.db import models from django.core.exceptions import ValidationError from django import forms from django", "label": 1}, {"snippet_id": 52958, "code": "): def setUp(self): self.user=self.make_user() self.factory=RequestFactory() class TestUserRedirectView(BaseUserTestCase): client=Client() def test_get_redirect_url(self): view=UserRedirectView() request", "label": 0}, {"snippet_id": 11627, "code": " the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders", "label": 0}, {"snippet_id": 27126, "code": " UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants", "label": 0}, {"snippet_id": 77194, "code": " % self.image_format if self.db_type==\"gemap\": base_url +=_CHANNEL_VERSION %(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles.\"\"\" tile_args", "label": 0}, {"snippet_id": 56311, "code": ") class ScenarioMaker: def given_an_experience_on_db(self, title, description, share_id, pic): orm_person=ORMPerson.objects.create() ORMProfile.objects.create(person=orm_person, username='u') experience", "label": 0}, {"snippet_id": 22218, "code": "=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants", "label": 0}, {"snippet_id": 82537, "code": " main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents", "label": 0}, {"snippet_id": 12655, "code": "(current_provider.backend_name) if current_provider.skip_registration_form: context[\"autoSubmitRegForm\"]=True for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context", "label": 0}, {"snippet_id": 18066, "code": " recipient=user, text=flask.render_template('email/reset.txt', user=user), html=flask.render_template('email/reset.html', user=user), ) email.send_email(email_msg) def send_password_reset_request_email(user): '", "label": 0}, {"snippet_id": 55604, "code": " in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join(root,a_file)) for a_file in files] \t\t\tyield(Folder(root),folder_list,file_list) class Folder(FSItem", "label": 0}, {"snippet_id": 15717, "code": "']) def view_run_init(): run_form=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form", "label": 0}, {"snippet_id": 12480, "code": " start_bold=u'<b>', end_bold=u'</b>', enterprise_name=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE'", "label": 0}, {"snippet_id": 68224, "code": ".client import HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name='twitter/index.html' context_object_name='tws' paginate_by=30", "label": 0}, {"snippet_id": 27701, "code": "(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this", "label": 1}, {"snippet_id": 3664, "code": ".\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 61676, "code": " cache_control_private_set=validate_private(page), referrer_policy_set_to_no_referrer=validate_no_referrer_policy(page), ) def scan(securedrop: DirectoryEntry, commit=False) -> ScanResult: \"\"\" Scan a single site. This", "label": 1}, {"snippet_id": 72865, "code": ": PositionText}) if request.POST.get(\"save-position\"): position=Position.objects.get(id=request.session['position_id']) request.user.positions.add(position) return redirect('home') create_position_form", "label": 1}, {"snippet_id": 84323, "code": ": allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision", "label": 0}, {"snippet_id": 52024, "code": " session[\"team_id\"]=None if session.get(\"new_user\"): flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\"", "label": 0}, {"snippet_id": 51168, "code": "=False if enabled: print step.name step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, *", "label": 0}, {"snippet_id": 33673, "code": "'There should now be 1 product \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings'", "label": 0}, {"snippet_id": 26773, "code": " processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node.kill_raylet(). Returns: A list of the dead processes ignoring the ones that have been explicitly", "label": 0}, {"snippet_id": 80432, "code": ".Queue(maxsize=1) self.status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse", "label": 0}, {"snippet_id": 27879, "code": " Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead", "label": 0}, {"snippet_id": 31501, "code": " 'NAME': 'django.contrib.auth.password_validation.' 'NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True STATIC_ROOT=os.environ.get('DJANGO_STATIC_ROOT", "label": 0}, {"snippet_id": 39832, "code": ".script import Script def validate_wf_analysis(value): if value < 0 or value > 1: raise ValidationError( (f'Quantity{value} must be between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo)", "label": 0}, {"snippet_id": 37624, "code": "'Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num'] widgets={", "label": 0}, {"snippet_id": 53997, "code": " contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"\"\" Empties \"\"\" try: contents=self.stdout_interceptor.flush_all() except Exception: return if len(contents) > 0: self.body", "label": 1}, {"snippet_id": 81375, "code": "'event.event'].search([('fit_repetition_enabled', '=', True)]) for repeating_event in repeating_event_ids: _logger.info('Found repeating event: ' +repeating_event.name) if repeating_event.fit_repetition", "label": 0}, {"snippet_id": 9158, "code": " on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user", "label": 0}, {"snippet_id": 12367, "code": "['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else:", "label": 0}, {"snippet_id": 29653, "code": ".any(name=s)) posts.extend(results) tags=Tag.query.all() return render_template('gallery.html', posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for(", "label": 1}, {"snippet_id": 38568, "code": "=True, max_length=275) raw_category=models.CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product'", "label": 0}, {"snippet_id": 82169, "code": "('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset", "label": 0}, {"snippet_id": 6689, "code": " return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You have logged out.') return redirect(url_for('main.index')) @auth.route(", "label": 0}, {"snippet_id": 52127, "code": "\"name\", \"Untitled\") desc=request.form.get(\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id)", "label": 0}, {"snippet_id": 78515, "code": " if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data", "label": 1}, {"snippet_id": 81864, "code": "=pk) form=CounterCountingForm() return render(request, 'success-url-view.html',{'object': object, 'form': form}) def post(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm", "label": 0}, {"snippet_id": 49895, "code": "(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session) and(not 'social' in session): if", "label": 0}, {"snippet_id": 53532, "code": " filename=filename[len(project.source_directory) +1:] location=stack_frame.name if location=='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno,", "label": 0}, {"snippet_id": 7553, "code": " ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako", "label": 0}, {"snippet_id": 18758, "code": " it redirects the user to /, \telse it renders /postlogin. \t\"\"\" \tdef get(self): \t\tcookie_status=self.get_secure_cookie(\"user\") \t\tif(cookie_status==None): \t\t\tself.render('index.html') \t\t\treturn \t\telse: \t\t", "label": 1}, {"snippet_id": 8445, "code": " Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of", "label": 0}, {"snippet_id": 25618, "code": " import print_function import atexit import json import os import logging import signal import threading import time import ray import ray.ray_constants as ray_constants from ray.tempfile_services import(", "label": 0}, {"snippet_id": 82164, "code": "\"' return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView): template_name='category-create-view.html' form_class=CategoryModelForm", "label": 0}, {"snippet_id": 57181, "code": "=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transactions_open') transaction.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else:", "label": 0}, {"snippet_id": 25301, "code": " subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message is None: break channel=message[\"channel\"]", "label": 0}, {"snippet_id": 8721, "code": ", there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully", "label": 0}, {"snippet_id": 50387, "code": " from dependencies import read_dependencies_from_filename import os import platform import threading import sys import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS", "label": 0}, {"snippet_id": 56660, "code": "'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people/me/login$', login_redirect, name='login-redirect'), url(r'^e/(?P<experience_share_id", "label": 0}, {"snippet_id": 26816, "code": " def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes()) def remaining_processes_alive(self): ", "label": 0}, {"snippet_id": 35737, "code": "('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance", "label": 0}, {"snippet_id": 60772, "code": " called in the main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class", "label": 0}, {"snippet_id": 5917, "code": "'openid', 'email']) app.config.setdefault('OIDC_GOOGLE_APPS_DOMAIN', None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400", "label": 0}, {"snippet_id": 53405, "code": " return{'success': True} if out is None else out def render_syntax_error( project: 'projects.Project', code: str, error: SyntaxError ) -> dict: \"\"\" :param project: :param code: :param error: :return: \"", "label": 0}, {"snippet_id": 4291, "code": " properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self", "label": 0}, {"snippet_id": 70724, "code": " django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files", "label": 0}, {"snippet_id": 55068, "code": "\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn os.path.basename(self.path) \tdef dirname(self): \t\treturn", "label": 0}, {"snippet_id": 82157, "code": "') response['Content-Disposition']='attachment; filename=\"many_urls.csv\"' return generate_csv(data_list, response) return redirect('home-view') class CategoryCreateView(LoginRequiredMixin, CreateView):", "label": 0}, {"snippet_id": 45241, "code": " document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month", "label": 0}, {"snippet_id": 59822, "code": " None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view') def update_with_inherited_metadata(self, metadata", "label": 0}, {"snippet_id": 31351, "code": " SOCIAL_AUTH_GITLAB_REDIRECT_URL=os.environ.get( 'SOCIAL_AUTH_GITLAB_REDIRECT_URL') SOCIAL_AUTH_GITLAB_SCOPE=['api'] SOCIAL_AUTH_BITBUCKET_KEY=os.environ.get('SOCIAL_AUTH_BITBUCKET_KEY') SOCIAL_AUTH_BITBUCKET_SECRET", "label": 0}, {"snippet_id": 76542, "code": ". layer_properties: Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles", "label": 0}, {"snippet_id": 49323, "code": " extracted_list_presence in extracted_text.rawchem.select_subclasses('extractedlistpresence'): tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence) if tag_form.is_valid(", "label": 0}, {"snippet_id": 40722, "code": "[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals'", "label": 1}, {"snippet_id": 50412, "code": " ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname=os.path.split(os.path.abspath(self.filename", "label": 0}, {"snippet_id": 49976, "code": "'currentFile']=name if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] savepath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(savepath, exist_ok", "label": 0}, {"snippet_id": 58772, "code": "('.', '') return email_name, domain class InviteQuerySet(models.QuerySet): def my_invites(self, request): return self.filter(instructor=request.user.instructor) def testers(self): return self.filter(type", "label": 0}, {"snippet_id": 84359, "code": "'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir", "label": 0}, {"snippet_id": 50408, "code": "\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname=os", "label": 0}, {"snippet_id": 5081, "code": ".status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in", "label": 0}, {"snippet_id": 57058, "code": " concept in settings.CONCEPTS: permission=concept.replace('.','.add_') concept_model=apps.get_model(concept) if not permission in concepts_permitted_by_employee: continue disabled=False url=concept_model._url", "label": 0}, {"snippet_id": 55634, "code": "\tsuper(Folder,self).__init__(path) \t\tassert(self.isdir()) \tdef __iter__(self): \t\tr=self.items() \t\treturn r \tdef items(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item", "label": 0}, {"snippet_id": 71651, "code": ") def test_save_session(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize", "label": 0}, {"snippet_id": 52216, "code": "\" return \"Pending my good lady\" @app.route(\"/view-team\") def view_team(): \"\"\"Renders view of team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first", "label": 0}, {"snippet_id": 24996, "code": ".GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data, 0)) for j in range(message.BatchLength(", "label": 0}, {"snippet_id": 81579, "code": "={'website_published': True}) new_repeating_event.date_end=new_end_date new_repeating_event.date_begin=new_start_date old_repeating_event.fit_repetition_enabled=False old_repeating_event.fit_repetition", "label": 0}, {"snippet_id": 13548, "code": " message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth", "label": 0}, {"snippet_id": 17584, "code": "(), email=form.email.data.strip(), password=form.password.data) user.registration_ip=ip_address(flask.request.remote_addr).packed user.last_login_ip=user.registration_ip db.session.add(user) db.session", "label": 0}, {"snippet_id": 18206, "code": " random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options import define, options define(\"port\", default=8100, help=\"run on the", "label": 0}, {"snippet_id": 56171, "code": ".when_call_get_email_confirmation() \\ .then_response_should_be_a_redirect_to_app_deeplink_with_params() class ScenarioMaker: def when_call_get_email_confirmation(self): client=Client() self.response=client.get('{}?{}'.format(reverse(", "label": 0}, {"snippet_id": 60111, "code": " try: result=conn.execute(testsql) if hasversion: sqlite_extensions[extension]=result.fetchone()[0] else: sqlite_extensions[extension]=None except Exception as e: pass fts_versions=[] for fts in(\"FTS5\",", "label": 0}, {"snippet_id": 24436, "code": " log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port,", "label": 1}, {"snippet_id": 41123, "code": ") self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product", "label": 0}, {"snippet_id": 76143, "code": ".from_url: log.debug('Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None,", "label": 0}, {"snippet_id": 36513, "code": "(self): response=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods", "label": 0}, {"snippet_id": 24470, "code": " host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of", "label": 1}, {"snippet_id": 9180, "code": "(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth", "label": 0}, {"snippet_id": 64220, "code": " The IdP will send the logout response to this view, which will process it with pysaml2 help and log the user out. Note that the IdP can request a logout even when we didn't initiate the process as a single", "label": 0}, {"snippet_id": 71486, "code": " test_load_strategy(self): from engineauth.strategies.google import GoogleStrategy strategy_class=app._load_strategy('google') self.assertEqual(strategy_class, GoogleStrategy) self.assertRaises(Exception, app", "label": 0}, {"snippet_id": 34558, "code": "=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value(", "label": 0}, {"snippet_id": 43571, "code": "]')) option=doc_type_select.first_selected_option doc_type_select.select_by_visible_text(\"ingredient disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s", "label": 1}, {"snippet_id": 48725, "code": " the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required", "label": 0}, {"snippet_id": 37531, "code": "=forms.HiddenInput(), required=True) class Meta: model=ProductToPUC fields=['puc', 'id_pks'] class BulkPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 42463, "code": "'Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects", "label": 0}, {"snippet_id": 37015, "code": "=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type'", "label": 1}, {"snippet_id": 28654, "code": " resources[\"CPU\"]=(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus is not None: resources[\"GPU\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU", "label": 0}, {"snippet_id": 77820, "code": ") def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action", "label": 0}, {"snippet_id": 53178, "code": "{'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view", "label": 0}, {"snippet_id": 7789, "code": " old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response", "label": 0}, {"snippet_id": 48651, "code": "(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid", "label": 0}, {"snippet_id": 71384, "code": "._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self._url_parse_re.match( req.path_info).group", "label": 1}, {"snippet_id": 76421, "code": "))) logger.debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int(column * _TILE_PIXEL_SIZE", "label": 0}, {"snippet_id": 79407, "code": " user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), 'site_url': config.get('ckan.site_url')", "label": 0}, {"snippet_id": 69915, "code": " view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(unquote(path)) path=path.lstrip(", "label": 1}, {"snippet_id": 8971, "code": " from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators", "label": 0}, {"snippet_id": 14980, "code": "'ts_name']=ts_name ts['ts_author']=ts_author if re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', '', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs", "label": 0}, {"snippet_id": 78956, "code": " close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be", "label": 0}, {"snippet_id": 45654, "code": " redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument, pk", "label": 0}, {"snippet_id": 84107, "code": "}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_write: return HttpResponseForbidden", "label": 0}, {"snippet_id": 18242, "code": ".RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders", "label": 1}, {"snippet_id": 11181, "code": "): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 84013, "code": " template_params={'article': article, 'revision': revision, 'redirected_from': redirected_from, 'allow_write': allow_write} if notification is not None: template_params.update({'is_observing': is_observing, ", "label": 0}, {"snippet_id": 5543, "code": " for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def", "label": 0}, {"snippet_id": 9028, "code": ".core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps", "label": 0}, {"snippet_id": 65627, "code": ".add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk.ResponseType.OK: self.does_file_exist(", "label": 0}, {"snippet_id": 77236, "code": " target_url: The url of the server with target path. Returns: The server definitions for specified target. \"\"\" if target_url[-1] !=\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http", "label": 0}, {"snippet_id": 19203, "code": " num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key=self.redis_client.lindex(\"Exports\", i) self._process_key(key) except redis.ConnectionError: pass def _process_key", "label": 1}, {"snippet_id": 30544, "code": "() return user.id def getUserInfo(user_id): user=session.query(User).filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user", "label": 1}, {"snippet_id": 40287, "code": ".format(pct) def get_pct_checked_numeric(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count() / count * 100)) return pct def qa_button_text(self)", "label": 0}, {"snippet_id": 79899, "code": " raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if", "label": 0}, {"snippet_id": 1331, "code": ", path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^", "label": 0}, {"snippet_id": 71874, "code": "'}, {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages", "label": 0}, {"snippet_id": 41703, "code": "() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form", "label": 0}, {"snippet_id": 55011, "code": " import os.path import fnmatch def specialized(p): \tif os.path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn FSItem(p)", "label": 0}, {"snippet_id": 23461, "code": " the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs. If it is not set, this returns None. \"\"", "label": 0}, {"snippet_id": 80073, "code": " Opened Creator Email') if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job(_send_mail,[users, 'open_datarequest_organisation', datarequest_dict", "label": 1}, {"snippet_id": 44774, "code": ".objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) self.assertRaises(ValidationError, note.clean) def test_long_qa_notes(self): self.objects.extext.qa_edited=True", "label": 1}, {"snippet_id": 63938, "code": " current_app.logger.info('Redirecting the user to the IdP for ' +action) return redirect(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"", "label": 0}, {"snippet_id": 41699, "code": ".doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!')", "label": 0}, {"snippet_id": 53235, "code": " def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return direct_to_template(request, template=\"funding/feature.html\", extra_context", "label": 0}, {"snippet_id": 78706, "code": " data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization", "label": 0}, {"snippet_id": 60147, "code": " except sqlite3.OperationalError: continue datasette_version={\"version\": __version__} if self.version_note: datasette_version[\"note\"]=self.version_note return{ \"python\":{ \"version\": \".\".join(map(str, sys", "label": 0}, {"snippet_id": 14905, "code": " view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results') def", "label": 0}, {"snippet_id": 48619, "code": "=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc", "label": 0}, {"snippet_id": 84706, "code": " request.user): notification.observe(article, request.user, 'wiki_observed_article_changed') return redirect(article) return HttpResponseNotAllowed(['POST']) @login_required def stop_observing_article(request", "label": 0}, {"snippet_id": 58945, "code": " self.email.split(\"@\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save(self, force_insert=False, force_update=False, using=None", "label": 0}, {"snippet_id": 74408, "code": ", *args, **kwargs) def _rendering_done_hook(self): self.eval_action(\"REVIEW\") class _ReportActionPartial(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug", "label": 0}, {"snippet_id": 508, "code": "/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 84677, "code": ") article_args.update({'content_type': get_ct(group), 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) else: allow_read=True if not allow_read: return HttpResponseForbidden", "label": 0}, {"snippet_id": 67706, "code": ".html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): attr=Attribute.objects.all() context=super().get_context_data(**kwargs) context['categories']=attr.values_list(", "label": 0}, {"snippet_id": 49496, "code": ", ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return redirect('data_document',", "label": 0}, {"snippet_id": 42350, "code": " page.\") self.assertEqual(response.url, f'/datagroup/{dgpk}/', \"Should go to detail page.\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login", "label": 0}, {"snippet_id": 14904, "code": " def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app.route('/results')", "label": 0}, {"snippet_id": 40968, "code": " return a 200 status code') try: extracted_text=ExtractedText.objects.get(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains(resp, 'No Extracted Text exists for this Data Document", "label": 0}, {"snippet_id": 26542, "code": " process.wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True): \"\"\"Kill the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already dead. ", "label": 0}, {"snippet_id": 40960, "code": "/' % ddid) self.assertEqual(resp.status_code, 200, 'The page must return a 200 status code') try: extracted_text=ExtractedText.objects.get(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains", "label": 0}, {"snippet_id": 14441, "code": " it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if", "label": 0}, {"snippet_id": 245, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=", "label": 0}, {"snippet_id": 17999, "code": " home_url if url==flask.request.url: return home_url return url def send_verification_email(user): activation_link=get_activation_link(user) tmpl_context={ 'activation_link': activation_link, 'user': user ", "label": 1}, {"snippet_id": 64786, "code": " in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions, points_per_case, 'failed test case %d' % i) except BaseException as e:", "label": 1}, {"snippet_id": 33614, "code": " ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats", "label": 0}, {"snippet_id": 11279, "code": " ) context[\"registerFormSubmitButtonText\"]=_(\"Continue\") for msg in messages.get_messages(request): if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context", "label": 0}, {"snippet_id": 50568, "code": " release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only one build at a time can run with the given name per user per machine. While waiting for the lock, prints", "label": 0}, {"snippet_id": 18288, "code": " username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t", "label": 1}, {"snippet_id": 791, "code": " def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just", "label": 0}, {"snippet_id": 51065, "code": ".startswith(\"+\"): name=name[1:] self._disabled_options.discard(name) self._enabled_options.add(name) elif name.startswith(\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add", "label": 0}, {"snippet_id": 79955, "code": ".datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator', datarequest_dict", "label": 1}, {"snippet_id": 56804, "code": ": default_next=reverse('transaction_detail', kwargs={'transaction_code': concept.transaction.code}) concept.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return", "label": 0}, {"snippet_id": 68812, "code": ".stderr.decode()==' -Validating: \\x1b[32mOK\\x1b[0m\\n' * len(extensions) def test_labextensions(): \"\"\" Validate labextensions we want installed \"\"\" assert os.path.exists('/opt/tljh/user/bin/jupyter-labhub'", "label": 0}, {"snippet_id": 6437, "code": " logger.error('Email not verified') return False return True WRONG_GOOGLE_APPS_DOMAIN='WRONG_GOOGLE_APPS_DOMAIN' def oidc_callback(self): \"\"\" Exchange the auth code for actual credentials, then redirect", "label": 0}, {"snippet_id": 34816, "code": " return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now", "label": 1}, {"snippet_id": 29423, "code": "(url_for('gallery.show_posts')) callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('", "label": 1}, {"snippet_id": 61857, "code": " requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") return page, soup def validate_subdomain(url): \"\"\"Is", "label": 0}, {"snippet_id": 83698, "code": " at %s') self.message_template=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60) def create_message(self, request): \"\"\"Send a message to the user if there is another user editing this article", "label": 0}, {"snippet_id": 51903, "code": ".displayname) session[\"new_user\"]=True flash(\"Account created!\") return redirect(\"/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[", "label": 0}, {"snippet_id": 41354, "code": ": ''''Loop through all the ExtractedText objects and confirm that the new create_detail_formset method returns forms based on the correct models ''' for et in ExtractedText.objects.all(): dd=et.data_document", "label": 0}, {"snippet_id": 79635, "code": "\"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition,", "label": 0}, {"snippet_id": 58339, "code": ": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody\" }, onboarding.CREATE_THREAD:{ \"html\": \"<p>create_thread</p>\", \"description\": \"create_thread desc\", \"title\":", "label": 1}, {"snippet_id": 39344, "code": " blank=True) def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @classmethod def detail_fields(cls): return['extracted_text', 'raw_chem_name', 'raw_cas', 'raw_min_comp', 'raw_central_comp", "label": 0}, {"snippet_id": 35576, "code": "=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm", "label": 0}, {"snippet_id": 40619, "code": ") self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count", "label": 0}, {"snippet_id": 77712, "code": " data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras', None): for extra in pkg['extras", "label": 0}, {"snippet_id": 19323, "code": ": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR, traceback_str, driver_id=ray.DriverID(driver_id", "label": 0}, {"snippet_id": 16268, "code": ", tournament=t, round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t, initial=data) if formset.is_valid(): for form in formset: try: p=form.cleaned_data", "label": 0}, {"snippet_id": 55171, "code": ".path) \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): ", "label": 0}, {"snippet_id": 52891, "code": " if instance.attachment else None, 'file_link': instance.file_download_link if instance.attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel", "label": 0}, {"snippet_id": 6559, "code": " login_required, \\ current_user from. import auth from.. import db from..models import User from..email import send_email from.forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm", "label": 0}, {"snippet_id": 64982, "code": " test_case in enumerate(args.test_case): test_case=name +test_case try: expr=ast.parse(test_case, mode='eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not", "label": 0}, {"snippet_id": 36795, "code": "'id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds", "label": 0}, {"snippet_id": 29511, "code": "]) def signup(): form=RegistrationForm() if request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists=User.query.filter(User.username", "label": 1}, {"snippet_id": 15759, "code": "'html': render_template('run_success.html', commands=commands) }) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>", "label": 0}, {"snippet_id": 35485, "code": " bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc", "label": 0}, {"snippet_id": 41274, "code": ".objects.all(): for ex_child in et.fetch_extracted_records(): child_model=ex_child.__class__ self.assertEqual(et.pk, child_model.objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object", "label": 1}, {"snippet_id": 31110, "code": ".one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.'", "label": 0}, {"snippet_id": 71303, "code": " _set_redirect_uri(self): next_uri=self.GET.get('next') if next_uri is not None: self.session.data['_redirect_uri']=next_uri set_redirect_uri=_set_redirect_uri def _get_redirect_uri(self): try: return self.session", "label": 1}, {"snippet_id": 73905, "code": " positions_list_data(request, sort_by)) def position_detail_data(request, position): return{'baseVisibleText': InterfaceText, 'applicationsForm': ImportApplicationsForm, 'positionText': PositionText, 'userVisibleText':", "label": 1}, {"snippet_id": 62139, "code": " validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode=block\", ) def validate_no_sniff(page): return validate_security_header( page, \"X-Content-Type-Options", "label": 0}, {"snippet_id": 41710, "code": "(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def", "label": 0}, {"snippet_id": 74328, "code": "._render_access_form() def _get_access_form(self): form_kwargs=self.get_form_kwargs() form_kwargs.update({\"instance\": self.get_object()}) return self.access_form_class(**form_kwargs) def _render_access_form", "label": 0}, {"snippet_id": 40172, "code": ".validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info import CommonInfo from.data_document import DataDocument class Script(CommonInfo): TYPE_CHOICES=(('DL', 'download'), ", "label": 0}, {"snippet_id": 55773, "code": ": \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self): \t\tf=open(self.path,\"rU\") \t\tr=f.read() \t\tf.close() \t\treturn r \tdef readlines(self): \t\tf=open(self.path", "label": 0}, {"snippet_id": 53754, "code": " as render_texts from cauldron.session.buffering import RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management class for each step in a project", "label": 0}, {"snippet_id": 39901, "code": " import CommonInfo from django.core.exceptions import ValidationError from django.utils.translation import ugettext_lazy as _ from dashboard.models import ExtractedText class QANotes(CommonInfo): extracted_text", "label": 1}, {"snippet_id": 64771, "code": "=1: print(repr(e), file=sys.stderr) dock_points(deductions, points, 'unable to execute function') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals", "label": 1}, {"snippet_id": 26609, "code": " ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"", "label": 0}, {"snippet_id": 14767, "code": " value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self): return self.user_id def db_init", "label": 0}, {"snippet_id": 63602, "code": " data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND", "label": 1}, {"snippet_id": 41692, "code": " ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup", "label": 0}, {"snippet_id": 9932, "code": "\"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 54677, "code": ".assignments) \t\tself.book_editions=defaultdict(list) \t\tfor assignment in self.assignments: \t\t\tself.book_editions[assignment.book_edition].append(assignment) \t\t \t\tfor assignment in self.assignments: \t\t\tassert", "label": 1}, {"snippet_id": 24122, "code": " ray import cloudpickle as pickle from ray import profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has", "label": 1}, {"snippet_id": 51505, "code": "/bin/sh\", \"-c\", \"command -v \"+program], shell=False, stdout=open(os.devnull), stderr=open(os.devnull))==0 program_exists=windows_program_exists if platform.platform().startswith(\"Windows\") else other_program_exists", "label": 1}, {"snippet_id": 57192, "code": ".delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required def transaction_detail(request, *args", "label": 0}, {"snippet_id": 37937, "code": ", child=get_extracted_models(group_type) extracted=hasattr(document, 'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude): formset_fields", "label": 0}, {"snippet_id": 9031, "code": " import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from", "label": 0}, {"snippet_id": 29099, "code": "[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object", "label": 0}, {"snippet_id": 23281, "code": "\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with", "label": 0}, {"snippet_id": 72370, "code": " cluster_id} for daemon_id in GaneshaConf.instance(cluster_id).list_daemons()]) return result @UiApiController('/nfs-ganesha') class NFSGaneshaUi(BaseController): @Endpoint('GET', '/cephx/clients') def", "label": 0}, {"snippet_id": 58642, "code": "=instructor.user).exists(): update_onboarding_step(onboarding.STEP_5, instructor.user_id) if Invite.objects.filter(instructor=instructor).exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id)", "label": 1}, {"snippet_id": 30363, "code": "=make_response(json.dumps('Current user is already connected.'), 200) response.headers['Content-Type']='application/json' return response login_session['access_token']=credentials.access_token login_session", "label": 0}, {"snippet_id": 49337, "code": "): tag_form.save() return redirect(referer, pk=pk) @login_required() def data_document_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): doc=get_object_or_404(DataDocument", "label": 0}, {"snippet_id": 46352, "code": ".values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"]", "label": 0}, {"snippet_id": 77737, "code": " in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg:", "label": 0}, {"snippet_id": 12886, "code": "%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order", "label": 0}, {"snippet_id": 43763, "code": " 'The qa_checked attribute should be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no ExtractedText, the user can add one in the browser 1. ''' for doc_id in[155324", "label": 0}, {"snippet_id": 4972, "code": ".client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection", "label": 0}, {"snippet_id": 70640, "code": " True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(", "label": 0}, {"snippet_id": 31325, "code": ".pipeline.social_auth.associate_user', 'social.pipeline.social_auth.load_extra_data', 'social.pipeline.user.user_details', ) WEBHOOK_SECRET=os.environ.get('WEBHOOK_SECRET') SOCIAL_AUTH_GITHUB_KEY=os.environ", "label": 0}, {"snippet_id": 10062, "code": ") Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account", "label": 0}, {"snippet_id": 21816, "code": " import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to", "label": 0}, {"snippet_id": 84441, "code": ") @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw", "label": 0}, {"snippet_id": 31382, "code": " ) MIDDLEWARE_CLASSES=[ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware", "label": 0}, {"snippet_id": 20429, "code": ".update_local_scheduler_map() if self.autoscaler: self.autoscaler.update() self._maybe_flush_gcs() self.process_messages() time.sleep(ray._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser", "label": 0}, {"snippet_id": 68885, "code": "//gpgtools.org mQINBFObJLYBEADkFW8HMjsoYRJQ4nCYC/6Eh0yLWHWfCh+/9ZSIj4w/pOe2V6V+ W6DHY3kK3a+2bxrax9EqKe7uxkSKf95gfns+I9+R+RJfRpb1qvljURr54y35IZgs fMG22Np+TmM2RLgdFCZa18h0+RbH9i0b+ZrB9XPZmLb/h9ou7SowGqQ3wwOtT3Vy", "label": 0}, {"snippet_id": 79277, "code": " organization_id}) except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as", "label": 0}, {"snippet_id": 18195, "code": " from argon2 import PasswordHasher from pymongo import MongoClient import random import tornado.httpserver import tornado.ioloop import tornado.options import tornado.web import pymongo from tornado.options", "label": 1}, {"snippet_id": 68683, "code": " hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url", "label": 0}, {"snippet_id": 59885, "code": ".text_factory=lambda x: str(x, \"utf-8\", \"replace\") for name, num_args, func in self.sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True)", "label": 0}, {"snippet_id": 41161, "code": "=Product.objects.get(upc='stub_9101') self.assertContains(response, f'product/%s' % new_product.id) def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when", "label": 0}, {"snippet_id": 51172, "code": " step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs) kwargs[\"default\"]=False kwargs[\"action\"]=\"store_true\" self.add_option(*args, **kwargs) def add_option(self, *args, ", "label": 0}, {"snippet_id": 7281, "code": " def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False column_list=['office_name', 'sb", "label": 1}, {"snippet_id": 40362, "code": ".extracted_text import ExtractedText es=self if QAGroup.objects.filter(extraction_script=es).count()==1: return QAGroup.objects.get(extraction_script=es) elif QAGroup.objects.filter(extraction_script=es", "label": 0}, {"snippet_id": 49151, "code": ": extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field", "label": 0}, {"snippet_id": 28335, "code": " Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done", "label": 0}, {"snippet_id": 3143, "code": " urlencode except ImportError: from urllib import urlencode from django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django", "label": 0}, {"snippet_id": 77395, "code": "]) return layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url", "label": 0}, {"snippet_id": 68315, "code": ": from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append(count) return data def thirty_day_labels", "label": 0}, {"snippet_id": 22130, "code": " If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push", "label": 0}, {"snippet_id": 79412, "code": "'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), 'site_url': config.get('ckan.site_url') } subject=base.render_jinja2('emails/subjects/{0}.txt'.format(action_type", "label": 0}, {"snippet_id": 3851, "code": " status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit", "label": 0}, {"snippet_id": 62518, "code": " eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common.api.testing import EduidAPITestCase from eduid_common.authn.cache import OutstandingQueriesCache from eduid_common.authn", "label": 0}, {"snippet_id": 7564, "code": " import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService from", "label": 0}, {"snippet_id": 60784, "code": " or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for", "label": 0}, {"snippet_id": 27276, "code": ".LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config=None, include_java=False, java_worker_options=None, _internal_config=None", "label": 0}, {"snippet_id": 25251, "code": ".GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver", "label": 0}, {"snippet_id": 81557, "code": " old_event_cat),('date_end', '=', str(new_end_date))]) if existing_event: return False else: return True def _create_new_event(self, old_repeating_event, new_start_date, new_end_date): _logger.info('Start", "label": 0}, {"snippet_id": 26907, "code": " shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet", "label": 0}, {"snippet_id": 76784, "code": ") return tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row", "label": 0}, {"snippet_id": 72121, "code": "'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type", "label": 0}, {"snippet_id": 26047, "code": ".redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self._ray_params.object_store_memory", "label": 0}, {"snippet_id": 77201, "code": "%(self.layer_id, self.version) return base_url def GetTileArgs(self, x, y, z): \"\"\"Prepares the URL for fetching tiles.\"\"\" tile_args=_TILE_ARGS %( self.tile_arg_names[\"x\"], x, self.tile_arg_names[\"y\"], y", "label": 0}, {"snippet_id": 38851, "code": ") url=models.CharField(max_length=150, blank=True) tracker=FieldTracker() @property def type(self): return str(self.group_type.code) @property def is_composition(self): return self.type=='CO' @property", "label": 0}, {"snippet_id": 8181, "code": "=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>',", "label": 0}, {"snippet_id": 78202, "code": ", help='Only demote usernames starting with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users", "label": 0}, {"snippet_id": 77816, "code": " with this prefix', type=str, default='publisher-') def get_organizations(self): return toolkit.get_action('organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users", "label": 0}, {"snippet_id": 21590, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception if the process was already", "label": 0}, {"snippet_id": 44109, "code": ".browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), detail_url, \"User should go back to detail view when clicking cancel\") self.browser.find_element_by_name('submit').click", "label": 0}, {"snippet_id": 61612, "code": "(page), safe_onion_address=validate_onion_address_not_in_href(soup), no_cdn=validate_not_using_cdn(page), http_no_redirect=validate_no_redirects(no_redirects_page), expected_encoding=validate_encoding(page", "label": 1}, {"snippet_id": 20715, "code": " head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client( ray_params.redis_address, ray_params.redis_password) ray_params.include_java", "label": 0}, {"snippet_id": 34810, "code": "['sid'])['products_n'] or 0) return stats def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv", "label": 1}, {"snippet_id": 61847, "code": " page=requests.get(url, allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects=allow_redirects", "label": 0}, {"snippet_id": 21297, "code": " was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give", "label": 0}, {"snippet_id": 6735, "code": "=user.generate_confirmation_token() send_email(user.email, 'Confirm Your Account', 'auth/email/confirm', user=user, token=token) flash('Check your inbox! A confirmation email has been sent.') return redirect", "label": 0}, {"snippet_id": 49383, "code": " filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk, template_name=('data_document/' ", "label": 0}, {"snippet_id": 29219, "code": " app.config.from_object(app_config[config]) app.config.from_envvar('BENWAONLINE_SETTINGS', silent=True) app.config.from_object('secrets') db.init_app(app) migrate=Migrate(app, db) oauth.init_app(app) login_manager", "label": 0}, {"snippet_id": 69855, "code": " from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure", "label": 0}, {"snippet_id": 38066, "code": "(CommonInfo): KIND_CHOICES=( ('UN', 'unknown'), ('FO', 'formulations'), ('AR', 'articles'), ('OC', 'occupational')) kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat", "label": 0}, {"snippet_id": 56282, "code": "/dynamic.link/link=http://pachatary.com/e/AsdE43E4&other=param' '&st=a&sd=d&si=%2Fmedia%2Furl.small') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectExperienceTestCase.ScenarioMaker(", "label": 0}, {"snippet_id": 28260, "code": "(x).__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method", "label": 0}, {"snippet_id": 47862, "code": " response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET", "label": 0}, {"snippet_id": 59452, "code": ")), ConfigOption(\"force_https_urls\", False, \"\"\" Force URLs in API output to always use https:// protocol \"\"\".strip()), ) DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS } async", "label": 0}, {"snippet_id": 6001, "code": " self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def set_cookie_id_token(self, id_token): \"\"\"", "label": 0}, {"snippet_id": 8885, "code": "': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states", "label": 0}, {"snippet_id": 46335, "code": "'uploaded successfully.') context['extract_form']=include_extract_form(dg) if request.method=='POST' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id", "label": 0}, {"snippet_id": 74222, "code": "=\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner() try: passphrase=self.request.POST[\"key", "label": 0}, {"snippet_id": 12706, "code": "('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get('/user_api/v1/account", "label": 0}, {"snippet_id": 42147, "code": " response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('1 extracted', response, 'Data Group should contain a count of 1 total extracted documents') def", "label": 0}, {"snippet_id": 16985, "code": " return render(request, 'rounds/seeded_games.html', context) @permission_required('tournament.add_game') def create_games(request, tournament_id, round_num): \"\"\"Provide a form to create the games for a round", "label": 0}, {"snippet_id": 10255, "code": " released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth", "label": 0}, {"snippet_id": 33688, "code": " in[b'ball bearings', b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn(hnp, response.content) def test_download_pucs_button(self): response=self.client.get('/get_data/') self.assertEqual", "label": 1}, {"snippet_id": 5381, "code": "'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the", "label": 0}, {"snippet_id": 53186, "code": "(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().how_soon, None) data={ 'first_name': 'TestFirstName', 'last_name", "label": 0}, {"snippet_id": 65135, "code": " args.points, 'failed to parse code') break if not tree: output_json(args.points, deductions) return valid=False if type(tree)==ast.Module and len(tree.body)==1: fdef=tree.body[0] if type(fdef) in[ast.FunctionDef", "label": 0}, {"snippet_id": 60586, "code": ">\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash(request, original_response): if original_response.status==404 and request.path.endswith(\"/\"): path", "label": 0}, {"snippet_id": 78115, "code": " for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']", "label": 0}, {"snippet_id": 20406, "code": " the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe", "label": 0}, {"snippet_id": 17655, "code": ".render_template('waiting.html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask", "label": 0}, {"snippet_id": 31537, "code": " home_page, projects, project, project_clone urlpatterns=patterns( '', url(r'^$', home_page, name='home_page'), url(r'^draw/?$', home_page, name='home_page'), url(r'^account/?$', home_page, name='account", "label": 1}, {"snippet_id": 71982, "code": " import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import CephX", "label": 1}, {"snippet_id": 49975, "code": " session['currentFile']=name if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] savepath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(savepath", "label": 0}, {"snippet_id": 74811, "code": "'POST': post_data=request.POST.copy() post_data['netid']=request.user.username person_form=PersonForm(post_data, instance=candidate.person) candidate_form=CandidateForm(post_data, instance=candidate) if", "label": 0}, {"snippet_id": 9692, "code": " third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to", "label": 0}, {"snippet_id": 72461, "code": "): return{'paths':[]} @Endpoint('GET', '/cephfs/filesystems') def filesystems(self): return CephFS.list_filesystems() @Endpoint('GET', '/rgw/buckets') def buckets(self, user_id=None): return RgwClient.instance", "label": 0}, {"snippet_id": 29917, "code": " BASE_DIR=BASE SQLALCHEMY_MIGRATE_REPO=os.path.join(BASE_DIR, 'db_repository') SQLALCHEMY_TRACK_MODIFICATIONS=False UPLOADED_IMAGES_DEST='/static/' UPLOADED_BENWA_DIR=os.path.join(BASE, 'static', 'tempbenwas')", "label": 1}, {"snippet_id": 2843, "code": "(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth.logout(request) return HttpResponseRedirect(logout_url)", "label": 0}, {"snippet_id": 10453, "code": " from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx", "label": 0}, {"snippet_id": 82876, "code": ") return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass to model a component crash.", "label": 0}, {"snippet_id": 14786, "code": " def db_init(): db.flushdb() auth_init() auth_add_user('gleb.kondratenko@skybonds.com', 'pwd') def auth_init(): db.set('user:ids', '0') def auth_add_user(email, password): user_id=db.incr('user:ids') db", "label": 0}, {"snippet_id": 84568, "code": " template_name='recentchanges.html', template_dir='wiki', extra_context=None, *args, **kw): if request.method=='GET': if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug})", "label": 0}, {"snippet_id": 84778, "code": " and returns it to the caller \"\"\" rv=do_wl_markdown(request.POST['body'], 'bleachit') return HttpResponse(rv, content_type='text/html') def article_diff(request): \"\"\"This is a AJAX function that diffs the", "label": 0}, {"snippet_id": 10123, "code": " This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration", "label": 0}, {"snippet_id": 74284, "code": ": if re.search(r\"^/[\\W/-]*\", request.GET[\"next\"]): next_url=request.GET[\"next\"] return next_url def dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if(", "label": 1}, {"snippet_id": 12141, "code": ".PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'account_activation_messages': account_activation_messages, 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc", "label": 0}, {"snippet_id": 34464, "code": "//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH", "label": 0}, {"snippet_id": 14763, "code": " app.jinja_env.filters['json_pretty']=lambda value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def", "label": 0}, {"snippet_id": 6587, "code": " current_user.ping() if not current_user.verify_auth_token(session['auth_token']): logout_user() flash('Your session has expired.') return redirect(url_for('auth.login')) if not current_user.confirmed ", "label": 0}, {"snippet_id": 42962, "code": " extraction_script_id=scr.id).filter(qa_group=None).first().pk response=self.client.get(f'/qa/extractedtext/{pk}/') self.assertGreater(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def", "label": 0}, {"snippet_id": 17804, "code": "(user.password_hash.hash)).decode() if pw_hash !=sha1_password_hash_hash: return flask.abort(404) form=forms.PasswordResetForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user", "label": 0}, {"snippet_id": 4982, "code": "://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/", "label": 0}, {"snippet_id": 30611, "code": "(grudget_id, grudge_id): grudge=session.query(Grudge).filter_by(id=grudge_id).one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session.query(Grudget", "label": 0}, {"snippet_id": 12733, "code": " GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks", "label": 0}, {"snippet_id": 10565, "code": " @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to", "label": 0}, {"snippet_id": 25297, "code": " process before returning. \"\"\" subscribe_clients=[self.primary_subscribe_client] for subscribe_client in subscribe_clients: for _ in range(max_messages): message=subscribe_client.get_message() if message", "label": 0}, {"snippet_id": 68090, "code": "=get_object_or_404(Hunt, id=pk) hunt.delete() return redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event", "label": 0}, {"snippet_id": 14086, "code": "\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline", "label": 0}, {"snippet_id": 5552, "code": "=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" ", "label": 0}, {"snippet_id": 49358, "code": ".data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request,", "label": 0}, {"snippet_id": 1382, "code": " view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath", "label": 1}, {"snippet_id": 18230, "code": " that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user", "label": 1}, {"snippet_id": 50388, "code": " dependencies import read_dependencies_from_filename import os import platform import threading import sys import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS", "label": 0}, {"snippet_id": 47694, "code": "'extracted_text__data_document')).\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) | Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull", "label": 0}, {"snippet_id": 3109, "code": " HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout helper view\"\"\" http_method_names=['get', 'post'] @property def redirect_url(self): \"\"\"Return the logout url defined in settings.\"\"\" return", "label": 0}, {"snippet_id": 77747, "code": "=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes' in pkg: notes=pkg['notes'] or pkg['title'] if 'update_frequency' in pkg:", "label": 0}, {"snippet_id": 65698, "code": "() tab_title=self.create_tab_title_from_filepath(self.filechooser_creation_dialog.get_current_name()) self.start_database_creation_routine(tab_title) def copy_database_file(self): stock_database=Gio.File", "label": 0}, {"snippet_id": 67068, "code": "]=vt.getFileReport(filehash) context['vt_behavior']=vt.getFileBehavior(filehash) tm=ThreatMiner() context['tm_meta']=tm.getMetaFromSample(filehash) context['tm_http']=tm.getHttpFromSample(filehash) context", "label": 0}, {"snippet_id": 61462, "code": "(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug", "label": 0}, {"snippet_id": 84450, "code": " group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='POST': revision=int(request.POST['revision']) article_args=", "label": 0}, {"snippet_id": 7023, "code": "(): if current_user.verify_password(form.password.data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email", "label": 0}, {"snippet_id": 62117, "code": " False else: return True def validate_csp(page): if 'Content-Security-Policy' not in page.headers: return False elif \"default-src 'self'\" not in page.headers['Content-Security-Policy']: return False else:", "label": 0}, {"snippet_id": 83488, "code": ".is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision( self.old_content, self.old_title, self", "label": 0}, {"snippet_id": 79886, "code": " this data request :type accepted_dataset_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) ", "label": 0}, {"snippet_id": 45909, "code": " login_required from django.shortcuts import render, redirect, get_object_or_404 from django.http import HttpResponse from django.core.paginator import Paginator from dashboard.models import * from dashboard", "label": 0}, {"snippet_id": 26468, "code": "\" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if", "label": 0}, {"snippet_id": 32787, "code": "'command not found') class RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ''' def __init__", "label": 0}, {"snippet_id": 21875, "code": " port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure", "label": 0}, {"snippet_id": 29710, "code": "'/gallery/benwa/add', methods=['GET', 'POST']) @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename) f.save(join( current_app", "label": 1}, {"snippet_id": 2692, "code": ".session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return", "label": 0}, {"snippet_id": 21, "code": ".http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import", "label": 1}, {"snippet_id": 82493, "code": "): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component", "label": 0}, {"snippet_id": 62835, "code": " redirected to the idp. :param url: the url of the desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn:", "label": 0}, {"snippet_id": 62343, "code": ".eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info) session['eduPersonAssurance']=loa session.persist() relay_state=request.form.get('RelayState', '/", "label": 1}, {"snippet_id": 62361, "code": ", '/') current_app.logger.debug('Redirecting to the RelayState: ' +relay_state) response=redirect(location=relay_state) session.set_cookie(response) current_app.logger.info('Redirecting user{!r} to{!r}", "label": 1}, {"snippet_id": 13292, "code": " import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps", "label": 0}, {"snippet_id": 66439, "code": ".OK: self.logging_manager.log_debug(\"File selected: \" +keyfile_chooser_dialog.get_filename()) keyfile_chooser_dialog.close() keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button", "label": 0}, {"snippet_id": 44062, "code": ".browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click(", "label": 0}, {"snippet_id": 81844, "code": "})) return render(request, 'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render", "label": 0}, {"snippet_id": 79060, "code": ") data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest", "label": 0}, {"snippet_id": 7830, "code": "'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK'", "label": 0}, {"snippet_id": 50958, "code": ".buildstep) if name is not None: f.buildstep.name=name f.buildstep.set_optional(optional) f.buildstep.set_default(default) return f return decorator_func def get_optional_steps(self): return(step.name for step", "label": 0}, {"snippet_id": 45163, "code": " .annotate(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title", "label": 0}, {"snippet_id": 63633, "code": "=self.add_outstanding_query(came_from) with self.app.test_request_context('/saml2-ls', method='POST', data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing", "label": 0}, {"snippet_id": 13244, "code": " django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import", "label": 0}, {"snippet_id": 60737, "code": "\"\"\" def __init__(self, pid, comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self", "label": 0}, {"snippet_id": 4979, "code": " self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with", "label": 0}, {"snippet_id": 77396, "code": " layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url,", "label": 0}, {"snippet_id": 13804, "code": " view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context", "label": 0}, {"snippet_id": 1254, "code": "\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len", "label": 0}, {"snippet_id": 52462, "code": " user_id=session.get(\"user_id\") results={\"userId\": user_id, \"pOwnerId\": project_object.user_id, \"pTitle\": project_object.title, \"pNotes\": project_object.notes, \"pPhase\": project_object.phase_code, \"pUpvotes\"", "label": 0}, {"snippet_id": 40757, "code": " dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase)", "label": 0}, {"snippet_id": 45139, "code": "=product_with_puc_count_by_month() return render(request, 'dashboard/index.html', stats) def datadocument_count_by_date(): select_upload_date={\"upload_date\": \"\"\"date(dashboard_datadocument.created_at)\"\"\"} document_stats={", "label": 0}, {"snippet_id": 75231, "code": "=person_form.save() committee_member=committee_member_form.save(commit=False) committee_member.person=person committee_member.save() candidate.committee_members.add(committee_member) return HttpResponseRedirect", "label": 0}, {"snippet_id": 48331, "code": ".data_groups=dgs return render(request, template_name,{'data_sources': data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' 'category_assignment.html')): ", "label": 0}, {"snippet_id": 14333, "code": "'lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request", "label": 0}, {"snippet_id": 24468, "code": ".redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the", "label": 1}, {"snippet_id": 26487, "code": ".read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler", "label": 0}, {"snippet_id": 83160, "code": " list of queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger", "label": 0}, {"snippet_id": 45815, "code": "=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm", "label": 0}, {"snippet_id": 3626, "code": ".\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 30337, "code": ") print \"Token's client ID does not match app's.\" response.headers['Content-Type']='application/json' return response stored_access_token=login_session.get('access_token') stored_gplus_id=login_session", "label": 0}, {"snippet_id": 59744, "code": " return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query", "label": 0}, {"snippet_id": 2688, "code": ".GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self", "label": 0}, {"snippet_id": 9954, "code": ", get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce", "label": 0}, {"snippet_id": 73633, "code": "'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error", "label": 0}, {"snippet_id": 69225, "code": "): \"\"\" Install JupyterHub into our conda environment if needed. We install all python packages from PyPI as much as possible in the hub environment. A lot of spawners & authenticators do not have conda", "label": 0}, {"snippet_id": 10188, "code": ".html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\"", "label": 0}, {"snippet_id": 12558, "code": " dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, } if third_party_auth.is_enabled(): if not enterprise_customer_for_request", "label": 0}, {"snippet_id": 74527, "code": " logger=logging.getLogger('etd') def login(request): if request.user.is_authenticated(): next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error('login", "label": 1}, {"snippet_id": 73468, "code": "{'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower", "label": 0}, {"snippet_id": 6266, "code": "': json.dumps(state), } flow=self.flow_for_request() auth_url='{url}&{extra_params}'.format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return", "label": 0}, {"snippet_id": 55357, "code": "): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode is None", "label": 0}, {"snippet_id": 11039, "code": "=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else", "label": 0}, {"snippet_id": 38130, "code": ".ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text", "label": 0}, {"snippet_id": 54708, "code": ")+\" for student \"+assignment.student \t\tself.problems=[] \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tprob_id=(assignment.book_edition,assignment.chapter,problem.number", "label": 1}, {"snippet_id": 56118, "code": " dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: link=dynamic_link.format('{}/'.format(settings.PUBLIC_DOMAIN)) else: link='{}/'.format(settings.APP_DEEPLINK_DOMAIN) response=HttpResponse('", "label": 1}, {"snippet_id": 67161, "code": "() if count > 0: context['exs_count']=count return context def getpcap(request, pk): response=HttpResponse(VT().getPcap(pk), content_type=\"application/vnd.tcpdump.pcap\") response[\"Content-Disposition\"]", "label": 0}, {"snippet_id": 8551, "code": " commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user", "label": 0}, {"snippet_id": 66713, "code": "(\"\") def show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context=unlock_failed_box.get_style_context() context.add_class('NotifyRevealer') unlock_failed_revealer", "label": 0}, {"snippet_id": 8230, "code": "=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The", "label": 0}, {"snippet_id": 25717, "code": " monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params", "label": 0}, {"snippet_id": 48927, "code": " if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation", "label": 0}, {"snippet_id": 54885, "code": ",chapter,number,code): \t\t\tself.student=student \t\t\tself.book_edition=book_edition \t\t\tself.chapter=chapter \t\t\tself.number=number \t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict", "label": 0}, {"snippet_id": 81915, "code": "() object.save() return link_redirect(request, pk) return redirect('home-view') class URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object", "label": 1}, {"snippet_id": 79064, "code": ".accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id", "label": 0}, {"snippet_id": 66322, "code": " position, eventbutton): if widget.get_visibility(): widget.set_invisible_char(\"\u25cf\") widget.set_visibility(False) else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self", "label": 0}, {"snippet_id": 807, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"", "label": 0}, {"snippet_id": 48088, "code": "=get_object_or_404(ExtractedHabitsAndPractices, pk=pk,) form=HabitsPUCForm() if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) if", "label": 0}, {"snippet_id": 21553, "code": " check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive", "label": 0}, {"snippet_id": 76099, "code": "), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting %s', self", "label": 0}, {"snippet_id": 65345, "code": ", self.create_filechooser, None) self.set_titlebar(self.headerbar) def set_headerbar(self): self.set_titlebar(self.headerbar) def get_headerbar(self): return self.headerbar def custom_css(self): screen", "label": 0}, {"snippet_id": 48245, "code": ", **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index", "label": 1}, {"snippet_id": 53953, "code": "\" Reads the current state of the print buffer(if it exists) and returns a body-ready dom object of those contents without adding them to the actual report body. This is useful for creating intermediate", "label": 0}, {"snippet_id": 13959, "code": "{ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string", "label": 0}, {"snippet_id": 53488, "code": ": str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return True while len(frames) > 1 and is_cauldron_code", "label": 0}, {"snippet_id": 4495, "code": ") paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects", "label": 0}, {"snippet_id": 27076, "code": " attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory where the", "label": 0}, {"snippet_id": 12040, "code": ".query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return", "label": 0}, {"snippet_id": 62978, "code": "() self.assertEquals(resp.status_code, 302) self.assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session.", "label": 0}, {"snippet_id": 17035, "code": " expected_games < 1: expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None", "label": 0}, {"snippet_id": 62637, "code": "('test.localhost', config) def add_outstanding_query(self, came_from): \"\"\" Add a SAML2 authentication query to the queries cache. To be used before accessing the assertion consumer service. :param came_from", "label": 0}, {"snippet_id": 44659, "code": "'Test Product Surveyed', prevalence='Continuous') return dotdict({'user':user, 'superuser':superuser, 'ds':ds, 'script':script, 'exscript':exscript, 'dg':dg, 'doc':doc, 'p':p, 'puc':puc, 'extext':extext", "label": 0}, {"snippet_id": 4790, "code": "'test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user", "label": 0}, {"snippet_id": 36126, "code": " is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self", "label": 0}, {"snippet_id": 50245, "code": "\"]) def loginButton(): email=request.form[\"email\"] password=request.form[\"password\"] user=query_user(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl", "label": 0}, {"snippet_id": 10514, "code": " openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from", "label": 0}, {"snippet_id": 77566, "code": " schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session", "label": 0}, {"snippet_id": 302, "code": " f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static", "label": 0}, {"snippet_id": 61019, "code": " class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh", "label": 0}, {"snippet_id": 62725, "code": " added query, and send both to the assertion consumer service, so that the user is logged in(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with", "label": 0}, {"snippet_id": 33944, "code": "=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 23345, "code": ") np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise", "label": 0}, {"snippet_id": 78279, "code": ".startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required", "label": 0}, {"snippet_id": 47965, "code": " get_object_or_404, HttpResponseRedirect) from django.utils.translation import ugettext_lazy as _ from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.forms", "label": 1}, {"snippet_id": 23988, "code": " for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original", "label": 0}, {"snippet_id": 39058, "code": " boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a \"falsy\" property. If the zip file", "label": 0}, {"snippet_id": 25499, "code": "( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\")", "label": 0}, {"snippet_id": 51674, "code": "'endpoint': endpoint, 'params': params, 'method': method } ] } } script='' if method=='GET': script=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={ 'class", "label": 0}, {"snippet_id": 58243, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.INVITE_SOMEBODY, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.PREVIEW_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.NEXT_STEPS, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 1}, {"snippet_id": 63747, "code": "-relay-state', }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response", "label": 0}, {"snippet_id": 84390, "code": " group_qs=None, article_qs=ALL_ARTICLES, template_name='history.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'title", "label": 0}, {"snippet_id": 83730, "code": "% self.created_at) def is_mine(self, request): return self.user_ip==get_real_ip(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles", "label": 0}, {"snippet_id": 56938, "code": " filter_data=None is_filtered=False def get(self, request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop(", "label": 0}, {"snippet_id": 59510, "code": " self.files=[MEMORY] elif memory: self.files=(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data self._metadata=metadata or{} self.sqlite_functions=[] self.sqlite_extensions", "label": 0}, {"snippet_id": 37198, "code": "'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['extract_file'].widget.attrs.update", "label": 0}, {"snippet_id": 36140, "code": ": return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets", "label": 0}, {"snippet_id": 61195, "code": " of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash", "label": 0}, {"snippet_id": 77496, "code": "\"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information for target url '%s'\", target_url) layers_by_name=_LayersFromServerVars(target_url) for layer_name in layers_by_name", "label": 0}, {"snippet_id": 63782, "code": " Blueprint from eduid_common.api.decorators import MarshalWith from eduid_common.authn.utils import get_location from eduid_common.authn.loa import get_loa from eduid_common.authn.eduid_saml2 import get_authn_request", "label": 0}, {"snippet_id": 10300, "code": "'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled", "label": 0}, {"snippet_id": 78123, "code": "=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']: data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg:", "label": 0}, {"snippet_id": 29224, "code": "'BENWAONLINE_SETTINGS', silent=True) app.config.from_object('secrets') db.init_app(app) migrate=Migrate(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): return", "label": 0}, {"snippet_id": 25591, "code": " monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc", "label": 1}, {"snippet_id": 79314, "code": "'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time", "label": 0}, {"snippet_id": 52900, "code": ".attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update(group_channel, data): Group(group_channel).send({", "label": 0}, {"snippet_id": 74255, "code": ".warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message) return False @property def access_form_valid(self): form=self._get_access_form() if form.is_valid(", "label": 0}, {"snippet_id": 25848, "code": " @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma", "label": 0}, {"snippet_id": 23642, "code": "\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler", "label": 1}, {"snippet_id": 34140, "code": "\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div", "label": 0}, {"snippet_id": 51428, "code": " ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message self.exitcode", "label": 0}, {"snippet_id": 10763, "code": " settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 38000, "code": " child) return(ExtractedTextForm, FunctionalUseFormSet) def three(): HnPFormSet=make_formset(parent, child) return(ExtractedTextForm, HnPFormSet) def four(): ListPresenceFormSet=make_formset(parent, child", "label": 0}, {"snippet_id": 74608, "code": "=request.user.username) except Person.DoesNotExist: if 'orcid' in request.POST: try: person_instance=Person.objects.get(orcid=request.POST['orcid']) except Person.DoesNotExist: pass return person_instance", "label": 0}, {"snippet_id": 57197, "code": ".POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required def transaction_detail(request, *args, **kwargs): extra_context={", "label": 0}, {"snippet_id": 73324, "code": " views.index, name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views", "label": 0}, {"snippet_id": 19054, "code": ":dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"\" def get_redirect_url(self): \"\"\"Find proper next hop.", "label": 1}, {"snippet_id": 75612, "code": " r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0: return[{'text': 'Previously Used', 'children", "label": 0}, {"snippet_id": 23002, "code": " id_bytes def format_error_message(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function. This method takes a traceback from an exception and makes", "label": 0}, {"snippet_id": 36334, "code": ".assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views", "label": 0}, {"snippet_id": 22078, "code": " plasma_directory. include_webui: Boolean flag indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format", "label": 0}, {"snippet_id": 25225, "code": " xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils", "label": 0}, {"snippet_id": 48285, "code": "(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for", "label": 0}, {"snippet_id": 81395, "code": "._handle_daily_event_repetition(repeating_event) if repeating_event.fit_repetition=='weekly': self._handle_weekly_event_repetition(repeating_event) if repeating_event.fit_repetition=='monthly': self._handle_montly_event_repetition", "label": 0}, {"snippet_id": 56094, "code": "&{}'.format(link, preview_encoded) else: link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, PROFILE_DEEPLINK_PATH, username) response=HttpResponse('', status=302) response['Location']=link return response", "label": 0}, {"snippet_id": 9748, "code": " if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class", "label": 0}, {"snippet_id": 42141, "code": " documents') self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('1 extracted', response", "label": 0}, {"snippet_id": 80844, "code": ".lock_piezo_etalon_action.setChecked(not checked) self.matisse.set_piezo_etalon_lock(checked) self.lock_piezo_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_fast_piezo_lock(self, checked)", "label": 0}, {"snippet_id": 55117, "code": "(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime", "label": 0}, {"snippet_id": 44242, "code": "=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self", "label": 0}, {"snippet_id": 57016, "code": " \\ .prefetch_related('value__currency') \\ .order_by('-id') return self.queryset def get_available_concepts(employee, transaction): \"\"\" Get a list of the available concepts that can be added to the given", "label": 0}, {"snippet_id": 65728, "code": ".FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self.database_manager=DatabaseManager( self.filechooser_creation_dialog.get_filename()", "label": 0}, {"snippet_id": 63555, "code": ", data={'csrf': csrft}): session['_csrft_']=csrft response2=self.app.dispatch_request() self.assertEqual(response2.status, '200 OK') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService", "label": 0}, {"snippet_id": 51917, "code": " already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login(): \"\"\"Load login form.\"\"\" return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]", "label": 0}, {"snippet_id": 5475, "code": ".save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password", "label": 0}, {"snippet_id": 8133, "code": " enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"", "label": 0}, {"snippet_id": 24401, "code": " \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine which log files to", "label": 1}, {"snippet_id": 69775, "code": " install' ) args=argparser.parse_args() pm=setup_plugins(args.plugin) ensure_config_yaml(pm) ensure_admins(args.admin) ensure_usergroups() ensure_user_environment(args.user_requirements_txt_url) logger", "label": 0}, {"snippet_id": 64586, "code": "'ConnectionRefusedError', 'ConnectionResetError', 'delattr', 'DeprecationWarning', 'dict', 'dir', 'divmod', '__doc__', 'Ellipsis', 'enumerate', 'EnvironmentError', 'EOFError', 'Exception', 'False', 'FileExistsError", "label": 0}, {"snippet_id": 6572, "code": " LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm @auth.before_app_request def before_request(): if current_user.is_authenticated: current_user", "label": 0}, {"snippet_id": 48849, "code": "'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid():", "label": 0}, {"snippet_id": 7119, "code": " software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions", "label": 0}, {"snippet_id": 25091, "code": " xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex, task_info", "label": 0}, {"snippet_id": 25813, "code": "): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address @property def plasma_store_socket_name", "label": 0}, {"snippet_id": 49609, "code": " in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"])", "label": 0}, {"snippet_id": 9258, "code": ") if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint", "label": 0}, {"snippet_id": 24845, "code": ", redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host", "label": 1}, {"snippet_id": 51850, "code": "\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate new user form entry, register user if valid.\"\"\" email", "label": 0}, {"snippet_id": 80750, "code": " action.trigger() if all([action.isChecked() for action in self.lock_actions]): [action.setEnabled(False) for action in self.lock_actions] else: self.lock_all_action.setChecked(False) print(\"Couldn't lock", "label": 0}, {"snippet_id": 3894, "code": " test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/'", "label": 0}, {"snippet_id": 82094, "code": " ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request", "label": 0}, {"snippet_id": 74357, "code": " def _redirect_from_passphrase(self, request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self.request.user: logger.warn(self.invalid_access_user_message", "label": 0}, {"snippet_id": 60520, "code": " app.add_route( JsonDataView.as_view(self, \"plugins.json\", self.plugins), r\"/-/plugins<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"config.json\", lambda: self._config), r\"/-/config", "label": 0}, {"snippet_id": 45495, "code": "(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit': edit, 'document_type_form", "label": 0}, {"snippet_id": 61822, "code": "=timezone.now() prior_result.save() else: results_to_be_written.append(current_result) return ScanResult.objects.bulk_create(results_to_be_written) def request_and_scrape_page(url, allow_redirects=True): \"", "label": 0}, {"snippet_id": 21614, "code": ".PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self", "label": 0}, {"snippet_id": 76164, "code": " language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path(path, language, version_slug) if full_path==self.from_url: log.debug('Redirecting %s', self", "label": 1}, {"snippet_id": 33264, "code": " tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType", "label": 0}, {"snippet_id": 2628, "code": " return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request", "label": 0}, {"snippet_id": 35019, "code": ".objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem.rid if rawchem.rid else '']) return response", "label": 1}, {"snippet_id": 7546, "code": ".utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import", "label": 0}, {"snippet_id": 84418, "code": "-revision') template_params={'article': article, 'changes': changes, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update", "label": 0}, {"snippet_id": 66363, "code": "()) self.open_database_page() self.logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() password_unlock_entry.grab_focus() password_unlock_entry", "label": 0}, {"snippet_id": 49055, "code": ".core.exceptions import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms import * from dashboard.forms import ExtractedListPresenceTagForm from factotum.settings import", "label": 0}, {"snippet_id": 63994, "code": " is None: current_app.logger.error('Could not find the user identified by the IdP') raise Forbidden(\"Access not authorized\") action=get_action() return action(session_info, user) def _get_name_id(session", "label": 0}, {"snippet_id": 71956, "code": ".set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a'", "label": 1}, {"snippet_id": 53113, "code": "'purchase_step': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().purchase_step, PS_DAP) data={'status': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object", "label": 1}, {"snippet_id": 32255, "code": " None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start) elif self.char.isprintable(): start=self.position value=[", "label": 0}, {"snippet_id": 22738, "code": ". \"\"\" with self.lock: events=self.events self.events=[] if self.worker.mode==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type", "label": 1}, {"snippet_id": 64867, "code": "', '--code', help=\"The student's code submission. Make sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this program just checks the validity of the test", "label": 0}, {"snippet_id": 29427, "code": " callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('/oauthorize') def oauthorize_callback()", "label": 1}, {"snippet_id": 29466, "code": " user_id=resp['user_id'] user=User.query.filter_by(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for", "label": 0}, {"snippet_id": 27860, "code": " set_attribute(self, key, value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value:", "label": 0}, {"snippet_id": 51828, "code": " helper as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route(\"/\") def index(): \"\"\"Return index(homepage", "label": 0}, {"snippet_id": 51267, "code": "[\"rsync\"] +args, **kwargs) def _dependency_collection(self): return read_dependencies_from_filename(os.path.join('projectdata', 'dependencies.txt'), logfile=sys.stdout) def fetch_dependencies(self, *dependencies", "label": 0}, {"snippet_id": 66384, "code": ".clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\",", "label": 0}, {"snippet_id": 10270, "code": "'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value", "label": 0}, {"snippet_id": 77677, "code": "] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource=", "label": 0}, {"snippet_id": 36642, "code": " HttpResponse from django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import", "label": 0}, {"snippet_id": 12917, "code": " def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 58097, "code": ".common.utils.c_onboarding_status') @unpack @data( ({onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7", "label": 0}, {"snippet_id": 7269, "code": " import Office from.base import Base from flask_login import current_user from qsystem import db class OfficeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated", "label": 0}, {"snippet_id": 30958, "code": " session.add(newGrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('newgrudge.html', grudget_id=grudget_id) @app.route('/grudget/<int:grudget_id", "label": 1}, {"snippet_id": 39321, "code": ", default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition\", max_length", "label": 0}, {"snippet_id": 22924, "code": " ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\"", "label": 0}, {"snippet_id": 27412, "code": " keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter", "label": 0}, {"snippet_id": 32301, "code": ".char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy creation of a stream of tokens. ''' while True: token=self.token() yield token if token.ttype==TokenType", "label": 0}, {"snippet_id": 60777, "code": " successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\"", "label": 0}, {"snippet_id": 35220, "code": "(productdocument__document__isnull=False).count() ds.data_groups=dgs return render(request, template_name,{'data_sources': data_sources}) @login_required() def category_assignment(request, pk, template_name=('product_curation/' ", "label": 0}, {"snippet_id": 56482, "code": " dynamic_link): settings.DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self,", "label": 0}, {"snippet_id": 66097, "code": "=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented logging_manager=LoggingManager(True) overlay=NotImplemented def __init__(self, window, widget, filepath): self.window=window", "label": 0}, {"snippet_id": 4795, "code": ".locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def", "label": 0}, {"snippet_id": 67468, "code": ".thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request.GET.get('tag') if tag is not None: query", "label": 0}, {"snippet_id": 52436, "code": " flash(\"New a new{} has been added to your board!\".format(phase_code)) return redirect(\"/view-team\") @app.route(\"/view-details/<int:project_id>\", methods=['GET']) def open_project_details(project_id): \"\"", "label": 0}, {"snippet_id": 10643, "code": "\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return", "label": 1}, {"snippet_id": 62443, "code": " set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated", "label": 0}, {"snippet_id": 61782, "code": "=inspect_domains(domains,{'timeout': 10}) results_to_be_written=[] for result_data in results: securedrop=securedrops.get(domain=result_data['Domain']) current_result=pshtt_data_to_result(securedrop, result_data", "label": 1}, {"snippet_id": 77935, "code": " import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras", "label": 0}, {"snippet_id": 17518, "code": ".id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('login.html', form=form) @bp.route('/logout') def logout(): flask.g.user=None", "label": 0}, {"snippet_id": 38427, "code": " from django.utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): \"\"\" A DataDocument object is a single source", "label": 0}, {"snippet_id": 19728, "code": " LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray", "label": 0}, {"snippet_id": 72585, "code": ", 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model", "label": 0}, {"snippet_id": 55688, "code": "\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os", "label": 0}, {"snippet_id": 39856, "code": " decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) central_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis", "label": 0}, {"snippet_id": 517, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it,", "label": 0}, {"snippet_id": 26100, "code": " if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. \"\"\" assert self._raylet_socket_name is None self._raylet_socket_name=(self", "label": 0}, {"snippet_id": 57823, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.CREATE_THREAD: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.INVITE_SOMEBODY: ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 1}, {"snippet_id": 9252, "code": "'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode", "label": 0}, {"snippet_id": 30619, "code": ".one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session.query(Grudget).all() return jsonify(grudget=[g.serialize for g in grudgets]) @app.route('", "label": 0}, {"snippet_id": 12372, "code": "'registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context", "label": 0}, {"snippet_id": 64937, "code": "--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information about exceptions", "label": 0}, {"snippet_id": 19403, "code": " dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object", "label": 1}, {"snippet_id": 76662, "code": " be < 0\", rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles <=abs_tile_row: logger.debug", "label": 0}, {"snippet_id": 15501, "code": "=get_models_choices() return run_form def set_form_defaults(form, commands): def get_command(command_name): return[item for item in commands if item['command']==command_name] def str_to_datetime(str): if not str", "label": 0}, {"snippet_id": 42891, "code": "(group_count==1) self.assertTrue(scr.qa_begun) new_group=QAGroup.objects.get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group) response=self.client.get(f'", "label": 0}, {"snippet_id": 12165, "code": "( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js", "label": 0}, {"snippet_id": 57044, "code": " :return: A list of dictionaries. \"\"\" concepts_permitted_by_transaction=transaction.get_all_permissions() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept", "label": 0}, {"snippet_id": 4231, "code": " path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 15340, "code": " models] return[item for inputs in inputs_by_models for item in inputs] def get_commands(form): result=[] for field in form: if field.name=='start_day': result.append({'command': field.name, 'start_day", "label": 0}, {"snippet_id": 55937, "code": "', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, EMAIL_CONFIRMATION_PATH, request.GET.urlencode()) return response def login_redirect(request): response=HttpResponse('", "label": 0}, {"snippet_id": 35529, "code": "(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST", "label": 0}, {"snippet_id": 77724, "code": " for extra in pkg['extras']: if extra['key']=='Security classification': security_classification=extra['value'] or default_security_classification elif extra['key'] in['Used in data-driven application']", "label": 0}, {"snippet_id": 9035, "code": ".djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as", "label": 0}, {"snippet_id": 48347, "code": ": \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at", "label": 0}, {"snippet_id": 42402, "code": "=ExtractedChemical.objects.all().values('extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s", "label": 0}, {"snippet_id": 59378, "code": "\"suggest_facets\", True, \"\"\" Calculate and display suggested facets \"\"\".strip()), ConfigOption(\"allow_sql\", True, \"\"\" Allow arbitrary SQL queries via ?sql=parameter \"\"\".strip()), ConfigOption(\"default_cache_ttl\",", "label": 1}, {"snippet_id": 70775, "code": " ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it,", "label": 0}, {"snippet_id": 74726, "code": " HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type'", "label": 0}, {"snippet_id": 60261, "code": "( \"file:{}?immutable=1\".format(info[\"file\"]), uri=True, check_same_thread=False, ) self.prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms if custom_time_limit", "label": 0}, {"snippet_id": 12105, "code": " message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth", "label": 0}, {"snippet_id": 17901, "code": ": if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!</strong> Incorrect password.'), 'danger') return flask.redirect('/profile') user.email=form", "label": 0}, {"snippet_id": 82698, "code": "=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise", "label": 0}, {"snippet_id": 6876, "code": " password.') return render_template(\"auth/change_password.html\", form=form) @auth.route('/reset', methods=['GET', 'POST']) def password_reset_request(): if not current_user.is_anonymous: return redirect", "label": 0}, {"snippet_id": 45972, "code": "'): dg=get_object_or_404(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects.filter(document__in", "label": 0}, {"snippet_id": 80664, "code": "?', numeric_result=True)) if success: print(f\"Setting BiFi motor position to{target_pos}.\") self.matisse.set_bifi_motor_pos(target_pos) @handled_slot(bool) def set_thin_eta_motor_pos_dialog(self, checked", "label": 0}, {"snippet_id": 74046, "code": " django.shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core", "label": 0}, {"snippet_id": 41871, "code": ": response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') doc=DataDocument.objects.create", "label": 0}, {"snippet_id": 13102, "code": " 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages", "label": 0}, {"snippet_id": 33752, "code": ".raw_cas, rc.raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The non-curated row should appear') rc_row=f'%s,%s,%s,%s,%s\\r\\n' %(rc.extracted_text", "label": 1}, {"snippet_id": 80748, "code": " action.isChecked(): action.trigger() if all([action.isChecked() for action in self.lock_actions]): [action.setEnabled(False) for action in self.lock_actions] else: self.lock_all_action.setChecked(False", "label": 0}, {"snippet_id": 33970, "code": "[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser", "label": 0}, {"snippet_id": 55102, "code": "(os.path.exists(self.path)) \tdef lexists(self): \t\treturn FSPath(os.path.lexists(self.path)) \tdef expanduser(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os", "label": 0}, {"snippet_id": 69331, "code": " Set up user conda environment with required packages \"\"\" logger.info(\"Setting up user environment...\") miniconda_version='4.5.4' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda", "label": 0}, {"snippet_id": 5021, "code": ".test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account", "label": 1}, {"snippet_id": 84225, "code": " False, 'content_type': ContentType.objects.get_for_model(Article).pk, 'object_id': article.pk, 'images': article.all_images(), 'article': article, } if group_slug is not None: template_params['group']", "label": 0}, {"snippet_id": 12336, "code": ")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that", "label": 0}, {"snippet_id": 12634, "code": "(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider", "label": 0}, {"snippet_id": 69838, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy", "label": 0}, {"snippet_id": 33424, "code": ".login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0", "label": 0}, {"snippet_id": 1358, "code": "/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 11202, "code": " enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context", "label": 0}, {"snippet_id": 28441, "code": " string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info", "label": 0}, {"snippet_id": 43220, "code": " selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user in for", "label": 1}, {"snippet_id": 36827, "code": "']=datetime.date.strftime((item['upload_date']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]", "label": 0}, {"snippet_id": 53988, "code": " of the print buffer contents \"\"\" try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"\"\" Empties", "label": 1}, {"snippet_id": 28918, "code": " os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type,", "label": 0}, {"snippet_id": 67240, "code": ".get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip", "label": 1}, {"snippet_id": 48119, "code": "=HabitsPUCForm() linked=ExtractedHabitsAndPracticesToPUC.objects.filter( extracted_habits_and_practices=hnp).values('PUC') hnp_puc=PUC.objects.filter(pk__in=linked) print(hnp_puc) context={'hnp': hnp, 'form", "label": 0}, {"snippet_id": 41943, "code": ".ds) ProductDocument.objects.create(document=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments", "label": 0}, {"snippet_id": 49136, "code": "(instance=list_presence) context.update({'list_presence_tag_form': list_presence_tag_form}) except ObjectDoesNotExist: pass if doc.is_extracted: extracted_text=ExtractedText.objects.get_subclass(pk=doc", "label": 0}, {"snippet_id": 82194, "code": " template_name='category-list-view.html' paginate_by=15 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count(", "label": 0}, {"snippet_id": 33892, "code": "'specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER==", "label": 0}, {"snippet_id": 81979, "code": "=JustULRUpdateForm template_name='url-update-view.html' class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view') class", "label": 0}, {"snippet_id": 24656, "code": " if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help", "label": 1}, {"snippet_id": 5250, "code": ", target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4", "label": 0}, {"snippet_id": 82144, "code": ")}') instance.save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"many_urls", "label": 0}, {"snippet_id": 83048, "code": " DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self", "label": 0}, {"snippet_id": 1812, "code": " below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/')", "label": 1}, {"snippet_id": 58906, "code": "=invite_type, course=course, instructor=instructor, enroll_unit_code=enroll_unit_code ) if old_invite: return old_invite except Http404: pass code=Invite( instructor=instructor, user=user, email=email, code", "label": 0}, {"snippet_id": 57874, "code": " ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError: return onboarding_setting=c_onboarding_settings(use_secondary=True).find_one({'name': setting_name}) if not onboarding_setting: c_onboarding_settings().insert(", "label": 0}, {"snippet_id": 9501, "code": " provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include", "label": 0}, {"snippet_id": 53947, "code": "._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state of the print buffer(if it exists) and returns a body-ready dom object of those contents without adding them to the actual", "label": 0}, {"snippet_id": 53803, "code": "=self.definition.get('subtitle') self.summary=self.definition.get('summary') self.library_includes=[] self.stdout_interceptor=None self.stderr_interceptor=None self._last_update_time=0 @property def last_update_time", "label": 0}, {"snippet_id": 16100, "code": " from tournament.forms import GameScoreForm from tournament.forms import GetSevenPlayersForm from tournament.forms import PlayerRoundForm from tournament.forms import PowerAssignForm from tournament.tournament_views", "label": 0}, {"snippet_id": 3055, "code": " 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True", "label": 0}, {"snippet_id": 76423, "code": "\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int(column * _TILE_PIXEL_SIZE), int(row * _TILE_PIXEL_SIZE", "label": 0}, {"snippet_id": 18817, "code": "/gmp801s9zRo=\", \t\t\"xsrf_cookies\":True, \t\t\"login_url\": \"/signin\", \t} \tasync_db=motor.motor_tornado.MotorClient().example \tsync_db=MongoClient().example \t\t\t\t\t \tapplication=tornado.web.Application( \t\thandlers", "label": 1}, {"snippet_id": 60458, "code": " get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect.json\", self", "label": 0}, {"snippet_id": 31918, "code": " main(): sh=Shell() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): '", "label": 0}, {"snippet_id": 76088, "code": "=getattr( self, 'redirect_{type}'.format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None", "label": 0}, {"snippet_id": 40446, "code": " from.common_info import CommonInfo class Taxonomy(CommonInfo): title=models.CharField(max_length=100, blank=False, null=False) description=models.TextField(null=True, blank=True) parent=models.ForeignKey", "label": 1}, {"snippet_id": 31056, "code": ".form['takeaway']: editgrudge.takeaway=request.form['takeaway'] session.add(editgrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge", "label": 0}, {"snippet_id": 13193, "code": ")) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 18797, "code": " \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': \ttornado.options.parse_command_line() \tsettings", "label": 1}, {"snippet_id": 78749, "code": " data_dict): \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen.", "label": 0}, {"snippet_id": 43527, "code": "\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data", "label": 0}, {"snippet_id": 25603, "code": "=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed with the following error:\\n{}\".format( traceback_str) ray.utils.push_error_to_driver_through_redis", "label": 0}, {"snippet_id": 9626, "code": " else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template", "label": 0}, {"snippet_id": 78862, "code": ".UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result", "label": 0}, {"snippet_id": 32029, "code": "=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto() UNKNOWN=enum.auto() class Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme", "label": 0}, {"snippet_id": 50700, "code": "'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path,", "label": 0}, {"snippet_id": 43439, "code": "[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save']\"))) raw_cas_input=self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 3671, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location", "label": 1}, {"snippet_id": 63887, "code": " return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next',", "label": 1}, {"snippet_id": 76025, "code": "{lang}/{version}/'.format( lang=self.project.language, version=self.project.default_version, ) return '{from_url} ->{to_url}'.format( from_url=from_url, to_url=to_url, ) return '' def get_full_path(self", "label": 1}, {"snippet_id": 15801, "code": " render_template('run_form.html', form=run_form) }) @app.route('/run/form/remove/<field>', methods=['POST']) def view_run_remove(field): run_form=get_run_form() run_form[field].pop_entry() commands=get_commands", "label": 0}, {"snippet_id": 1359, "code": "/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use", "label": 0}, {"snippet_id": 66642, "code": ".show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context().add_class(\"error\") composite_unlock_select_button.get_style_context().remove_class(\"suggested-action\")", "label": 0}, {"snippet_id": 13878, "code": " fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that", "label": 0}, {"snippet_id": 43327, "code": " doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute(", "label": 0}, {"snippet_id": 48509, "code": ".value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product", "label": 0}, {"snippet_id": 23513, "code": " gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"\"Determine a task's resource requirements", "label": 0}, {"snippet_id": 1630, "code": "'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This", "label": 0}, {"snippet_id": 66694, "code": " UnlockedDatabase(self.window, self.parent_widget, self.database_manager) def clear_input_fields(self): password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") composite_unlock_entry=self", "label": 0}, {"snippet_id": 12073, "code": "('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept", "label": 0}, {"snippet_id": 32582, "code": " for the execution of the node to finish. ''' pass class DoubleNode(Node): ''' A node that executes two nodes sequentially. Args: first: The first node to execute. second: The second node to execute. ''", "label": 0}, {"snippet_id": 72182, "code": ",{'cluster_id': '{cluster_id}', 'export_id': '{export_id}'}, 2.0) def set(self, cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients", "label": 0}, {"snippet_id": 61719, "code": " securedrop_domain=url_to_domain(securedrop.landing_page_url) pshtt_results=inspect_domains([securedrop_domain],{'timeout': 10}) result=pshtt_data_to_result(securedrop, pshtt_results[0]) if commit: result", "label": 1}, {"snippet_id": 71808, "code": " 'info':{}, } p1=models.UserProfile.get_or_create(auth_id, user_info) req.load_user_by_profile(p1) user_count=models.User.query().count() self.assertEqual(user_count, 1) def test_add_message(self): req", "label": 0}, {"snippet_id": 24332, "code": " serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE", "label": 0}, {"snippet_id": 18313, "code": "'username':self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email':self.email}) \t\tif(document_email!=None): \t\t\terror=\"Email exists", "label": 0}, {"snippet_id": 33124, "code": ") admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin.site.register(WeightFractionType) admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site", "label": 0}, {"snippet_id": 72391, "code": " cephx_clients(self): return[client for client in CephX.list_clients()] @Endpoint('GET', '/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth", "label": 0}, {"snippet_id": 31058, "code": "]: editgrudge.takeaway=request.form['takeaway'] session.add(editgrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge.html', grudget_id", "label": 0}, {"snippet_id": 64464, "code": "'eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn session['eduPersonAssurance']=loa session.persist() response=redirect(location_on_success) session.set_cookie(response) current_app.logger.info(", "label": 0}, {"snippet_id": 11066, "code": ".get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u", "label": 0}, {"snippet_id": 39272, "code": "=500, null=True, blank=True) raw_min_comp=models.CharField(\"Raw minimum composition\", max_length=100, null=True, blank=True) raw_max_comp=models.CharField(\"Raw maximum composition\", max_length=100, null", "label": 0}, {"snippet_id": 61239, "code": "\"\"\"Creates a remote crash event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component", "label": 0}, {"snippet_id": 49816, "code": ": email=session['email'] elif 'social' in session: email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath", "label": 0}, {"snippet_id": 1984, "code": "/head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode", "label": 0}, {"snippet_id": 44093, "code": " after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name", "label": 0}, {"snippet_id": 26947, "code": " resource available. object_store_memory: The amount of memory(in bytes) to start the object store with. redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once", "label": 0}, {"snippet_id": 12348, "code": " it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context", "label": 0}, {"snippet_id": 40333, "code": "=self.QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA Group for the specified Script object; Use all the related ExtractedText records or, if there are more than", "label": 0}, {"snippet_id": 42340, "code": ".client.post(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code, 302, \"User is redirected to detail page.\") self.assertEqual(response.url, f'/datagroup/{dgpk}/', \"Should go to", "label": 0}, {"snippet_id": 54644, "code": "\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName(\"problem\") \t\t\t\tfor problem in problems: \t\t\t\t\tattrs=attributesOf(problem) \t\t\t\t", "label": 1}, {"snippet_id": 5048, "code": ", 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing", "label": 0}, {"snippet_id": 42002, "code": " POST to create Products and link if needed''' doc=DataDocument.objects.create(data_group=self.objects.dg) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context", "label": 0}, {"snippet_id": 31432, "code": " 'OPTIONS':{ 'context_processors':[ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors", "label": 0}, {"snippet_id": 14900, "code": ".load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html',", "label": 0}, {"snippet_id": 9988, "code": "=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query", "label": 0}, {"snippet_id": 66405, "code": " Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2", "label": 0}, {"snippet_id": 34928, "code": " %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup", "label": 0}, {"snippet_id": 13515, "code": " configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response", "label": 0}, {"snippet_id": 66773, "code": " socket from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import", "label": 0}, {"snippet_id": 65659, "code": " \"/run/terminal/KeepassGtk/override_dialog.ui\") self.override_dialog=builder.get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog", "label": 0}, {"snippet_id": 42075, "code": ".assertEqual(product.upc, f'stub_%s' % new_stub_id, 'UPC should be created for second Product') def test_upload_note(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode(", "label": 0}, {"snippet_id": 20242, "code": " subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process", "label": 0}, {"snippet_id": 60418, "code": " self.jinja_env.filters[\"escape_sqlite\"]=escape_sqlite self.jinja_env.filters[\"to_css_class\"]=to_css_class pm.hook.prepare_jinja2_environment(env=self.jinja_env) app.add_route(IndexView.as_view(self), r", "label": 0}, {"snippet_id": 76289, "code": " user_width, user_height): \"\"\"High-level production of the image. Args: layer_properties: Object with details about the layer. user_log_rect: The user-requested projected, ie map coordinates, not lat/lon, limits", "label": 0}, {"snippet_id": 51406, "code": ".join() stderr_thread.join() return stdout.channel.recv_exit_status() def __call__(self, *args): return self.call(*args) def __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback", "label": 0}, {"snippet_id": 35276, "code": ": dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page", "label": 0}, {"snippet_id": 39463, "code": " blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True", "label": 0}, {"snippet_id": 45970, "code": "/datagroup_detail.html'): dg=get_object_or_404(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects", "label": 0}, {"snippet_id": 47056, "code": ".objects.filter(pk=pk).first() if dg: columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id=pk).values(*columnlist) return render_to_csv_response(qs, filename=(dg.get_name_as_slug() +", "label": 0}, {"snippet_id": 27077, "code": " configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory where the Plasma memory", "label": 0}, {"snippet_id": 48454, "code": "=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None)", "label": 0}, {"snippet_id": 83145, "code": "=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue): \"\"\"Adds a subscriber to the list of queues to send notifications to. :param", "label": 0}, {"snippet_id": 36684, "code": "(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count", "label": 0}, {"snippet_id": 76665, "code": " rel_tile_row) for abs_tile_col in range(rect_of_tiles.x0, rect_of_tiles.x1): rel_tile_col=(abs_tile_col -rect_of_tiles.x0) if abs_tile_row < 0 or world_extent_in_tiles <=abs_tile_row: logger.debug(\"[%d] ", "label": 0}, {"snippet_id": 11411, "code": "=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, ", "label": 0}, {"snippet_id": 15254, "code": "=SelectMultipleField('Execute models',[validators.required()]) change_input_series_one_model=FieldList(FormField(ChangeOneModelForm), min_entries=0) change_input_series_all_models=FieldList(FormField(ChangeAllModelsForm)", "label": 0}, {"snippet_id": 57745, "code": ".STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status", "label": 1}, {"snippet_id": 46484, "code": " return render(request, template_name, context) good_records=[] for i, row in enumerate(csv.DictReader(info)): try: extracted_chemical=ExtractedChemical.objects.get(rawchem_ptr=int(row['id'])) except ExtractedChemical", "label": 0}, {"snippet_id": 73224, "code": " % email_domain)) self.add_error('email', message) elif get_user_model().objects.filter(username=email.lower()).exists(): message=forms.ValidationError( format(ErrorMessages.user_already_exists % email", "label": 0}, {"snippet_id": 2532, "code": "=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if", "label": 0}, {"snippet_id": 1124, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 23877, "code": "\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name", "label": 0}, {"snippet_id": 78428, "code": " 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest", "label": 0}, {"snippet_id": 56713, "code": " import gettext, gettext_lazy from clickgestion.transactions.filters import ConceptFilter, TransactionFilter from clickgestion.core.utilities import invalid_permission_redirect from django.views.generic", "label": 0}, {"snippet_id": 7881, "code": "': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings", "label": 0}, {"snippet_id": 39538, "code": " def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url() def get_extractedtext(self): return self.extracted_cpcat.extractedtext_ptr @property def data_document(self", "label": 0}, {"snippet_id": 43106, "code": "=self.client.get( f'/qa/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id", "label": 0}, {"snippet_id": 41488, "code": " ExtractedListPresence, 'HH': ExtractedHHRec } for code, model in group_models.items(): if DataDocument.objects.filter( document_type__group_type__code=code, extractedtext__isnull=False ): doc=DataDocument.objects.filter(", "label": 1}, {"snippet_id": 39955, "code": " django.apps import apps from django.db.models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey", "label": 1}, {"snippet_id": 65936, "code": "() self.set_titlebar(headerbar) def on_save_check_button_toggled(self, check_button, db): if check_button.get_active(): self.databases_to_save.append(db) else: self.databases_to_save.remove(db) def on_back_button_clicked", "label": 0}, {"snippet_id": 41118, "code": "=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9100')", "label": 0}, {"snippet_id": 80303, "code": "(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action", "label": 0}, {"snippet_id": 23137, "code": " the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the", "label": 0}, {"snippet_id": 67573, "code": " return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date", "label": 0}, {"snippet_id": 4858, "code": ".client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths:", "label": 0}, {"snippet_id": 84304, "code": " group.id}) changeset=get_object_or_404( changes_qs, revision=int(revision), **article_args) article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field:", "label": 0}, {"snippet_id": 71387, "code": "._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri']): provider, provider_params=self._url_parse_re.match( req.path_info).group(1, 2) if provider: req.provider=provider", "label": 1}, {"snippet_id": 17086, "code": ".html', {'tournament': t, 'round': r, 'formset': formset}) if created: g.save() for power, field in f.cleaned_data.items(): try: p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue", "label": 0}, {"snippet_id": 4326, "code": "\"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param", "label": 0}, {"snippet_id": 66690, "code": ".save_config() self.unlock_database_stack_box.destroy() UnlockedDatabase(self.window, self.parent_widget, self.database_manager) def clear_input_fields(self): password_unlock_entry=self.builder.get_object", "label": 0}, {"snippet_id": 62010, "code": " header.split(',')] return expected_directive in directives def validate_no_redirects(page): if page.is_redirect: return False else: return True def validate_200_ok(page): if page.status_code==200: return", "label": 0}, {"snippet_id": 12938, "code": " to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context", "label": 0}, {"snippet_id": 2478, "code": " c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded", "label": 0}, {"snippet_id": 68764, "code": "} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension", "label": 0}, {"snippet_id": 22135, "code": " directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config:", "label": 0}, {"snippet_id": 42042, "code": "{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product", "label": 0}, {"snippet_id": 52013, "code": "\" return \"OOOOOOOPS\" @app.route(\"/dashboard\") def dashboard(): \"\"\"Renders dashboard view, grabbing existing teams for display\"\"\" session[\"team_id\"]=None if session.get(\"new_user\"): flash(\"\"\"Welcome to SamePage", "label": 0}, {"snippet_id": 14550, "code": "}, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options", "label": 0}, {"snippet_id": 25252, "code": ".GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def", "label": 0}, {"snippet_id": 61813, "code": " results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result): prior_result.result_last_seen=timezone.now() prior_result.save() else: results_to_be_written.append(current_result", "label": 0}, {"snippet_id": 10305, "code": "'preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig.is_enabled(), 'order_history': user_orders } if third_party_auth.is_enabled():", "label": 0}, {"snippet_id": 31174, "code": " For the full list of settings and their values, see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname", "label": 0}, {"snippet_id": 44369, "code": "(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-SID\"]') try", "label": 0}, {"snippet_id": 7341, "code": "\"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed", "label": 0}, {"snippet_id": 15962, "code": "(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email or password') return False self.user=user return True @app.route('/register", "label": 0}, {"snippet_id": 41035, "code": ">Extracted Text') p_idx=html.index('<h4 class=\"d-inline\">Products') self.assertTrue(p_idx > e_idx,('Product card should come after ' 'Extracted Text card')) def test_product_create_link(self): response", "label": 0}, {"snippet_id": 4210, "code": " %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test", "label": 0}, {"snippet_id": 18515, "code": ".username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "label": 1}, {"snippet_id": 44897, "code": " test_product_surveyed_field(self): self.objects.gt.code='HP' self.objects.gt.save() _, HnPFormSet=create_detail_formset(self.objects.doc) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits", "label": 0}, {"snippet_id": 45040, "code": " from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.models import * current_date=datetime.datetime.strftime", "label": 0}, {"snippet_id": 54074, "code": " import OAuth1 from knowyourgov import app from knowyourgov.models import Politician from knowyourgov.scripts import insert_politicians_in_db from knowyourgov.scripts.scraping import scrapers \"\"\"Home page \"\"", "label": 0}, {"snippet_id": 31124, "code": " authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit()", "label": 0}, {"snippet_id": 57152, "code": ".is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction'", "label": 0}, {"snippet_id": 1686, "code": "[^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) >", "label": 0}, {"snippet_id": 665, "code": " response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset", "label": 0}, {"snippet_id": 26933, "code": " of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount of memory(in bytes) to start the", "label": 0}, {"snippet_id": 48530, "code": " document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form", "label": 0}, {"snippet_id": 10642, "code": "\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login", "label": 1}, {"snippet_id": 45910, "code": " from django.shortcuts import render, redirect, get_object_or_404 from django.http import HttpResponse from django.core.paginator import Paginator from dashboard.models import * from dashboard.forms import", "label": 0}, {"snippet_id": 35890, "code": " 'product_edit.html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request,", "label": 0}, {"snippet_id": 39114, "code": "(zip_file_path): zip_url=zip_file_path else: zip_url='no_path_found' return zip_url def get_extracted_template_fieldnames(self): extract_fields=['data_document_id','data_document_filename', 'prod_name'", "label": 0}, {"snippet_id": 2633, "code": "(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval", "label": 0}, {"snippet_id": 38985, "code": "' name_dir=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder}' if os.path", "label": 0}, {"snippet_id": 43361, "code": ".assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser", "label": 0}, {"snippet_id": 76490, "code": "\"Cropping to: %s\", str(within_tiled_image.AsTuple())) im_true=im_whole_tiles.crop(within_tiled_image.AsTuple()) logger.debug(\"Stretching to requested: %s\", str( (user_width, user_height))) im_user=im_true", "label": 0}, {"snippet_id": 73765, "code": " save_position_to_user(request) return redirect('home') create_position_form=CreatePositionForm() return render(request, 'createposition/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText ", "label": 0}, {"snippet_id": 40506, "code": " resolve from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def", "label": 0}, {"snippet_id": 28024, "code": " ray_constants def _random_string(): id_hash=hashlib.sha1() id_hash.update(uuid.uuid4().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message", "label": 0}, {"snippet_id": 79193, "code": " datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job(_send_mail,[users, 'open_datarequest_organisation', datarequest_dict], title=u'Data Request Opened", "label": 1}, {"snippet_id": 50015, "code": " or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash(\"Invalid File\") return redirect('/saveAs') @app", "label": 0}, {"snippet_id": 19123, "code": ": worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client", "label": 1}, {"snippet_id": 46259, "code": "]={col: err_msg} if created: update_fields(row, ext) row['extracted_text']=ext if(ext_child==ExtractedListPresence): row['extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext", "label": 0}, {"snippet_id": 84920, "code": " found_links.append({'title': article.title}) for old_title in old_titles: if old_title in article.content: found_old_links.append({'old_title': old_title, 'title': article.title}) context={'found_links'", "label": 0}, {"snippet_id": 65177, "code": " definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj:", "label": 0}, {"snippet_id": 42286, "code": " test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertContains(response,'<a href=\"/datasource/', msg_prefix='Should be able to get back to DataSource from", "label": 0}, {"snippet_id": 14522, "code": " Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 80204, "code": "'Matisse Controller') window.resize(600, 200) def setup_menus(self): menu_bar=self.window.menuBar() console_menu=menu_bar.addMenu('Console') self.clear_log_area_action=console_menu.addAction('Clear Log", "label": 0}, {"snippet_id": 67126, "code": "=context['attributes'].count() if count > 0: context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count() if count > 0:", "label": 0}, {"snippet_id": 46347, "code": ": a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max", "label": 0}, {"snippet_id": 6386, "code": "=self.flow.client_id: logger.error('Authorized Party is not us') return False if int(self.time()) >=int(id_token['exp']): logger.error('Token has expired') return False if id_token['iat'] <(self.time() ", "label": 0}, {"snippet_id": 1561, "code": "<h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}", "label": 0}, {"snippet_id": 73837, "code": "'] } @login_required(login_url='/login/', redirect_field_name=None) def positions(request): sort_by=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request", "label": 0}, {"snippet_id": 25065, "code": "(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver. Args: driver_id: The driver id. \"\"\"", "label": 0}, {"snippet_id": 42024, "code": "(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/", "label": 0}, {"snippet_id": 31295, "code": "/login' SOCIAL_AUTH_PIPELINE=( 'social.pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed', 'social.pipeline.social_auth.social_user", "label": 0}, {"snippet_id": 23409, "code": " allow_none: return \"\" if not isinstance(byte_str, bytes): raise ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else", "label": 0}, {"snippet_id": 32544, "code": "): result=self.accept(ttype) if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''", "label": 0}, {"snippet_id": 69989, "code": " are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 58947, "code": " self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save(self, force_insert=False, force_update=False, using=None, update_fields=None): user", "label": 0}, {"snippet_id": 5513, "code": "=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users", "label": 0}, {"snippet_id": 14901, "code": ")) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html', models=models) @app", "label": 0}, {"snippet_id": 58045, "code": " auxiliary functions. \"\"\" def test_send_email(self): \"\"\" Test email sending. Ensure an email has proper subject and body. \"\"\" send_email( context_data={ \"milestone\": \"first\", \"students_number\": 2, \"course_title", "label": 0}, {"snippet_id": 66036, "code": ".get_object(\"unsaved_databases_list_box\") for db in unsaved_databases_list: unsaved_database_row=Gtk.ListBoxRow() check_button=Gtk.CheckButton() check_button.set_label(db.database_manager.database_path", "label": 0}, {"snippet_id": 57803, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE={ 'title': '', 'description': '', 'html': '' } ONBOARDING_SETTINGS_DEFAULT={ onboarding.INTRODUCTION_COURSE_ID: settings.ONBOARDING_INTRODUCTION_COURSE_ID, onboarding.VIEW_INTRODUCTION:", "label": 0}, {"snippet_id": 464, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): ", "label": 0}, {"snippet_id": 2836, "code": "): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string", "label": 0}, {"snippet_id": 83528, "code": ", redirect from django.contrib.contenttypes.models import ContentType from django.contrib import messages from django.core.exceptions import ObjectDoesNotExist from wiki.forms import ArticleForm from wiki", "label": 1}, {"snippet_id": 46448, "code": "'clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing", "label": 0}, {"snippet_id": 53731, "code": " abort_thread() if item=='write': return self.write_both elif item=='close': return super(RedirectBuffer, self).__getattribute__(item) source=super(RedirectBuffer, self) \\ .__getattribute__('redirection_source", "label": 0}, {"snippet_id": 80711, "code": " self.matisse.set_thin_etalon_motor_pos(target_pos) @handled_slot(bool) def start_bifi_scan(self, checked): print('Starting BiFi scan...') self.matisse.birefringent_filter_scan() @handled_slot(bool) def", "label": 0}, {"snippet_id": 81596, "code": "=logging.getLogger(__name__) class Partner(models.Model): _name='res.partner' _inherit=['res.partner'] fit_subscriptions=fields.One2many(comodel_name='fit.subscription', inverse_name='subscription_partner',", "label": 0}, {"snippet_id": 36972, "code": " the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\" or \"None\", it's worth noting that if when making the call to here", "label": 0}, {"snippet_id": 41254, "code": " password='specialP@55word') def test_fetch_extracted_records(self): ''' Confirm that each detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText", "label": 1}, {"snippet_id": 83611, "code": "(group), object_id=group.id) return article_qs, group def get_articles_for_object(object, article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object", "label": 0}, {"snippet_id": 37651, "code": " fields=['doc_date', 'cat_code', 'description_cpcat', 'cpcat_sourcetype'] class ExtractedCPCatEditForm(ExtractedCPCatForm): class Meta(ExtractedCPCatForm.Meta): fields=ExtractedCPCatForm.Meta.fields +\\", "label": 1}, {"snippet_id": 59275, "code": " MEMORY=object() ConfigOption=collections.namedtuple( \"ConfigOption\",(\"name\", \"default\", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip", "label": 0}, {"snippet_id": 68749, "code": "-prefix' ], stderr=subprocess.PIPE) extensions=[ 'jupyterlab 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for e in extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc", "label": 1}, {"snippet_id": 61448, "code": " while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled", "label": 0}, {"snippet_id": 26190, "code": " start_monitor(self): \"\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address", "label": 0}, {"snippet_id": 59576, "code": " filename) mod=module_from_path(filepath, name=filename) try: pm.register(mod) except ValueError: pass def config(self, key): return self._config.get(key, None) def config_dict(self): return{ option.name", "label": 0}, {"snippet_id": 53778, "code": " exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=[] self.css=[] self.data=SharedCache", "label": 0}, {"snippet_id": 79374, "code": ".get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict['title'] data_request.description", "label": 0}, {"snippet_id": 78073, "code": " 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size", "label": 0}, {"snippet_id": 76743, "code": " by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\") if not tile:", "label": 0}, {"snippet_id": 69717, "code": " if os.path.exists(CONFIG_FILE): with open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={} hook=plugin_manager.hook hook.tljh_config_post_install(config=config) with open(CONFIG_FILE, 'w+')", "label": 0}, {"snippet_id": 72259, "code": " security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id)", "label": 0}, {"snippet_id": 51379, "code": " source: destination.write(line) destination.flush() stdout_thread=threading.Thread(target=pump_output_thread, args=(stdout, sys.stdout)) stderr_thread=threading.Thread(target=pump_output_thread, args=", "label": 0}, {"snippet_id": 24810, "code": " the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes: redis: A connection to the Redis server. subscribe_client: A pubsub client", "label": 0}, {"snippet_id": 81282, "code": ".user !=self.env.ref('base.public_user'): email=self.env.user.partner_id.email for event in self: domain=['&', '|',('email', '=', email),('partner_id', '=', self.env.user.partner_id.id),('event_id', '='", "label": 0}, {"snippet_id": 61908, "code": " True def validate_not_using_analytics(page): \"\"\"Scan for common analytics scripts anywhere in the page Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support", "label": 0}, {"snippet_id": 15960, "code": "=auth_get_user_by_email(self.email.data) if not user or not auth_check_password(user, self.password.data): self.password.errors.append('Invalid email or password') return False self.user=user return True @app.route", "label": 0}, {"snippet_id": 17260, "code": "(request, 'rounds/game_score.html', {'tournament': t, 'round': round_num, 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, ", "label": 0}, {"snippet_id": 75046, "code": "]) if user_keywords and(user_keywords !=db_keywords): return True return False @login_required def candidate_metadata(request, candidate_id): from.forms import MetadataForm try: candidate=_get_candidate", "label": 0}, {"snippet_id": 974, "code": ") path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 81011, "code": ".search([('partner_id', '=', partner_id), ('event_id', '=', event.id)]) try: if existing_registration: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('Found existing", "label": 0}, {"snippet_id": 164, "code": "(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath", "label": 1}, {"snippet_id": 61259, "code": " hostname: Name of the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %", "label": 0}, {"snippet_id": 20613, "code": "\"\"\"An encapsulation of the Ray processes on a single node. This class is responsible for starting Ray processes and killing them. Attributes: all_processes(dict): A mapping from process type(str) to a list", "label": 0}, {"snippet_id": 24375, "code": " logging import os import redis import time import ray.ray_constants as ray_constants from ray.services import get_ip_address from ray.services import get_port import ray.utils logger=logging.getLogger", "label": 1}, {"snippet_id": 76679, "code": "%d, %d is black\", world_extent_in_tiles, abs_tile_col, abs_tile_row) tiles_array.AddImage(rel_tile_col, rel_tile_row, None) else: world_wrapped_tile_col=abs_tile_col % world_extent_in_tiles tile_args=layer_properties", "label": 0}, {"snippet_id": 40776, "code": "=fixtures_standard def test_producttopuc_counts(self): response=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card??", "label": 0}, {"snippet_id": 14766, "code": "']=lambda value: json.dumps(value, sort_keys=True, indent=4) Bootstrap(app) db=redis.Redis('localhost') class User(UserMixin): user_id='' email='' password_hash='' def get_id(self): return self.user_id", "label": 0}, {"snippet_id": 74764, "code": "=degree_type) return render(request, 'etd_app/register.html',{'person_form': person_form, 'candidate_form': candidate_form, 'register': True}) @login_required def candidate_profile(request, candidate_id)", "label": 0}, {"snippet_id": 7626, "code": ".djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core", "label": 0}, {"snippet_id": 59695, "code": " plugin_name, database=None, table=None, fallback=True ): \"Return config for plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback", "label": 0}, {"snippet_id": 61817, "code": "(current_result): prior_result.result_last_seen=timezone.now() prior_result.save() else: results_to_be_written.append(current_result) return ScanResult.objects.bulk_create(results_to_be_written) def request_and_scrape_page", "label": 0}, {"snippet_id": 20151, "code": ".redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver from redis shard{}.\".format( num_deleted, shard_index)) if num_deleted !=len", "label": 0}, {"snippet_id": 23637, "code": " def setup_logger(logging_level, logging_format): \"\"\"Setup default logging for ray.\"\"\" logger=logging.getLogger(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper", "label": 1}, {"snippet_id": 17531, "code": "'/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session.modified=False response=flask.make_response(flask.redirect(redirect_url())) response.set_cookie(app.session_cookie_name", "label": 0}, {"snippet_id": 57086, "code": " available_concepts.append( { 'name': concept_model._meta.verbose_name, 'url': url, 'disabled': disabled, } ) return available_concepts def get_transaction_from_kwargs(**kwargs): transaction_code=kwargs", "label": 0}, {"snippet_id": 78683, "code": "=context['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest", "label": 0}, {"snippet_id": 34369, "code": "'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() et.refresh_from_db() self.assertTrue( et.qa_checked, ", "label": 0}, {"snippet_id": 36524, "code": ", response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC", "label": 0}, {"snippet_id": 41138, "code": "(response, f'product/%s' % new_product.id) data={'title' :['Product Title'], 'upc' :['stub_9101'], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form", "label": 0}, {"snippet_id": 66952, "code": "') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=domain)).order_by('-datetime') count=context['exs'].count() if count > 0", "label": 0}, {"snippet_id": 80900, "code": " Extension for the default Events module; used for BCNL,. \"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view", "label": 0}, {"snippet_id": 124, "code": ") path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath", "label": 1}, {"snippet_id": 67898, "code": " HttpResponseRedirect from django.shortcuts import get_object_or_404, render, redirect from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from", "label": 1}, {"snippet_id": 23041, "code": " Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker", "label": 0}, {"snippet_id": 47924, "code": " HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count", "label": 0}, {"snippet_id": 10631, "code": ".skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError,", "label": 1}, {"snippet_id": 23505, "code": "\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus", "label": 0}, {"snippet_id": 19013, "code": " return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\": if request.user.role==\"SimpleUsers\": topredir=request.localconfig.parameters", "label": 1}, {"snippet_id": 70577, "code": " TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path", "label": 0}, {"snippet_id": 14023, "code": "\"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not", "label": 0}, {"snippet_id": 1371, "code": " ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called", "label": 0}, {"snippet_id": 72756, "code": " {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText", "label": 0}, {"snippet_id": 49600, "code": " allowed_file(filename): return '.' in filename and \\ filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/\", methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t", "label": 0}, {"snippet_id": 55111, "code": ".lexists(self.path)) \tdef expanduser(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime", "label": 0}, {"snippet_id": 38563, "code": ".CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey('DataGroup', on_delete", "label": 0}, {"snippet_id": 62717, "code": " id corresponding to the added query, build a SAML2 authn response for the added query, and send both to the assertion consumer service, so that the user is logged in(the session corresponding to the cookie", "label": 0}, {"snippet_id": 83536, "code": " from django.contrib import messages from django.core.exceptions import ObjectDoesNotExist from wiki.forms import ArticleForm from wiki.models import Article, ChangeSet, dmp from wiki.utils import get_ct", "label": 1}, {"snippet_id": 3430, "code": "(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth.logout(request) return HttpResponseRedirect(logout_url", "label": 0}, {"snippet_id": 54796, "code": "\tdef process_hwml(self): \t\tself.prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"", "label": 1}, {"snippet_id": 62156, "code": "\"nosniff\", ) def validate_download_options(page): return validate_security_header( page, \"X-Download-Options\", \"noopen\", ) def validate_clickjacking_protection(page): return validate_security_header( page", "label": 0}, {"snippet_id": 78731, "code": "(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action, context, data_dict", "label": 1}, {"snippet_id": 17110, "code": ".DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist: i=GamePlayer(player=field.player, game=g, power=p) else: i.player=field.player try: i.full_clean()", "label": 0}, {"snippet_id": 35725, "code": "': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk)", "label": 0}, {"snippet_id": 7610, "code": " ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps", "label": 0}, {"snippet_id": 48165, "code": " import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm, BulkPUCForm, ProductForm) from taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core", "label": 1}, {"snippet_id": 52747, "code": " realpal.apps.chat.consumers import get_room_group_channel from realpal.apps.chat.models import Room logger=logging.getLogger(__name__) class MessageCreateAPIView(CreateAPIView): \"\"\" Creates a new message", "label": 1}, {"snippet_id": 26996, "code": ": The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate", "label": 0}, {"snippet_id": 56583, "code": "): client=Client() self.response=client.get(reverse('root-redirect')) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response['Location", "label": 1}, {"snippet_id": 71573, "code": ".session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_session_id_and_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self", "label": 0}, {"snippet_id": 66416, "code": ".add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application/x-iwork-keynote-sffkey\") keyfile_chooser_dialog", "label": 0}, {"snippet_id": 21678, "code": " ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type, check_alive=check_alive,", "label": 0}, {"snippet_id": 31942, "code": "): ''' Run the shell. ''' while True: try: line=self.readline() self.execute(line) except EOFError: sys.exit(0) def readline(self): ''' Read a command from stdin to execute. Returns: A raw string read from", "label": 0}, {"snippet_id": 8820, "code": " 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 38234, "code": " self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects", "label": 0}, {"snippet_id": 75745, "code": " logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list(r.json()['response']['docs'], index) if select2_results: return", "label": 0}, {"snippet_id": 11252, "code": ") if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps", "label": 0}, {"snippet_id": 84760, "code": " AJAX function that previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller ", "label": 0}, {"snippet_id": 18781, "code": "\t\t\treturn \"\"\" BootstrapModule(): Class that has the bootstrap includes statements which are included in every page, except it's easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web", "label": 1}, {"snippet_id": 66082, "code": ": builder=NotImplemented parent_widget=NotImplemented window=NotImplemented database_filepath=NotImplemented database_manager=NotImplemented unlock_database_stack_box=NotImplemented keyfile=NotImplemented", "label": 0}, {"snippet_id": 38376, "code": " import ExtractedHabitsAndPractices from.extracted_list_presence import ExtractedListPresence from.extracted_hhdoc import ExtractedHHDoc from.extracted_hhrec import ExtractedHHRec from.script import Script", "label": 1}, {"snippet_id": 71989, "code": " Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import CephX from..services.exception import serialize_dashboard_exception from", "label": 1}, {"snippet_id": 20669, "code": " True if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown", "label": 0}, {"snippet_id": 51549, "code": "(buildname=\"build\", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder.get_dependency_args, 'add_option':builder.add_option,", "label": 0}, {"snippet_id": 349, "code": "(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something", "label": 0}, {"snippet_id": 3041, "code": " initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME', 'next') params={ 'response_type': ", "label": 0}, {"snippet_id": 49452, "code": "(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid():", "label": 1}, {"snippet_id": 33426, "code": "(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0] ds=dd", "label": 0}, {"snippet_id": 54097, "code": ".all() q.order('-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) ", "label": 0}, {"snippet_id": 56835, "code": " concept, concept_form=get_concept_and_form_from_kwargs(**kwargs) extra_context['concept']=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions", "label": 0}, {"snippet_id": 29640, "code": ".all() else: split=tags.split(' ') posts=[] for s in split: results=Post.query.filter(Post.tags.any(name=s)) posts.extend(results) tags=Tag.query.all() return render_template('gallery.html', posts=posts,", "label": 0}, {"snippet_id": 24590, "code": " log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT", "label": 1}, {"snippet_id": 82772, "code": " for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname", "label": 0}, {"snippet_id": 76062, "code": ". \"\"\" if re.match('^https?://', filename): return filename return resolve_path( project=self.project, language=language, version_slug=version_slug, filename=filename, ) def get_redirect_path(self, path", "label": 1}, {"snippet_id": 20409, "code": " for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True:", "label": 0}, {"snippet_id": 73502, "code": ".split('@')[0].title().translate({ord(n): None for n in digits}) user.email_confirmed=False user.save() return user def send_user_email(request, user): url=generate_confirmation_url(request, user) send_mail", "label": 0}, {"snippet_id": 37341, "code": "].widget.attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _(", "label": 1}, {"snippet_id": 50228, "code": "(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]) def loginButton(): email=request.form[\"email", "label": 0}, {"snippet_id": 42898, "code": ".get(extraction_script=scr) et=ExtractedText.objects.get(pk=pk) self.assertTrue(et.qa_group==new_group) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/{scr.pk", "label": 0}, {"snippet_id": 45345, "code": " product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The", "label": 0}, {"snippet_id": 30634, "code": "=[g.serialize for g in grudgets]) @app.route('/') @app.route('/grudget/') def showGrudgets(): grudgets=session.query(Grudget).all() if 'username' not in login_session: return render_template('publicgrudgets", "label": 0}, {"snippet_id": 47617, "code": " unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The", "label": 0}, {"snippet_id": 8577, "code": " commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-", "label": 0}, {"snippet_id": 288, "code": "}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} ", "label": 0}, {"snippet_id": 48429, "code": "=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1)), 'document_type': doc.document_type, 'return_url':", "label": 0}, {"snippet_id": 48216, "code": ", 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta", "label": 1}, {"snippet_id": 50443, "code": " True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str", "label": 0}, {"snippet_id": 84330, "code": ".get(**article_args) if revision_from is None: revision_from=int(revision) -1 from_value=None if int(revision) is not int(revision_from) +1: from_value=revision_from template_params={'article': article,", "label": 0}, {"snippet_id": 65369, "code": "( \"resource:///run/terminal/KeepassGtk/keepassgtk.css\") css_provider.load_from_file(css_provider_resource) context=Gtk.StyleContext() context.add_provider_for_screen( screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER", "label": 0}, {"snippet_id": 75657, "code": " %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'] if item[", "label": 0}, {"snippet_id": 29134, "code": " will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def is_main_thread(): return threading.current_thread(", "label": 0}, {"snippet_id": 30263, "code": " access_token=credentials.access_token url=('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s' % access_token) h=httplib2.Http() result=json.loads(h.request(url, 'GET')[1]) if result.get('error'", "label": 0}, {"snippet_id": 9367, "code": " response @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link", "label": 0}, {"snippet_id": 38679, "code": "}/pdf/{fn}' def clean(self): this_type=self.data_group.group_type doc_types=DocumentType.objects.filter(group_type=this_type) if not self.document_type in doc_types: raise ValidationError(('The document", "label": 1}, {"snippet_id": 83693, "code": " conflict:' ' another user started editing this article at %s') self.message_template=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60) def create_message(self, request): \"\"\"Send a message", "label": 0}, {"snippet_id": 26496, "code": " message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate", "label": 0}, {"snippet_id": 31877, "code": " def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username", "label": 1}, {"snippet_id": 81264, "code": "'weekly', 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user'): email=self.env.user.partner_id", "label": 0}, {"snippet_id": 48396, "code": " paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup':dg})", "label": 0}, {"snippet_id": 68021, "code": " pk=self.kwargs['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk", "label": 0}, {"snippet_id": 32684, "code": "(builtins) outp.close() with inp: self.second.execute(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The", "label": 0}, {"snippet_id": 42337, "code": "[dspk]} response=self.client.post(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code, 302, \"User is redirected to detail page.\") self.assertEqual(response.url, f'/datagroup/{dgpk", "label": 0}, {"snippet_id": 79831, "code": " datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will", "label": 1}, {"snippet_id": 54970, "code": "-docs-html/library/os.html \tand \t\tfile:///Users/chenan/Other/python-2.7.2-docs-html/library/os.path.html \tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would", "label": 0}, {"snippet_id": 39112, "code": ".path.isfile(zip_file_path): zip_url=zip_file_path else: zip_url='no_path_found' return zip_url def get_extracted_template_fieldnames(self): extract_fields=['data_document_id','data_document_filename',", "label": 0}, {"snippet_id": 40732, "code": ".client.get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('/", "label": 0}, {"snippet_id": 15436, "code": "'change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data", "label": 0}, {"snippet_id": 56007, "code": ".description) > 77 else experience.description preview_content={'st': experience.title, 'sd': desc, 'si': experience.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{", "label": 0}, {"snippet_id": 83741, "code": ", group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user, group): return True if(is_private", "label": 0}, {"snippet_id": 24589, "code": "]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno", "label": 1}, {"snippet_id": 50126, "code": " email) filepath=os.path.join(userpath, filename) with open(filepath) as f: data=f.read() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser", "label": 0}, {"snippet_id": 57776, "code": " 100, 0 ) return 0 def update_onboarding_step(step, user_id): find_crit={onboarding.USER_ID: user_id} onboarding_data=c_onboarding_status(use_secondary=True).find_one(find_crit) if not onboarding_data or", "label": 0}, {"snippet_id": 56483, "code": " settings.DYNAMIC_LINK=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username):", "label": 0}, {"snippet_id": 5668, "code": ".\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 49595, "code": ".jinja_env.globals['get_resource_as_string']=get_resource_as_string def allowed_file(filename): return '.' in filename and \\ filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS'] @app.route(\"/", "label": 0}, {"snippet_id": 22807, "code": " \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key", "label": 0}, {"snippet_id": 29260, "code": "=url_for ) admin=Admin(app, name='benwaonline', template_mode='bootstrap3') setup_adminviews(admin, db) register_blueprints(app) register_cli(app) register_teardowns(app) app.register_blueprint(gallery", "label": 0}, {"snippet_id": 15059, "code": "=lambda ts_item: ts_item['result_type'], reverse=False) return render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField(SelectField): def pre_validate(self", "label": 0}, {"snippet_id": 13560, "code": "'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME'", "label": 0}, {"snippet_id": 37660, "code": " ExtractedCPCatEditForm(ExtractedCPCatForm): class Meta(ExtractedCPCatForm.Meta): fields=ExtractedCPCatForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num', 'cpcat_code'] class ExtractedHHDocForm(ExtractedTextForm)", "label": 0}, {"snippet_id": 29262, "code": " name='benwaonline', template_mode='bootstrap3') setup_adminviews(admin, db) register_blueprints(app) register_cli(app) register_teardowns(app) app.register_blueprint(gallery) app.register_blueprint(auth", "label": 0}, {"snippet_id": 12586, "code": " info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url", "label": 0}, {"snippet_id": 1682, "code": "=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if", "label": 0}, {"snippet_id": 27387, "code": " arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are", "label": 0}, {"snippet_id": 22751, "code": "\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with", "label": 0}, {"snippet_id": 57425, "code": "{}.pdf\"'.format(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return self", "label": 0}, {"snippet_id": 15862, "code": "] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password'", "label": 0}, {"snippet_id": 51509, "code": "+program], shell=False, stdout=open(os.devnull), stderr=open(os.devnull))==0 program_exists=windows_program_exists if platform.platform().startswith(\"Windows\") else other_program_exists def scp(*args):", "label": 1}, {"snippet_id": 24884, "code": "(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards", "label": 0}, {"snippet_id": 82179, "code": " template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset=Category.objects.all().order_by('name') template_name='category-list-view.html'", "label": 0}, {"snippet_id": 55696, "code": ".isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef create(self,what,name): ", "label": 0}, {"snippet_id": 43014, "code": ".client.get('/qa/extractedtext/7', follow=True) def test_hidden_fields(self): '''ExtractionScript 15 includes a functional use data group with pk=5. Its QA page should hide the composition fields ''' response", "label": 0}, {"snippet_id": 1458, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 15124, "code": "(self, csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators", "label": 0}, {"snippet_id": 36, "code": " Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None,", "label": 0}, {"snippet_id": 70345, "code": "'d like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``", "label": 0}, {"snippet_id": 25253, "code": " 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self", "label": 0}, {"snippet_id": 80940, "code": ".exceptions import ValidationError, UserError _logger=logging.getLogger(__name__) class WebsiteEventController(http.Controller): @http.route(['/fit_subscribe_controller/subscribe'], type='http', auth=\"public", "label": 0}, {"snippet_id": 9358, "code": ".ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def password_change_request_handler(request): \"", "label": 0}, {"snippet_id": 6717, "code": "=RegistrationForm() if form.validate_on_submit(): user=User(email=form.email.data, username=form.username.data, password=form.password.data) db.session.add(user) db.session.commit() token=user.generate_confirmation_token", "label": 0}, {"snippet_id": 7317, "code": "') form_edit_rules=('office_name', 'office_number', 'sb', 'services', 'deleted', 'exams_enabled_ind', 'appointments_enabled_ind', 'timezone') column_labels={'sb': 'Smartboard', 'timezone.timezone_name'", "label": 0}, {"snippet_id": 37542, "code": " 'id_pks'] class BulkPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] def __init__(self, *args, **kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select PUC for Attribute", "label": 0}, {"snippet_id": 71491, "code": " GoogleStrategy strategy_class=app._load_strategy('google') self.assertEqual(strategy_class, GoogleStrategy) self.assertRaises(Exception, app._load_strategy, 'enron') from engineauth.strategies.appengine_openid", "label": 0}, {"snippet_id": 82958, "code": " Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent):", "label": 0}, {"snippet_id": 19931, "code": " The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel", "label": 0}, {"snippet_id": 28795, "code": " command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result)", "label": 0}, {"snippet_id": 80220, "code": ") self.clear_log_area_action=console_menu.addAction('Clear Log') self.open_idle_action=console_menu.addAction('Open Python Shell...') self.restart_action=console_menu.addAction('Restart') set_menu=menu_bar", "label": 0}, {"snippet_id": 40821, "code": " page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get(", "label": 0}, {"snippet_id": 48772, "code": "'product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST", "label": 0}, {"snippet_id": 29616, "code": ".gallery.forms import CommentForm, PostForm @gallery.before_request def before_request(): g.user=current_user @gallery.route('/gallery/') @gallery.route('/gallery/<string:tags>/') def show_posts(tags='all", "label": 0}, {"snippet_id": 8725, "code": " this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in", "label": 0}, {"snippet_id": 43202, "code": ".models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select import Select from selenium.webdriver.common.by import By from selenium.webdriver", "label": 1}, {"snippet_id": 25980, "code": "=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info", "label": 1}, {"snippet_id": 78489, "code": "=db.DataRequestFollower.get_datarequest_followers_number( datarequest_id=datarequest.id) return data_dict def _undictize_datarequest_basic(data_request, data_dict): data_request.title=data_dict['title']", "label": 0}, {"snippet_id": 81297, "code": ".partner_id.id),('event_id', '=', event.id), ('state', '=', 'open')] count=self.env['event.registration'].search_count(domain) if count > 0: event.fit_is_participating=True else: event.fit_is_participating", "label": 0}, {"snippet_id": 17080, "code": " ValidationError as e: f.add_error(None, e) g.delete() return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset}) if created: g.save() for power, field in f.cleaned_data", "label": 0}, {"snippet_id": 80641, "code": ".matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set BiFi Motor Position', label=", "label": 0}, {"snippet_id": 21670, "code": "\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list", "label": 0}, {"snippet_id": 6450, "code": " Exchange the auth code for actual credentials, then redirect to the originally requested page. \"\"\" try: session_csrf_token=session.pop('oidc_csrf_token') state=json.loads(request.args['state']) csrf_token", "label": 0}, {"snippet_id": 74056, "code": " generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core.reporting import report_delivery from callisto_core.wizard_builder import( data_helper, view_partials", "label": 0}, {"snippet_id": 5944, "code": "'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True) app.route('/oidc_callback')(self.oidc_callback) app.before_request", "label": 0}, {"snippet_id": 61446, "code": " already_handleled={} while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name", "label": 0}, {"snippet_id": 29514, "code": "=RegistrationForm() if request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists=User.query.filter(User.username==username).all()", "label": 1}, {"snippet_id": 41532, "code": ").count() if doc.detail_page_editable: error=(f'{model.__module__} should have one more forms' ' than instances') self.assertEqual(num_forms, children +1, error) else: error=(f'{model.__module__} should", "label": 0}, {"snippet_id": 6086, "code": ".oidc_id_token to the ID token if the user has successfully authenticated, else returns a redirect object so they can go try to authenticate. :return: A redirect, or None if the user is authenticated. ", "label": 0}, {"snippet_id": 59899, "code": ".create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT load_extension('{}')\".format(extension))", "label": 0}, {"snippet_id": 51817, "code": " connect_to_db, User, Team, UserTeam, Board, Project, Phase) import query as q import helper as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined", "label": 0}, {"snippet_id": 77453, "code": "(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability to fetch tiles - everything a code client needs to know about and use,", "label": 0}, {"snippet_id": 5436, "code": "\nfrom django.test import Client from drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password", "label": 0}, {"snippet_id": 61424, "code": ") def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[", "label": 0}, {"snippet_id": 76064, "code": " re.match('^https?://', filename): return filename return resolve_path( project=self.project, language=language, version_slug=version_slug, filename=filename, ) def get_redirect_path(self, path, language", "label": 1}, {"snippet_id": 3756, "code": " in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id", "label": 0}, {"snippet_id": 18879, "code": "') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin: if admin.is_open: return{'gospel_trips_available", "label": 1}, {"snippet_id": 38139, "code": ".ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam',", "label": 0}, {"snippet_id": 52361, "code": " methods=[\"POST\"]) def assign_user_to_project(): \"\"\"Update database with user_id for the project.\"\"\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project", "label": 0}, {"snippet_id": 76703, "code": "+tile_args im_tile=_FetchMapTile(tile_url) if im_tile: if im_tile.size==(1, 1): im_tile=im_tile.resize((_TILE_PIXEL_SIZE, _TILE_PIXEL_SIZE)) tiles_array.AddImage(rel_tile_col, rel_tile_row, im_tile) return", "label": 0}, {"snippet_id": 81308, "code": "'].search_count(domain) if count > 0: event.fit_is_participating=True else: event.fit_is_participating=False @api.onchange('date_begin') def update_day_of_week(self): start_date=self.date_begin_located", "label": 0}, {"snippet_id": 84782, "code": "=do_wl_markdown(request.POST['body'], 'bleachit') return HttpResponse(rv, content_type='text/html') def article_diff(request): \"\"\"This is a AJAX function that diffs the body of the article as it is currently", "label": 0}, {"snippet_id": 23104, "code": " will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis", "label": 0}, {"snippet_id": 72936, "code": " sort_by='position_title' elif request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request", "label": 1}, {"snippet_id": 53212, "code": " 'test_email@gmail.com', } self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, '') self.assertEqual(self.view.get_object().zipcode, None) self.assertEqual(self.view.get_object", "label": 0}, {"snippet_id": 50666, "code": "!\" % exitcode) return eval(stdout.strip()) def default_platform(): if platform.system()=='Windows': return 'Windows-x86' if platform.system()=='Linux' and platform.architecture()[0]=='32bit': return 'Linux", "label": 0}, {"snippet_id": 38872, "code": " is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self): return self.type=='CP' @property def is_hh(self): return", "label": 0}, {"snippet_id": 31117, "code": ": return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction()'>\" if request", "label": 0}, {"snippet_id": 50510, "code": " filename): self.handle=ctypes.windll.kernel32.CreateFileA(filename,7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle) class PosixUserLock(BaseUserLock", "label": 0}, {"snippet_id": 66401, "code": ".OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\"", "label": 0}, {"snippet_id": 27001, "code": " object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However", "label": 0}, {"snippet_id": 67322, "code": "'bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=ip)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context[", "label": 0}, {"snippet_id": 52724, "code": " IsAuthenticated from rest_framework.response import Response from rest_framework import status from django.conf import settings from realpal.apps.chat.models import Message from realpal.apps.chat.serializers", "label": 1}, {"snippet_id": 71400, "code": ".group(1, 2) if provider: req.provider=provider req.provider_params=provider_params strategy_class=self._load_strategy(provider) resp=req.get_response(strategy_class(self.app, self._config)) if resp.request", "label": 0}, {"snippet_id": 39904, "code": ".exceptions import ValidationError from django.utils.translation import ugettext_lazy as _ from dashboard.models import ExtractedText class QANotes(CommonInfo): extracted_text=models.OneToOneField(ExtractedText,", "label": 1}, {"snippet_id": 36187, "code": "'' qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object=models.ForeignKey", "label": 0}, {"snippet_id": 70065, "code": " lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{%", "label": 0}, {"snippet_id": 46569, "code": ".collapsed=False return render(request, template_name, context) if not context['clean_comp_err']: for ingredient in good_records: ingredient.save() context['msg']=(f'{len(good_records)} clean composition data", "label": 0}, {"snippet_id": 3093, "code": ".GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View):", "label": 1}, {"snippet_id": 81332, "code": " '%Y-%m-%d %H:%M:%S').strftime('%a') def get_attendee_list(self): attendee_list=str('') counter=1 reg_ids=self.sudo().registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False) for", "label": 0}, {"snippet_id": 41523, "code": ".context['detail_formset'].total_form_count() children=model.objects.filter( extracted_text=doc.extractedtext ).count() if doc.detail_page_editable: error=(f'{model.__module__} should have one more forms", "label": 0}, {"snippet_id": 33640, "code": " ethylparaben') self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document", "label": 0}, {"snippet_id": 65484, "code": ".container.set_scrollable(True) self.container.set_show_border(False) self.container.connect(\"switch-page\", self.on_tab_switch) self.add(self.container) self.show_all() def destroy_container(self): self", "label": 0}, {"snippet_id": 49301, "code": " ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return redirect(referer, pk=pk) @login_required() def save_list_presence_tag_form(request, pk): referer=request.POST.get('referer", "label": 0}, {"snippet_id": 12127, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers", "label": 0}, {"snippet_id": 71368, "code": " environ, start_response): if environ['PATH_INFO'].startswith('/_ah/'): return self.app(environ, start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user", "label": 0}, {"snippet_id": 55720, "code": "(self,what,name): \t\tt=os.path.join(self.path,name) \t\tif what is Folder: \t\t\tos.mkdir(t) \t\t\treturn Folder(t) \t\telif what is File: \t\t\tf=open(t,\"w\") \t\t\tf.close() \t\t\treturn File(t) \t\telse: \t\t\traise NotImplementedError", "label": 0}, {"snippet_id": 35912, "code": "': p, 'form': form}) @login_required() def product_delete(request, pk): p=Product.objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name", "label": 0}, {"snippet_id": 51983, "code": ": h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to SamePage\") return redirect(\"/dashboard\") @app.route(\"/login/password-recovery\") def password_recovery", "label": 0}, {"snippet_id": 7280, "code": "'] def is_accessible(self): return current_user.is_authenticated and current_user.role.role_code in self.roles_allowed create_modal=False edit_modal=False can_delete=False column_list=['office_name', 'sb", "label": 1}, {"snippet_id": 17458, "code": "(ban_str), 'danger') return flask.redirect(flask.url_for('account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '<strong>Login failed!</strong> Account is not activated.')", "label": 0}, {"snippet_id": 24635, "code": " every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1)", "label": 1}, {"snippet_id": 18243, "code": ": \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign", "label": 1}, {"snippet_id": 50111, "code": "['email'] elif 'social' in session: email=session['social'] filename=session['currentFile'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) with open", "label": 0}, {"snippet_id": 51785, "code": " banner(OR) links=read_links() for link in links: url=get_url(link) params=get_params(url) params['redirect']='https://www.google.com' fullURL=generate_url_with_params(url, params) req=requests.get(fullURL)", "label": 1}, {"snippet_id": 38012, "code": "): ListPresenceFormSet=make_formset(parent, child) ParentForm=ExtractedCPCatForm if extracted else ExtractedCPCatEditForm return(ParentForm, ListPresenceFormSet) def five(): HHFormSet=make_formset(parent", "label": 0}, {"snippet_id": 3095, "code": "(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView(View): \"\"\"Logout", "label": 1}, {"snippet_id": 69521, "code": " user conda environment to PATH for notebook terminals, but not the hub venv. This means tljh-config is not actually accessible. We symlink to /usr/bin and not /usr/local/bin, since /usr/local/bin is not", "label": 0}, {"snippet_id": 71848, "code": "(msgs,[{'level': None, 'message':'TEST MESSAGE'}]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self", "label": 0}, {"snippet_id": 69581, "code": "=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest) def setup_plugins(plugins=None", "label": 0}, {"snippet_id": 28082, "code": " string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type", "label": 0}, {"snippet_id": 53095, "code": "=data[form] data[form][form]='Update' response=self.client.post(update_url, data_to_pass) self.assertEqual(response.status_code, 302) self.assertTemplateUsed('users/update.html') data={'purchase_step': 8}", "label": 1}, {"snippet_id": 43299, "code": ") def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText", "label": 0}, {"snippet_id": 49113, "code": "=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit': edit, 'document_type_form': document_type_form} if code", "label": 0}, {"snippet_id": 45118, "code": ".count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct()", "label": 0}, {"snippet_id": 68394, "code": " HttpResponseRedirect from django.shortcuts import get_object_or_404, render, redirect from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView", "label": 1}, {"snippet_id": 20927, "code": "\" stdout_file, stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password", "label": 1}, {"snippet_id": 57395, "code": " *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) print_transaction=request.POST.get('print_transaction', None) if print_transaction: transaction=get_object_or_404", "label": 0}, {"snippet_id": 1163, "code": "=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine", "label": 0}, {"snippet_id": 51653, "code": "='&'.join(pair) script='curl -d ' +'\"'+evil_param +'\" '+'-X POST '+start_url+endpoint return script def genDT(endpoint,params,method): scope={ 'class':DT, 'results':{ start_url:[ { 'endpoint': endpoint", "label": 0}, {"snippet_id": 4314, "code": "://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/", "label": 0}, {"snippet_id": 27221, "code": "\"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None", "label": 0}, {"snippet_id": 28592, "code": " this function or actor method. runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The", "label": 0}, {"snippet_id": 24726, "code": "=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address", "label": 1}, {"snippet_id": 61110, "code": "]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass", "label": 0}, {"snippet_id": 45325, "code": " chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month'] !=chart_month: product_stats.insert(i,{'product_count': '0', 'puc_assigned_month", "label": 0}, {"snippet_id": 9115, "code": " from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger", "label": 0}, {"snippet_id": 37974, "code": "=model, fields=formset_fields, formset=formset, form=form, extra=extra, can_delete=can_delete) def one(): ChemicalFormSet=make_formset( parent_model=parent, model=child, formset=ExtractedChemicalFormSet,", "label": 0}, {"snippet_id": 46586, "code": " successfully.') context['clean_comp_data_form']=include_clean_comp_data_form(dg) else: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) @login_required() def", "label": 0}, {"snippet_id": 23361, "code": "\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty", "label": 0}, {"snippet_id": 44234, "code": " self.browser.get(dg_detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url", "label": 0}, {"snippet_id": 33372, "code": " django.test import TestCase from django.test.client import Client from dashboard.views.get_data import * from dashboard.tests.loader import fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver", "label": 0}, {"snippet_id": 18414, "code": " \t\"\"\" post(): \tSets class variables, does rudimentary checks on username and email submitted using regex \tand renders signup.html with the error if the regex fails to match the submitted value. \tThen checks", "label": 1}, {"snippet_id": 15551, "code": ".exe_models.data=get_command('exe_models')[0]['include'] if not form.change_input_series_one_model: for command in get_command('change_input_series_one_model'): form.change_input_series_one_model.append_entry()", "label": 0}, {"snippet_id": 81680, "code": "> datetime.now() and event_type=='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for event id:", "label": 0}, {"snippet_id": 74573, "code": "(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def faq(request): return render(request, 'etd_app/faq.html') def copyright(request", "label": 0}, {"snippet_id": 9076, "code": ".errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import", "label": 0}, {"snippet_id": 83421, "code": "] kw['object_id']=self.cleaned_data['object_id'] except KeyError: pass return self.cleaned_data def cache_old_content(self): if self.instance.id is None: self.old_title=self.old_content=self.old_markup", "label": 0}, {"snippet_id": 1474, "code": " statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 44522, "code": "', data_source=ds, download_script=script, downloaded_by=user, downloaded_at=timezone.now(), group_type=gt, csv='register_records_matching.csv', url='https://www.epa.gov') dt=DocumentType.objects.create", "label": 0}, {"snippet_id": 77378, "code": " database type: %s\", server_vars[\"dbType\"]) if server_vars[\"dbType\"] not in _SUPPORTED_DB_TYPES: logger.error(\"GEE WMS implementation doesn't support database\" \"type '%s'\", server_vars[\"dbType\"]) return", "label": 0}, {"snippet_id": 26290, "code": ".start_monitor() self.start_raylet_monitor() self.start_plasma_store() self.start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui", "label": 0}, {"snippet_id": 5558, "code": ",) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{", "label": 0}, {"snippet_id": 62065, "code": " return True else: return False def validate_server_software(page): if 'Server' not in page.headers: return True else: server_header=str.lower(page.headers['Server']) if 'nginx' in server_header or 'apache", "label": 0}, {"snippet_id": 901, "code": " _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django", "label": 0}, {"snippet_id": 77671, "code": "']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource", "label": 0}, {"snippet_id": 57277, "code": " available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction", "label": 0}, {"snippet_id": 36293, "code": "), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear", "label": 0}, {"snippet_id": 29434, "code": "('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response() if not resp: flash(u'You denied", "label": 1}, {"snippet_id": 40025, "code": "=50, null=True, blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def", "label": 1}, {"snippet_id": 73064, "code": ".ModelForm): text=CreatePositionFormText.upload_new_position description=CreatePositionFormText.please_select_either_filetype pdf_name=CreatePositionFormText.pdf url_name=CreatePositionFormText.url pdf_text", "label": 0}, {"snippet_id": 5655, "code": ".locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=", "label": 0}, {"snippet_id": 31566, "code": "', project, name='project'), url(r'^project/new/', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/clone/?$', project_clone", "label": 0}, {"snippet_id": 19885, "code": "=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions", "label": 0}, {"snippet_id": 14531, "code": "{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 21052, "code": ", use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool): True if we should start the process in valgrind. use_profiler(bool): True if we should start the process in the valgrind profiler. ", "label": 0}, {"snippet_id": 54040, "code": " creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents \"\"\" try: return self.stderr_interceptor.read_all()", "label": 1}, {"snippet_id": 44202, "code": "/{dg.data_source.pk}' self.browser.get(ds_detail_url) self.browser.find_elements_by_xpath('//*[@title=\"edit\"]')[1].click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute", "label": 0}, {"snippet_id": 77048, "code": ".getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label, projection, request_type, db_type", "label": 0}, {"snippet_id": 54026, "code": " contents def read_stderr(self): \"\"\" Returns the current state of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string", "label": 0}, {"snippet_id": 65823, "code": " False) tab_hbox.show_all() self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance", "label": 0}, {"snippet_id": 30702, "code": " @app.route('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session", "label": 1}, {"snippet_id": 53932, "code": "() return self def append_body(self, dom: str): \"\"\" :param dom: :return: \"\"\" self.flush_stdout() self.body.append(dom) self._last_update_time=time.time() def read_stdout(self): \"\"\" Reads the current state", "label": 0}, {"snippet_id": 12486, "code": "=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 34795, "code": "=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row['sid'])['products_n'] or 0) return stats def download_chem_stats", "label": 0}, {"snippet_id": 25624, "code": " import time import ray import ray.ray_constants as ray_constants from ray.tempfile_services import( get_logs_dir_path, get_object_store_socket_name, get_raylet_socket_name, new_log_monitor_log_file, new_monitor_log_file", "label": 0}, {"snippet_id": 20985, "code": " start_plasma_store(self): \"\"\"Start the plasma store.\"\"\" assert self._plasma_store_socket_name is None self._plasma_store_socket_name=( self._ray_params.plasma_store_socket_name or get_object_store_socket_name(", "label": 0}, {"snippet_id": 37606, "code": "=ProductToPUC fields=['tag', 'id_pks'] def __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag']", "label": 0}, {"snippet_id": 49297, "code": ".POST, instance=extracted_text) if ext_text_form.is_valid() and ext_text_form.has_changed(): ext_text_form.save() return redirect(referer, pk=pk) @login_required() def save_list_presence_tag_form(request,", "label": 0}, {"snippet_id": 78623, "code": "(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data", "label": 0}, {"snippet_id": 24384, "code": ".ray_constants as ray_constants from ray.services import get_ip_address from ray.services import get_port import ray.utils logger=logging.getLogger(__name__) class LogMonitor(object): \"\"\"A monitor process", "label": 1}, {"snippet_id": 7770, "code": " ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION", "label": 1}, {"snippet_id": 75025, "code": " user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords=sorted([kw.text for kw in db_keywords_info.values()", "label": 0}, {"snippet_id": 83654, "code": ".'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return ''.join(['/', app, url]) class ArticleEditLock(object): \"\"\"A soft lock to edting an article.\"\"\" def __init__(self, title, request,", "label": 0}, {"snippet_id": 73343, "code": "'), path('confirm/', views.login_form, name='confirm_account'), path('createnewposition/', views.import_position, name='importposition'), path('positions/', views.positions, name='positions'), path('position", "label": 1}, {"snippet_id": 47084, "code": ").values(*columnlist) return render_to_csv_response(qs, filename=\"registered_records.csv\", use_verbose_names=False) @login_required() def habitsandpractices(request, pk, template_name='data_group/habitsandpractices", "label": 0}, {"snippet_id": 30830, "code": ".method=='POST': session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete)", "label": 0}, {"snippet_id": 15027, "code": "'Intermediate input time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source[1], source[2:", "label": 0}, {"snippet_id": 80407, "code": ".toggle_thin_etalon_lock) self.lock_piezo_etalon_action.triggered.connect(self.toggle_piezo_etalon_lock) self.lock_fast_piezo_action.triggered.connect(self.toggle_fast_piezo_lock) def setup_log_window(self): self", "label": 0}, {"snippet_id": 59803, "code": " get_table_definition(self, database_name, table, type_=\"table\"): table_definition_rows=list( await self.execute( database_name, 'select sql from sqlite_master where name=:n and type=:t', {\"n\": table, \"t\": type_}, ) ", "label": 0}, {"snippet_id": 75511, "code": "=candidate_id) format_form=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid(): format_form.handle_post(request.POST, candidate) return HttpResponseRedirect", "label": 0}, {"snippet_id": 7037, "code": " send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent.", "label": 0}, {"snippet_id": 68055, "code": "=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm", "label": 0}, {"snippet_id": 20835, "code": " file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file to prepare. \"\"\" if not os.path.exists(socket_path", "label": 0}, {"snippet_id": 83734, "code": "): return self.user_ip==get_real_ip(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None)", "label": 0}, {"snippet_id": 73353, "code": ", name='importposition'), path('positions/', views.positions, name='positions'), path('position/', views.position, name='position'), path('importapplications/', views.import_applications, name='importapplications", "label": 1}, {"snippet_id": 73868, "code": "=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications(request) return position", "label": 0}, {"snippet_id": 11790, "code": "\" Views for a student's account information. \"\"\" import json import logging import urlparse from datetime import datetime import pytz from django.conf import settings from django.contrib import messages", "label": 0}, {"snippet_id": 9109, "code": " signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from", "label": 0}, {"snippet_id": 40390, "code": ".first() qa_group=QAGroup.objects.create(extraction_script=es) doc_text_ids=list(ExtractedText.objects.filter(extraction_script=es, qa_checked=False ).values_list('pk', flat=True)) if len(doc_text_ids) ", "label": 0}, {"snippet_id": 82960, "code": " the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on localhost' % comp_name class RemoteCrashEvent(CrashEvent): \"\"\"Crash", "label": 0}, {"snippet_id": 30630, "code": " grudgetsJSON(): grudgets=session.query(Grudget).all() return jsonify(grudget=[g.serialize for g in grudgets]) @app.route('/') @app.route('/grudget/') def showGrudgets(): grudgets=session.query(Grudget).all", "label": 0}, {"snippet_id": 18595, "code": "\tself.render('signin.html',error='') \t\"\"\" check_database(): \tCreates an instance of PasswordHasher, finds if there is any document in the database with the \tusername submitted, verifies the password with", "label": 1}, {"snippet_id": 18172, "code": " if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else", "label": 1}, {"snippet_id": 1195, "code": ".startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since", "label": 0}, {"snippet_id": 24072, "code": "\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None", "label": 0}, {"snippet_id": 3593, "code": " response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password", "label": 0}, {"snippet_id": 22762, "code": ".worker.worker_id), self.worker.node_ip_address, events) def add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span", "label": 0}, {"snippet_id": 60605, "code": " if request.query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title=None help=None if isinstance", "label": 0}, {"snippet_id": 6651, "code": ") if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) session", "label": 0}, {"snippet_id": 20798, "code": ".\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket", "label": 0}, {"snippet_id": 4022, "code": ".assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"", "label": 1}, {"snippet_id": 43684, "code": " raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name", "label": 0}, {"snippet_id": 41597, "code": "* class DataGroupDetailTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_detail_form_load(self): pk=self.objects", "label": 0}, {"snippet_id": 34660, "code": " predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup", "label": 0}, {"snippet_id": 19985, "code": ".ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex", "label": 0}, {"snippet_id": 42694, "code": " fixtures=fixtures_standard def setUp(self): self.factory=RequestFactory() self.client.login(username='Karyn', password='specialP@55word') def test_qa_begin(self): \"\"\" Check that starting the QA process", "label": 0}, {"snippet_id": 56294, "code": " RedirectExperienceTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app') \\ .given_a_dynamic_link('') \\ .when_call_experience_redirect('AsdE43E4') \\ .then_response_should_be_a_redirect_to(", "label": 0}, {"snippet_id": 44097, "code": "/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href", "label": 0}, {"snippet_id": 17553, "code": ", expires=0) return response @bp.route('/register', methods=['GET', 'POST']) def register(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request", "label": 0}, {"snippet_id": 44614, "code": ", unit_type=ut, weight_fraction_type=wft, raw_chem_name='Test Chem Name', raw_cas='test_cas' ) rc=ec.rawchem_ptr ing=Ingredient.objects.create(lower_wf_analysis=0.123456789012345, central_wf_analysis=0", "label": 0}, {"snippet_id": 76764, "code": ": return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA[0] else None) return tile if tile", "label": 0}, {"snippet_id": 78234, "code": "'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('---------------", "label": 0}, {"snippet_id": 36406, "code": "/div')[0].text self.assertEqual('100%', extracted_doc_count) def test_PUC_download(self): p=self.objects.puc puc_line=(p.gen_cat +',' +p.prod_fam +',' +p.prod_type +',' +p.description + ',' +str(p.get_level", "label": 1}, {"snippet_id": 74419, "code": " _ReportActionPartial(_ReportUpdatePartial): success_url=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self", "label": 0}, {"snippet_id": 9727, "code": ": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer", "label": 0}, {"snippet_id": 75332, "code": ",{'candidate': candidate}) @login_required @require_http_methods(['POST']) def candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate", "label": 0}, {"snippet_id": 66903, "code": "=context['bls'].count() if count > 0: context['bls_count']=count context['events']=Event.objects.filter(Q(info__icontains=domain)).order_by('-publish_timestamp') count=context['events'].count() if count > 0:", "label": 0}, {"snippet_id": 44748, "code": "(data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") def test_extracted_text_qa_notes(self", "label": 1}, {"snippet_id": 46049, "code": ": matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg']=('There are no matching records in the ' 'selected directory.')", "label": 0}, {"snippet_id": 76144, "code": "'Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None", "label": 0}, {"snippet_id": 75944, "code": ", blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField(choices=STATUS_CHOICES, default=True) create_dt=models.DateTimeField", "label": 0}, {"snippet_id": 68204, "code": " import PaginationMixin from django.db.models import Q from.models import tweet from.forms import SearchForm from django.http import JsonResponse from urllib.parse import urlparse from http.client import", "label": 0}, {"snippet_id": 23164, "code": " processes. Args: redis_client: The redis client to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID of the", "label": 0}, {"snippet_id": 72996, "code": "'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position }) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES)", "label": 0}, {"snippet_id": 64933, "code": " parser.add_argument('-v', '--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional", "label": 0}, {"snippet_id": 72113, "code": " '{}' cannot be managed by the dashboard.\" .format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id", "label": 0}, {"snippet_id": 7838, "code": ".PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK',", "label": 0}, {"snippet_id": 41815, "code": " \"Fieldnames passed are incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self", "label": 0}, {"snippet_id": 8826, "code": " 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset", "label": 0}, {"snippet_id": 84240, "code": " not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) def view_changeset(request", "label": 0}, {"snippet_id": 14082, "code": " redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider", "label": 0}, {"snippet_id": 79400, "code": " if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, ", "label": 1}, {"snippet_id": 53780, "code": " users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None): self.step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache", "label": 0}, {"snippet_id": 43909, "code": ".webdriver.support.select import Select from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.by import By from", "label": 1}, {"snippet_id": 29753, "code": "(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get(1)] added_tags=[get_or_create_tag(db.session, tag)[0] for", "label": 0}, {"snippet_id": 33152, "code": " from django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields", "label": 1}, {"snippet_id": 71957, "code": "{'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session", "label": 1}, {"snippet_id": 33927, "code": "'' Changing the raw_cas or raw_chemname on a RawChem record with a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull", "label": 0}, {"snippet_id": 59527, "code": ".sqlite_functions=[] self.sqlite_extensions=sqlite_extensions or[] self.template_dir=template_dir self.plugins_dir=plugins_dir self.static_mounts=static_mounts or[] self._config=dict(DEFAULT_CONFIG, **(config or{}", "label": 0}, {"snippet_id": 61948, "code": ".com/(no public docs) Krux Digital: https://whotracks.me/trackers/krux_digital.html \"\"\" analytics_scripts=('ga.js', 'analytics.js', 'quant.js', 'chartbeat.js', 'chartbeat_mab.js', 'beacon.js', 'krxd.net')", "label": 0}, {"snippet_id": 80787, "code": "'Locking' if checked else 'Unlocking'} slow piezo.\") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot", "label": 0}, {"snippet_id": 42099, "code": ") self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on the page') def test_extracted_count(self): response=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 73962, "code": ") parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications/applications.html',{ 'form", "label": 0}, {"snippet_id": 52126, "code": "=request.form.get(\"name\", \"Untitled\") desc=request.form.get(\"description\", None) user_id=session.get(\"user_id\") new_team=q.make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id,", "label": 0}, {"snippet_id": 22385, "code": ": if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self", "label": 0}, {"snippet_id": 76633, "code": ".debug(\"World extent in tiles: %s\", str(world_extent_in_tiles)) base_url=layer_properties.GetMapBaseUrl() for abs_tile_row in range(rect_of_tiles.y0, rect_of_tiles.y1): rel_tile_row=abs_tile_row -rect_of_tiles", "label": 0}, {"snippet_id": 33121, "code": ".site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin.site.register(WeightFractionType) admin.site.register(PUCTag", "label": 0}, {"snippet_id": 81714, "code": " from.models import Post def home(request): posts=Post.objects.order_by('pub_date') return render(request, 'posts/home.html',{'posts':posts}) def post_details(request, post_id): return render(request, ", "label": 1}, {"snippet_id": 80131, "code": "(*args, **kwargs) self.setup_logging() self.setup_window() self.setup_menus() self.setup_action_listeners() self.setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self", "label": 0}, {"snippet_id": 27536, "code": "\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). ", "label": 0}, {"snippet_id": 53804, "code": ".definition.get('subtitle') self.summary=self.definition.get('summary') self.library_includes=[] self.stdout_interceptor=None self.stderr_interceptor=None self._last_update_time=0 @property def last_update_time", "label": 0}, {"snippet_id": 54986, "code": " interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder, and File ", "label": 0}, {"snippet_id": 83398, "code": " params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self", "label": 1}, {"snippet_id": 20347, "code": " be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis", "label": 0}, {"snippet_id": 78167, "code": ", resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def", "label": 1}, {"snippet_id": 66634, "code": ") self.logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() composite_unlock_entry.grab_focus() composite_unlock_entry.get_style_context(", "label": 0}, {"snippet_id": 50513, "code": ".kernel32.CreateFileA(filename,7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle) class PosixUserLock(BaseUserLock): def __init__(self, name", "label": 0}, {"snippet_id": 43697, "code": "(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, ", "label": 0}, {"snippet_id": 18826, "code": "\"/signin\", \t} \tasync_db=motor.motor_tornado.MotorClient().example \tsync_db=MongoClient().example \t\t\t\t\t \tapplication=tornado.web.Application( \t\thandlers=[ \t\t\t(r'/',IndexHandler), \t\t\t(r'/signup', SignUpHandler", "label": 1}, {"snippet_id": 66576, "code": ".OK: self.logging_manager.log_debug(\"File selected: \" +filechooser_opening_dialog.get_filename()) filechooser_opening_dialog.close() file_path=filechooser_opening_dialog.get_filename() composite_unlock_select_button", "label": 0}, {"snippet_id": 22580, "code": " be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the", "label": 0}, {"snippet_id": 56525, "code": " test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}", "label": 1}, {"snippet_id": 83738, "code": "(request) def has_read_perm(user, group, is_member, is_private): \"\"\" Return True if the user has permission to *read* Articles, False otherwise. \"\"\" if(group is None) or(is_member is None) or is_member(user,", "label": 0}, {"snippet_id": 412, "code": " length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime", "label": 0}, {"snippet_id": 29309, "code": "=import_string(name) if hasattr(mod, 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app): @app.cli.command('initdb') def initdb_command(): \"\"\"Creates the database tables.\"\"\" init_db", "label": 0}, {"snippet_id": 21714, "code": ": for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes", "label": 0}, {"snippet_id": 12255, "code": " sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST ", "label": 0}, {"snippet_id": 23575, "code": " was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources", "label": 0}, {"snippet_id": 11144, "code": " An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl", "label": 0}, {"snippet_id": 46988, "code": " @login_required() def data_group_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'): datagroup=get_object_or_404(DataGroup, pk=pk) if request.method=='POST': datagroup.delete", "label": 0}, {"snippet_id": 64351, "code": "'eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page) else: http_info=client.handle_logout_request( request.form['SAMLRequest'], subject_id, BINDING_HTTP_REDIRECT, relay_state=request", "label": 0}, {"snippet_id": 39131, "code": "', 'raw_cas', 'raw_chem_name', 'report_funcuse'] if self.type=='FU': return extract_fields if self.type=='CO': return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp", "label": 0}, {"snippet_id": 37364, "code": " if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name', 'data_document', 'qa_checked'] class ProductLinkForm", "label": 0}, {"snippet_id": 37317, "code": " class Meta: model=DataSource fields=['priority'] def __init__(self, *args, **kwargs): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority'].widget", "label": 0}, {"snippet_id": 82980, "code": "(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname", "label": 0}, {"snippet_id": 75698, "code": " ID_VAL_SEPARATOR, item['auth']), 'text': text}) fast_ids.append(item['idroot']) return results def _get_fast_results(term, index='suggestall'): error_response=[{'text': 'FAST results', 'children':[{'id': ''", "label": 0}, {"snippet_id": 58492, "code": "\": \"<p>preview_courselet</p>\", \"description\": \"preview_courselet desc\", \"title\": \"preview_courselet\" } } } status_mock=status_mock.return_value status_mock.find_one.return_value={ onboarding.VIEW_INTRODUCTION", "label": 0}, {"snippet_id": 78526, "code": ".get(user_id) extra_vars={ 'datarequest': datarequest, 'user': user_data, 'site_title': config.get('ckan.site_title'), 'site_url': config.get('ckan.site_url') } subject=base.render_jinja2('emails/subjects", "label": 0}, {"snippet_id": 22568, "code": " describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to", "label": 0}, {"snippet_id": 11397, "code": " Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key", "label": 0}, {"snippet_id": 7384, "code": " the specific language governing permissions and limitations under the License.''' import logging from flask import g, request from flask_restplus import Resource from sqlalchemy import exc, or_ from app", "label": 1}, {"snippet_id": 19264, "code": "=self.worker): self.fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be", "label": 0}, {"snippet_id": 76948, "code": " im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs %s\", str(im_src.size), str(im_dest.size)) logger.debug(\"Mode %s vs %s\", str(im_src", "label": 0}, {"snippet_id": 18037, "code": "**tmpl_context), ) email.send_email(email_msg) def send_password_reset_email(user): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password", "label": 0}, {"snippet_id": 59761, "code": ".keys() return[ self.get_canned_query(database_name, name) for name in names ] def get_canned_query(self, database_name, query_name): queries=self.metadata( \"queries\", database=database_name, fallback=False", "label": 0}, {"snippet_id": 16732, "code": " sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games_and_powers(omitting_players=sitters, players_doubling_up=two_gamers) @permission_required('tournament.add_game'", "label": 0}, {"snippet_id": 61189, "code": " component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s crashed on", "label": 0}, {"snippet_id": 81640, "code": "): can_subscribe=False event_type=str(event.event_type_id.name).lower() event_start=datetime.strptime(event.date_begin, '%Y-%m-%d %H:%M:%S') if event_type=='open' and len(self.fit_subscriptions) > 0: _logger", "label": 1}, {"snippet_id": 55389, "code": " makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t", "label": 0}, {"snippet_id": 66366, "code": ".logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() password_unlock_entry.grab_focus() password_unlock_entry.get_style_context().add_class(", "label": 0}, {"snippet_id": 10865, "code": "/account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user", "label": 0}, {"snippet_id": 27954, "code": ".extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format", "label": 0}, {"snippet_id": 51340, "code": " SshSession(object): def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username", "label": 0}, {"snippet_id": 55863, "code": " \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList(FSPathList): \tdef common_parent(self): \t\tr=None \t\tfor item in self: \t\t\tif r is None: \t\t\t\tr=item", "label": 0}, {"snippet_id": 36896, "code": "] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter", "label": 0}, {"snippet_id": 26755, "code": " process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this", "label": 0}, {"snippet_id": 76586, "code": "=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0.0410861968994s http://localhost/wms?LAYERS=1002&SERVICE=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX", "label": 0}, {"snippet_id": 6832, "code": ".route('/change-password', methods=['GET', 'POST']) @login_required def change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password(form.old_password.data", "label": 0}, {"snippet_id": 64565, "code": "'ArithmeticError', 'ascii', 'AssertionError', 'AttributeError', 'BaseException', 'bin', 'BlockingIOError', 'bool', 'BrokenPipeError', 'BufferError', '__build_class__', 'bytearray', 'bytes', 'BytesWarning', ", "label": 0}, {"snippet_id": 48756, "code": ")).lstrip() if q > '': p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned", "label": 0}, {"snippet_id": 18625, "code": " returns None or the error message. \t\"\"\" \tdef check_database(self): \t\tph=PasswordHasher() \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username==None): \t", "label": 1}, {"snippet_id": 8846, "code": " }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link", "label": 0}, {"snippet_id": 66629, "code": " composite_unlock_entry.get_text(), self.composite_keyfile_path) self.open_database_page() self.logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer", "label": 0}, {"snippet_id": 69451, "code": " that JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen", "label": 0}, {"snippet_id": 16406, "code": "'get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect(reverse('create_games', args=(tournament_id, r.number()))) return render(request, 'tournaments/round_players.html', {'title", "label": 1}, {"snippet_id": 27231, "code": ", object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None", "label": 0}, {"snippet_id": 61877, "code": " landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page): \"\"\"Right now this is just checking for Cloudflare\"", "label": 0}, {"snippet_id": 34954, "code": "=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload", "label": 0}, {"snippet_id": 84249, "code": ", template_name]), template_params, context_instance=RequestContext(request)) def view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs", "label": 0}, {"snippet_id": 35211, "code": " for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull=False).count() ds.data_groups=dgs return render(request, template_name,{'data_sources", "label": 0}, {"snippet_id": 26371, "code": " of tests. check_alive(bool): If true, then we expect the process to be alive and will raise an exception if the process is already dead. wait(bool): If true, then this method will not return until the", "label": 0}, {"snippet_id": 49746, "code": " session) and(not 'social' in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session:", "label": 0}, {"snippet_id": 5810, "code": "['OpenIDConnect', 'MemoryCredentials'] logger=logging.getLogger(__name__) class MemoryCredentials(dict): \"\"\" Non-persistent local credentials store. Use this if you only have one app server, and don't mind", "label": 0}, {"snippet_id": 11854, "code": " import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response, render_to_string from lms.djangoapps.commerce.utils import EcommerceService", "label": 0}, {"snippet_id": 60172, "code": " sqlite_version, \"fts_versions\": fts_versions, \"extensions\": sqlite_extensions, \"compile_options\":[ r[0] for r in conn.execute(\"pragma compile_options;\").fetchall() ], }, } def plugins(self, show_all=False", "label": 0}, {"snippet_id": 50593, "code": " to stdout every 30s. ''' if platform.system()=='Windows': return WindowsUserLock(name) return PosixUserLock(name) def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables", "label": 0}, {"snippet_id": 62508, "code": " from flask import Blueprint from saml2.s_utils import deflate_and_base64_encode from eduid_userdb.user import User from eduid_userdb.data_samples import NEW_COMPLETED_SIGNUP_USER_EXAMPLE from eduid_common", "label": 0}, {"snippet_id": 45863, "code": ", pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return redirect('data_document", "label": 0}, {"snippet_id": 41846, "code": ".gt.code='UN' self.objects.gt.save() response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form", "label": 0}, {"snippet_id": 66420, "code": "(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application/x-iwork-keynote-sffkey\") keyfile_chooser_dialog.add_filter(filter_text) response=keyfile_chooser_dialog", "label": 0}, {"snippet_id": 68948, "code": "+FQnZ1Pn5F09D/kPMNh4qOsyvXWlekaV/SseDZtVziHJ Km6V8TBG3flmFlC3DWQfNNFwn5+pWSB8WHG4bTA5RyYEEYfpbekMtdoWW/Ro8Kmh 41nuxZDSuBJhDeFIp0ccnN2Lp1o6XfIeDYPegyEPSSZqrudfqLrSZhStDlJgXjea JjW6UP6txPtYaaila9/Hn6vF87AQ5bR2dEWB", "label": 0}, {"snippet_id": 21659, "code": ", wait, wait,... Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 56142, "code": " django.conf import settings from django.test import TestCase, Client from django.urls import reverse from experiences.models import ORMExperience from people.models import ORMPerson from profiles.models", "label": 0}, {"snippet_id": 59013, "code": ".get_template('ctms/email/invite_text.txt') rendered_text=text_template.render(context) send_mail( rendered_subj, rendered_text, settings.EMAIL_FROM, [self.email], fail_silently=False ) return{ 'success': True", "label": 0}, {"snippet_id": 34921, "code": "(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n", "label": 0}, {"snippet_id": 26120, "code": "(self._raylet_socket_name) stdout_file, stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address", "label": 1}, {"snippet_id": 9590, "code": " enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information", "label": 0}, {"snippet_id": 61261, "code": " the host the component was running on :type hostname: str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name,", "label": 0}, {"snippet_id": 7410, "code": " app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"/exams/\", methods=[\"GET\"]) class ExamList(Resource", "label": 0}, {"snippet_id": 19413, "code": " redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port", "label": 1}, {"snippet_id": 81398, "code": ".fit_repetition=='weekly': self._handle_weekly_event_repetition(repeating_event) if repeating_event.fit_repetition=='monthly': self._handle_montly_event_repetition(repeating_event) def _handle_daily_event_repetition", "label": 0}, {"snippet_id": 69679, "code": ")))) if pip_packages: logger.info('Installing{} pip packages collected from plugins:{}'.format( len(pip_packages), ' '.join(pip_packages) )) conda.ensure_pip_packages(USER_ENV_PREFIX, pip_packages) def", "label": 0}, {"snippet_id": 64561, "code": " builtins_whitelist=[ 'abs', 'all', 'any', 'ArithmeticError', 'ascii', 'AssertionError', 'AttributeError', 'BaseException', 'bin', 'BlockingIOError', 'bool', 'BrokenPipeError', 'BufferError', '__build_class__", "label": 0}, {"snippet_id": 11639, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context", "label": 0}, {"snippet_id": 53175, "code": ".get_object().budget, None) data={'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data)", "label": 0}, {"snippet_id": 46500, "code": "'id'])) except ExtractedChemical.DoesNotExist as e: extracted_chemical=None context['clean_comp_err'][i +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical", "label": 0}, {"snippet_id": 73245, "code": ", message) return self.cleaned_data class LoginForm(forms.Form): login_text=LoginFormText.login create_account_text=StandardFormText.create_account email=forms.EmailField( label=StandardFormText.username_or_email_label", "label": 0}, {"snippet_id": 9615, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url=", "label": 0}, {"snippet_id": 60432, "code": "(env=self.jinja_env) app.add_route(IndexView.as_view(self), r\"/<as_format:(\\.jsono?)?$>\") app.add_route(favicon, \"/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path,", "label": 0}, {"snippet_id": 62782, "code": " session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST", "label": 0}, {"snippet_id": 65386, "code": ".STYLE_PROVIDER_PRIORITY_USER) def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\") !=\"\" and exists(keepassgtk", "label": 0}, {"snippet_id": 59424, "code": "(ignoring max_returned_rows) \"\"\".strip()), ConfigOption(\"max_csv_mb\", 100, \"\"\" Maximum size allowed for CSV export in MB -set 0 to disable this limit \"\"\".strip()), ConfigOption(\"truncate_cells_html\", 2048", "label": 0}, {"snippet_id": 21416, "code": ": process.terminate() process.wait() if process.returncode !=0: message=(\"Valgrind detected some errors in process of \" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info", "label": 0}, {"snippet_id": 68139, "code": " writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s", "label": 0}, {"snippet_id": 30362, "code": ": response=make_response(json.dumps('Current user is already connected.'), 200) response.headers['Content-Type']='application/json' return response login_session['access_token']=credentials.access_token", "label": 0}, {"snippet_id": 32425, "code": "=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command()) else: return node else: return None def redirections(self): redirs=", "label": 0}, {"snippet_id": 10671, "code": " ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in", "label": 0}, {"snippet_id": 61075, "code": ".pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) <", "label": 1}, {"snippet_id": 2326, "code": ".st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath,", "label": 0}, {"snippet_id": 3857, "code": ".logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s", "label": 0}, {"snippet_id": 60574, "code": ".add_route( RowView.as_view(self), r\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?)?$>\", ) self.register_custom_units() @app.middleware(\"response\") def redirect_on_404_with_trailing_slash", "label": 0}, {"snippet_id": 27836, "code": " \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is", "label": 0}, {"snippet_id": 13324, "code": " register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core", "label": 0}, {"snippet_id": 25903, "code": " os.path.isdir(path): try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def start_redis(self): \"\"\"Start the Redis servers.\"\"\" assert self._redis_address is", "label": 0}, {"snippet_id": 71204, "code": ".Session.create() session_hash='0' self.session=session self.session_hash=session_hash return self def _get_user_class(self): try: return utils.import_class(self._config['user_model']) except Exception:", "label": 0}, {"snippet_id": 10359, "code": ": state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login or state", "label": 0}, {"snippet_id": 81997, "code": "'home-view') class CustomShortURLCreateView(View): def get(self, request, *args, **kwargs): form=JustURLForm() return render(request, 'custom-short-url.html',{'form': form}) def post(self, request, *args,", "label": 0}, {"snippet_id": 71172, "code": " return self def _save_user(self): pass class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models", "label": 0}, {"snippet_id": 33630, "code": "': ethylparaben_stats=e self.assertEqual(0, ethylparaben_stats['products_n'], 'There should be 0 products \\ associated with ethylparaben') self.client.login(username='Karyn', password='specialP@55word'", "label": 0}, {"snippet_id": 4190, "code": ".client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths:", "label": 0}, {"snippet_id": 69675, "code": " pip_packages=list(set(itertools.chain(*hook.tljh_extra_user_pip_packages()))) if pip_packages: logger.info('Installing{} pip packages collected from plugins:{}'.format( len(pip_packages), ' '.join(pip_packages)", "label": 0}, {"snippet_id": 67975, "code": ".get_context_data(**kwargs) return context def get_queryset(self): query=Hunt.objects.order_by('id') query=query.annotate(count=Count('events')) return query class EventListView(PaginationMixin, ListView): model", "label": 0}, {"snippet_id": 55852, "code": "\tsuper(Link,self).__init__(path) \t\tassert(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def root(): \treturn Folder(\"/\") def home(): \treturn Folder(os.path.expanduser(\"~\")) def FSItemList", "label": 0}, {"snippet_id": 36218, "code": "(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\"", "label": 1}, {"snippet_id": 74535, "code": "(): next_url=request.GET.get('next', reverse('home')) return HttpResponseRedirect(next_url) else: logger.error('login() -got anonymous user: %s' % request.META) return HttpResponseServerError('Internet", "label": 1}, {"snippet_id": 1302, "code": " HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation", "label": 1}, {"snippet_id": 30565, "code": "=email).one() return user.id except: return None @app.route('/grudget/<int:grudget_id>/grudge/JSON') def grudgetGrudgeJSON(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() grudges", "label": 1}, {"snippet_id": 30740, "code": "'As juicy as this is, you are not authorized to edit this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': if request.form[", "label": 1}, {"snippet_id": 25017, "code": "} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message.ResourcesAvailableCapacity(i", "label": 0}, {"snippet_id": 79692, "code": " A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request. :type organization_id: string :returns: A dict", "label": 0}, {"snippet_id": 9415, "code": "(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405", "label": 0}, {"snippet_id": 18715, "code": "'signin.html',error=check_details) \t\t\treturn \t\tself.set_secure_cookie(\"user\", self.username) \t\tself.redirect('/postlogin') \t\treturn \"\"\" IndexHandler(): Class that handles / \"\"\" class IndexHandler(tornado.web", "label": 1}, {"snippet_id": 28491, "code": ".unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers", "label": 0}, {"snippet_id": 1240, "code": " return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r", "label": 0}, {"snippet_id": 81119, "code": " redirect=str('/'+referer.split('/')[-1]) return http.request.redirect(redirect) def _update_counter_subscription(self, event, partner, subscription_update_counter): event_cat=str(event.event_type_id.name)", "label": 1}, {"snippet_id": 27459, "code": " Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( ", "label": 0}, {"snippet_id": 6676, "code": ".auth_token return redirect(request.args.get('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required", "label": 1}, {"snippet_id": 32698, "code": " CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable. '''", "label": 0}, {"snippet_id": 18077, "code": "=user), ) email.send_email(email_msg) def send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, ", "label": 0}, {"snippet_id": 84759, "code": " AJAX function that previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller", "label": 0}, {"snippet_id": 23117, "code": ".raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed", "label": 0}, {"snippet_id": 10351, "code": ".AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id),", "label": 0}, {"snippet_id": 24434, "code": " mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address", "label": 1}, {"snippet_id": 59406, "code": "=header) \"\"\".strip()), ConfigOption(\"cache_size_kb\", 0, \"\"\" SQLite cache size in KB(0==use SQLite default) \"\"\".strip()), ConfigOption(\"allow_csv_stream\", True, \"\"\" Allow.csv?_stream=1 to download all rows", "label": 0}, {"snippet_id": 23895, "code": " def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type", "label": 0}, {"snippet_id": 73354, "code": "'importposition'), path('positions/', views.positions, name='positions'), path('position/', views.position, name='position'), path('importapplications/', views.import_applications, name='importapplications'), ", "label": 1}, {"snippet_id": 52883, "code": "'message': instance.text, 'file_name': os.path.basename(urlparse(instance.attachment.path).path) if instance.attachment else None, 'file_link': instance.file_download_link if instance.attachment else None", "label": 0}, {"snippet_id": 775, "code": ": f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since", "label": 0}, {"snippet_id": 28983, "code": "\"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name", "label": 0}, {"snippet_id": 84251, "code": " template_params, context_instance=RequestContext(request)) def view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES,", "label": 0}, {"snippet_id": 81257, "code": ".Boolean(string='Herhalen?', default=False) fit_repetition=fields.Selection([('daily', 'Dagelijks'), ('weekly', 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating", "label": 0}, {"snippet_id": 75627, "code": "[{'text': 'Previously Used', 'children': _select2_list(keywords)}] else: return[] def _build_fast_url(term, index): url='%s?query=%s&queryIndex=%s' %(settings.FAST_LOOKUP_BASE_URL, urllib.parse.quote(term", "label": 0}, {"snippet_id": 63215, "code": ") as c: resp=c.post('/token-login', data=data) self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_LOGIN_FAILURE_REDIRECT_URL'])) class UnAuthnAPITestCase", "label": 0}, {"snippet_id": 1517, "code": "\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /", "label": 0}, {"snippet_id": 71460, "code": " import models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2.WSGIApplication()) class TestAuthMiddleware(test_base.BaseTestCase): def setUp(self", "label": 0}, {"snippet_id": 25218, "code": "{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message", "label": 0}, {"snippet_id": 12162, "code": ", 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive", "label": 0}, {"snippet_id": 42270, "code": ").content.decode('utf8') self.assertNotIn('<th>Product</th>', response, 'Data Group should have Product column.') def test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f", "label": 0}, {"snippet_id": 64336, "code": "=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the subject id for user{0} ' 'Performing local logout'.format( session['eduPersonPrincipalName'] ) ", "label": 0}, {"snippet_id": 45291, "code": ") return document_stats def product_with_puc_count_by_month(): product_stats=list(ProductToPUC.objects .filter(created_at__gte=chart_start_datetime) .annotate( puc_assigned_month=(Trunc('created_at', 'month", "label": 0}, {"snippet_id": 45440, "code": " import login_required from django.shortcuts import render, redirect, get_object_or_404 from djqscsv import render_to_csv_response from dashboard.forms import * from factotum.settings import EXTRA from", "label": 0}, {"snippet_id": 27812, "code": " self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being", "label": 0}, {"snippet_id": 12772, "code": ") response=view(request, *args, **kwargs) return response.content def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request", "label": 0}, {"snippet_id": 78611, "code": " exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will", "label": 0}, {"snippet_id": 71240, "code": ".session.user_id)) if self.user is None: pass else: self.user=None return self def _load_user_by_profile(self, profile): if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class", "label": 0}, {"snippet_id": 28399, "code": "): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty", "label": 0}, {"snippet_id": 24335, "code": ".redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers)==\"False\" and self.worker.mode==ray.SCRIPT_MODE and driver_id !=self.worker.task_driver_id", "label": 0}, {"snippet_id": 62339, "code": "'name_id']) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn loa=get_loa(current_app.config.get('AVAILABLE_LOA'), session_info) session['eduPersonAssurance']=loa session.persist()", "label": 0}, {"snippet_id": 25153, "code": "(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins", "label": 0}, {"snippet_id": 36638, "code": " dateutil.relativedelta import relativedelta from django.http import HttpResponse from django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models", "label": 0}, {"snippet_id": 48154, "code": ".contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm, BulkProductTagForm", "label": 1}, {"snippet_id": 63690, "code": " response=self.app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ", "label": 0}, {"snippet_id": 36155, "code": "''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,", "label": 0}, {"snippet_id": 48239, "code": ")) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def", "label": 1}, {"snippet_id": 14895, "code": ".join(app.static_folder, name) return json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json'", "label": 0}, {"snippet_id": 37244, "code": "=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True) clean_comp_data_file=forms.FileField(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args", "label": 0}, {"snippet_id": 61682, "code": "(securedrop: DirectoryEntry, commit=False) -> ScanResult: \"\"\" Scan a single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for", "label": 1}, {"snippet_id": 60270, "code": " ) self.prepare_connection(conn) setattr(connections, db_name, conn) time_limit_ms=self.sql_time_limit_ms if custom_time_limit and custom_time_limit < time_limit_ms: time_limit_ms=custom_time_limit with", "label": 0}, {"snippet_id": 84106, "code": " group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_write: return HttpResponseForbidden", "label": 0}, {"snippet_id": 29860, "code": " post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post) db.session.add(comment) db.session.commit() return redirect(url_for('gallery", "label": 0}, {"snippet_id": 25028, "code": ".ResourcesAvailableCapacity(i)) static_resources[static]=( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id", "label": 0}, {"snippet_id": 51229, "code": ")) subprocess.check_call(*args, **kwargs) def python(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args", "label": 0}, {"snippet_id": 2879, "code": ".module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): ", "label": 0}, {"snippet_id": 17932, "code": "'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed!</strong> Incorrect password.'), 'danger') return flask.redirect(", "label": 0}, {"snippet_id": 3001, "code": ".user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'", "label": 0}, {"snippet_id": 42816, "code": "(), response.content) def test_qa_script_without_ext_text(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=9", "label": 0}, {"snippet_id": 77520, "code": " layers_by_name[layer_name].label !=\"Imagery\": layers_by_name.pop(layer_name) return layers_by_name def main(): obj=GEELayer() hostname=gethostname() target_path=\"merc\" server_url=\"http://%s.xxx.xxx.com", "label": 0}, {"snippet_id": 8444, "code": " in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str:", "label": 0}, {"snippet_id": 51738, "code": ": genSCI } class generator(object): def __init__(self,category): self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count=0 def updateScope(self,scope): if(self.count", "label": 0}, {"snippet_id": 27397, "code": ") self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs", "label": 0}, {"snippet_id": 38378, "code": ".extracted_list_presence import ExtractedListPresence from.extracted_hhdoc import ExtractedHHDoc from.extracted_hhrec import ExtractedHHRec from.script import Script from.dsstox_lookup import DSSToxLookup", "label": 1}, {"snippet_id": 63876, "code": ": \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get(", "label": 0}, {"snippet_id": 77869, "code": "'users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print(", "label": 0}, {"snippet_id": 58294, "code": "{ \"html\": \"<p>instructor_intro</p>\", \"description\": \"instructor_intro desc\", \"title\": \"instructor_intro\" }, onboarding.CREATE_COURSE:{ \"html\": \"<p>create_course</p>\", \"description\": \"create_course desc", "label": 0}, {"snippet_id": 21229, "code": "(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address", "label": 0}, {"snippet_id": 38154, "code": " PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if", "label": 0}, {"snippet_id": 37972, "code": "(parent_model=parent_model, model=model, fields=formset_fields, formset=formset, form=form, extra=extra, can_delete=can_delete) def one(): ChemicalFormSet=make_formset( parent_model=parent, model=child, formset", "label": 0}, {"snippet_id": 64780, "code": "') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points(deductions, points_per_case, 'failed test", "label": 1}, {"snippet_id": 69736, "code": " open(CONFIG_FILE, 'w+') as f: yaml.dump(config, f) def main(): from.log import init_logging init_logging() argparser=argparse.ArgumentParser() argparser.add_argument( '--admin', nargs='*', help='List of", "label": 0}, {"snippet_id": 8382, "code": "(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns", "label": 0}, {"snippet_id": 44534, "code": ".csv', url='https://www.epa.gov') dt=DocumentType.objects.create(title='MSDS', code='MS', group_type=gt) doc=DataDocument.objects.create(title='test document', data_group=dg, document_type=dt, filename=", "label": 0}, {"snippet_id": 49468, "code": "(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem", "label": 0}, {"snippet_id": 9209, "code": "(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site(", "label": 1}, {"snippet_id": 53621, "code": " buffer=self.bytes_buffer, encoding=redirection_source.encoding, write_through=True ) @property def source_encoding(self): if self.redirection_source.encoding: return self.redirection_source.encoding return", "label": 1}, {"snippet_id": 84543, "code": " article with name \\'%s\\' already exists' % old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs", "label": 0}, {"snippet_id": 53651, "code": " buffer and returns a string those contents :return: A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '", "label": 0}, {"snippet_id": 29789, "code": "=image, tags=tags) db.session.add(post) current_user.posts.append(post) db.session.commit() return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the benwa", "label": 0}, {"snippet_id": 3962, "code": "/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile", "label": 0}, {"snippet_id": 36494, "code": ".assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_producttopuc_counts", "label": 0}, {"snippet_id": 10540, "code": " pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging", "label": 0}, {"snippet_id": 82588, "code": ": \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process", "label": 0}, {"snippet_id": 52629, "code": " team_object.name) flash(flash_message) return redirect(\"/view-team\") @app.route(\"/actions-board\") def display_user_actions_board(): \"\"\"Retrieve user and project data from db, render projects on action page.", "label": 0}, {"snippet_id": 34448, "code": " ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By", "label": 0}, {"snippet_id": 6467, "code": "=json.loads(request.args['state']) csrf_token=state['csrf_token'] destination=state['destination'] code=request.args['code'] except(KeyError, ValueError): logger.debug(\"Can't retrieve CSRF token, state, or", "label": 0}, {"snippet_id": 24614, "code": ".warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second to", "label": 1}, {"snippet_id": 64047, "code": "(LogoutResponseSchema) def logout(): \"\"\" SAML Logout Request initiator. This view initiates the SAML2 Logout request using the pysaml2 library to create the LogoutRequest. \"\"\" eppn=session.get('user_eppn", "label": 0}, {"snippet_id": 54778, "code": "\"\\n\"+problem_text) \t\tself.p.pprint(self.code_list) \t\t \t\tself.count_by_groups=0 \t\tfor group in self.problem_groups.values(): \t\t\tself.count_by_groups +=len(group) \t\tprint self.count_by_groups \t\t \tdef process_hwml", "label": 1}, {"snippet_id": 1403, "code": ") newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 32688, "code": "(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node): ''' A node that contains a single shell command. Args: command: The name of the executable to run(will be looked", "label": 0}, {"snippet_id": 46003, "code": ".MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context={ 'datagroup' : dg, 'documents' : paginator.page(1 if page is None else page), 'all_documents' : docs", "label": 0}, {"snippet_id": 69490, "code": " as e: if isinstance(e.reason, ConnectionRefusedError): time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format(times)) def ensure_symlinks(prefix): \"\"", "label": 0}, {"snippet_id": 61933, "code": ": https://quantcast.zendesk.com/hc/en-us/articles/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux Digital: https://whotracks", "label": 0}, {"snippet_id": 3945, "code": ", }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 50047, "code": "['filename'] if('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER", "label": 0}, {"snippet_id": 564, "code": " continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath:", "label": 1}, {"snippet_id": 5518, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\"", "label": 0}, {"snippet_id": 24908, "code": "( \"Monitor: \" \"TODO: if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis", "label": 0}, {"snippet_id": 75605, "code": " search_results: select2_results.append({'id': r.id, 'text': r.text}) return select2_results def _get_previously_used(model, term): keywords=Keyword.search(term=term, order='text') if len(keywords) > 0", "label": 0}, {"snippet_id": 26000, "code": " stderr_file=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not", "label": 0}, {"snippet_id": 30028, "code": "\"\"\"Return object data in easily serializeable format\"\"\" return{ 'name': self.name, 'id': self.id, } class Grudge(Base): __tablename__='Grudge' id=Column(Integer, primary_key=True) name=Column(String(80", "label": 0}, {"snippet_id": 43820, "code": " cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait", "label": 0}, {"snippet_id": 65384, "code": " css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER) def first_start_screen(self): if keepassgtk.config_manager.has_group(\"history\") and keepassgtk.config_manager.get_string(\"history\", \"last-opened-db\") !=\"\" and", "label": 0}, {"snippet_id": 72389, "code": " def cephx_clients(self): return[client for client in CephX.list_clients()] @Endpoint('GET', '/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir", "label": 0}, {"snippet_id": 72705, "code": ": request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request, user) return redirect('home') if request", "label": 1}, {"snippet_id": 58828, "code": "=models.ForeignKey(User, blank=True, null=True) email=models.EmailField() code=models.CharField('invite code', max_length=255) status=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default", "label": 0}, {"snippet_id": 35192, "code": " list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except: ds.no_category=0", "label": 0}, {"snippet_id": 61486, "code": ".run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers\") for subscriber in self.subscribed_queues: subscriber.put(ret)", "label": 0}, {"snippet_id": 44082, "code": "'submit').click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get", "label": 0}, {"snippet_id": 16141, "code": " import Tournament, Round, Game from tournament.models import TournamentPlayer, RoundPlayer, GamePlayer def get_round_or_404(tournament, round_num): \"\"\"Return the specified numbered round of the specified", "label": 0}, {"snippet_id": 20130, "code": "(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index]", "label": 0}, {"snippet_id": 8830, "code": " released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{", "label": 0}, {"snippet_id": 73561, "code": " clear_get_data(request): request.GET._mutable=True request.GET['key']=None request.GET._mutable=False def authenticate_user(account_key): if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token", "label": 0}, {"snippet_id": 14273, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api", "label": 0}, {"snippet_id": 49891, "code": "'currentFile' in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session)", "label": 0}, {"snippet_id": 42576, "code": ".assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find/?q=avcat') self.assertContains", "label": 0}, {"snippet_id": 76235, "code": " language=language, version_slug=version_slug, ) def redirect_sphinx_htmldir(self, path, language=None, version_slug=None): if path.endswith('.html'): log.debug('Redirecting %s', self) path=path[1:] to", "label": 0}, {"snippet_id": 14382, "code": ")) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the", "label": 0}, {"snippet_id": 18885, "code": " try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin: if admin.is_open: return{'gospel_trips_available': True} return{'gospel_trips_available': False}", "label": 1}, {"snippet_id": 44302, "code": ".create(product=p, puc=puc) url=self.live_server_url +f'/product/{p.pk}/' self.browser.get(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit.is_enabled(), \"Button should", "label": 0}, {"snippet_id": 28569, "code": ": The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources", "label": 0}, {"snippet_id": 25747, "code": ".path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client(", "label": 0}, {"snippet_id": 66646, "code": ".get_style_context().add_class(\"error\") composite_unlock_select_button.get_style_context().remove_class(\"suggested-action\") composite_unlock_select_button.get_style_context().add_class(\"destructive-action\")", "label": 0}, {"snippet_id": 78685, "code": "['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic", "label": 0}, {"snippet_id": 43788, "code": "(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"", "label": 0}, {"snippet_id": 16194, "code": " render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify which players are", "label": 0}, {"snippet_id": 27605, "code": " event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if", "label": 0}, {"snippet_id": 27662, "code": " worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes:", "label": 0}, {"snippet_id": 15619, "code": ".input_source_final.data=command.get('input_source_final', '') for index, command in enumerate(get_command('change_input_series_all_models')): sub_form=form.change_input_series_all_models[index] sub_form", "label": 0}, {"snippet_id": 18874, "code": "=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None)", "label": 0}, {"snippet_id": 41134, "code": ".url) new_product=Product.objects.get(upc='stub_9100') self.assertContains(response, f'product/%s' % new_product.id) data={'title' :['Product Title'], 'upc' :['stub_9101'], 'document_type':[1], 'return_url", "label": 0}, {"snippet_id": 44403, "code": "/{doc.pk}/' self.browser.get(dd_url) try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') except NoSuchElementException: self.fail(\"Absence of weight_fraction_type element", "label": 0}, {"snippet_id": 34446, "code": "(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element", "label": 0}, {"snippet_id": 58654, "code": ".exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy=instructor.user, isPreview=True, isLive=False,", "label": 1}, {"snippet_id": 52198, "code": " flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return \"Pending my good", "label": 0}, {"snippet_id": 27361, "code": "._check_usage() def update(self, **kwargs): \"\"\"Update the settings according to the keyword arguments. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self", "label": 0}, {"snippet_id": 39913, "code": " as _ from dashboard.models import ExtractedText class QANotes(CommonInfo): extracted_text=models.OneToOneField(ExtractedText, on_delete=models.CASCADE) qa_notes=models.TextField(null=True, blank=True)", "label": 1}, {"snippet_id": 51162, "code": " self._enabled_options: enabled=True if step.name in self._disabled_options: enabled=False if enabled: print step.name step.run(self._context) def add_bool_option(self, *args, **kwargs): kwargs=dict(kwargs", "label": 0}, {"snippet_id": 39854, "code": "(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) central_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=", "label": 0}, {"snippet_id": 82653, "code": " monitoring job.\"\"\" def __init__(self, pid, comp_name, hostname, host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name:", "label": 0}, {"snippet_id": 40566, "code": " response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username=", "label": 0}, {"snippet_id": 81683, "code": "() and event_type=='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for event id: %s, name: %s'", "label": 0}, {"snippet_id": 13192, "code": ".get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected", "label": 0}, {"snippet_id": 72767, "code": "(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error}) return render(request, 'registration/login.html', {'login_form': form}) return redirect('home'", "label": 0}, {"snippet_id": 12723, "code": "/password_reset/', request.session) } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol", "label": 0}, {"snippet_id": 33806, "code": " import html from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard", "label": 0}, {"snippet_id": 13893, "code": " logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers", "label": 0}, {"snippet_id": 60382, "code": " get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( [ FileSystemLoader(template_paths), PrefixLoader( {\"default\": FileSystemLoader(default_templates", "label": 0}, {"snippet_id": 83616, "code": " group def get_articles_for_object(object, article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname,", "label": 0}, {"snippet_id": 83552, "code": ".utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION except AttributeError: WIKI_LOCK_DURATION", "label": 0}, {"snippet_id": 30417, "code": "'] output='' output +='<h1>Welcome, ' output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \" style=\"width: 300px; height: 300px;border", "label": 0}, {"snippet_id": 38599, "code": " extracted=models.BooleanField(default=False) document_type=models.ForeignKey(DocumentType, on_delete=models.PROTECT, null=True, blank=True) organization=models.CharField(max_length=255, blank=True) note=models", "label": 0}, {"snippet_id": 44184, "code": "') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source", "label": 0}, {"snippet_id": 935, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 69007, "code": "/affmIMoMXSozKmga81JSwkADO1JMgUy6dApXz9kP4EE3g== =CLGF -----END PGP PUBLIC KEY BLOCK----- \"\"\".strip() apt.trust_gpg_key(key) apt.add_source('nodesource', 'https://deb.nodesource.com/node_10.x', 'main') apt.install_packages", "label": 0}, {"snippet_id": 29788, "code": " image=image, tags=tags) db.session.add(post) current_user.posts.append(post) db.session.commit() return redirect(url_for('gallery.show_post', post_id=post.id)) flash('There was an issue with adding the", "label": 0}, {"snippet_id": 61285, "code": "\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self, hostname): \"\"\"Creates a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message=", "label": 0}, {"snippet_id": 81619, "code": " fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0 for subscription in self.fit_subscriptions: counter +=1 self.fit_subscription_count=counter def can_subscribe(self, event):", "label": 0}, {"snippet_id": 79598, "code": "(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context['auth_user_obj", "label": 0}, {"snippet_id": 69710, "code": "'jupyterhub_config.d')]: os.makedirs(path, mode=0o700, exist_ok=True) migrator.migrate_config_files() if os.path.exists(CONFIG_FILE): with open(CONFIG_FILE, 'r') as f: config=yaml.load(f) else: config={", "label": 0}, {"snippet_id": 74116, "code": "\"DASHBOARD\" class ReportBasePartial(EvalDataMixin, wizard_builder_partials.WizardFormPartial): model=models.Report storage_helper=view_helpers.EncryptedReportStorageHelper EVAL_ACTION_TYPE=\"VIEW\" @property def", "label": 0}, {"snippet_id": 76577, "code": "&STYLES=&FORMAT=image%2Fjpeg& CRS=EPSG:3857&BBOX=-30000000.0,-30000000.0,30000000.0,30000000.0& WIDTH=400&HEIGHT=400 For 16, threaded is faster: 0.108545780182s vs 0.0410861968994s http://localhost/wms", "label": 0}, {"snippet_id": 31073, "code": "=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/delete', methods", "label": 0}, {"snippet_id": 11560, "code": " course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect", "label": 0}, {"snippet_id": 32420, "code": "=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command()) else: return node else: return", "label": 0}, {"snippet_id": 65212, "code": ".repository import Gio, Gdk, Gtk from keepassgtk.logging_manager import LoggingManager from keepassgtk.database_manager import DatabaseManager from keepassgtk.create_database import CreateDatabase from", "label": 0}, {"snippet_id": 72552, "code": " request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST", "label": 0}, {"snippet_id": 29080, "code": "(attr) if wrapper is None: @functools.wraps(orig_attr) def _wrapper(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper", "label": 0}, {"snippet_id": 28303, "code": " \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may", "label": 0}, {"snippet_id": 5139, "code": " self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\"", "label": 0}, {"snippet_id": 61918, "code": " Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support.chartbeat.com/docs/ Quantcast: https://quantcast.zendesk.com/hc/en-us/articles/115014888548--Implement", "label": 0}, {"snippet_id": 44026, "code": "(27): ds=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"//table[@id='sources", "label": 0}, {"snippet_id": 74387, "code": ".get_object() class EncryptedWizardPartial( _ReportUpdatePartial, wizard_builder_partials.WizardPartial ): steps_helper=view_helpers.ReportStepsHelper EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, ", "label": 0}, {"snippet_id": 46691, "code": " template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'\\n'] errors=[] filenames=[] count=0 for line in table: count", "label": 0}, {"snippet_id": 56649, "code": " login_redirect, experience_redirect, profile_redirect, \\ root_redirect, aasa_redirect urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect')", "label": 1}, {"snippet_id": 3508, "code": ", path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test", "label": 0}, {"snippet_id": 12839, "code": " no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration", "label": 0}, {"snippet_id": 72156, "code": " return ganesha_conf.get_export(ex_id).to_dict() def get(self, cluster_id, export_id): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise", "label": 0}, {"snippet_id": 50871, "code": ".items(): if key in result: result[key]=value else: raise TypeError(\"{0}() got an unexpected keyword argument '{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self", "label": 0}, {"snippet_id": 48774, "code": ")[:max_products_returned]) full_p_count=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form", "label": 0}, {"snippet_id": 53149, "code": ".assertEqual(self.view.get_object().house_type, None) self.assertEqual(self.view.get_object().house_age, None) self.assertEqual(self.view.get_object().house_cond, None) data={'budget': 'TEXT'} self.client", "label": 0}, {"snippet_id": 37110, "code": "} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None) super(DataGroupForm, self).__init__(*args, **kwargs) self.fields['csv'].widget.attrs", "label": 0}, {"snippet_id": 18807, "code": "/bootstrap_include.html') if __name__=='__main__': \ttornado.options.parse_command_line() \tsettings={ \t\t\"cookie_secret\": \"j84i6ykTfmew9As25eYqAbs5KIhrUv/gmp801s9zRo=\", \t\t\"xsrf_cookies\":True, \t\t\"login_url\": \"", "label": 1}, {"snippet_id": 9385, "code": " Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom", "label": 0}, {"snippet_id": 16190, "code": ": t, 'round': r} return render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form", "label": 0}, {"snippet_id": 28956, "code": " the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor', or 'object'. worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <", "label": 0}, {"snippet_id": 49030, "code": ".objects.get(pk=pk) p.delete() return redirect('product_curation') @login_required() def product_list(request): template_name='product_curation/products.html' products=Product.objects.all() data={} data", "label": 0}, {"snippet_id": 29709, "code": ")) @gallery.route('/gallery/benwa/add', methods=['GET', 'POST']) @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename) f.save", "label": 0}, {"snippet_id": 3512, "code": " response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific", "label": 0}, {"snippet_id": 69886, "code": "<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index", "label": 0}, {"snippet_id": 29298, "code": " Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string(name) if hasattr(mod, 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app):", "label": 0}, {"snippet_id": 21559, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"", "label": 0}, {"snippet_id": 78419, "code": ".open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description'", "label": 0}, {"snippet_id": 61809, "code": ".latest() except ScanResult.DoesNotExist: results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result): prior_result.result_last_seen=timezone.now() prior_result.save()", "label": 1}, {"snippet_id": 11951, "code": " UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import", "label": 0}, {"snippet_id": 60323, "code": ".args==('interrupted',): raise InterruptedError(e) print( \"ERROR: conn={}, sql={}, params={}:{}\".format( conn, repr(sql), params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description", "label": 0}, {"snippet_id": 79262, "code": " log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id': organization_id}) except Exception as", "label": 0}, {"snippet_id": 1611, "code": ".templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f", "label": 0}, {"snippet_id": 23392, "code": " is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return \"\" if not isinstance(byte_str", "label": 0}, {"snippet_id": 75060, "code": " from.forms import MetadataForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis", "label": 0}, {"snippet_id": 24447, "code": " file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self", "label": 1}, {"snippet_id": 29361, "code": " import db from benwaonline.oauth import twitter from benwaonline.models import user_datastore, User from benwaonline.auth import auth from benwaonline.auth.forms import RegistrationForm @auth.before_request", "label": 1}, {"snippet_id": 50207, "code": "('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email already in use') return redirect('/signup') @app.route(\"/login\") def login(): if 'return_url' in request", "label": 0}, {"snippet_id": 43967, "code": "'body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(", "label": 0}, {"snippet_id": 79827, "code": "'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"", "label": 1}, {"snippet_id": 38320, "code": " related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_", "label": 1}, {"snippet_id": 45116, "code": "=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id", "label": 0}, {"snippet_id": 13432, "code": " @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load", "label": 0}, {"snippet_id": 32449, "code": ": redirs.append(redir) redir=self.redirection() if len(redirs) > 0: return RedirectionsHelper(redirs) else: return None def redirection(self): if self.accept(TokenType.REDIRECT_OUT): filename=self.expect", "label": 0}, {"snippet_id": 81685, "code": "='crosstraining': return False for subscription in self.fit_subscriptions: if subscription._can_subscribe(event.event_type_id): _logger.info('Can subscribe for event id: %s, name: %s', event.event_type_id", "label": 0}, {"snippet_id": 60045, "code": "\" database without first loading the SpatiaLite module.\" \"\\n\\nRead more: https://datasette.readthedocs.io/en/latest/spatialite.html\" ) else: raise return self._inspect def register_custom_units(self): ", "label": 0}, {"snippet_id": 77659, "code": "'package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource", "label": 0}, {"snippet_id": 33302, "code": ".register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site", "label": 0}, {"snippet_id": 68603, "code": ":index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for tw in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime", "label": 0}, {"snippet_id": 48984, "code": "' : tagform, 'docs' : docs, 'assumed_tags': assumed_tags }) @login_required() def product_update(request, pk, template_name=('product_curation/' 'product_edit.html')): p=Product.objects.get(pk=pk) form", "label": 0}, {"snippet_id": 15821, "code": " commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/history", "label": 0}, {"snippet_id": 75341, "code": " candidate_submit(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) candidate", "label": 0}, {"snippet_id": 22009, "code": " be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start", "label": 0}, {"snippet_id": 84264, "code": " group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None", "label": 0}, {"snippet_id": 66395, "code": " widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text", "label": 0}, {"snippet_id": 70827, "code": " part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os", "label": 1}, {"snippet_id": 28929, "code": " finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name", "label": 0}, {"snippet_id": 30456, "code": "['username']) print \"done!\" return output @app.route('/logout') def disconnect(): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del", "label": 1}, {"snippet_id": 82099, "code": "*kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form=ManyURLSForm(request.POST or None) if form.is_valid(): urls=form", "label": 0}, {"snippet_id": 39805, "code": " query-set containing all items of which 'item' is a part of. direction is 'next' or 'prev' ''' getit=False if direction=='prev': models=models.reverse() for m in models: if getit: return m if item==m:", "label": 0}, {"snippet_id": 70025, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]", "label": 0}, {"snippet_id": 29017, "code": " class _ThreadSafeProxy(object): \"\"\"This class is used to create a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object", "label": 0}, {"snippet_id": 54104, "code": "[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about", "label": 0}, {"snippet_id": 69447, "code": " ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub to come up(", "label": 0}, {"snippet_id": 25208, "code": "(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel,", "label": 0}, {"snippet_id": 31903, "code": ")) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert", "label": 0}, {"snippet_id": 74731, "code": " kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type', '') if person_instance: person_form", "label": 0}, {"snippet_id": 37857, "code": " fields='__all__' def include_clean_comp_data_form(dg): '''Returns the CleanCompDataForm based on conditions of DataGroup type=Composition and at least 1 document extracted ''' if not dg.type in['CO']:", "label": 0}, {"snippet_id": 66011, "code": ".set_destroy_with_parent(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(\"quit_button\") back_button", "label": 0}, {"snippet_id": 58430, "code": " onboarding.NEXT_STEPS:{ \"done\": False, \"settings\":{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" } }, onboarding.INVITE_SOMEBODY:{ \"done\": True, \"settings\":{ \"html", "label": 0}, {"snippet_id": 3586, "code": ") response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path", "label": 0}, {"snippet_id": 39877, "code": "(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script, on_delete=models.CASCADE, null=True, blank=True) rawchem_ptr=models.OneToOneField", "label": 0}, {"snippet_id": 3050, "code": ", 'next') params={ 'response_type': 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings", "label": 0}, {"snippet_id": 20752, "code": "=ray_params.redis_address self._plasma_store_socket_name=None self._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes", "label": 0}, {"snippet_id": 30437, "code": "] output +=' \" style=\"width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are now logged in as %s\" % login_session['username']) print", "label": 1}, {"snippet_id": 49320, "code": "(ExtractedText, pk=pk) for extracted_list_presence in extracted_text.rawchem.select_subclasses('extractedlistpresence'): tag_form=ExtractedListPresenceTagForm(request.POST or None, instance=extracted_list_presence", "label": 0}, {"snippet_id": 2426, "code": "\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template", "label": 0}, {"snippet_id": 28814, "code": " try: return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit", "label": 0}, {"snippet_id": 34051, "code": "=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser", "label": 0}, {"snippet_id": 8539, "code": " user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration", "label": 0}, {"snippet_id": 37788, "code": "): def __init__(self, *args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms", "label": 0}, {"snippet_id": 32834, "code": " descriptor to modify. newfd: The new file descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self", "label": 1}, {"snippet_id": 40828, "code": " orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save() response=self.client.get('/').content.decode('utf8') response_html=html", "label": 0}, {"snippet_id": 78947, "code": " datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will", "label": 1}, {"snippet_id": 8598, "code": " order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order[", "label": 0}, {"snippet_id": 73980, "code": " are implementing callisto-core. Many of the view partials only provide a subset of the functionality required for a full HTML view. docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class", "label": 0}, {"snippet_id": 39149, "code": "=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name) return extract_fields +['cat_code','description_cpcat', 'cpcat_code','cpcat_sourcetype'] def get_clean_comp_data_fieldnames", "label": 0}, {"snippet_id": 6074, "code": "(self): \"\"\" Helper function suitable for @app.before_request and @check(below). Sets g.oidc_id_token to the ID token if the user has successfully authenticated, else returns a redirect object so they can", "label": 0}, {"snippet_id": 45037, "code": ", DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.models import * current_date", "label": 0}, {"snippet_id": 71593, "code": ".assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid", "label": 0}, {"snippet_id": 30040, "code": "(Base): __tablename__='Grudge' id=Column(Integer, primary_key=True) name=Column(String(80), nullable=False) description=Column(String(450),nullable=False) processed=Column(String(5)) takeaway=Column(String", "label": 1}, {"snippet_id": 4887, "code": " expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response", "label": 0}, {"snippet_id": 43524, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")", "label": 0}, {"snippet_id": 26463, "code": " detected some errors in process of \" \"type{}. Error code{}.\".format( process_type, process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message ", "label": 0}, {"snippet_id": 67677, "code": ".request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) return query class AttributeListView(PaginationMixin, ListView)", "label": 0}, {"snippet_id": 41757, "code": "', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse','raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'], \"Fieldnames passed are", "label": 0}, {"snippet_id": 84313, "code": ".user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(", "label": 0}, {"snippet_id": 44420, "code": "'07_rawchem_etc', '08_script', '09_productdocument', '10_habits_and_practices', '11_habits_and_practices_to_puc', '12_product_to_puc', '13_puc_tag' ] class dotdict(dict): \"\"\"dot.notation access to dictionary", "label": 1}, {"snippet_id": 5016, "code": ",{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def", "label": 1}, {"snippet_id": 74656, "code": " request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise PermissionDenied return candidate @login_required def register(request): from.forms import", "label": 0}, {"snippet_id": 30168, "code": "': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''.join(random.choice(string.ascii_uppercase +string.digits) for", "label": 0}, {"snippet_id": 20979, "code": " self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store(self): \"\"\"Start the plasma store.\"\"\" assert self._plasma_store_socket_name", "label": 0}, {"snippet_id": 18509, "code": "._]+(?<![_.])$', self.username)==None): \t\t\tself.render(\"signup.html\",error=\"Your username doesn't follow our username rules. Please fix it.\") \t\t\treturn \t\telif(re.fullmatch(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0", "label": 1}, {"snippet_id": 8006, "code": ".get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG", "label": 0}, {"snippet_id": 13765, "code": " user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return", "label": 0}, {"snippet_id": 18173, "code": ".history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print", "label": 1}, {"snippet_id": 35254, "code": "(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource': ds, 'products': products}) @login_required() def link_product_list(request,", "label": 0}, {"snippet_id": 3315, "code": "(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID') def get", "label": 0}, {"snippet_id": 39973, "code": " RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True", "label": 1}, {"snippet_id": 42974, "code": "(ExtractedText.objects.filter( qa_group=new_group).count(), initial_qa_count) def test_habitsandpractices(self): response=self.client.get(f'/habitsandpractices/54/') self.assertContains(response, '<b>Add", "label": 0}, {"snippet_id": 22101, "code": " filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it", "label": 0}, {"snippet_id": 74383, "code": "(self): return self.get_object() class EncryptedWizardPartial( _ReportUpdatePartial, wizard_builder_partials.WizardPartial ): steps_helper=view_helpers.ReportStepsHelper EVAL_ACTION_TYPE=\"EDIT\" def dispatch", "label": 0}, {"snippet_id": 27659, "code": " statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states", "label": 0}, {"snippet_id": 7391, "code": ".''' import logging from flask import g, request from flask_restplus import Resource from sqlalchemy import exc, or_ from app.models.bookings import Exam from app.models.theq import CSR from app.schemas", "label": 1}, {"snippet_id": 52238, "code": "(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/view-team\", methods=[\"POST\"]) def view_team_and_update_session(): \"\"\"Renders view of team page, with board\"\"", "label": 0}, {"snippet_id": 62863, "code": "=c.get(url) authn_req=get_location(get_authn_request(self.app.config, session, '/', None, force_authn=force_authn)) idp_url=authn_req.split('?')[0] self.assertEqual(resp.status_code, 302) self.assertTrue", "label": 1}, {"snippet_id": 40047, "code": " def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self): '''If there is no DSSToxLookup record via the curated_chemical relationship, it evaluates to boolean", "label": 0}, {"snippet_id": 79212, "code": " plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging", "label": 0}, {"snippet_id": 66753, "code": " render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from", "label": 1}, {"snippet_id": 20375, "code": ".should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(", "label": 0}, {"snippet_id": 52477, "code": ".phase_code, \"pUpvotes\": project_object.upvotes, \"pUpdated\": project_object.updated } if project_object.user_id: results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results)", "label": 0}, {"snippet_id": 22645, "code": " profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t", "label": 1}, {"snippet_id": 41480, "code": "'CO': ExtractedChemical, 'FU': ExtractedFunctionalUse, 'HP': ExtractedHabitsAndPractices, 'CP': ExtractedListPresence, 'HH': ExtractedHHRec } for code, model in group_models.items(): if DataDocument.objects", "label": 1}, {"snippet_id": 66340, "code": ": self.window.set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self, widget): password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") if password_unlock_entry", "label": 1}, {"snippet_id": 22607, "code": " the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet", "label": 0}, {"snippet_id": 29623, "code": " before_request(): g.user=current_user @gallery.route('/gallery/') @gallery.route('/gallery/<string:tags>/') def show_posts(tags='all'): if tags=='all': posts=Post.query.all() else: split=tags.split(' ", "label": 0}, {"snippet_id": 10418, "code": ".views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response", "label": 0}, {"snippet_id": 707, "code": " endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 58891, "code": " instructor, email, invite_type, enroll_unit_code): user=Invite.search_user_by_email(email) try: old_invite=Invite.get_by_user_or_404( user=user, type=invite_type, course=course, instructor=instructor,", "label": 0}, {"snippet_id": 32650, "code": " second: The node to pipe the input into. ''' def __init__(self, first, second): self.first=first self.second=second def execute(self, builtins): read, write=os.pipe() inp=RedirectionHelper(0, read) outp", "label": 0}, {"snippet_id": 47947, "code": ").count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging.getLogger(\"error_logger\").error(\"Unable to upload file. \"+repr(e)) messages.error(request,\"Unable to upload file. \"+repr(e)", "label": 0}, {"snippet_id": 45630, "code": ".has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'", "label": 0}, {"snippet_id": 83617, "code": " def get_articles_for_object(object, article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname, group", "label": 0}, {"snippet_id": 46840, "code": ".csv.path,'w') as f: myfile=File(f) myfile.write(''.join(text)) new_zip_name=Path(settings.MEDIA_URL +\"/\" +str(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") new_zip_path=Path(settings.MEDIA_ROOT ", "label": 0}, {"snippet_id": 72554, "code": "'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid(", "label": 0}, {"snippet_id": 23856, "code": " def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns: The size of the shared memory file system in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\"", "label": 0}, {"snippet_id": 27264, "code": " plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None,", "label": 0}, {"snippet_id": 39528, "code": " return['raw_cas','raw_chem_name'] def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url()", "label": 0}, {"snippet_id": 16166, "code": " return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404 def round_simple(request, tournament_id, round_num, template): \"\"\"Just render the specified template with the round\"", "label": 0}, {"snippet_id": 28786, "code": ".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"", "label": 0}, {"snippet_id": 75894, "code": " type of redirect you wish to use.') class Redirect(models.Model): \"\"\"A HTTP redirect associated with a Project.\"\"\" project=models.ForeignKey( Project, verbose_name=_('Project'), related_name='redirects", "label": 0}, {"snippet_id": 58007, "code": " django.conf import settings from django.contrib.sites.models import Site from django.core import mail from django.test import TestCase from core.common.utils import send_email, get_onboarding_percentage", "label": 0}, {"snippet_id": 67131, "code": " context['attributes_count']=count context['tws']=tweet.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs'", "label": 0}, {"snippet_id": 2480, "code": "'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This", "label": 0}, {"snippet_id": 18314, "code": ":self.username}) \t\tif(document_username!=None): \t\t\terror=\"Username exists already\" \t\tdocument_email=sync_db.users.find_one({'email':self.email}) \t\tif(document_email!=None): \t\t\terror=\"Email exists already", "label": 0}, {"snippet_id": 76422, "code": ".debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent)) for row in range(rect_of_tiles.Height()): for column in range(rect_of_tiles.Width()): pos=( int(column * _TILE_PIXEL_SIZE), int(row ", "label": 0}, {"snippet_id": 44621, "code": "', raw_cas='test_cas' ) rc=ec.rawchem_ptr ing=Ingredient.objects.create(lower_wf_analysis=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects", "label": 0}, {"snippet_id": 69033, "code": "\" Ensure CHP is not running \"\"\" if os.path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try: systemd.stop_service('configurable", "label": 0}, {"snippet_id": 68278, "code": ".order_by('-datetime') keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=[]", "label": 0}, {"snippet_id": 36168, "code": ".count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used to filter which PUCs a Product can have ''' qs=PUCToTag", "label": 0}, {"snippet_id": 23556, "code": " runtime_num_cpus: The number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was", "label": 0}, {"snippet_id": 14104, "code": " current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not", "label": 0}, {"snippet_id": 15908, "code": "(self.email.data) if user: self.password.errors.append('Email already registered') return False if len(self.password.data) < 8: self.password.errors.append('Password should be at least 8 characters long')", "label": 0}, {"snippet_id": 65792, "code": "\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button", "label": 0}, {"snippet_id": 72204, "code": " fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not", "label": 0}, {"snippet_id": 62488, "code": "'_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState: ' +relay_state", "label": 0}, {"snippet_id": 81508, "code": "%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(months=+1) new_end_date=end_date +relativedelta", "label": 1}, {"snippet_id": 34905, "code": ".name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file is too", "label": 0}, {"snippet_id": 43553, "code": " made ''' for doc_id in[7]: doc_qa_link=f'/qa/extractedtext/%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type", "label": 1}, {"snippet_id": 39474, "code": "=True) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) def __str__(self): return self.raw_chem_name @classmethod def detail_fields(cls): return['extracted_text", "label": 0}, {"snippet_id": 23939, "code": " return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object", "label": 0}, {"snippet_id": 19874, "code": " launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port", "label": 0}, {"snippet_id": 41464, "code": ".fields) else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms is appropriate for the group type. ''' group_models={ 'CO': ExtractedChemical", "label": 1}, {"snippet_id": 71219, "code": "._config['user_model']) except Exception: return models.User def _load_user(self): if self.session is not None and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id", "label": 0}, {"snippet_id": 69434, "code": "']=list(admins) with open(config_path, 'w+') as f: yaml.dump(config, f) def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second", "label": 0}, {"snippet_id": 83887, "code": " template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) def view_article(request, title, revision=None, ArticleClass=Article, group_slug=None, group_slug_field=None", "label": 0}, {"snippet_id": 6809, "code": ".generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect", "label": 0}, {"snippet_id": 54131, "code": " \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation(): return render_template('getlocation.html') \"\"\"Politician Page \"\"\" @app.route('/politicians/id/<name>') def politician_page(name", "label": 0}, {"snippet_id": 44379, "code": "(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-SID\"]') try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence", "label": 0}, {"snippet_id": 28819, "code": " def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory", "label": 0}, {"snippet_id": 83120, "code": " thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the run function to end. :return:", "label": 0}, {"snippet_id": 9831, "code": "=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME", "label": 0}, {"snippet_id": 46230, "code": " row['ingredient_rank']=None if rank=='' else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script=script) if not created and ext.one_to_one_check(row): col='cat_code' if", "label": 0}, {"snippet_id": 34870, "code": ") response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if ", "label": 0}, {"snippet_id": 17657, "code": " else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return", "label": 0}, {"snippet_id": 22832, "code": " This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value", "label": 0}, {"snippet_id": 59315, "code": " executing SQLite queries \"\"\".strip()), ConfigOption(\"sql_time_limit_ms\", 1000, \"\"\" Time limit for a SQL query in milliseconds \"\"\".strip()), ConfigOption(\"default_facet_size\", 30, \"\"\" Number of values to return", "label": 0}, {"snippet_id": 45975, "code": "(DataGroup, pk=pk,) dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects.filter(document__in=docs) page=request.GET", "label": 0}, {"snippet_id": 26400, "code": " raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes", "label": 0}, {"snippet_id": 3668, "code": "(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue", "label": 1}, {"snippet_id": 69967, "code": "=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory", "label": 1}, {"snippet_id": 42287, "code": " test_detail_datasource_link(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/') self.assertContains(response,'<a href=\"/datasource/', msg_prefix='Should be able to get back to DataSource from here.", "label": 0}, {"snippet_id": 13345, "code": " openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import", "label": 0}, {"snippet_id": 83492, "code": " not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision( self.old_content, self.old_title, self.old_markup, comment, editor_ip, editor) return", "label": 0}, {"snippet_id": 10904, "code": ".get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return", "label": 0}, {"snippet_id": 27161, "code": " will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log", "label": 0}, {"snippet_id": 70277, "code": " loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request", "label": 0}, {"snippet_id": 52998, "code": " self).setUp() self.view=UserUpdateView() request=self.factory.get('/fake-url') request.user=self.user self.view.request=request def test_get_success_url(self): self.assertEqual( self.view.get_success_url(", "label": 0}, {"snippet_id": 556, "code": " part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace", "label": 1}, {"snippet_id": 17775, "code": "=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp)", "label": 0}, {"snippet_id": 14345, "code": "(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login", "label": 0}, {"snippet_id": 56492, "code": " deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username", "label": 0}, {"snippet_id": 5683, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']", "label": 1}, {"snippet_id": 21859, "code": " also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports", "label": 0}, {"snippet_id": 57877, "code": " return onboarding_setting=c_onboarding_settings(use_secondary=True).find_one({'name': setting_name}) if not onboarding_setting: c_onboarding_settings().insert({'name': setting_name, 'data': ONBOARDING_SETTINGS_DEFAULT", "label": 0}, {"snippet_id": 52896, "code": ".file_download_link if instance.attachment else None, } group_channel=get_room_group_channel(instance.room.id) self.push_socket_update(group_channel, data) @staticmethod def push_socket_update(group_channel", "label": 0}, {"snippet_id": 32663, "code": "=second def execute(self, builtins): read, write=os.pipe() inp=RedirectionHelper(0, read) outp=RedirectionHelper(1, write) with outp: self.first.execute(builtins) outp.close() with inp: self.second.execute", "label": 0}, {"snippet_id": 53881, "code": "{}.json'.format(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None def", "label": 0}, {"snippet_id": 61704, "code": " optionally pass True for the commit argument, which will save the result to the database. In that case, the passed DirectoryEntry *must* already be in the database. \"\"\" securedrop_domain=url_to_domain", "label": 1}, {"snippet_id": 44346, "code": "{doc.pk}/' self.browser.get(qa_url) with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') with self.assertRaises(NoSuchElementException", "label": 0}, {"snippet_id": 1483, "code": " content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified", "label": 0}, {"snippet_id": 33219, "code": ").annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list", "label": 0}, {"snippet_id": 75959, "code": "=models.BooleanField(choices=STATUS_CHOICES, default=True) create_dt=models.DateTimeField(auto_now_add=True) update_dt=models.DateTimeField(auto_now=True) objects=RedirectManager() class Meta: verbose_name", "label": 0}, {"snippet_id": 14067, "code": "( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context", "label": 0}, {"snippet_id": 33028, "code": "(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description='Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return", "label": 0}, {"snippet_id": 11156, "code": " \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not", "label": 0}, {"snippet_id": 39305, "code": ".CharField(\"Reported functional use\", max_length=100, null=True, blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank", "label": 0}, {"snippet_id": 1898, "code": ", statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse", "label": 0}, {"snippet_id": 74807, "code": " already been submitted and is locked.') if request.method=='POST': post_data=request.POST.copy() post_data['netid']=request.user.username person_form=PersonForm(post_data, instance=candidate.person) candidate_form", "label": 0}, {"snippet_id": 69526, "code": " not the hub venv. This means tljh-config is not actually accessible. We symlink to /usr/bin and not /usr/local/bin, since /usr/local/bin is not place, and works with sudo -E in sudo's search $PATH. We", "label": 0}, {"snippet_id": 66602, "code": ".logging_manager.log_debug(\"File selection cancelled\") filechooser_opening_dialog.close() def on_composite_unlock_button_clicked(self, widget): composite_unlock_entry=self.builder.get_object(\"composite_unlock_entry\"", "label": 0}, {"snippet_id": 66986, "code": " from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit", "label": 0}, {"snippet_id": 44630, "code": ".123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt=PUCTag.objects.create(name=\"Test PUC Attribute\") pd=ProductDocument.objects.create(product=p, document=doc)", "label": 0}, {"snippet_id": 45894, "code": " import File from django.core.exceptions import ValidationError from django.core.files.storage import FileSystemStorage from django.contrib.auth.decorators import login_required from django.shortcuts import", "label": 0}, {"snippet_id": 12316, "code": ") except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address", "label": 0}, {"snippet_id": 37058, "code": ".forms import BaseInlineFormSet from django.utils.translation import ugettext_lazy as _ from dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models class", "label": 1}, {"snippet_id": 64078, "code": "('SAML2_LOGOUT_REDIRECT_URL') return LogoutPayload().dump({'location': location}).data user=current_app.central_userdb.get_user_by_eppn(eppn) current_app.logger.debug('Logout process started for user{!r", "label": 0}, {"snippet_id": 54164, "code": "!=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=name, politician=politician) else: return render_template('politician_notfound.html", "label": 1}, {"snippet_id": 51537, "code": "): program=p break if program is None: raise \"Cannot find scp(or pscp) in the path.\" subprocess.check_call([program] +list(args)) def run(buildname=\"build\", argv=None): builder=Builder() behaviour_globals", "label": 0}, {"snippet_id": 6791, "code": ") else: flash('The confirmation link is invalid or has expired.') return redirect(url_for('main.index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user.generate_confirmation_token", "label": 0}, {"snippet_id": 12948, "code": "/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following", "label": 0}, {"snippet_id": 7028, "code": ".data): new_email=form.email.data token=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token", "label": 0}, {"snippet_id": 46052, "code": " docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg']=('There are no matching records in the ' 'selected directory.') return render(request, template_name", "label": 0}, {"snippet_id": 6652, "code": ".validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form.remember_me.data) session['auth_token", "label": 0}, {"snippet_id": 52707, "code": " import json import os from urllib.parse import urlparse from channels import Group from rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework", "label": 1}, {"snippet_id": 14713, "code": " flask_login import LoginManager, current_user, login_user, logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField", "label": 1}, {"snippet_id": 39043, "code": " csv_url(self): '''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except", "label": 0}, {"snippet_id": 19503, "code": " next_line=self.log_file_handles[log_filename].readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self", "label": 1}, {"snippet_id": 19800, "code": " def __init__(self, redis_address, redis_port, autoscaling_config, redis_password=None): self.state=ray.experimental.state.GlobalState() self.state._initialize_global_state( redis_address, redis_port, redis_password", "label": 1}, {"snippet_id": 41463, "code": " in form.fields) else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms is appropriate for the group type. ''' group_models={ 'CO': ExtractedChemical", "label": 1}, {"snippet_id": 54961, "code": "(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups) \t\t \t\t def process_hwml(): \thp=HWML_processor() \thp.process_hwml() def detect_cheating(): \thp=HWML_processor() \thp.detect_cheating()", "label": 1}, {"snippet_id": 39319, "code": ", null=True, default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient rank\", null=True, blank=True, validators=[validate_ingredient_rank]) raw_central_comp=models.CharField(\"Raw central composition", "label": 0}, {"snippet_id": 6851, "code": ".data): current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for('main.index')", "label": 0}, {"snippet_id": 77443, "code": " server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and", "label": 0}, {"snippet_id": 30353, "code": " stored_gplus_id=login_session.get('gplus_id') if stored_access_token is not None and gplus_id==stored_gplus_id: response=make_response(json.dumps('Current user is already connected.'), 200) response.headers", "label": 0}, {"snippet_id": 25394, "code": " well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized", "label": 0}, {"snippet_id": 4298, "code": "/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\"", "label": 0}, {"snippet_id": 6965, "code": "')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for('main.index')) if user.reset_password(token,", "label": 0}, {"snippet_id": 59639, "code": " databases=self._metadata.get(\"databases\") or{} search_list=[] if database is not None: search_list.append(databases.get(database) or{}) if table is not None: table_metadata=( (databases.get(database) or{}).get", "label": 0}, {"snippet_id": 2647, "code": ".time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce", "label": 0}, {"snippet_id": 61557, "code": "=request_and_scrape_page( securedrop.landing_page_url, allow_redirects=False ) except requests.exceptions.RequestException: return ScanResult( securedrop=securedrop, live=pshtt_results['Live'], http_status_200_ok", "label": 1}, {"snippet_id": 71729, "code": "/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id': auth_id, ", "label": 0}, {"snippet_id": 29756, "code": "(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get(1)] added_tags=[get_or_create_tag(db.session, tag)[0] for tag in form.tags.data", "label": 0}, {"snippet_id": 56486, "code": "=dynamic_link return self def given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client()", "label": 0}, {"snippet_id": 83144, "code": "\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue): \"\"\"Adds a subscriber to the list of queues to send notifications to", "label": 0}, {"snippet_id": 36686, "code": " min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects.count() stats['datasource_count']=DataSource.objects.count() stats['datadocument_count", "label": 0}, {"snippet_id": 52705, "code": " import logging import json import os from urllib.parse import urlparse from channels import Group from rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated", "label": 1}, {"snippet_id": 70591, "code": "(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def", "label": 0}, {"snippet_id": 42022, "code": ".assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f", "label": 0}, {"snippet_id": 32977, "code": "'prod_fam', 'prod_type', 'description','tags',] readonly_fields=('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=('__str__', 'tag_list','num_products", "label": 1}, {"snippet_id": 35345, "code": "=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request", "label": 0}, {"snippet_id": 39127, "code": ",'rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse'] if self.type=='FU': return extract_fields if self.type=='CO': return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type", "label": 0}, {"snippet_id": 42606, "code": "=diatom') self.assertContains(response, 'Filter by Group Type') response=self.c.get('/find/?q=diatom&group_type=Unidentified') self.assertContains(response, 'Showing 1 -20 of') response=self.c.get('/find/", "label": 1}, {"snippet_id": 27810, "code": " event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the", "label": 0}, {"snippet_id": 41047, "code": " should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, '/link_product_form/167497/') data={'title' :", "label": 0}, {"snippet_id": 29996, "code": "(String(250), nullable=False) picture=Column(String(250)) class Grudget(Base): __tablename__='Grudget' id=Column(Integer, primary_key=True) name=Column(String(250), nullable=False) user_id=Column(Integer", "label": 1}, {"snippet_id": 23191, "code": "(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(), error_data) def", "label": 0}, {"snippet_id": 81547, "code": "+old_repeating_event.name +', date: ' +str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id existing_event=self.env['event.event'].search([('event_type_id', '=', old_event_cat),('date_end', '", "label": 0}, {"snippet_id": 16034, "code": ".validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html', form=login_form) @app.route('/logout') def view_logout(): logout_user()", "label": 0}, {"snippet_id": 55682, "code": " folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path", "label": 0}, {"snippet_id": 73483, "code": "'email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')[1]", "label": 0}, {"snippet_id": 73887, "code": "(request) return position(request, Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render(request, 'positions.html', positions_list_data(request, sort_by", "label": 0}, {"snippet_id": 65804, "code": ".ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button.connect(\"clicked\", self.on_tab_close_button_clicked, page_instance) close_button.add(close_image) tab_hbox.pack_start(close_button,", "label": 0}, {"snippet_id": 7735, "code": " form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0", "label": 0}, {"snippet_id": 1262, "code": " length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime", "label": 0}, {"snippet_id": 73285, "code": ".cleaned_data.get('password') user=authenticate(username=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user", "label": 0}, {"snippet_id": 36583, "code": "[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list", "label": 0}, {"snippet_id": 72718, "code": ".get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: account_key=request.GET.get('key') if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token", "label": 1}, {"snippet_id": 25216, "code": " \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel", "label": 0}, {"snippet_id": 22457, "code": " import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does", "label": 1}, {"snippet_id": 12114, "code": ": redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name", "label": 0}, {"snippet_id": 34990, "code": "='text/csv') response['Content-Disposition']='attachment; filename=\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id", "label": 1}, {"snippet_id": 52921, "code": " url from realpal.apps.chat.views import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(?P<room_id>[0-9]+", "label": 1}, {"snippet_id": 11261, "code": "\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText", "label": 0}, {"snippet_id": 31304, "code": ".pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed', 'social.pipeline.social_auth.social_user', 'social.pipeline.user.get_username', 'social.pipeline.social_auth.associate_by_email'", "label": 0}, {"snippet_id": 23846, "code": "\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns: The size", "label": 0}, {"snippet_id": 4338, "code": ": http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response", "label": 1}, {"snippet_id": 27976, "code": " if type is not None: extra_data=json.dumps({ \"type\": str(type), \"value\": str(value), \"traceback\": str(traceback.format_exc()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self", "label": 0}, {"snippet_id": 77168, "code": " db_type=server_layer_def[\"db_type\"], version=version_info, tile_arg_names=tile_arg_names ) return layer def GetMapBaseUrl(self): \"\"\"Prepares the base URL for fetching tiles.\"\"\" base_url=_TILE_BASE_URL", "label": 0}, {"snippet_id": 54989, "code": " folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem, Folder, and File \"\"\" import os import os.path import", "label": 0}, {"snippet_id": 59270, "code": ".version import __version__ app_root=Path(__file__).parent.parent connections=threading.local() MEMORY=object() ConfigOption=collections.namedtuple( \"ConfigOption\",(\"name\", \"default\", \"help\") ) CONFIG_OPTIONS", "label": 0}, {"snippet_id": 32295, "code": "''.join(value), start) else: token=Token(TokenType.UNKNOWN, self.char, self.position) self.read() return token def __iter__(self): ''' Utility iterator to allow easy creation of a stream of tokens. '''", "label": 0}, {"snippet_id": 52944, "code": " import Client from realpal.apps.users.constants import * from realpal.apps.users.views import UserRedirectView, UserUpdateView class BaseUserTestCase(TestCase): def setUp(self): self.user=self.make_user", "label": 0}, {"snippet_id": 4939, "code": ".post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging", "label": 0}, {"snippet_id": 6207, "code": " decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for('oidc_callback", "label": 0}, {"snippet_id": 80881, "code": "', 'category': 'Website', 'version': '10.0.0.0.1', 'author': 'Fundament IT', 'website': 'https://fundament.it/', 'licence': 'AGPL-3', 'depends':['website_event'], 'summary':\"\"\"\"\"\", 'description': \"\"\" Extension", "label": 1}, {"snippet_id": 56334, "code": ".objects.create(title=title, description=description, share_id=share_id, author=orm_person) experience.picture=pic experience.save() return self def given_a_public_domain(self, public_domain): settings", "label": 0}, {"snippet_id": 66396, "code": " keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter", "label": 0}, {"snippet_id": 39215, "code": ".common_info import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type import WeightFractionType", "label": 1}, {"snippet_id": 62892, "code": "): \"\"\" common code for the tests that need to access the assertion consumer service and then check the side effects of this access. :param url: the url of the desired authentication mode. :type url: str", "label": 1}, {"snippet_id": 82595, "code": " has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self.pid) if proc.is_running(): return", "label": 0}, {"snippet_id": 31340, "code": " SOCIAL_AUTH_GITHUB_SCOPE=[ 'admin:repo_hook', 'repo', ] SOCIAL_AUTH_GITLAB_KEY=os.environ.get( 'SOCIAL_AUTH_GITLAB_KEY') SOCIAL_AUTH_GITLAB_SECRET=os.environ.get('SOCIAL_AUTH_GITLAB_SECRET') SOCIAL_AUTH_GITLAB_REDIRECT_URL", "label": 0}, {"snippet_id": 39238, "code": " validate_ingredient_rank(value): if value < 1 or value > 999: raise ValidationError( (f'Quantity{value} is not allowed'), params={'value': value},) class ExtractedChemical(CommonInfo, RawChem): raw_cas_old=models.CharField(", "label": 0}, {"snippet_id": 12868, "code": " commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'],", "label": 0}, {"snippet_id": 29204, "code": " auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security() login_manager=LoginManager() def create_app(config=None): app=Flask(__name__) app.config.from_object(app_config[config]) app.config.from_envvar(", "label": 0}, {"snippet_id": 83176, "code": ": Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added subscriber\") self.subscribed_queues.append(queue) def run(self): \"\"\"Starts the monitoring thread. :return: None \"\"", "label": 0}, {"snippet_id": 74613, "code": ".DoesNotExist: if 'orcid' in request.POST: try: person_instance=Person.objects.get(orcid=request.POST['orcid']) except Person.DoesNotExist: pass return person_instance def get_shib_info_from_request(request):", "label": 0}, {"snippet_id": 62453, "code": ":param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info, user) def", "label": 0}, {"snippet_id": 71969, "code": "') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self", "label": 1}, {"snippet_id": 36057, "code": "'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self):", "label": 0}, {"snippet_id": 39498, "code": " ExtractedListPresence(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True", "label": 1}, {"snippet_id": 67428, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['count']=self.object_list.count() context['alltag']=Tag.objects.order_by('id') taglist=self.request.GET.getlist('tag", "label": 0}, {"snippet_id": 66017, "code": ".quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(\"quit_button\") back_button.connect(\"clicked\", self.on_back_button_clicked) quit_button.connect(", "label": 0}, {"snippet_id": 6579, "code": " PasswordResetForm, ChangeEmailForm @auth.before_app_request def before_request(): if current_user.is_authenticated: current_user.ping() if not current_user.verify_auth_token(session['auth_token']): logout_user", "label": 0}, {"snippet_id": 62641, "code": " config) def add_outstanding_query(self, came_from): \"\"\" Add a SAML2 authentication query to the queries cache. To be used before accessing the assertion consumer service. :param came_from: url to redirect", "label": 0}, {"snippet_id": 40741, "code": ", response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count(", "label": 0}, {"snippet_id": 51912, "code": "/dashboard\") else: flash(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login(): \"\"\"Load login form.\"\"\" return render_template(", "label": 0}, {"snippet_id": 77430, "code": "(\"Layers processing done\") return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers", "label": 0}, {"snippet_id": 67569, "code": "=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0)", "label": 0}, {"snippet_id": 65778, "code": ") tab_hbox=Gtk.HBox(False, 0) tab_label=Gtk.Label(title) tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image.new_from_gicon(icon,", "label": 0}, {"snippet_id": 42906, "code": ".get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/{scr.pk}/\\'> Continue QA\".encode(), response.content) scr=Script.objects.annotate(num_ets=Count( 'extractedtext')).filter(num_ets__gt", "label": 0}, {"snippet_id": 40602, "code": " response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index", "label": 0}, {"snippet_id": 14486, "code": "': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year", "label": 0}, {"snippet_id": 3948, "code": " self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale,", "label": 0}, {"snippet_id": 70074, "code": "; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head", "label": 0}, {"snippet_id": 62535, "code": ".utils import get_location, no_authn_views from eduid_common.authn.eduid_saml2 import get_authn_request from eduid_common.authn.tests.responses import(auth_response, logout_response, logout_request) from", "label": 0}, {"snippet_id": 48572, "code": "}) @login_required() def detach_puc_from_product(request, pk): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required", "label": 0}, {"snippet_id": 65600, "code": "\"Create new Database\", self, Gtk.FileChooserAction.SAVE, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.OK)) self.filechooser_creation_dialog.set_current_name(\"Database.kdbx\"", "label": 0}, {"snippet_id": 77008, "code": ": \"col\", \"y\": \"row\", \"z\": \"level\"}, \"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT", "label": 0}, {"snippet_id": 48045, "code": " request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save() return HttpResponseRedirect(f'/habitsandpractices/", "label": 0}, {"snippet_id": 53633, "code": " if self.redirection_source.encoding: return self.redirection_source.encoding return 'utf8' def read_all(self) -> str: \"\"\" Reads the current state of the buffer and returns a string those contents :return", "label": 1}, {"snippet_id": 1284, "code": " and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 41528, "code": ".objects.filter( extracted_text=doc.extractedtext ).count() if doc.detail_page_editable: error=(f'{model.__module__} should have one more forms' ' than instances') self.assertEqual(num_forms, children ", "label": 0}, {"snippet_id": 1392, "code": " create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive", "label": 1}, {"snippet_id": 21207, "code": "=stderr_file, redis_password=self._ray_params.redis_password, config=self._config) assert(ray_constants.PROCESS_TYPE_RAYLET_MONITOR not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_RAYLET_MONITOR", "label": 0}, {"snippet_id": 37205, "code": "!important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['extract_file'].widget.attrs.update({'accept': '.csv'}) if self.dg_type in['FU', ", "label": 0}, {"snippet_id": 29058, "code": " orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper", "label": 0}, {"snippet_id": 21551, "code": " check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants", "label": 0}, {"snippet_id": 78140, "code": " if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes' in pkg: notes=pkg['notes'] or pkg['title'] if 'update_frequency' in pkg: update_frequency=pkg['update_frequency", "label": 0}, {"snippet_id": 1514, "code": " encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html;", "label": 0}, {"snippet_id": 21766, "code": " if process_info.process.poll() is not None: result.append((process_type, process_info.process)) return result def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True", "label": 0}, {"snippet_id": 73395, "code": ".models import EmailAuthenticateToken, Position from screendoor.parseposter import parse_upload from screendoor.redactor import parse_applications @login_required(login_url='login/', redirect_field_name=None", "label": 1}, {"snippet_id": 10216, "code": "(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 81922, "code": " class URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{", "label": 0}, {"snippet_id": 70014, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 74979, "code": ".method=='POST': form=UploadForm(request.POST, request.FILES) if form.is_valid(): form.save_upload(candidate) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id}))", "label": 0}, {"snippet_id": 22292, "code": " self.plasma_directory=plasma_directory self.worker_path=worker_path self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name", "label": 0}, {"snippet_id": 76171, "code": " full_path=self.get_full_path(path, language, version_slug) if full_path==self.from_url: log.debug('Redirecting %s', self) return self.to_url if '$rest' in self.from_url: match=self.from_url.split('$rest')[0", "label": 1}, {"snippet_id": 60693, "code": ".split(\"?\")[0].endswith(\".json\"): return response.json(info, status=status) else: template=self.jinja_env.select_template(templates) return response.html(template.render(info), status=status) return app", "label": 0}, {"snippet_id": 22739, "code": " with self.lock: events=self.events self.events=[] if self.worker.mode==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type", "label": 0}, {"snippet_id": 74861, "code": "=candidate.person, degree_type=degree_type) candidate_form=CandidateForm(instance=candidate, degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form': person_form, 'candidate_form", "label": 0}, {"snippet_id": 62133, "code": " in page.headers['Content-Security-Policy']: return False else: return True def validate_xss_protection(page): return validate_security_header( page, \"X-XSS-Protection\", \"1; mode=block\", ) def validate_no_sniff", "label": 0}, {"snippet_id": 37264, "code": " def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields[", "label": 0}, {"snippet_id": 45917, "code": " from django.core.paginator import Paginator from dashboard.models import * from dashboard.forms import(DataGroupForm, ExtractionScriptForm, CleanCompDataForm, create_detail_formset, include_extract_form", "label": 1}, {"snippet_id": 28561, "code": " runtime_resources): \"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required", "label": 0}, {"snippet_id": 69958, "code": ".path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes:", "label": 1}, {"snippet_id": 75497, "code": "['POST']) def staff_format_post(request, candidate_id): from.forms import FormatChecklistForm candidate=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST, instance", "label": 0}, {"snippet_id": 46603, "code": ") def data_group_create(request, pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() ", "label": 0}, {"snippet_id": 77533, "code": " import ckan.plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras", "label": 0}, {"snippet_id": 68334, "code": "=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0)", "label": 0}, {"snippet_id": 46821, "code": ".values())+'\\n') if errors: datagroup.csv.close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup.csv.path,'w') as f:", "label": 0}, {"snippet_id": 44610, "code": " description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type=ut, weight_fraction_type=wft, raw_chem_name='Test Chem Name', raw_cas='test_cas' ) rc=ec.rawchem_ptr ing=Ingredient", "label": 0}, {"snippet_id": 61014, "code": "\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring", "label": 0}, {"snippet_id": 72980, "code": " request.session['position_sort'] }) @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request, 'position.html',{ 'baseVisibleText': InterfaceText, ", "label": 0}, {"snippet_id": 41468, "code": "'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child forms is appropriate for the group type. ''' group_models={ 'CO': ExtractedChemical, 'FU': ExtractedFunctionalUse", "label": 1}, {"snippet_id": 14292, "code": "=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime", "label": 0}, {"snippet_id": 9024, "code": ".login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import", "label": 0}, {"snippet_id": 59283, "code": ", \"help\") ) CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from", "label": 0}, {"snippet_id": 48657, "code": "'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag", "label": 0}, {"snippet_id": 56160, "code": " from profiles.models import ORMProfile class RedirectConfirmEmailTestCase(TestCase): def test_when_called_redirect_view_redirects_to_apps_url(self): RedirectConfirmEmailTestCase.ScenarioMaker() \\ .when_call_get_email_confirmation", "label": 0}, {"snippet_id": 60931, "code": ".__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the", "label": 0}, {"snippet_id": 42838, "code": "/extractionscript/{pk}/', follow=True) self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count('extractedtext')).filter( num_ets__lt=100).filter", "label": 1}, {"snippet_id": 49700, "code": "' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile", "label": 0}, {"snippet_id": 51292, "code": "=flatten_string_list(dependencies) platform=kwargs['platform'] or self._context.env[\"PLATFORM\"] dependency_collection=self._dependency_collection() delete_directory(os.path.join('dependencies', platform), logfile", "label": 0}, {"snippet_id": 4696, "code": "']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe", "label": 1}, {"snippet_id": 16198, "code": ".html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify which players are playing each round\"\"", "label": 0}, {"snippet_id": 12012, "code": "(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request", "label": 0}, {"snippet_id": 63155, "code": "'TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn", "label": 0}, {"snippet_id": 19648, "code": " help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging", "label": 1}, {"snippet_id": 83942, "code": ", 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read", "label": 0}, {"snippet_id": 54135, "code": "') def currentlocation(): return render_template('getlocation.html') \"\"\"Politician Page \"\"\" @app.route('/politicians/id/<name>') def politician_page(name): name=name.lower() politicians=Politician.all(", "label": 1}, {"snippet_id": 47428, "code": "')): form=DataSourceForm(request.POST or None) if form.is_valid(): form.save() return redirect('data_source_list') return render(request, template_name,{'form': form}) @login_required() def data_source_update", "label": 0}, {"snippet_id": 82554, "code": " represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name", "label": 0}, {"snippet_id": 77836, "code": ", users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates", "label": 0}, {"snippet_id": 80385, "code": "(self.start_bifi_scan) self.thin_eta_scan_action.triggered.connect(self.start_thin_etalon_scan) self.lock_all_action.triggered.connect(self.toggle_lock_all) self.lock_slow_piezo_action.triggered.connect", "label": 0}, {"snippet_id": 17386, "code": " username=form.username.data.strip() password=form.password.data user=models.User.by_username(username) if not user: user=models.User.by_email(username) if not user or password !=user.password_hash: flask", "label": 0}, {"snippet_id": 57841, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE } def get_onboarding_setting(setting_name): \"\"\" Return settings for the certain `settings_name` If it does not exist take default settings and save it to the MongoDB Argument", "label": 0}, {"snippet_id": 12312, "code": ".get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return", "label": 0}, {"snippet_id": 31798, "code": ".django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def", "label": 1}, {"snippet_id": 79021, "code": " been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request", "label": 0}, {"snippet_id": 76145, "code": "'Redirecting %s', self) to=self.get_full_path( filename=self.to_url.lstrip('/'), language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None):", "label": 0}, {"snippet_id": 62315, "code": " asked for authn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{!r} logging in.\"", "label": 0}, {"snippet_id": 58721, "code": " django.http.response import Http404 from django.template import loader, Context from accounts.models import Instructor from chat.models import EnrollUnitCode from core.common import onboarding from core", "label": 0}, {"snippet_id": 7618, "code": " openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import", "label": 0}, {"snippet_id": 50886, "code": "'{1}'\".format(func_name, key)) return result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser() self.add_bool_option(\"-v\", \"--verbose\") self._enabled_options=set", "label": 0}, {"snippet_id": 29066, "code": " __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr)", "label": 0}, {"snippet_id": 82457, "code": "'category-delete-view'), re_path(r'^(?P<pk>(\\d)+)/reports/$', ClickTrackingDetailView.as_view(), name='clicktracking-detail-view'), re_path(r'^(?P<pk>(\\d)+)/$', link_redirect, name='url-redirect-view'), ]", "label": 1}, {"snippet_id": 66992, "code": ".threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name", "label": 0}, {"snippet_id": 79292, "code": " Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict", "label": 0}, {"snippet_id": 39169, "code": "'lower_wf_analysis','central_wf_analysis', 'upper_wf_analysis'] def clean_fields(self, exclude=None): super().clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id') and self.extracted_docs", "label": 0}, {"snippet_id": 1109, "code": "<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of", "label": 0}, {"snippet_id": 41416, "code": "'' for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd) child_formset=ChildForm(instance=et) for form in child_formset.forms: if dd.data_group.type", "label": 0}, {"snippet_id": 67148, "code": "['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count']=count return context def getpcap", "label": 0}, {"snippet_id": 10149, "code": " it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if", "label": 0}, {"snippet_id": 43942, "code": " from django.conf import settings from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * def log_karyn_in(object): ''' Log user in for further testing. '''", "label": 1}, {"snippet_id": 22620, "code": " statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states", "label": 0}, {"snippet_id": 79011, "code": "', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest", "label": 0}, {"snippet_id": 67251, "code": "'keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html", "label": 1}, {"snippet_id": 53337, "code": " source_code, error) setattr(module, '__file__', step.source_path) setattr( module, '__package__', '.'.join( [project.id.replace('.', '-')] + step.filename.rsplit('.', 1)[0].split(os.sep) ) ) def exec_test()", "label": 0}, {"snippet_id": 2022, "code": " 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[]", "label": 0}, {"snippet_id": 47027, "code": "=open(dg.get_zip_url(), 'rb') response=HttpResponse(zip_file, content_type='application/zip') response['Content-Disposition']='attachment; filename=%s' % zip_file_name return response @login_required def", "label": 0}, {"snippet_id": 15988, "code": ".is_authenticated: return redirect(url_for('view_home')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home", "label": 1}, {"snippet_id": 17926, "code": " successfully changed!</strong>'), 'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed!</strong> Incorrect password.'", "label": 0}, {"snippet_id": 41685, "code": ") self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client", "label": 0}, {"snippet_id": 37487, "code": "(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc", "label": 0}, {"snippet_id": 49171, "code": ".attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance=extracted_text), 'extracted_text': extracted_text, 'detail_formset': child_formset} ) else: context['edit_text_form']=ParentForm", "label": 0}, {"snippet_id": 58156, "code": "{onboarding.STEP_1: 0, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1,", "label": 1}, {"snippet_id": 76307, "code": " coordinates, not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image. Returns: The image", "label": 0}, {"snippet_id": 72397, "code": ")] @Endpoint('GET', '/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if", "label": 0}, {"snippet_id": 35824, "code": "(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform", "label": 0}, {"snippet_id": 67521, "code": " is not None: query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today", "label": 0}, {"snippet_id": 76176, "code": " if full_path==self.from_url: log.debug('Redirecting %s', self) return self.to_url if '$rest' in self.from_url: match=self.from_url.split('$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s'", "label": 0}, {"snippet_id": 64864, "code": " to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure to carefully escape \" \"this argument as a single string. If this argument is ommitted \" \"then this program just", "label": 0}, {"snippet_id": 52771, "code": "\", 'sent_by':'user_id', 'room':\"room_id\", 'text':message.txt, 'file_name': message.attachment, 'file_link': message.attachment.path } \"\"\" model=Message serializer_class=MessageSerializer permission_classes", "label": 0}, {"snippet_id": 44737, "code": ".script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly!\") text=ExtractedText(data_document=self.objects.doc, extraction_script=self.objects.script) try: text", "label": 0}, {"snippet_id": 5703, "code": "'location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1'", "label": 0}, {"snippet_id": 35001, "code": ".now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None)", "label": 1}, {"snippet_id": 10402, "code": " HttpResponseBadRequest, HttpResponseForbidden from django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views", "label": 0}, {"snippet_id": 57131, "code": "(transaction=transaction), concept_form concept_code=kwargs.get('concept_code', None) concept=get_object_or_404(concept_class, code=concept_code) return concept, concept_form def transaction_delete(request, ", "label": 0}, {"snippet_id": 47999, "code": " script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add", "label": 0}, {"snippet_id": 27680, "code": " states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect access of events. \"\"\" def __init__(self, worker): self.worker=worker self.events=[] self.lock", "label": 1}, {"snippet_id": 21449, "code": ".stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message) continue if process_info.use_valgrind_profiler: os.kill(process", "label": 0}, {"snippet_id": 10620, "code": "[0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id", "label": 1}, {"snippet_id": 39011, "code": ".csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy\" property. If the folder cannot be found, dg", "label": 0}, {"snippet_id": 11575, "code": " it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if", "label": 0}, {"snippet_id": 21936, "code": ". This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address", "label": 0}, {"snippet_id": 77826, "code": "'organization_list')(data_dict={'all_fields': True, 'include_users': True}) def patch_organisation_users(self, org_id, users): toolkit.get_action('organization_patch')(data_dict={'id': org_id, 'users':", "label": 0}, {"snippet_id": 40781, "code": "=self.client.get('/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html", "label": 0}, {"snippet_id": 10594, "code": "\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 80048, "code": " datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req", "label": 0}, {"snippet_id": 48039, "code": " prefix='habits') if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted: doc.extracted=True doc.save() hp_formset.save() ext_form.save(", "label": 0}, {"snippet_id": 60720, "code": " if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local or remote).\"\"\" def __init__(self, pid", "label": 0}, {"snippet_id": 16896, "code": "} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power=power) current[gp.id]=power data.append(current) else: games=_seed_games(t, r) for i, g in enumerate(games, start", "label": 0}, {"snippet_id": 37148, "code": ".ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label=\"Weight Fraction Type\",", "label": 0}, {"snippet_id": 11070, "code": ".ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u'</b>', enterprise_name=enterprise_customer.name, platform_name=platform_name", "label": 0}, {"snippet_id": 39031, "code": " boolean False ''' if self.get_dg_folder() !='no_folder_found': return self.get_dg_folder() else: return False @property def csv_url(self): '''This is a \"falsy\" property. If the csv file cannot be found", "label": 0}, {"snippet_id": 81190, "code": "', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bz_tickets'), ('subscription_partner', '=', partner.id)]) if ai_monthly.subscription_is_active", "label": 0}, {"snippet_id": 83644, "code": "=None, kw=None): if group is None: return reverse(urlname, args=args) else: app=group._meta.app_label urlconf='.'.join([app, 'urls']) url=reverse(urlname, urlconf, kwargs=kw) return ''.join(['/', app, url]", "label": 0}, {"snippet_id": 23388, "code": "(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and allow_none: return", "label": 0}, {"snippet_id": 16886, "code": "={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game, power=power) current[gp.id]=power data.append(current) else:", "label": 0}, {"snippet_id": 3304, "code": " OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs)", "label": 0}, {"snippet_id": 70044, "code": ".st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=", "label": 0}, {"snippet_id": 56015, "code": " preview_content={'st': experience.title, 'sd': desc, 'si': experience.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link='{}{}/", "label": 0}, {"snippet_id": 32771, "code": "'PATH'].split(':') for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command not found') class RedirectionsNode(Node): ''' A node that performs", "label": 0}, {"snippet_id": 62302, "code": " \"\"\" Upon successful login in the IdP, store login info in the session and redirect back to the app that asked for authn. :param session_info: the SAML session info :type session_info: dict :param user", "label": 0}, {"snippet_id": 7631, "code": " openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features", "label": 0}, {"snippet_id": 48309, "code": "\"]==ds.id), False)['no_category'] except: ds.no_category=0 dgs=ds.datagroup_set.all() for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set.filter(productdocument__document__isnull", "label": 0}, {"snippet_id": 70296, "code": " ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from", "label": 0}, {"snippet_id": 18590, "code": " the Sign In page when the user arrives at /signin \t\"\"\" \tdef get(self): \t\tself.render('signin.html',error='') \t\"\"\" check_database(): \tCreates an instance of PasswordHasher, finds if there is any document", "label": 1}, {"snippet_id": 76326, "code": " image. Returns: The image to be presented to the user. \"\"\" proj=layer_properties.projection zoom_level=tilecalcs.CalcZoomLevel(user_log_rect.Extent(), proj.InternalLogOuterBounds().Extent(), geom.Pair", "label": 0}, {"snippet_id": 47454, "code": "'datasource_form.html')): datasource=get_object_or_404(DataSource, pk=pk) form=DataSourceForm(request.POST or None, instance=datasource) if form.is_valid(): if form.has_changed(): form.save() return redirect(", "label": 0}, {"snippet_id": 67244, "code": " context def get(self, request, **kwargs): if request.GET.get('keyword'): ip=request.GET.get('keyword') return HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context", "label": 1}, {"snippet_id": 38529, "code": "'s id as its primary key. ``document_type`` each type of data group may only contain certain types of data documents. The clean() method checks to make sure that the assigned document type is among the", "label": 0}, {"snippet_id": 24317, "code": ".imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def fetch_and_execute_function_to_run(self, key): \"\"\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function", "label": 0}, {"snippet_id": 7045, "code": "', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent.') return redirect(url_for('main.index')) else: flash('Invalid password.') return", "label": 0}, {"snippet_id": 64829, "code": " Results will be written over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The name of the function the student was supposed to implement\") parser.add_argument('-p', '--points", "label": 0}, {"snippet_id": 28003, "code": " import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import threading import time import uuid import", "label": 0}, {"snippet_id": 7585, "code": " openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from", "label": 0}, {"snippet_id": 13056, "code": "': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 3224, "code": " expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self", "label": 0}, {"snippet_id": 20236, "code": ": \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages:", "label": 0}, {"snippet_id": 36345, "code": " in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content", "label": 0}, {"snippet_id": 9860, "code": ": if msg.extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments", "label": 0}, {"snippet_id": 37777, "code": " __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) class ExtractedChemicalForm(forms.ModelForm): def __init__(self, *args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args, ", "label": 0}, {"snippet_id": 73615, "code": " user=form.get_user() login(request, user) return redirect('home') if request.GET.get('key') is not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html', {", "label": 1}, {"snippet_id": 37460, "code": " def __init__(self, *args, **kwargs): super(ProductForm, self).__init__(*args, **kwargs) for f in self.fields: self.fields[f].disabled=True class BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField", "label": 0}, {"snippet_id": 55314, "code": " \t\treturn os.chown(self.path,uid,gid) \tdef lchflags(self,flags): \t\treturn os.lchflags(self.path,flags) \tdef lchmod(self,mode): \t\treturn os.lchmod(self.path,mode) \tdef lchown(self,uid=-1,gid=-1): \t\treturn", "label": 0}, {"snippet_id": 14657, "code": " serial_redirection \"\"\" import signal import gateway_code.board_config as board_config from.. import serial_redirection from. import log_to_stderr def _get_node(board_cfg): if board_cfg.linux_on_class is", "label": 1}, {"snippet_id": 45513, "code": " doc.is_extracted: extracted_text=ExtractedText.objects.get_subclass(pk=doc.pk) extracted_text_form=ParentForm(instance=extracted_text) child_formset=ChildFormSet(instance=extracted_text) if not edit: for", "label": 1}, {"snippet_id": 36961, "code": " download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the", "label": 0}, {"snippet_id": 31604, "code": " name='project'), url(r'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page, name='search'), url(r'^error', home_page", "label": 0}, {"snippet_id": 67501, "code": "=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter", "label": 0}, {"snippet_id": 43180, "code": ".objects.all(): response=self.client.get(f'/qa/extractedtext/%s' % et.data_document_id, follow=True) if response.status_code !=200: print(et.data_document_id) self.assertEqual(response.status_code, 200)", "label": 1}, {"snippet_id": 43720, "code": "') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() qa_notes_field=self.browser.find_element_by_xpath( '//*[@id=\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute", "label": 1}, {"snippet_id": 36077, "code": "(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property", "label": 0}, {"snippet_id": 37555, "code": "*kwargs): super(BulkPUCForm, self).__init__(*args, **kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form", "label": 0}, {"snippet_id": 61830, "code": " ScanResult.objects.bulk_create(results_to_be_written) def request_and_scrape_page(url, allow_redirects=True): \"\"\"Scrape and parse the HTML of a page into a BeautifulSoup\"\"\" try: page=requests.get(url,", "label": 0}, {"snippet_id": 63275, "code": "\"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith", "label": 0}, {"snippet_id": 26333, "code": " Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool", "label": 0}, {"snippet_id": 49745, "code": " session) and(not 'social' in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session", "label": 0}, {"snippet_id": 31218, "code": "=os.environ.get('HOOK_DOMAIN', 'localhost:8000') ALLOWED_HOSTS=['testing.com', 'localhost', '127.0.0.1', 'localhost:4200', HOOK_DOMAIN] ALLOWED_HOSTS +=os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(", "label": 0}, {"snippet_id": 74947, "code": "/candidate.html', context_data) @login_required def candidate_upload(request, candidate_id): from.forms import UploadForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except", "label": 0}, {"snippet_id": 38201, "code": ": return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is '' and self.prod_type is '' @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is ''", "label": 0}, {"snippet_id": 82251, "code": "(pk=pk) visits=sum(link.count for link in object.justurl_set.all()) return render(request, 'category-detail-view.html',{'object': object, 'visits': visits}) class CategoryUpdateView(LoginRequiredMixin,", "label": 0}, {"snippet_id": 60440, "code": "/favicon.ico\") app.static(\"/-/static/\", str(app_root / \"datasette\" / \"static\")) for path, dirname in self.static_mounts: app.static(path, dirname) for plugin in get_plugins(pm): if plugin[\"static_path\"]:", "label": 0}, {"snippet_id": 15848, "code": ".data) history=[ { 'id': item['id'], 'date': datetime.fromtimestamp(item['date'] / 1000), 'commands': item['commands'] } for item in history ] return render_template('run_history.html', history=history)", "label": 0}, {"snippet_id": 42404, "code": "().values('extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual", "label": 0}, {"snippet_id": 52218, "code": " lady\" @app.route(\"/view-team\") def view_team(): \"\"\"Renders view of team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return render_template", "label": 0}, {"snippet_id": 6814, "code": ".email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password", "label": 0}, {"snippet_id": 1311, "code": " Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None,", "label": 0}, {"snippet_id": 65203, "code": "'failed to compile code') output_json(args.points, deductions) return deductions +=grade(code_obj, name, args.points, test_case_objs, vlevel) output_json(args.points, deductions) if __name__=='__main__': try", "label": 0}, {"snippet_id": 4816, "code": " \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username", "label": 0}, {"snippet_id": 77221, "code": "[\"z\"], z ) return tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions", "label": 0}, {"snippet_id": 55198, "code": ".path.realpath(self.path)) \tdef relpath(self,start=None): \t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other", "label": 0}, {"snippet_id": 75940, "code": "'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField", "label": 0}, {"snippet_id": 45111, "code": "'datadocument_count_by_month']=datadocument_count_by_month() stats['product_count']=Product.objects.count() stats['dss_tox_count']=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count()", "label": 0}, {"snippet_id": 66981, "code": " import VT from lib.threatminer import ThreatMiner from django.db.models import Q from apps.threat.models import Event, Attribute from apps.reputation.models import blacklist from apps.twitter.models import", "label": 0}, {"snippet_id": 69445, "code": " def ensure_jupyterhub_running(times=20): \"\"\" Ensure that JupyterHub is up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub", "label": 0}, {"snippet_id": 80291, "code": " self.lock_all_action.setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction", "label": 0}, {"snippet_id": 53078, "code": ".com', }, } self.client.login(username='testuser', password='password') self.assertTemplateUsed('users/update.html') for form in data: data_to_pass=data[form] data[form][form]='Update' response=self.client", "label": 1}, {"snippet_id": 35406, "code": "'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type", "label": 0}, {"snippet_id": 28485, "code": ": hex_identifier=hex_identifier.decode() return hex_identifier def hex_to_binary(hex_identifier): return binascii.unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES", "label": 0}, {"snippet_id": 36344, "code": " be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/'", "label": 0}, {"snippet_id": 19827, "code": " db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config", "label": 1}, {"snippet_id": 47568, "code": "(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices", "label": 0}, {"snippet_id": 11978, "code": " strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form", "label": 0}, {"snippet_id": 2562, "code": ".exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import get_random_string", "label": 0}, {"snippet_id": 12131, "code": " configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK", "label": 0}, {"snippet_id": 33403, "code": "\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n']) self", "label": 0}, {"snippet_id": 26408, "code": " check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert", "label": 0}, {"snippet_id": 24454, "code": " redis_password=None): \"\"\"Initialize the log monitor object.\"\"\" self.node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self", "label": 1}, {"snippet_id": 61049, "code": " :type hostname: str :param host_status: Status of the used hosts :type host_status: dict :param host_lock: Lock that has to be acquired in order to write to the host status dictionary. :type host_lock", "label": 0}, {"snippet_id": 73634, "code": " {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText", "label": 0}, {"snippet_id": 84875, "code": "[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b)\", title) if m: search_title", "label": 0}, {"snippet_id": 78960, "code": " data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will", "label": 0}, {"snippet_id": 36121, "code": ".prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat", "label": 0}, {"snippet_id": 21344, "code": " the process is already dead. wait(bool): If true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process", "label": 0}, {"snippet_id": 64634, "code": "'map', 'max', 'MemoryError', 'memoryview', 'min', '__name__', 'NameError', 'next', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'object', 'oct', 'ord', 'OSError', 'OverflowError", "label": 0}, {"snippet_id": 16029, "code": " login_form=LoginForm() if login_form.validate_on_submit(): login_user(login_form.user, remember=True) return redirect(url_for('view_home')) return render_template('login.html', form=login_form) @app.route", "label": 0}, {"snippet_id": 79310, "code": "': datarequest.id, 'user_id': datarequest.user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id", "label": 0}, {"snippet_id": 11911, "code": ".core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound", "label": 0}, {"snippet_id": 12628, "code": "].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not", "label": 0}, {"snippet_id": 1819, "code": " ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os", "label": 1}, {"snippet_id": 13158, "code": " settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api", "label": 0}, {"snippet_id": 43910, "code": ".support.select import Select from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.by import By from selenium", "label": 1}, {"snippet_id": 51695, "code": " method): scope={ 'class':SI, 'results':{ start_url:[ { 'endpoint': endpoint, 'params': params, 'method': method } ] } } if method=='POST': script=createPostScript(endpoint,params) return scope, script", "label": 0}, {"snippet_id": 69321, "code": " ALL\\n') f.write('Defaults exempt_group=jupyterhub-admins\\n') def ensure_user_environment(user_requirements_txt_file): \"\"\" Set up user conda environment with required packages \"\"\" logger.info(\"Setting up", "label": 0}, {"snippet_id": 80096, "code": " QMainWindow, QWidget, QTextEdit, QInputDialog, QMessageBox, QApplication from matisse import Matisse from.handled_decorators import handled_function, handled_slot from.logging_stream import LoggingStream from", "label": 0}, {"snippet_id": 71295, "code": "'_messages'): try: return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self): next_uri=self.GET.get('next') if next_uri is not None: self.session.data", "label": 1}, {"snippet_id": 63017, "code": "')), path=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication", "label": 0}, {"snippet_id": 1502, "code": "=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\"", "label": 0}, {"snippet_id": 40594, "code": " response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa/ must be", "label": 0}, {"snippet_id": 5418, "code": ": \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 704, "code": "}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif", "label": 0}, {"snippet_id": 71959, "code": " '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri", "label": 1}, {"snippet_id": 78131, "code": ": data_driven_application=extra['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email", "label": 0}, {"snippet_id": 37149, "code": " queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all(), label=\"Weight Fraction Type\", initial", "label": 0}, {"snippet_id": 76908, "code": " image_spec.pil_format, **image.info) os.chmod(t_path, 777) except IOError, e: logger.error(\"Failed to save:%s\", str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest", "label": 0}, {"snippet_id": 34080, "code": "\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*'", "label": 0}, {"snippet_id": 9717, "code": " tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders", "label": 0}, {"snippet_id": 11118, "code": " third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to", "label": 0}, {"snippet_id": 52545, "code": " completed.{}\".format (random.choice(congratulatory_messages))) else: flash(\"Changes saved.\") db.session.commit() return redirect(\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST'])", "label": 0}, {"snippet_id": 80700, "code": "', numeric_result=True)) if success: print(f\"Setting thin etalon motor position to{target_pos}.\") self.matisse.set_thin_etalon_motor_pos(target_pos) @handled_slot(bool) def start_bifi_scan(self, checked", "label": 0}, {"snippet_id": 43915, "code": ".support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from selenium", "label": 1}, {"snippet_id": 5324, "code": "\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http", "label": 0}, {"snippet_id": 72272, "code": " d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{", "label": 0}, {"snippet_id": 58836, "code": ".CharField('invite code', max_length=255) status=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES", "label": 0}, {"snippet_id": 76002, "code": "( 'Redirect:{}'.format( self.get_redirect_type_display(), ), ) def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self.to_url if self.redirect_type", "label": 0}, {"snippet_id": 78043, "code": " default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size'", "label": 0}, {"snippet_id": 32899, "code": " len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type, value, traceback): if self.stack: self", "label": 0}, {"snippet_id": 15730, "code": " return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route('/run/form/submit', methods=['POST']) def view_run_submit(): run_form=get_run_form() commands", "label": 0}, {"snippet_id": 76759, "code": " transparency for tile\") if not tile: return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel((0, 0))[-1] !=_TRANSPARENT_ALPHA", "label": 0}, {"snippet_id": 26220, "code": ".redis_password) assert ray_constants.PROCESS_TYPE_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_MONITOR]=[process_info] def start_raylet_monitor(self): \"\"\"Start the raylet monitor.", "label": 0}, {"snippet_id": 4943, "code": "'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login", "label": 0}, {"snippet_id": 37795, "code": ".__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance", "label": 0}, {"snippet_id": 4128, "code": "' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects", "label": 0}, {"snippet_id": 84506, "code": "=revision+1).get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip(request)", "label": 1}, {"snippet_id": 10943, "code": ", and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc", "label": 0}, {"snippet_id": 63872, "code": ") @authn_views.route('/terminate') def terminate(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn", "label": 0}, {"snippet_id": 65421, "code": "\") +\")\") tab_title=ntpath.basename(keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last", "label": 1}, {"snippet_id": 7235, "code": " by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License", "label": 0}, {"snippet_id": 41726, "code": "'ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects.dg.group_type),'Composition', 'Type of DataGroup needs to be", "label": 0}, {"snippet_id": 1947, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta", "label": 0}, {"snippet_id": 33466, "code": " pid=dd.products.first().pk puc=PUC.objects.get(id=20) ppuc=ProductToPUC.objects.create(product=Product.objects.get(pk=pid), puc=puc, puc_assigned_usr=User.objects.get(username='Karyn')) ppuc.refresh_from_db", "label": 0}, {"snippet_id": 60407, "code": ".jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u: urllib.parse.quote_plus(u) self.jinja_env.filters[\"escape_sqlite\"]=escape_sqlite self.jinja_env.filters[", "label": 0}, {"snippet_id": 50735, "code": " delete \"%s\"' % path) logfile.write('\\nDone.\\n') class BuildStep(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a build step name.\".format(name)) self", "label": 0}, {"snippet_id": 67587, "code": " second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class EventDetailView(PaginationMixin, ListView):", "label": 0}, {"snippet_id": 67673, "code": ".get('category') type=self.request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) return query class AttributeListView", "label": 0}, {"snippet_id": 56628, "code": "*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self): client=Client() self.response=client.get(reverse('aasa')) return self", "label": 0}, {"snippet_id": 70905, "code": "'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding", "label": 0}, {"snippet_id": 23120, "code": "()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function", "label": 0}, {"snippet_id": 19548, "code": ".log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)", "label": 1}, {"snippet_id": 21861, "code": " processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non", "label": 0}, {"snippet_id": 47570, "code": "'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices", "label": 0}, {"snippet_id": 4106, "code": " import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation", "label": 0}, {"snippet_id": 18250, "code": "\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself", "label": 1}, {"snippet_id": 29745, "code": "=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get", "label": 0}, {"snippet_id": 20227, "code": "._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls", "label": 0}, {"snippet_id": 78149, "code": " 'update_frequency' in pkg: update_frequency=pkg['update_frequency'] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email,", "label": 1}, {"snippet_id": 77334, "code": " layers_by_name: A dict of all the layers in a database. \"\"\" layers_by_name={} server_vars=_GetServerVars(target_url) if not server_vars.has_key(\"dbType\"): if server_vars.has_key(\"projection\"): server_vars", "label": 0}, {"snippet_id": 78955, "code": " close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception", "label": 0}, {"snippet_id": 63880, "code": " SAML2 reauthn request to the IdP. \"\"\" return _authn('terminate-account-action', force_authn=True) def _authn(action, force_authn=False): redirect_url=current_app.config.get('SAML2_LOGIN_REDIRECT_URL',", "label": 0}, {"snippet_id": 79653, "code": " note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are invalid. Data QLD modification Will send email notification if organisation was", "label": 0}, {"snippet_id": 31427, "code": ".DjangoTemplates', 'DIRS':[], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors", "label": 0}, {"snippet_id": 41367, "code": " for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd, EXTRA) extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model", "label": 1}, {"snippet_id": 8642, "code": " HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings", "label": 0}, {"snippet_id": 50312, "code": " def tmp(): with tempfile.NamedTemporaryFile(mode=\"w+t\", delete=False) as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"", "label": 0}, {"snippet_id": 23022, "code": " and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A message generated by traceback.format_exc(). Returns", "label": 0}, {"snippet_id": 19047, "code": "\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role", "label": 1}, {"snippet_id": 6617, "code": " redirect(url_for('auth.unconfirmed')) @auth.route('/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template(", "label": 0}, {"snippet_id": 12466, "code": " None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 39484, "code": "(self): return self.raw_chem_name @classmethod def detail_fields(cls): return['extracted_text','raw_cas','raw_chem_name','report_funcuse'] def get_extractedtext(self): return self.extracted_text @property", "label": 0}, {"snippet_id": 41549, "code": " django.test import Client from django.test import TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard.views.data_group import ExtractionScriptForm, DataGroupForm", "label": 1}, {"snippet_id": 17466, "code": "'account.login')) if user.status !=models.UserStatusType.ACTIVE: flask.flash(flask.Markup( '<strong>Login failed!</strong> Account is not activated.'), 'danger') return flask.redirect(flask.url_for('account", "label": 0}, {"snippet_id": 28920, "code": ") try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"", "label": 0}, {"snippet_id": 62214, "code": " False def validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore", "label": 0}, {"snippet_id": 37233, "code": " class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True", "label": 0}, {"snippet_id": 21810, "code": " absolute_import from __future__ import division from __future__ import print_function import logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used", "label": 0}, {"snippet_id": 117, "code": " create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive", "label": 1}, {"snippet_id": 53478, "code": ".resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename: str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False", "label": 0}, {"snippet_id": 40334, "code": ".QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA Group for the specified Script object; Use all the related ExtractedText records or, if there are more than 100,", "label": 0}, {"snippet_id": 70771, "code": " must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but", "label": 0}, {"snippet_id": 74965, "code": "'register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': form=UploadForm(request.POST, request.FILES) if", "label": 0}, {"snippet_id": 15072, "code": "=time_series) class NoValidationSelectField(SelectField): def pre_validate(self, form): \"\"\"per_validation is disabled\"\"\" class ChangeOneModelForm(FlaskForm): def __init__(self, csrf_enabled=False, *args,", "label": 0}, {"snippet_id": 24771, "code": " import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary", "label": 0}, {"snippet_id": 2236, "code": " hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/", "label": 1}, {"snippet_id": 74076, "code": ". import forms, models, view_helpers logger=logging.getLogger(__name__) class _PassphrasePartial(views.base.TemplateView): storage_helper=view_helpers.ReportStorageHelper @property def storage(self): return", "label": 0}, {"snippet_id": 16632, "code": "): \"\"\"Return a GameSeeder that knows about the tournament so far\"\"\" tourney_players=tournament.tournamentplayer_set.all() seeder=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10) for tp in", "label": 0}, {"snippet_id": 15603, "code": " sub_form.model_system_name.data=command.get('model_system_name', '') sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '')", "label": 0}, {"snippet_id": 8350, "code": " current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: context[", "label": 0}, {"snippet_id": 66808, "code": "*kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): domain=request.GET.get('keyword'", "label": 0}, {"snippet_id": 22743, "code": ".events=[] if self.worker.mode==ray.WORKER_MODE: component_type=\"worker\" else: component_type=\"driver\" self.worker.raylet_client.push_profile_events( component_type, ray.UniqueID(self.worker.worker_id),", "label": 0}, {"snippet_id": 36078, "code": " tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self", "label": 0}, {"snippet_id": 60560, "code": ", r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view(self), r\"/<db_name:[^/]+>", "label": 0}, {"snippet_id": 23937, "code": ".PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses", "label": 0}, {"snippet_id": 42934, "code": "/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter( qa_group=new_group).count", "label": 0}, {"snippet_id": 16584, "code": ".tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers", "label": 0}, {"snippet_id": 41695, "code": " should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm", "label": 0}, {"snippet_id": 76527, "code": ": is ul -lr(lr is exclusive!) addresses of tiles at a given zoom_level. zoom_level: self-explanatory. layer_properties: Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching", "label": 0}, {"snippet_id": 31490, "code": "': 'django.contrib.auth.password_validation.' 'MinimumLengthValidator', }, { 'NAME': 'django.contrib.auth.password_validation.' 'CommonPasswordValidator', }, { 'NAME': 'django.contrib.auth.password_validation", "label": 0}, {"snippet_id": 80851, "code": ".set_piezo_etalon_lock(checked) self.lock_piezo_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_fast_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} fast piezo.\")", "label": 0}, {"snippet_id": 70302, "code": ", path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^", "label": 0}, {"snippet_id": 66210, "code": "\", \"Password\") stack.child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property", "label": 0}, {"snippet_id": 81168, "code": ".sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner', '=', partner.id)]) bc_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_tickets", "label": 0}, {"snippet_id": 12076, "code": "', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if", "label": 0}, {"snippet_id": 41089, "code": ".url) self.assertContains(response, 'New Product') def test_product_title_duplication(self): response=self.client.get('/datadocument/245401/') self.assertContains(response, '/link_product_form/245401/')", "label": 0}, {"snippet_id": 15593, "code": "'change_input_series_one_model')): sub_form=form.change_input_series_one_model[index] sub_form.model_system_name.choices=get_models_choices() sub_form.model_system_name.data=command.get('model_system_name'", "label": 0}, {"snippet_id": 35362, "code": " form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created", "label": 0}, {"snippet_id": 44426, "code": " '12_product_to_puc', '13_puc_tag' ] class dotdict(dict): \"\"\"dot.notation access to dictionary attributes\"\"\" __getattr__=dict.get __setattr__=dict.__setitem__ __delattr__=dict.__delitem__ def load_model_objects", "label": 1}, {"snippet_id": 80035, "code": "=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id", "label": 0}, {"snippet_id": 36001, "code": "=100, blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product", "label": 0}, {"snippet_id": 49051, "code": ", redirect, get_object_or_404 from django.core.exceptions import ObjectDoesNotExist from djqscsv import render_to_csv_response from dashboard.forms import * from dashboard.forms import ExtractedListPresenceTagForm", "label": 0}, {"snippet_id": 42572, "code": "(response, 'Data Document') self.assertNotContains(response, 'Extracted Chemical') self.assertNotContains(response, 'DSSTox Substance') def test_faceted_search_returns_upc(self): response=self.c.get('/find", "label": 0}, {"snippet_id": 74471, "code": " import os import urllib import requests from django.contrib.auth.decorators import login_required, permission_required from django.contrib import messages from django.conf import settings from django.core", "label": 0}, {"snippet_id": 76375, "code": "\"FALSE\") bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor else _NO_DATA_PIXELS) alpha=_OPAQUE_ALPHA if set_pixel_to_bgcolor else _TRANSPARENT_ALPHA if layer_properties.image_format==\"image/jpeg", "label": 0}, {"snippet_id": 45653, "code": " return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST['referer'] if request.POST['referer'] else 'data_document' doc=get_object_or_404(DataDocument", "label": 0}, {"snippet_id": 52186, "code": " user_choice==\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route", "label": 0}, {"snippet_id": 83995, "code": " redirected_from=title except IndexError: article=ArticleClass(**article_args) if revision is not None: changeset=get_object_or_404( article.changeset_set, revision=revision) article.content=changeset.get_content", "label": 0}, {"snippet_id": 24, "code": " FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date,", "label": 1}, {"snippet_id": 48970, "code": " PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc, 'tagform' : tagform, 'docs' :", "label": 0}, {"snippet_id": 34506, "code": " datetime from django import forms from django.db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django", "label": 0}, {"snippet_id": 55028, "code": "): \t\treturn Link(p) \telse: \t\treturn FSItem(p) def fs_object(p): \tp=os.path.abspath(p) \treturn specialized(p) class FSPath(object): \tdef __init__(self,path): \t\tself.path=path \tdef __sub__(self,other): \t", "label": 0}, {"snippet_id": 46245, "code": " and ext.one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name' err_msg=['must be 1:1 with \"data_document_id\".'] context['ext_err'][i+1]={col: err_msg} if created: update_fields", "label": 0}, {"snippet_id": 19930, "code": "): The channel to subscribe to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel", "label": 0}, {"snippet_id": 37673, "code": "'cpcat_code'] class ExtractedHHDocForm(ExtractedTextForm): class Meta: model=ExtractedHHDoc fields=['hhe_report_number', 'study_location', 'naics_code', 'sampling_date', 'population_gender', 'population_age', ", "label": 0}, {"snippet_id": 57746, "code": ".STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status:", "label": 1}, {"snippet_id": 43786, "code": "' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable", "label": 0}, {"snippet_id": 42441, "code": " TestCase from dashboard.tests.loader import load_model_objects from dashboard.models import QAGroup, ExtractedText class ExtractedQaTest(TestCase): def setUp(self): self.objects=load_model_objects() self", "label": 0}, {"snippet_id": 66849, "code": "['search_form']=SearchForm() domain=self.kwargs['pk'] try: context['geoip']=GeoIP().lookup(domain) except Exception as e: print(e) pass try: context['ipaddress']=socket.gethostbyname(domain) except Exception", "label": 0}, {"snippet_id": 84781, "code": " \"\"\" rv=do_wl_markdown(request.POST['body'], 'bleachit') return HttpResponse(rv, content_type='text/html') def article_diff(request): \"\"\"This is a AJAX function that diffs the body of the article as it", "label": 0}, {"snippet_id": 82324, "code": " re_path from Shortener_App.views import( HomeView, SuccessUrlView, CustomShortURLCreateView, ShortManyURLSView, URLDetailView, URLUpdateView, URLDeleteView, CategoryCreateView, CategoryListView, CategoryDetailView", "label": 0}, {"snippet_id": 64675, "code": "'super', 'SyntaxError', 'SyntaxWarning', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'tuple', 'type', 'TypeError', 'UnboundLocalError', 'UnicodeEncodeError', 'UnicodeWarning', 'UserWarning', 'ValueError", "label": 0}, {"snippet_id": 62976, "code": ") resp=self.app.dispatch_request() self.assertEquals(resp.status_code, 302) self.assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding", "label": 0}, {"snippet_id": 52561, "code": " methods=['POST']) def invite_new_teammates(team_id): \"\"\" \"\"\" team_object=Team.query.filter_by(t_id=team_id).first() emails_lst=request.form.getlist(\"email\") messages_list=request.form.getlist(\"email-message", "label": 0}, {"snippet_id": 58324, "code": "\"title\": \"create_courselet\" }, onboarding.NEXT_STEPS:{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody</p>\",", "label": 1}, {"snippet_id": 28112, "code": " be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID", "label": 0}, {"snippet_id": 54019, "code": ") self._last_update_time=time.time() return contents def read_stderr(self): \"\"\" Returns the current state of the stderr redirect buffer This is useful for creating intermediate display values while the", "label": 0}, {"snippet_id": 50911, "code": "._enable_all_options=False def build_condition(self, name=None, **conditions): \"\"\"Decorator applied to functions in the build_behaviour file.\"\"\" def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep", "label": 0}, {"snippet_id": 18168, "code": "[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else", "label": 1}, {"snippet_id": 52178, "code": "\"team\") user_choice=request.form.get(\"is_joining\") if user_choice==\"True\": user_choice=True else: user_choice=False q.update_userteam_relationship(user_id, team_id, user_choice) flash(\"Your team invites", "label": 0}, {"snippet_id": 76891, "code": " type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\".\" +image_spec.file_extension, prefix=fname +\"-\") image.save(t_path, image_spec.pil_format, **image.info) os.chmod(t_path, 777) except IOError", "label": 0}, {"snippet_id": 38226, "code": " '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam", "label": 0}, {"snippet_id": 16472, "code": "))) doubles=7 -sitters context={'tournament': t, 'round': r, 'count': count, 'sitters': sitters, 'doubles': doubles} form=GetSevenPlayersForm(request.POST or None, the_round=r) if form.is_valid(): for rp", "label": 0}, {"snippet_id": 21851, "code": " plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port", "label": 0}, {"snippet_id": 22006, "code": " worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of", "label": 0}, {"snippet_id": 44262, "code": ") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self.browser.get(edit_url) self.browser.find_element_by_name('cancel').click() self.assertIn('/datagroups/', self.browser.current_url, \"User", "label": 0}, {"snippet_id": 13154, "code": ": configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK, 'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username", "label": 0}, {"snippet_id": 77155, "code": "=str(server_layer_def[\"id\"]), label=server_layer_def[\"label\"], projection=projection, request_type=request_type, db_type=server_layer_def[\"db_type\"], version=version_info, tile_arg_names=tile_arg_names", "label": 0}, {"snippet_id": 81481, "code": "=end_date +relativedelta(days=+7) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _handle_monthly_event_repetition", "label": 0}, {"snippet_id": 80229, "code": " Shell...') self.restart_action=console_menu.addAction('Restart') set_menu=menu_bar.addMenu('Set') self.set_wavelength_action=set_menu.addAction('Wavelength') self.set_bifi_approx_wavelength_action=set_menu", "label": 0}, {"snippet_id": 23449, "code": "(hex_identifier): return binascii.unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set,", "label": 0}, {"snippet_id": 27894, "code": "\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The", "label": 0}, {"snippet_id": 30101, "code": " import Flask, render_template, request, redirect, jsonify, url_for, flash from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from database_setup import Grudget, Base, Grudge,", "label": 0}, {"snippet_id": 80791, "code": "} slow piezo.\") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock", "label": 0}, {"snippet_id": 59038, "code": " self.status, } } except IntegrityError: return{ 'success': False, 'message': 'You already have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse", "label": 0}, {"snippet_id": 62991, "code": "(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param session_id: the token for the session :type session_id: str :return: the cookie \"\"\" return dump_cookie(self.app.config", "label": 0}, {"snippet_id": 9629, "code": ".branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 7472, "code": "(None), Exam.exam_returned_date > ninety_day_filter)) search_kwargs={} if request.args: for key in request.args: if hasattr(Exam, key): search_kwargs[key]=request.args.get(key) exams=exams.filter_by(**search_kwargs", "label": 0}, {"snippet_id": 6230, "code": " redirect_to_auth_server(self, destination): \"\"\" Set a CSRF token in the session, and redirect to the IdP. :param destination: the page that the user was going to, before we noticed they weren't logged", "label": 0}, {"snippet_id": 68787, "code": "-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'", "label": 0}, {"snippet_id": 83854, "code": " allow_write} if group_slug is not None: template_params['group']=group new_article=ArticleClass(title='NewArticle', content_type=get_ct(group), object_id=group.id) else: new_article=ArticleClass(title=", "label": 0}, {"snippet_id": 1188, "code": ".from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory'", "label": 0}, {"snippet_id": 48577, "code": "): p=Product.objects.get(pk=pk) pp=ProductToPUC.objects.get(product=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation", "label": 0}, {"snippet_id": 82564, "code": " monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__", "label": 0}, {"snippet_id": 18479, "code": "\"\"\" \tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^", "label": 0}, {"snippet_id": 39179, "code": ".clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id') and self.extracted_docs(): msg=\"The Group Type may not be changed once extracted documents have been associated with the group", "label": 0}, {"snippet_id": 61005, "code": "\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__", "label": 0}, {"snippet_id": 8, "code": " during development, and SHOULD NOT be used in a production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified", "label": 0}, {"snippet_id": 58247, "code": ".INVITE_SOMEBODY, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.PREVIEW_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.NEXT_STEPS, ONBOARDING_STEPS_DEFAULT_TEMPLATE), ('fake_key', None) )", "label": 1}, {"snippet_id": 6459, "code": "\" try: session_csrf_token=session.pop('oidc_csrf_token') state=json.loads(request.args['state']) csrf_token=state['csrf_token'] destination=state['destination'] code=request.args['code'] except(KeyError", "label": 0}, {"snippet_id": 46293, "code": "[i+1]=e.message_dict if context['ext_err']: [e[1].delete() for e in good_records] return render(request, template_name, context) if not context['ext_err']: for doc,text,record in good_records: doc.extracted", "label": 0}, {"snippet_id": 39994, "code": " blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models.IntegerField(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length", "label": 0}, {"snippet_id": 65722, "code": ".filechooser_creation_dialog.get_filename()) stock_database.copy(new_database, Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog.close() def start_database_creation_routine(self, tab_title): self", "label": 0}, {"snippet_id": 40285, "code": "{0:.0f}%\".format(pct) def get_pct_checked_numeric(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count() / count * 100)) return pct def qa_button_text", "label": 0}, {"snippet_id": 28867, "code": "=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if", "label": 0}, {"snippet_id": 9937, "code": " None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders", "label": 0}, {"snippet_id": 73123, "code": ") self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes()", "label": 1}, {"snippet_id": 82981, "code": "(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"", "label": 0}, {"snippet_id": 72759, "code": ", 'account_confirmed': format(LoginFormText.account_confirmed % user.email)}) return render(request, 'registration/login.html', {'login_form': form, 'validation_error': LoginFormText.validation_error})", "label": 0}, {"snippet_id": 31972, "code": ") > 0: return raw def execute(self, raw): ''' Execute a command in the form of a raw string. ''' tokens=Tokenizer(raw) parser=Parser(tokens) root=parser.parse() if root: root.execute(self.builtins) root", "label": 0}, {"snippet_id": 59661, "code": "{} ).get(table) or{} search_list.insert(0, table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item: return", "label": 0}, {"snippet_id": 80611, "code": " @handled_slot(bool) def set_bifi_approx_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Approx. Wavelength', label='Wavelength(nm): ', value", "label": 0}, {"snippet_id": 41746, "code": "\"composition\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context['extract_fields'], ['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num", "label": 0}, {"snippet_id": 23178, "code": " message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client", "label": 0}, {"snippet_id": 75325, "code": " Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) return render(request, 'etd_app/candidate_preview.html',{'candidate': candidate}) @login_required @require_http_methods(['POST'])", "label": 0}, {"snippet_id": 83898, "code": " view_article(request, title, revision=None, ArticleClass=Article, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='view.html', template_dir='wiki', extra_context", "label": 0}, {"snippet_id": 42364, "code": " DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word') def test_download_raw_comp_data(self): dg_co=DataGroup.objects", "label": 0}, {"snippet_id": 15435, "code": "='change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data", "label": 0}, {"snippet_id": 37561, "code": "**kwargs) lbl='Select PUC for Attribute to Assign to Selected Products' self.fields['puc'].label=lbl self.fields['puc'].widget.attrs['onchange']='form.submit();' class BulkProductTagForm(forms.ModelForm", "label": 0}, {"snippet_id": 48143, "code": ".db.models import Count, Q from django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import", "label": 1}, {"snippet_id": 44359, "code": "(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_cas\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname", "label": 0}, {"snippet_id": 38947, "code": " return self.datadocument_set.count() def extracted_docs(self): return self.datadocument_set.filter(extracted=True).count() def __str__(self): return self.name def get_absolute_url(self): return reverse", "label": 0}, {"snippet_id": 38264, "code": " querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): ''", "label": 0}, {"snippet_id": 60481, "code": "(self, \"inspect.json\", self.inspect), r\"/-/inspect<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"metadata.json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app", "label": 0}, {"snippet_id": 23283, "code": " string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the", "label": 0}, {"snippet_id": 75378, "code": "'review_candidates', kwargs={'status': 'all'})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_view_candidates(request, status): if 'sort_by' in request", "label": 0}, {"snippet_id": 13934, "code": ".get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u'</b>'", "label": 0}, {"snippet_id": 57302, "code": "() return redirect('index') if valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay',", "label": 0}, {"snippet_id": 46020, "code": ".get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form' : include_extract_form(dg), 'clean_comp_data_form' : include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg", "label": 0}, {"snippet_id": 22570, "code": " the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color,", "label": 0}, {"snippet_id": 11930, "code": " import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens", "label": 0}, {"snippet_id": 36358, "code": " test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div'", "label": 0}, {"snippet_id": 38402, "code": ", PUCToTag, PUCTag from.product_to_tag import ProductToTag from.product_to_puc import ProductToPUC from.extracted_habits_and_practices_to_puc import ExtractedHabitsAndPracticesToPUC from.qa_notes import", "label": 0}, {"snippet_id": 61472, "code": " comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all", "label": 0}, {"snippet_id": 34782, "code": "=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])[", "label": 0}, {"snippet_id": 19994, "code": "( heartbeat_message.ResourcesTotalCapacity(i)) client_id=ray.utils.binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources", "label": 0}, {"snippet_id": 83091, "code": "): \"\"\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel", "label": 0}, {"snippet_id": 76348, "code": "=tilecalcs.CalcTileRects( proj, user_log_rect, zoom_level) logger.info(\"Done tile calcs\") tiles_array=_FetchTiles(rect_of_tiles, zoom_level, layer_properties) im_whole_tiles_extent=geom.Pair(rect_of_tiles", "label": 0}, {"snippet_id": 43309, "code": " a related DssToxLookup should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link", "label": 0}, {"snippet_id": 50466, "code": " \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback): self.release() unlocktime=datetime.datetime.now() print \"Lock released at \"+str(unlocktime) print \"Lock was held for \"+str(unlocktime", "label": 0}, {"snippet_id": 81014, "code": " partner_id), ('event_id', '=', event.id)]) try: if existing_registration: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('Found existing registration, set state to open", "label": 0}, {"snippet_id": 43532, "code": ".find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits", "label": 0}, {"snippet_id": 29535, "code": " if name_exists: flash('Username %s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session", "label": 0}, {"snippet_id": 65836, "code": "(page_instance)) self.update_tab_bar_visibility() return page_instance def update_tab_bar_visibility(self): if self.container.get_n_pages() > 1: self.container.set_show_tabs(True) else: self.container.set_show_tabs", "label": 0}, {"snippet_id": 31250, "code": " INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'social_django', 'gitmate_config', ", "label": 0}, {"snippet_id": 25834, "code": " node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name(self): ", "label": 0}, {"snippet_id": 30112, "code": " import sessionmaker from database_setup import Grudget, Base, Grudge, User from flask import session as login_session import random import string from oauth2client.client import flow_from_clientsecrets", "label": 0}, {"snippet_id": 79808, "code": " Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition(org_dict) users.discard(context['auth_user_obj'].id) tk.enqueue_job(_send_mail", "label": 1}, {"snippet_id": 4032, "code": "['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1", "label": 0}, {"snippet_id": 13082, "code": "(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider", "label": 0}, {"snippet_id": 81122, "code": "+referer.split('/')[-1]) return http.request.redirect(redirect) def _update_counter_subscription(self, event, partner, subscription_update_counter): event_cat=str(event.event_type_id.name).lower() ai_monthly", "label": 1}, {"snippet_id": 58060, "code": "\"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson\", \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM", "label": 1}, {"snippet_id": 16871, "code": " games=_seed_games_and_powers(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name,", "label": 0}, {"snippet_id": 36710, "code": "'datadocument_with_extracted_text_percent']=\\ DataDocument.objects.filter(extracted=True).count()/DataDocument.objects.count()*100 stats['datadocument_count_by_date']=datadocument_count_by_date() stats[", "label": 0}, {"snippet_id": 16989, "code": "('tournament.add_game') def create_games(request, tournament_id, round_num): \"\"\"Provide a form to create the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404", "label": 0}, {"snippet_id": 33253, "code": "') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site", "label": 0}, {"snippet_id": 38345, "code": " DataGroup from.document_type import DocumentType from.data_document import DataDocument from.ingredient import Ingredient from.product import Product from.source_category import SourceCategory from.product_document", "label": 0}, {"snippet_id": 29747, "code": "=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created, preview=preview) db.session.add(image) tags=[Tag.query.get(1)] added_tags=[get_or_create_tag", "label": 0}, {"snippet_id": 52926, "code": " ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(?P<room_id>[0-9]+)/', ChatRoomView.as_view(), name='chat-room'), url", "label": 1}, {"snippet_id": 3699, "code": "'location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1'", "label": 0}, {"snippet_id": 44092, "code": " return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser", "label": 0}, {"snippet_id": 27194, "code": " autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str", "label": 0}, {"snippet_id": 5050, "code": ", 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin", "label": 0}, {"snippet_id": 29127, "code": " object that will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy", "label": 0}, {"snippet_id": 77455, "code": " target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability to fetch tiles - everything a code client needs to know about and use, to get tiles from", "label": 0}, {"snippet_id": 83243, "code": ") for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers", "label": 0}, {"snippet_id": 15270, "code": " change_timeseries_value_several_days=FieldList(FormField(ChangeInputNewValue), min_entries=0) change_timeseries_value_several_days_add_delta=FieldList(FormField(ChangeInputAddDelta), min_entries=0) def get_models_choices()", "label": 0}, {"snippet_id": 8686, "code": " the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc", "label": 0}, {"snippet_id": 26728, "code": " self._kill_process_type( process_type, check_alive=check_alive, allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"", "label": 0}, {"snippet_id": 76378, "code": " bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor else _NO_DATA_PIXELS) alpha=_OPAQUE_ALPHA if set_pixel_to_bgcolor else _TRANSPARENT_ALPHA if layer_properties.image_format==\"image/jpeg\": mode=\"RGB\"", "label": 0}, {"snippet_id": 25364, "code": " self.local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate", "label": 0}, {"snippet_id": 50196, "code": "=generate_password_hash(password) insert_user(email, password_hash) session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/') flash('Email", "label": 0}, {"snippet_id": 21687, "code": "(self.all_processes.keys()): self._kill_process_type( process_type, check_alive=check_alive, allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list", "label": 0}, {"snippet_id": 83123, "code": ".__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False def kill(self): \"\"\"Shuts down the thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__", "label": 0}, {"snippet_id": 77127, "code": "])) if server_layer_def[\"projection\"]==\"mercator\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps\") tile_arg_names=_LAYER_ARG_NAMES", "label": 0}, {"snippet_id": 55141, "code": ".path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self):", "label": 0}, {"snippet_id": 50902, "code": "-verbose\") self._enabled_options=set() self._disabled_options=set() self._disable_all_options=False self._enable_all_options=False def build_condition(self, name=None, **conditions): \"\"\"Decorator applied", "label": 0}, {"snippet_id": 36996, "code": " index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv", "label": 0}, {"snippet_id": 37703, "code": "', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs", "label": 0}, {"snippet_id": 30398, "code": "'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json() login_session['username']=data['name'] login_session['picture']=data['picture'] login_session['email']=data['email'] output", "label": 0}, {"snippet_id": 61748, "code": " takes a queryset and scans the securedrop pages. Unlike the scan method that takes a single SecureDrop instance, this method requires a DirectoryEntryQueryset of SecureDrop instances that are in the database", "label": 0}, {"snippet_id": 4786, "code": " test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email)", "label": 0}, {"snippet_id": 53968, "code": " without adding them to the actual report body. This is useful for creating intermediate body values for display while the method is still executing. :return: A dom string for the current state of the print", "label": 0}, {"snippet_id": 9150, "code": "\"\"\"Render the combined login/registration form, defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or", "label": 0}, {"snippet_id": 70373, "code": ".lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path", "label": 1}, {"snippet_id": 65858, "code": ".basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_tab_close_button_clicked", "label": 0}, {"snippet_id": 81760, "code": " import JustURL, Category, ClickTracking from.utils import create_short_url, token_generator, generate_csv, get_client_ip, check_input_url import re class HomeView(View): def get(self, request, *args, *", "label": 0}, {"snippet_id": 16385, "code": " r=t.current_round() if not round_num or(r.number()==round_num): if t.seed_games: if(r.roundplayer_set.count() % 7)==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, r.number()", "label": 1}, {"snippet_id": 82504, "code": ", comp_name): \"\"\"Initializes component monitoring job. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" self.pid=pid self.comp_name", "label": 0}, {"snippet_id": 62925, "code": ":param check_fn: the function that checks the side effects after accessing the acs :type check_fn: callable \"\"\" came_from='/camefrom/' with self.app.test_client() as c: resp=c.get(url) cookie=resp.headers", "label": 1}, {"snippet_id": 36783, "code": ")) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'), document_count=Count('id')) \\ .order_by('upload_date", "label": 0}, {"snippet_id": 81661, "code": ".info('Can subscribe for open event id: %s, name: %s', event.event_type_id.name, event.name) return True if event_start < datetime.now(): return False if(event_start +relativedelta(hours=-24)) > datetime", "label": 1}, {"snippet_id": 2276, "code": ".replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 39833, "code": " import Script def validate_wf_analysis(value): if value < 0 or value > 1: raise ValidationError( (f'Quantity{value} must be between 0 and 1'),params={'value': value}) class Ingredient(CommonInfo): lower_wf_analysis", "label": 0}, {"snippet_id": 60659, "code": " exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500.html\"] if status !=500: templates=[\"{}.html", "label": 0}, {"snippet_id": 51111, "code": "\"]: self._enabled_options.clear() self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext", "label": 0}, {"snippet_id": 16456, "code": "=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) doubles=7 -sitters context=", "label": 0}, {"snippet_id": 77100, "code": ": \"\"\"Make a WmsLayer object from a serverDefs layer. Args: target_url: The server's target url, after which we'll append '?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path", "label": 0}, {"snippet_id": 60786, "code": " class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring job for a local component. ", "label": 0}, {"snippet_id": 17281, "code": ".html', {'tournament': t, 'round': round_num, 'formset': formset}) def game_index(request, tournament_id, round_num): \"\"\"Display a list of games in the round\"\"\" t=get_visible_tournament_or_404(tournament_id", "label": 0}, {"snippet_id": 69167, "code": ".py'), install_prefix=INSTALL_PREFIX, ) systemd.install_unit('jupyterhub.service', hub_unit_template.format(**unit_params)) systemd.install_unit('traefik.service', traefik_unit_template.format(**unit_params", "label": 0}, {"snippet_id": 52557, "code": "\"/view-team\") @app.route(\"/invite-teammates/<int:team_id>\", methods=['POST']) def invite_new_teammates(team_id): \"\"\" \"\"\" team_object=Team.query.filter_by(t_id=team_id).first() emails_lst=request.form.getlist", "label": 0}, {"snippet_id": 24892, "code": " self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning( \"Monitor", "label": 0}, {"snippet_id": 70962, "code": " blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a><", "label": 0}, {"snippet_id": 6619, "code": "'auth.unconfirmed')) @auth.route('/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed", "label": 0}, {"snippet_id": 76548, "code": " ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s; http://localhost/wms", "label": 0}, {"snippet_id": 56332, "code": " experience=ORMExperience.objects.create(title=title, description=description, share_id=share_id, author=orm_person) experience.picture=pic experience.save() return self def given_a_public_domain(self,", "label": 0}, {"snippet_id": 81536, "code": " _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event existence: ' +old_repeating_event.name +', date: ' +str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id", "label": 0}, {"snippet_id": 17356, "code": " flask.request.method=='POST' and form.validate(): if app.config['MAINTENANCE_MODE'] and not app.config['MAINTENANCE_MODE_LOGINS']: flask.flash(flask.Markup('<strong>Logins are currently disabled.</strong", "label": 0}, {"snippet_id": 1628, "code": " c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded", "label": 0}, {"snippet_id": 8891, "code": "} if third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers", "label": 0}, {"snippet_id": 3075, "code": "'OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name)", "label": 1}, {"snippet_id": 12837, "code": " Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key", "label": 0}, {"snippet_id": 36053, "code": " ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def", "label": 0}, {"snippet_id": 83548, "code": " Article, ChangeSet, dmp from wiki.utils import get_ct from django.contrib.auth.decorators import login_required from wl_utils import get_real_ip import re try: WIKI_LOCK_DURATION=settings.WIKI_LOCK_DURATION", "label": 0}, {"snippet_id": 50830, "code": " string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list(x) for x", "label": 0}, {"snippet_id": 7419, "code": " @api.route(\"/exams/\", methods=[\"GET\"]) class ExamList(Resource): exam_schema=ExamSchema(many=True) @jwt.requires_auth def get(self): try: csr=CSR.find_by_username(g.jwt_oidc_token_info['preferred_username", "label": 0}, {"snippet_id": 29532, "code": "==username).all() if name_exists: flash('Username %s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user", "label": 1}, {"snippet_id": 82334, "code": " URLDeleteView, CategoryCreateView, CategoryListView, CategoryDetailView, CategoryUpdateView, CategoryDeleteView, ClickTrackingDetailView, link_redirect ) urlpatterns=[ re_path(r'admin/', admin.site.urls", "label": 0}, {"snippet_id": 50037, "code": " redirect('/saveAs') @app.route(\"/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session): if 'email' in session: email=session", "label": 0}, {"snippet_id": 79893, "code": "=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict", "label": 0}, {"snippet_id": 6852, "code": "): current_user.password=form.password.data db.session.add(current_user) session['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for('main.index')) else", "label": 0}, {"snippet_id": 8507, "code": "\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user", "label": 0}, {"snippet_id": 77025, "code": "=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\" _TILE_ARGS=\"&%s=%d&%s=%d&%s=%d\" _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\",", "label": 0}, {"snippet_id": 47396, "code": " priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource, 'datagroup_list': datagroup_list", "label": 0}, {"snippet_id": 64280, "code": "'RelayState', next_page) if 'SAMLResponse' in request.form: current_app.logger.debug('Receiving a logout response from the IdP') response=client.parse_logout_request_response( request.form['SAMLResponse", "label": 0}, {"snippet_id": 510, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 10070, "code": " if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html'", "label": 0}, {"snippet_id": 34886, "code": " response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'", "label": 0}, {"snippet_id": 42788, "code": "(Script.objects.get(pk=15).qa_begun) group_pk=QAGroup.objects.get(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response", "label": 0}, {"snippet_id": 73866, "code": ".objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete\"): Position.objects.get( id=request.POST.get(\"id\")).delete() elif request.POST.get(\"upload-applications\"): upload_applications(request", "label": 1}, {"snippet_id": 46356, "code": ".values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 for doc in docs_needing_products", "label": 0}, {"snippet_id": 58992, "code": "'current_site': Site.objects.get_current(request) }) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render(context) text_template=loader.get_template('ctms/email", "label": 0}, {"snippet_id": 14410, "code": " the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter", "label": 0}, {"snippet_id": 73896, "code": ")) request.session['position_sort']=sort_by return render(request, 'positions.html', positions_list_data(request, sort_by)) def position_detail_data(request, position): return{'baseVisibleText': InterfaceText", "label": 1}, {"snippet_id": 1309, "code": " Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root", "label": 0}, {"snippet_id": 4835, "code": "'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301", "label": 0}, {"snippet_id": 56545, "code": "/link=http://pachatary.com/&other=param') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app') \\ .given_a_dynamic_link", "label": 1}, {"snippet_id": 1786, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 37754, "code": ", 'CO', 'CP']: return False if dg.all_matched() and not dg.all_extracted(): return ExtractionScriptForm(dg_type=dg.type) else: return False class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__", "label": 0}, {"snippet_id": 61271, "code": "(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\"", "label": 0}, {"snippet_id": 43431, "code": ".data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec", "label": 0}, {"snippet_id": 69129, "code": " hub_unit_template=f.read() with open(os.path.join(HERE, 'systemd-units', 'traefik.service')) as f: traefik_unit_template=f.read() proxy_secret_path=os.path.join(STATE_DIR, 'traefik-api.secret') if not", "label": 0}, {"snippet_id": 58609, "code": " if chat_exists: update_onboarding_step(onboarding.STEP_2, instructor.user_id) if Course.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_3, instructor.user_id) if", "label": 0}, {"snippet_id": 7917, "code": " password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password", "label": 0}, {"snippet_id": 3236, "code": "() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del", "label": 0}, {"snippet_id": 79685, "code": " be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id:", "label": 0}, {"snippet_id": 60296, "code": ".max_returned_rows if max_returned_rows==page_size: max_returned_rows +=1 if max_returned_rows and truncate: rows=cursor.fetchmany(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[", "label": 0}, {"snippet_id": 38907, "code": " *args, **kwargs): super(DataGroup, self).save(*args, **kwargs) def matched_docs(self): return self.datadocument_set.filter(matched=True).count() def all_matched(self): return all(self.datadocument_set", "label": 0}, {"snippet_id": 29729, "code": " current_app.static_folder, current_app.config['STATIC_BENWA_DIR'], fname )) fpath='/'.join(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview", "label": 1}, {"snippet_id": 72681, "code": "=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def login_form(request): if not request.user.is_authenticated: form=LoginForm(", "label": 0}, {"snippet_id": 48508, "code": "['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product", "label": 0}, {"snippet_id": 31102, "code": " login_session: return redirect('/login') grudgeToDelete=session.query(Grudge).filter_by(id=grudge_id).one() if login_session['user_id'] !=grudget.user_id: return \"<script>function myFunction(){alert('You are", "label": 0}, {"snippet_id": 4254, "code": ") response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path", "label": 0}, {"snippet_id": 18795, "code": " easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': \ttornado", "label": 1}, {"snippet_id": 67309, "code": " context['tm_report']=tm.getReportFromIP(ip) context['bls']=blacklist.objects.filter(Q(ip=ip)|Q(url__contains=ip)) count=context['bls'].count() if count > 0: context['bls_count']=count context['events'", "label": 0}, {"snippet_id": 32674, "code": " outp=RedirectionHelper(1, write) with outp: self.first.execute(builtins) outp.close() with inp: self.second.execute(builtins) def wait(self): self.first.wait() self.second.wait() class CommandNode(Node", "label": 0}, {"snippet_id": 78474, "code": ".organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id) data_dict[", "label": 0}, {"snippet_id": 6878, "code": " render_template(\"auth/change_password.html\", form=form) @auth.route('/reset', methods=['GET', 'POST']) def password_reset_request(): if not current_user.is_anonymous: return redirect(url_for('main.index')) form", "label": 0}, {"snippet_id": 27923, "code": " using \"with ray.profile(...) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event", "label": 0}, {"snippet_id": 73996, "code": ".djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials should define: -forms -models -helper", "label": 0}, {"snippet_id": 74629, "code": ": pass return person_instance def get_shib_info_from_request(request): info={} info['last_name']=request.META.get('Shibboleth-sn', '') info['first_name']=request.META.get('Shibboleth-givenName', '') info", "label": 0}, {"snippet_id": 84027, "code": "'is_observing': is_observing, 'can_observe': True}) if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response", "label": 0}, {"snippet_id": 58575, "code": " **options): for instructor in Instructor.objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print(\"Onboarding course is not provided", "label": 1}, {"snippet_id": 23530, "code": ": The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources: The default custom resources", "label": 0}, {"snippet_id": 14612, "code": " third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id", "label": 0}, {"snippet_id": 63094, "code": " test_chpass_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-chpass', session) then=session['reauthn-for-chpass'] now=int(time.time()) self.assertTrue(now -then", "label": 0}, {"snippet_id": 73885, "code": ".get(\"upload-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render(request, 'positions", "label": 0}, {"snippet_id": 17507, "code": ".commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return flask.render_template('login.html', form", "label": 0}, {"snippet_id": 5974, "code": ") self.cookie_serializer=TimedJSONWebSignatureSerializer( app.config['SECRET_KEY']) try: self.credentials_store=app.config['OIDC_CREDENTIALS_STORE'] except KeyError: pass def get_cookie_id_token(self):", "label": 0}, {"snippet_id": 10008, "code": "=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number'", "label": 0}, {"snippet_id": 3987, "code": " response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation", "label": 0}, {"snippet_id": 61115, "code": " info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\"", "label": 0}, {"snippet_id": 8220, "code": "'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running", "label": 0}, {"snippet_id": 20923, "code": "(self): \"\"\"Start the log monitor.\"\"\" stdout_file, stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self.redis_address, self._node_ip_address, stdout_file=stdout_file,", "label": 0}, {"snippet_id": 12641, "code": " current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form", "label": 0}, {"snippet_id": 6474, "code": " destination=state['destination'] code=request.args['code'] except(KeyError, ValueError): logger.debug(\"Can't retrieve CSRF token, state, or code\", exc_info=True) return self.oidc_error() if csrf_token", "label": 0}, {"snippet_id": 17239, "code": ": p=GreatPower.objects.get(name=power) except GreatPower.DoesNotExist: continue i=GamePlayer.objects.get(game=g, power=p) i.score=field try: i.full_clean() except ValidationError as e: f.add_error(None", "label": 0}, {"snippet_id": 82018, "code": ", **kwargs): form=JustURLForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] short_url=form.cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL.objects", "label": 0}, {"snippet_id": 78278, "code": " user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required", "label": 0}, {"snippet_id": 4339, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location", "label": 1}, {"snippet_id": 46617, "code": "=pk) group_key=DataGroup.objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'\"'", "label": 0}, {"snippet_id": 24163, "code": " in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def", "label": 1}, {"snippet_id": 25011, "code": " num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message", "label": 0}, {"snippet_id": 74430, "code": ".debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form): return super().form_invalid(form) def view_action(self): pass", "label": 0}, {"snippet_id": 76230, "code": ".get_full_path( filename=to, language=language, version_slug=version_slug, ) def redirect_sphinx_htmldir(self, path, language=None, version_slug=None): if path.endswith('.html'): log.debug('Redirecting", "label": 0}, {"snippet_id": 65073, "code": " vlevel >=1: print(repr(e), file=sys.stderr) obj=None if not obj: raise ValueError('Cannot compile test case %d' % i) test_case_objs.append(obj) code=args.code if not code: return deductions=[] tree=None", "label": 0}, {"snippet_id": 55802, "code": "\t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t\t\tyield Line(self,count,l) \tdef write(self,o): \t\tf=open(self.path,\"wb\") \t\tr=f.write(o) \t\tf", "label": 0}, {"snippet_id": 45036, "code": " import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard.models import *", "label": 0}, {"snippet_id": 18179, "code": " print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]\"+url\r else:\r print \"[-]\"+url\r else:\r print \"[-]Domain is invalid\"\r \r if is_closed", "label": 1}, {"snippet_id": 38541, "code": " The clean() method checks to make sure that the assigned document type is among the types allowed by the group type ``organization`` ``note`` \"\"\" filename=models.CharField(max_length=255) title=models", "label": 0}, {"snippet_id": 79336, "code": ", 'organization': None, 'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest", "label": 0}, {"snippet_id": 38025, "code": " ListPresenceFormSet) def five(): HHFormSet=make_formset(parent, child) ParentForm=ExtractedHHDocForm if extracted else ExtractedHHDocEditForm return(ParentForm, HHFormSet) dg_types={ 'CO': one, 'UN': one", "label": 0}, {"snippet_id": 44245, "code": ".browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit", "label": 0}, {"snippet_id": 22595, "code": " the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of", "label": 0}, {"snippet_id": 5949, "code": "', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True) app.route('/oidc_callback')(self.oidc_callback) app.before_request(self.before_request) app.after_request(self.after_request) self.flow", "label": 0}, {"snippet_id": 26484, "code": " as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message)", "label": 0}, {"snippet_id": 15240, "code": "=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models", "label": 0}, {"snippet_id": 8641, "code": " was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response(", "label": 0}, {"snippet_id": 58679, "code": " re from uuid import uuid4 from django.db import models from django.db.models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib", "label": 0}, {"snippet_id": 4486, "code": " are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for", "label": 0}, {"snippet_id": 70986, "code": " f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=ugettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static", "label": 0}, {"snippet_id": 60678, "code": "(status)] +templates info.update( {\"ok\": False, \"error\": message, \"status\": status, \"title\": title} ) if request is not None and request.path.split(\"?\")[0].endswith(\".json\"): return response.json(info,", "label": 0}, {"snippet_id": 35796, "code": " referer=='product_detail' else p2p.product.data_source.pk return redirect(referer, pk=pk) form.referer=resolve(parse.urlparse(request.META['HTTP_REFERER']).path).url_name\\ if 'HTTP_REFERER' in request.META", "label": 0}, {"snippet_id": 36184, "code": " a Product can have ''' qs=PUCToTag.objects.filter(content_object=self, assumed=True) return PUCTag.objects.filter(dashboard_puctotag_items__in=qs) class PUCToTag(TaggedItemBase, CommonInfo): content_object", "label": 0}, {"snippet_id": 46560, "code": ".append(ingredient) if context['clean_comp_err']: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) if not context['clean_comp_err']: for ingredient in good_records", "label": 0}, {"snippet_id": 22659, "code": "=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events", "label": 1}, {"snippet_id": 22134, "code": " root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config", "label": 0}, {"snippet_id": 77957, "code": " schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages=( session", "label": 0}, {"snippet_id": 59536, "code": "[] self._config=dict(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config", "label": 0}, {"snippet_id": 44946, "code": ":'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'monster trucks', } hp_formset=HnPFormSet(data, prefix='habits') self.assertTrue(hp_formset.is_valid", "label": 0}, {"snippet_id": 7310, "code": ", 'office_number', 'sb', 'services', 'deleted', 'exams_enabled_ind', 'appointments_enabled_ind', 'timezone') form_edit_rules=('office_name', 'office_number', 'sb', 'services', 'deleted', 'exams_enabled_ind", "label": 0}, {"snippet_id": 72256, "code": " 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons) for d_id in old_export.daemons: if d_id not", "label": 0}, {"snippet_id": 2308, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 1033, "code": " raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return", "label": 0}, {"snippet_id": 80782, "code": " @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} slow piezo.\") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock", "label": 0}, {"snippet_id": 45405, "code": "['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer", "label": 1}, {"snippet_id": 35311, "code": " pk, template_name=('product_curation/' 'link_product_form.html')): doc=DataDocument.objects.get(pk=pk) ds_id=doc.data_group.data_source_id initial={ 'upc':('stub_' +str(Product.objects.all().aggregate", "label": 0}, {"snippet_id": 69390, "code": ", 'tornado<6.0' ]) if user_requirements_txt_file: conda.ensure_pip_requirements(USER_ENV_PREFIX, user_requirements_txt_file) def ensure_admins(admins): \"\"\" Setup given list of users as admins. \"\"\" if not", "label": 0}, {"snippet_id": 26122, "code": ", stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address, self._raylet_socket_name,", "label": 1}, {"snippet_id": 13360, "code": " RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx", "label": 0}, {"snippet_id": 42407, "code": "'extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id in dg_ids: resp=self.client.get(f'/datagroup/raw_extracted_records/%s/' % dg_id) self.assertEqual(resp.status_code, 200)", "label": 0}, {"snippet_id": 52989, "code": ".get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase): def setUp(self): super(TestUserUpdateView, self).setUp() self.view=UserUpdateView() request=self.factory.get('/fake-url') request", "label": 0}, {"snippet_id": 47016, "code": " @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name=f'{dg.fs_id}.zip' zip_file=open(dg.get_zip_url(), 'rb') response=HttpResponse(zip_file, content_type='application/zip", "label": 0}, {"snippet_id": 54912, "code": ",prob_id)=prob_code_data \t\t(book_edition,chapter,problem_number)=prob_id \t\tproblem_groups[prob_id].append(problem(assignment_student,book_edition,chapter,problem_number,prob_code)) \t \tanother_count_by_groups", "label": 1}, {"snippet_id": 29546, "code": "('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session.pop('token') user.oauth_secret=session.pop('secret') db.session.commit() login_user", "label": 0}, {"snippet_id": 74950, "code": " context_data) @login_required def candidate_upload(request, candidate_id): from.forms import UploadForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist", "label": 0}, {"snippet_id": 51979, "code": ".handle_bad_attempts(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to SamePage\") return redirect(\"/dashboard\") @app.route", "label": 0}, {"snippet_id": 82087, "code": ", 'home.html',{'form': form}) class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request", "label": 0}, {"snippet_id": 45418, "code": "=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc", "label": 1}, {"snippet_id": 5690, "code": "}) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"", "label": 1}, {"snippet_id": 67714, "code": ": attr=Attribute.objects.all() context=super().get_context_data(**kwargs) context['categories']=attr.values_list('category', flat=True).order_by('category').distinct() context['types']=attr.values_list", "label": 0}, {"snippet_id": 44066, "code": "'cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self", "label": 0}, {"snippet_id": 27151, "code": " will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the", "label": 0}, {"snippet_id": 66756, "code": ".views.generic import TemplateView, DetailView from.forms import SearchForm from lib.geoip import GeoIP from lib.vt import VT from lib.threatminer import ThreatMiner import socket from django.db.models", "label": 0}, {"snippet_id": 30252, "code": " code.'), 401) response.headers['Content-Type']='application/json' return response access_token=credentials.access_token url=('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s' % access_token", "label": 0}, {"snippet_id": 13096, "code": " Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice", "label": 0}, {"snippet_id": 1121, "code": " name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul", "label": 0}, {"snippet_id": 15179, "code": "('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) new_value=FloatField('Delta',[validators.required()]) class", "label": 0}, {"snippet_id": 48241, "code": " model=Product fields=['tags'] def __init__(self, *args, **kwargs): super(ProductTagForm, self).__init__(*args, **kwargs) self.fields['tags'].widget.form_instance=self @login_required() def product_curation_index", "label": 1}, {"snippet_id": 47614, "code": "\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in", "label": 0}, {"snippet_id": 65418, "code": " \"history\", \"last-opened-db\") +\")\") tab_title=ntpath.basename(keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager", "label": 1}, {"snippet_id": 11064, "code": "=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold", "label": 0}, {"snippet_id": 74290, "code": "]): next_url=request.GET[\"next\"] return next_url def dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ", "label": 1}, {"snippet_id": 24142, "code": " Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the", "label": 1}, {"snippet_id": 7085, "code": "'Copyright 2018 Province of British Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License", "label": 0}, {"snippet_id": 63590, "code": ".add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) with self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': deflate_and_base64_encode(", "label": 0}, {"snippet_id": 14639, "code": "'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url", "label": 0}, {"snippet_id": 10192, "code": "'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options", "label": 0}, {"snippet_id": 51230, "code": " subprocess.check_call(*args, **kwargs) def python(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, *", "label": 0}, {"snippet_id": 24352, "code": " driver_id !=self.worker.task_driver_id.binary()): return try: function=pickle.loads(serialized_function) function({\"worker\": self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver", "label": 0}, {"snippet_id": 7510, "code": " from datetime import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import", "label": 0}, {"snippet_id": 78979, "code": " be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset", "label": 0}, {"snippet_id": 51295, "code": "=kwargs['platform'] or self._context.env[\"PLATFORM\"] dependency_collection=self._dependency_collection() delete_directory(os.path.join('dependencies', platform), logfile=sys.stdout) if len(dependencies) > 0", "label": 0}, {"snippet_id": 84247, "code": ".join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) def view_changeset(request, title, revision, revision_from=None, group_slug=None, group_slug_field=None,", "label": 0}, {"snippet_id": 25514, "code": "=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument", "label": 0}, {"snippet_id": 51607, "code": "'require_version':require_version } try: execfile(os.path.join('projectdata', buildname+'_behaviour.py'), behaviour_globals) builder.run(argv) except AbortRunException as e: print e.message sys.exit(e.exitcode)", "label": 0}, {"snippet_id": 69066, "code": ".check_service_enabled('configurable-http-proxy.service'): try: systemd.disable_service('configurable-http-proxy.service') except subprocess.CalledProcessError: logger.info(\"Cannot disable configurable-http-proxy..", "label": 0}, {"snippet_id": 33842, "code": " selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user in", "label": 0}, {"snippet_id": 37186, "code": ") self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields", "label": 0}, {"snippet_id": 8110, "code": " want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 4141, "code": ".user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password", "label": 0}, {"snippet_id": 63160, "code": "'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce,", "label": 0}, {"snippet_id": 39783, "code": " self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction): ''' Returns the next or previous item of a query-set for 'item'. 'models", "label": 0}, {"snippet_id": 11357, "code": " \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given", "label": 0}, {"snippet_id": 54291, "code": " politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url", "label": 0}, {"snippet_id": 24048, "code": "(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe", "label": 0}, {"snippet_id": 83768, "code": " return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles, False otherwise.\"\"\" if(group is None) or(is_member is None) or is_member", "label": 0}, {"snippet_id": 43730, "code": "\"id_qa_notes\"]') self.assertIn('is-invalid', qa_notes_field.get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys", "label": 1}, {"snippet_id": 71342, "code": "']=self.session environ['ea.user']=self.user class AuthMiddleware(object): def __init__(self, app, config=None): self.app=app self._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/]", "label": 0}, {"snippet_id": 84847, "code": " WikiWords to markdown wikilinks syntax, this view should be changed to use '[[title]]' for searching. \"\"\" this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles", "label": 0}, {"snippet_id": 58468, "code": "\"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION:{ \"done\": False, \"settings\":{ \"html\": \"<p>view_introduction</p>\", \"description\": \"view_introduction desc\"", "label": 0}, {"snippet_id": 82034, "code": "=form.cleaned_data['category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message='Token is already in use' return render(request, 'custom-short-url.html',{'form': JustURLForm, ", "label": 0}, {"snippet_id": 73136, "code": ".overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1][ magic.from_buffer(self.cleaned_data['pdf'].read(), mime=True) ][0] if not(file_type=='", "label": 0}, {"snippet_id": 11983, "code": "(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login", "label": 0}, {"snippet_id": 39526, "code": " detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' def get_datadocument_url(self): return self.extracted_cpcat.data_document", "label": 0}, {"snippet_id": 23142, "code": " function should be used. However, in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes", "label": 0}, {"snippet_id": 82849, "code": ") if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None", "label": 1}, {"snippet_id": 20401, "code": ".gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils", "label": 0}, {"snippet_id": 61267, "code": " str \"\"\" super(RemoteCrashEvent, self).__init__(comp_name) self.hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing", "label": 0}, {"snippet_id": 5935, "code": " app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True) app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com', 'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60", "label": 0}, {"snippet_id": 42041, "code": "'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context['bulk'], 0, 'Products linked to all DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document", "label": 0}, {"snippet_id": 45417, "code": ") cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat", "label": 1}, {"snippet_id": 62626, "code": " config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return authn_init_app('test.localhost', config) def add_outstanding_query(self, came_from): \"", "label": 0}, {"snippet_id": 68031, "code": "'-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context", "label": 0}, {"snippet_id": 10967, "code": "(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"", "label": 0}, {"snippet_id": 27625, "code": " the timeline, so if you want to set a particular color, you can simply set the \"cname\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed", "label": 0}, {"snippet_id": 42479, "code": ".all()),0) pk=self.objects.extext.extraction_script.pk response=self.client.get(f'/qa/extractionscript/{pk}/') self.assertEqual(response.status_code,200) qa_group=QAGroup.objects.get( extraction_script", "label": 0}, {"snippet_id": 49277, "code": "=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) ExtractedTextForm, _=create_detail_formset(doc) extracted_text=ExtractedText.objects.get_subclass(pk=pk) ext_text_form", "label": 0}, {"snippet_id": 74014, "code": " view_partials should define: -forms -models -helper classes -access checks -redirect handlers and should not define: -templates -url names \"\"\" import logging import re import ratelimit.mixins from nacl", "label": 0}, {"snippet_id": 17157, "code": " return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset}) @permission_required('tournament.change_gameplayer') def game_scores(request, tournament_id, round_num", "label": 0}, {"snippet_id": 5085, "code": "\"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 66152, "code": " self.parent_widget.set_headerbar(headerbar) back_button=self.builder.get_object(\"back_button\") back_button.connect(\"clicked\", self.on_headerbar_back_button_clicked) def assemble_stack(self): self.overlay", "label": 0}, {"snippet_id": 17856, "code": ", form=form) @bp.route('/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request", "label": 0}, {"snippet_id": 27024, "code": " ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr", "label": 0}, {"snippet_id": 72366, "code": " daemon_id, 'cluster_id': cluster_id} for daemon_id in GaneshaConf.instance(cluster_id).list_daemons()]) return result @UiApiController('/nfs-ganesha') class NFSGaneshaUi(BaseController): @Endpoint('GET', ", "label": 0}, {"snippet_id": 43287, "code": " settings.TEST_BROWSER=='firefox': self.browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing", "label": 1}, {"snippet_id": 71981, "code": " import ApiController, RESTController, UiApiController, BaseController, \\ Endpoint, Task from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import", "label": 1}, {"snippet_id": 80894, "code": "':['website_event'], 'summary':\"\"\"\"\"\", 'description': \"\"\" Extension for the default Events module; used for BCNL,. \"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views", "label": 0}, {"snippet_id": 34230, "code": " self.browser.current_url) def test_qa_approval(self): ''' Test the QA process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document", "label": 1}, {"snippet_id": 49758, "code": "=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config", "label": 0}, {"snippet_id": 62279, "code": " from flask import session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action @acs_action('login-action') def login_action", "label": 0}, {"snippet_id": 35151, "code": " def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt", "label": 0}, {"snippet_id": 4555, "code": ".locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post", "label": 0}, {"snippet_id": 17715, "code": " flask.g.user: return flask.redirect(redirect_url()) if payload is None: form=forms.PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User.by_email", "label": 0}, {"snippet_id": 79194, "code": "'organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job(_send_mail,[users, 'open_datarequest_organisation', datarequest_dict], title=u'Data Request Opened Admins Email')", "label": 1}, {"snippet_id": 8986, "code": " django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models", "label": 0}, {"snippet_id": 72694, "code": "(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if", "label": 1}, {"snippet_id": 50221, "code": "('/signup') @app.route(\"/login\") def login(): if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"", "label": 0}, {"snippet_id": 18643, "code": "'username':self.username}) \t\tif(document_username==None): \t\t\terror=\"User doesn't exist. Please sign up first!\" \t\telif(ph.verify(document_username['password'],self.password)==False): \t\t\terror=\"Password is", "label": 1}, {"snippet_id": 16646, "code": "=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10) for tp in tourney_players: seeder.add_player(tp) for n in range(1, round_number): rnd=tournament.round_numbered(n) for g in rnd.game_set.all(", "label": 0}, {"snippet_id": 76674, "code": " or world_extent_in_tiles <=abs_tile_row: logger.debug(\"[%d] %d, %d is black\", world_extent_in_tiles, abs_tile_col, abs_tile_row) tiles_array.AddImage(rel_tile_col, rel_tile_row, None) else: world_wrapped_tile_col", "label": 0}, {"snippet_id": 39893, "code": " on_delete=models.CASCADE, null=True, blank=True) rawchem_ptr=models.OneToOneField(related_name='ingredient', parent_link=True, on_delete=models.CASCADE, to='dashboard.RawChem') def __str__(self): return str", "label": 0}, {"snippet_id": 23843, "code": "\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system", "label": 0}, {"snippet_id": 78750, "code": " \"\"\" Action to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition", "label": 0}, {"snippet_id": 49710, "code": " userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: editor_content=f.read() except FileNotFoundError", "label": 0}, {"snippet_id": 81055, "code": "') else: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env['event.registration'].sudo().create( { 'partner_id", "label": 0}, {"snippet_id": 16790, "code": " g.the_set=f.cleaned_data['the_set'] try: g.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset", "label": 0}, {"snippet_id": 47533, "code": ".models import model_to_dict from dashboard.models import * from dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context", "label": 1}, {"snippet_id": 78965, "code": " rights will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator", "label": 0}, {"snippet_id": 11692, "code": " }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES", "label": 0}, {"snippet_id": 37257, "code": "(label=\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( ", "label": 0}, {"snippet_id": 13622, "code": "'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), }", "label": 0}, {"snippet_id": 84642, "code": " @login_required def observe_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, template_name='recentchanges.html', template_dir='wiki', extra_context=None", "label": 0}, {"snippet_id": 23058, "code": ".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str", "label": 0}, {"snippet_id": 44721, "code": "=self.objects.script) self.assertRaises(ValidationError, text.clean()) text=ExtractedText(doc_date='January 1984', data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean", "label": 0}, {"snippet_id": 31911, "code": "\n import os import sys import contextlib import enum from enum import Enum def main(): sh=Shell() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit", "label": 0}, {"snippet_id": 28332, "code": " generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and", "label": 0}, {"snippet_id": 21081, "code": "(self._raylet_socket_name) stdout_file, stderr_file=new_raylet_log_file( redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address", "label": 1}, {"snippet_id": 11000, "code": ". \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field", "label": 0}, {"snippet_id": 53514, "code": " format_stack_frame(stack_frame, project: 'projects.Project'): \"\"\" :param stack_frame: :param project: :return: \"\"\" filename=stack_frame.filename if filename.startswith(project.source_directory): filename=filename", "label": 0}, {"snippet_id": 47184, "code": " def dg_raw_extracted_records(request, pk): columnlist=['extracted_text_id','id','raw_cas','raw_chem_name','raw_min_comp','raw_central_comp','raw_max_comp','unit_type__title'] dg=DataGroup.objects.get(pk", "label": 0}, {"snippet_id": 15525, "code": "-%d') str=str[:10] return datetime.strptime(str, '%Y-%m-%d') if get_command('start_day'): form.start_day.data=str_to_datetime(get_command('start_day')[0]['start_day']) if get_command('number_of_days'):", "label": 0}, {"snippet_id": 28339, "code": " seed numpy ourselves, but we can't interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we", "label": 0}, {"snippet_id": 22501, "code": " so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with", "label": 0}, {"snippet_id": 52682, "code": " def logout_user_when_site_crashes(): \"\"\" \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers[\"Cache-Control\"", "label": 0}, {"snippet_id": 84825, "code": " dmp.diff_cleanupSemantic(diffs) return HttpResponse(dmp.diff_prettyHtml(diffs), content_type='text/html') def backlinks(request, title): \"\"\"Simple text search for links in other wiki articles pointing to", "label": 0}, {"snippet_id": 56731, "code": " import ListView from django.contrib.auth.decorators import login_required from pure_pagination.mixins import PaginationMixin from django.http import HttpResponse, QueryDict from django.conf import settings", "label": 0}, {"snippet_id": 33353, "code": " import authenticate from django.contrib.auth.models import User from dashboard.models import PUC, Product, ProductToPUC, ProductDocument, DSSToxLookup from dashboard.views.get_data import * from django", "label": 0}, {"snippet_id": 60708, "code": " os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob", "label": 0}, {"snippet_id": 79204, "code": ".mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons", "label": 0}, {"snippet_id": 33502, "code": ", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 2, ethylparaben_stats['dds_n'], 'There should be 2 datadocuments associated", "label": 0}, {"snippet_id": 64843, "code": " supposed to implement\") parser.add_argument('-p', '--points', type=int, default=0, help=\"The number of points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\"", "label": 0}, {"snippet_id": 71106, "code": ") header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return", "label": 0}, {"snippet_id": 12398, "code": ", and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 3204, "code": "): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def", "label": 0}, {"snippet_id": 39517, "code": " name\", max_length=500, null=True, blank=True) qa_flag=models.BooleanField(default=False) @classmethod def detail_fields(cls): return['raw_cas','raw_chem_name'] def __str__(self): return str(self.raw_chem_name", "label": 0}, {"snippet_id": 84043, "code": ".join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def edit_article(request, title, group_slug=None,", "label": 0}, {"snippet_id": 59086, "code": " invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user", "label": 0}, {"snippet_id": 8489, "code": " _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns", "label": 0}, {"snippet_id": 71125, "code": " load_config import re from webob import Response from webob import Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request.session_hash==session.hash()", "label": 0}, {"snippet_id": 62439, "code": "\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info", "label": 0}, {"snippet_id": 44089, "code": ".current_url, \"User should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]'", "label": 0}, {"snippet_id": 3677, "code": " %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 64650, "code": "'__package__', 'PendingDeprecationWarning', 'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError', 'repr', 'ResourceWarning', 'reversed', 'round', ", "label": 0}, {"snippet_id": 74464, "code": "\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial(WizardPDFPartial): content_disposition=\"inline\" EVAL_ACTION_TYPE=\"VIEW_PDF\" class DownloadPDFPartial(WizardPDFPartial): content_disposition=", "label": 0}, {"snippet_id": 61079, "code": " self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0", "label": 1}, {"snippet_id": 56542, "code": "://dynamic.link/link=http://pachatary.com/&other=param') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app", "label": 1}, {"snippet_id": 37589, "code": ".ModelChoiceField(queryset=PUCTag.objects.none(), label='Attribute') id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput()) class Meta: model=ProductToPUC fields=['tag', 'id_pks'] def", "label": 0}, {"snippet_id": 59441, "code": "\".strip()), ConfigOption(\"truncate_cells_html\", 2048, \"\"\" Truncate cells longer than this in HTML table view -set 0 to disable \"\"\".strip()), ConfigOption(\"force_https_urls\", False, \"\"\" Force URLs in API", "label": 0}, {"snippet_id": 10759, "code": ": not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context", "label": 0}, {"snippet_id": 23524, "code": "\"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function", "label": 0}, {"snippet_id": 48147, "code": " Q from django.shortcuts import render, get_object_or_404 from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms", "label": 1}, {"snippet_id": 4342, "code": ".client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http:/", "label": 1}, {"snippet_id": 64089, "code": " location}).data user=current_app.central_userdb.get_user_by_eppn(eppn) current_app.logger.debug('Logout process started for user{!r}'.format(user)) state=StateCache(session) identity=IdentityCache(session)", "label": 0}, {"snippet_id": 14489, "code": " account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year", "label": 0}, {"snippet_id": 39552, "code": " import InheritanceManager from django.db import models from django.core.exceptions import ValidationError from django import forms from django.urls import reverse from.common_info import CommonInfo \t \t", "label": 1}, {"snippet_id": 8085, "code": "'enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field", "label": 0}, {"snippet_id": 41392, "code": ") self.assertEqual(dd_child_model, childform_model) def test_curated_chemical(self): ''''Confirm that if an ExtractedChemical record has been matched to DSSToxLookup, the DSSToxLookup fields are displayed", "label": 0}, {"snippet_id": 14661, "code": " import signal import gateway_code.board_config as board_config from.. import serial_redirection from. import log_to_stderr def _get_node(board_cfg): if board_cfg.linux_on_class is not None: return board_cfg", "label": 1}, {"snippet_id": 35233, "code": "=('product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list", "label": 0}, {"snippet_id": 74916, "code": "'register') return HttpResponseRedirect(url) except Candidate.MultipleObjectsReturned: candidate=Candidate.objects.filter(person__netid=request.user.username)[0] context_data={'candidate': candidate} other_candidacies", "label": 0}, {"snippet_id": 15616, "code": "'') sub_form.input_source_final.choices=get_inputs_choices() sub_form.input_source_final.data=command.get('input_source_final', '') for index, command in enumerate(get_command('change_input_series_all_models", "label": 0}, {"snippet_id": 44247, "code": ".find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), dg_detail_url, \"User should go back to detail view when clicking cancel\") edit_url=f'{self.live_server_url}/datagroup/edit/{dg.pk}/' self", "label": 0}, {"snippet_id": 80771, "code": " lock all laser components.\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if", "label": 0}, {"snippet_id": 3771, "code": " drumbeat.utils import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email=", "label": 0}, {"snippet_id": 60553, "code": "?><as_db:(\\.db)$>\" ) app.add_route( DatabaseView.as_view(self), r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$", "label": 0}, {"snippet_id": 78966, "code": " will be checked before closing the data request. If the user is not allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param", "label": 0}, {"snippet_id": 52663, "code": "(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]) def logout_user(): \"\"\" \"\"\" session.clear() return redirect(\"/\") @app.route(\"/logout", "label": 0}, {"snippet_id": 69640, "code": "'.format( len(apt_packages), ' '.join(apt_packages) )) apt.install_packages(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()))) if conda_packages: logger.info", "label": 0}, {"snippet_id": 65637, "code": "=Gtk.ResponseType.OK: self.does_file_exist() elif response==Gtk.ResponseType.CANCEL: self.filechooser_creation_dialog.close() def does_file_exist(self): if os.path.exists(self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 24527, "code": " log_filename in self.log_files: if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell()) next_line=self.log_file_handles[log_filename", "label": 1}, {"snippet_id": 67530, "code": ") return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date", "label": 0}, {"snippet_id": 68971, "code": "+ntaGVtFOLS6fwdBqDXjmSQu66mDKwU5Ek fNlbyrpzZMyFCDWEYo4AIR/18aGZBYUAEQEAAYkCHwQYAQIACQUCU5sktgIbDAAK CRAWVaCraFdigIPQEACcYh8rR19wMZZ/hgYv5so6Y1HcJNARuzmffQKozS/rxqec 0xM3wceL1AIMuGhlXFeGd0wRv/RVzeZjnTGwhN1DnCDy1I66hUTgehONsfVanuP1", "label": 0}, {"snippet_id": 73883, "code": " elif request.POST.get(\"upload-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render", "label": 0}, {"snippet_id": 38866, "code": "(self): return self.type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type=='FU' @property def is_chemical_presence(self):", "label": 0}, {"snippet_id": 13284, "code": ".views.decorators.http import require_http_methods from django_countries import countries import third_party_auth from commerce.models import CommerceConfiguration from edxmako.shortcuts import render_to_response", "label": 0}, {"snippet_id": 35271, "code": "'product_curation/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request", "label": 0}, {"snippet_id": 77976, "code": " packages=( session.query( Package ) ) for pkg in packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version,", "label": 0}, {"snippet_id": 70015, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 2331, "code": " HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response", "label": 0}, {"snippet_id": 81647, "code": ".date_begin, '%Y-%m-%d %H:%M:%S') if event_type=='open' and len(self.fit_subscriptions) > 0: _logger.info('Can subscribe for open event id: %s, name: %s', event.event_type_id.name, event.name) return True", "label": 1}, {"snippet_id": 15934, "code": ".user=auth_add_user(self.email.data, self.password.data) return True class LoginForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password',[validators.required()]", "label": 0}, {"snippet_id": 54535, "code": "\" **Database errands** \"\"\" \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once, will create multiple entries \"\"\" @app.route('/updatedb/politicians') def update_all(): return", "label": 0}, {"snippet_id": 54380, "code": ".route('/json/politicians/all') def all_politicians(): pols=Politician.all() politicians=[] for pol in pols: tokens=pol.name.title().split(' ') politician={ 'value': pol.name.title(), 'tokens': tokens,", "label": 0}, {"snippet_id": 39768, "code": " is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name", "label": 0}, {"snippet_id": 73314, "code": "'email', message) return self.cleaned_data def get_user(self): email=self.cleaned_data.get('email').lower() password=self.cleaned_data.get('password') return authenticate(username=email, password=password)", "label": 0}, {"snippet_id": 81648, "code": "'%Y-%m-%d %H:%M:%S') if event_type=='open' and len(self.fit_subscriptions) > 0: _logger.info('Can subscribe for open event id: %s, name: %s', event.event_type_id.name, event.name) return True if event_start", "label": 1}, {"snippet_id": 57174, "code": " Transaction?') extra_context['message']=transaction.description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transactions_open') transaction.delete", "label": 0}, {"snippet_id": 41949, "code": ".get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') self.objects.dg.group_type=GroupType.objects.create", "label": 0}, {"snippet_id": 17111, "code": ".DoesNotExist: continue try: i=GamePlayer.objects.get(game=g, power=p) except GamePlayer.DoesNotExist: i=GamePlayer(player=field.player, game=g, power=p) else: i.player=field.player try: i.full_clean() except", "label": 0}, {"snippet_id": 24409, "code": " node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server", "label": 1}, {"snippet_id": 63915, "code": ".get('idp', idp) loa=request.args.get('required_loa', None) authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn=force_authn) schedule_action(action", "label": 0}, {"snippet_id": 61116, "code": "(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass to model a component crash. Provides the name of the crashed component.\"\"\" def", "label": 0}, {"snippet_id": 82829, "code": " to the host status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc", "label": 1}, {"snippet_id": 35717, "code": " puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required", "label": 0}, {"snippet_id": 78659, "code": ": The ID of the organization you want to asign the data request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time", "label": 0}, {"snippet_id": 51824, "code": " import query as q import helper as h app=Flask(__name__) app.secret_key=\"It's great to stay up late\" app.jinja_env.undefined=jinja2.StrictUndefined app.jinja_env.auto_reload=True @app.route(\"/\") def index(", "label": 0}, {"snippet_id": 78661, "code": " you want to asign the data request(optional). :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time", "label": 0}, {"snippet_id": 65955, "code": " on_back_button_clicked(self, button): self.databases_to_save.clear() self.quit_dialog.destroy() def on_quit_button_clicked(self, button): for db in self.databases_to_save: db.database_manager.save_database()", "label": 0}, {"snippet_id": 83709, "code": "\"\"Send a message to the user if there is another user editing this article.\"\"\" if not self.is_mine(request): user=request.user user.message_set.create( message=self.message_template % self.created_at) def", "label": 0}, {"snippet_id": 22341, "code": "\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, ", "label": 0}, {"snippet_id": 21719, "code": " process_info.process.poll() is None: result.append((process_type, process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have", "label": 0}, {"snippet_id": 21504, "code": ".wait() del self.all_processes[process_type] def kill_redis(self, check_alive=True): \"\"\"Kill the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"", "label": 0}, {"snippet_id": 71585, "code": "'/auth/google') req.cookies['_eauth']=s.serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session", "label": 0}, {"snippet_id": 58136, "code": ".0), ({onboarding.STEP_1: 0, onboarding.STEP_2: 1, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 0}, 38.0), ({onboarding", "label": 1}, {"snippet_id": 61169, "code": " component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. ", "label": 0}, {"snippet_id": 34208, "code": " doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select", "label": 0}, {"snippet_id": 28280, "code": " object is a function or method. Args: obj: The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj)", "label": 0}, {"snippet_id": 68248, "code": ".get_context_data(**kwargs) search_form=SearchForm(self.request.GET) context['search_form']=search_form count=self.object_list.count() context['count']=count context['30_day_labels']=self.thirty_day_labels() context[", "label": 0}, {"snippet_id": 30851, "code": "<int:grudget_id>/') @app.route('/grudget/<int:grudget_id>/grudge/') def showGrudge(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() creator=getUserInfo(grudget.user_id) grudges", "label": 0}, {"snippet_id": 48522, "code": " if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc", "label": 0}, {"snippet_id": 7034, "code": ".generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email '", "label": 0}, {"snippet_id": 39773, "code": "(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction)", "label": 0}, {"snippet_id": 42793, "code": "=QAGroup.objects.get(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response=self.client.get(f'/qa/extractionscript/'", "label": 0}, {"snippet_id": 67280, "code": "'search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP().lookup(ip) try: context['domain']=socket.gethostbyaddr(ip)[0] except Exception as e: pass vt=VT() context['vt_ip']=vt.getIPReport(ip)", "label": 0}, {"snippet_id": 16959, "code": "=gp.power data.append(current) PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(the_round=r, initial=data) context={'tournament': t,", "label": 0}, {"snippet_id": 73482, "code": ".POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name=request.POST['email'].split( '.')", "label": 0}, {"snippet_id": 61172, "code": " component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component ", "label": 0}, {"snippet_id": 61484, "code": ")) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job) else: logger.debug(\"Check failed, notifying subscribers\") for subscriber in self.subscribed_queues:", "label": 0}, {"snippet_id": 23697, "code": "() _default_handler=new_handler logger.addHandler(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns", "label": 1}, {"snippet_id": 40733, "code": ".get('/').content.decode('utf8') self.assertIn('DSS Tox Chemicals', response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('//*[@name", "label": 0}, {"snippet_id": 46235, "code": "' else rank ext, created=ext_parent.objects.get_or_create(data_document=d, extraction_script=script) if not created and ext.one_to_one_check(row): col='cat_code' if hasattr(ext,'cat_code') else 'prod_name", "label": 0}, {"snippet_id": 40035, "code": "='curated_chemical', on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else ''", "label": 1}, {"snippet_id": 13883, "code": " enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"", "label": 0}, {"snippet_id": 55241, "code": " split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive(self): \t\treturn os.path.splitdrive(self.path) \tdef splitext(self): \t\treturn os.path.splitext(self.path)", "label": 0}, {"snippet_id": 69368, "code": " ]) conda.ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[ 'jupyterhub==0.9.4', 'notebook==5.7.0', 'jupyterlab==0.35.3', 'nteract-on-jupyter==1.9.12", "label": 1}, {"snippet_id": 59473, "code": "(request): return response.text(\"\") class Datasette: def __init__( self, files, cache_headers=True, cors=False, inspect_data=None, metadata=None, sqlite_extensions=None, template_dir=None, plugins_dir=None", "label": 0}, {"snippet_id": 54236, "code": "** 404, 500 and other errors \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404) def page_not_found(error): return render_template('404.html'), 404 \"\"\" 500 -Page \"\"\" @app.errorhandler(500) def page_not_found(error", "label": 0}, {"snippet_id": 58622, "code": "): update_onboarding_step(onboarding.STEP_3, instructor.user_id) if Unit.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_4, instructor.user_id) if Lesson.objects", "label": 1}, {"snippet_id": 21924, "code": " use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port", "label": 0}, {"snippet_id": 15137, "code": " input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeInputNewValue", "label": 0}, {"snippet_id": 70916, "code": ".S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> ", "label": 0}, {"snippet_id": 27511, "code": " \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def __exit__(self, type, value, tb): pass NULL_LOG_SPAN=_NullLogSpan() def profile(event_type, extra_data=None, worker=None", "label": 1}, {"snippet_id": 50490, "code": "+str(unlocktime -self.locktime) class WindowsUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self, os.environ[\"APPDATA\"]+\"\\\\openhome-build\\\\\"+name+\".lock\") def tryacquire(self, filename", "label": 0}, {"snippet_id": 80743, "code": " checked: for action in self.lock_actions: if not action.isChecked(): action.trigger() if all([action.isChecked() for action in self.lock_actions]): [action.setEnabled(False) for action in self.lock_actions", "label": 0}, {"snippet_id": 83626, "code": " is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname, group=None, args=None, kw=None): if group is None: return reverse(urlname", "label": 0}, {"snippet_id": 24184, "code": ".redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client", "label": 1}, {"snippet_id": 16369, "code": "'roll_call', args=(tournament_id,)), 'formset': formset}) if created: i.save() else: RoundPlayer.objects.filter(player=p, the_round=r).delete() r=t.current_round() if not round_num or(r.number()==round_num", "label": 0}, {"snippet_id": 38618, "code": ") note=models.TextField(blank=True, null=True) class Meta: ordering=['-id'] def __str__(self): return str(self.title) @property def detail_page_editable(self): return self.data_group.group_type.code in", "label": 0}, {"snippet_id": 11613, "code": "/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns", "label": 0}, {"snippet_id": 28223, "code": " if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils", "label": 0}, {"snippet_id": 24066, "code": " wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object", "label": 0}, {"snippet_id": 68037, "code": "=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name", "label": 0}, {"snippet_id": 48855, "code": "(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects", "label": 0}, {"snippet_id": 17573, "code": " form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User(username=form.username.data.strip(), email=form.email.data.strip(), password=form.password", "label": 0}, {"snippet_id": 31770, "code": "=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url", "label": 1}, {"snippet_id": 72412, "code": "(self, root_dir=None, depth=1): if root_dir is None: root_dir=\"/\" depth=int(depth) if depth > 5: logger.warning(\"[NFS] Limiting depth to maximum value of 5: \" \"input depth=%s\", depth) depth=5 root_dir='{", "label": 0}, {"snippet_id": 21601, "code": " check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True):", "label": 0}, {"snippet_id": 24702, "code": " Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument", "label": 0}, {"snippet_id": 44419, "code": " '06_datadocument', '07_rawchem_etc', '08_script', '09_productdocument', '10_habits_and_practices', '11_habits_and_practices_to_puc', '12_product_to_puc', '13_puc_tag' ] class dotdict(dict): \"\"\"dot.notation", "label": 1}, {"snippet_id": 54707, "code": "(num_probs)+\" for student \"+assignment.student \t\tself.problems=[] \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tprob_id=(assignment.book_edition,assignment.chapter,problem", "label": 1}, {"snippet_id": 14068, "code": " enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context", "label": 0}, {"snippet_id": 54549, "code": ".getpreferredencoding())(sys.stdout) import acsetup import acedu.paths from fsitem import File from acminidom import getText, attributesOf, parse import os import pprint from hwml import Problem, Assignment", "label": 0}, {"snippet_id": 80049, "code": ") data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req", "label": 0}, {"snippet_id": 34255, "code": ". Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]", "label": 1}, {"snippet_id": 11327, "code": ", 'login': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to", "label": 0}, {"snippet_id": 8573, "code": " commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete':", "label": 0}, {"snippet_id": 23821, "code": ": pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") ", "label": 0}, {"snippet_id": 470, "code": ", parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory", "label": 0}, {"snippet_id": 32961, "code": ".models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', ", "label": 1}, {"snippet_id": 15977, "code": "=user return True @app.route('/register', methods=['GET', 'POST']) def view_register(): if current_user.is_authenticated: return redirect(url_for('view_home')) register_form=RegisterForm() if register_form", "label": 1}, {"snippet_id": 17439, "code": " ' 'reason \"{0}\" If you believe that this is a mistake, contact ' 'a moderator on IRC.'.format(ban_reason)) flask.flash(flask.Markup(ban_str), 'danger') return flask.redirect(flask.url_for('account.login", "label": 0}, {"snippet_id": 22408, "code": " self.resources is not None: assert \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should", "label": 0}, {"snippet_id": 65777, "code": "=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0) tab_label=Gtk.Label(title) tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image=Gtk.Image", "label": 0}, {"snippet_id": 808, "code": " the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try", "label": 0}, {"snippet_id": 18112, "code": " input_file=sys.argv[1]\r output_file=sys.argv[2]\r payload_file=sys.argv[3]\r \r print(\"\\n--Testing open redirects on domains in \"+input_file+\" with output file, \"+output_file+\" --\")\r \r is_closed=True\r \r payloads", "label": 0}, {"snippet_id": 51313, "code": " dependency_collection.fetch(dependencies, self._context.env): raise AbortRunException() def get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection", "label": 0}, {"snippet_id": 14291, "code": " commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete':", "label": 0}, {"snippet_id": 77392, "code": "\"type '%s'\", server_vars[\"dbType\"]) return layers_by_name for server_layer_def in server_vars[\"layers\"]: server_layer_def[\"projection\"]=server_vars[\"projection\"] server_layer_def[\"db_type\"]=server_vars", "label": 0}, {"snippet_id": 27057, "code": " should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis", "label": 0}, {"snippet_id": 63942, "code": " the IdP for ' +action) return redirect(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from", "label": 0}, {"snippet_id": 79207, "code": " as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants", "label": 0}, {"snippet_id": 15448, "code": ".input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'new_value': entry.new_value.data }) elif field.name=='change_timeseries_value_several_days_add_delta", "label": 0}, {"snippet_id": 21278, "code": " wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise", "label": 0}, {"snippet_id": 58456, "code": "\"title\": \"invite_somebody\" } }, onboarding.CREATE_THREAD:{ \"done\": False, \"settings\":{ \"html\": \"<p>create_thread</p>\", \"description\": \"create_thread desc\", \"title\": \"create_thread\" } }, onboarding.VIEW_INTRODUCTION", "label": 0}, {"snippet_id": 38045, "code": ".db import models from django.urls import reverse from django.utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC", "label": 1}, {"snippet_id": 17219, "code": ".POST or None, initial=data) if formset.is_valid(): for f in formset: g=Game.objects.get(name=f.cleaned_data['game_name'], the_round=r) for power, field in f.cleaned_data.items(): try: p=GreatPower.objects", "label": 0}, {"snippet_id": 27611, "code": " extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular color, you can simply", "label": 0}, {"snippet_id": 72544, "code": "(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm", "label": 0}, {"snippet_id": 73886, "code": "-applications\"): upload_applications(request) return position(request, Position.objects.get( id=request.POST.get(\"id\"))) request.session['position_sort']=sort_by return render(request, 'positions.html'", "label": 0}, {"snippet_id": 14527, "code": "'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':", "label": 0}, {"snippet_id": 48205, "code": ") or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag", "label": 1}, {"snippet_id": 26149, "code": ".num_gpus, self._ray_params.resources, self._ray_params.object_manager_port, self._ray_params.node_manager_port, self._ray_params.redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file", "label": 0}, {"snippet_id": 37175, "code": " Text CSV File\") def __init__(self, *args, **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type", "label": 0}, {"snippet_id": 18907, "code": " from django.views import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user after", "label": 0}, {"snippet_id": 64684, "code": ", 'UnboundLocalError', 'UnicodeEncodeError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'vars', 'Warning', 'ZeroDivisionError', 'zip', ] def output_json(points, deductions): score=points -sum(d['points", "label": 0}, {"snippet_id": 26338, "code": ", then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit", "label": 0}, {"snippet_id": 5413, "code": " self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 6889, "code": " password_reset_request(): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data", "label": 0}, {"snippet_id": 4197, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/", "label": 0}, {"snippet_id": 49494, "code": ", pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return redirect('data_document", "label": 0}, {"snippet_id": 13600, "code": ": json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True", "label": 0}, {"snippet_id": 66511, "code": ".show_unlock_failed_revealer() keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile", "label": 0}, {"snippet_id": 2523, "code": " item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 37683, "code": " 'population_age', 'population_other', 'occupation', 'facility'] class ExtractedHHDocEditForm(ExtractedHHDocForm): class Meta(ExtractedHHDocForm.Meta): fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name", "label": 0}, {"snippet_id": 62577, "code": "(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE,", "label": 0}, {"snippet_id": 6264, "code": " destination, } extra_params={ 'state': json.dumps(state), } flow=self.flow_for_request() auth_url='{url}&{extra_params}'.format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self", "label": 0}, {"snippet_id": 78512, "code": " data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type, datarequest): for user_id in user_ids: try: user_data=model.User.get(user_id) extra_vars={ 'datarequest", "label": 1}, {"snippet_id": 71600, "code": ".query().count() self.assertTrue(s_count2==1) def test_laod_session_cookie_and_no_session(self): s=models.Session.create() old_sid=s.session_id s_serialized=s.serialize() s.key.delete() s_count=models.Session", "label": 0}, {"snippet_id": 17928, "code": " changed!</strong>'), 'success') if new_password: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Password change failed!</strong> Incorrect password.'), 'danger'", "label": 0}, {"snippet_id": 56611, "code": "() \\ .given_an_apple_appid('ASDF.com.myapp.ios') \\ .when_call_aasa() \\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker", "label": 0}, {"snippet_id": 49579, "code": "=set(['pml']) def get_resource_as_string(name, charset='utf-8'): with app.open_resource(name) as f: return f.read().decode(charset) app.jinja_env.globals['get_resource_as_string']=get_resource_as_string", "label": 0}, {"snippet_id": 78435, "code": ".description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time, 'closed': datarequest.closed, 'user'", "label": 0}, {"snippet_id": 31026, "code": "'myFunction()'>\" if request.method=='POST': if request.form['name']: editgrudge.name=request.form['name'] if request.form['description']: editgrudge.description=request.form['description'] if request.form", "label": 0}, {"snippet_id": 48468, "code": " if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id", "label": 0}, {"snippet_id": 11503, "code": " HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']", "label": 0}, {"snippet_id": 53866, "code": " prevent loss of display data between runs :return: \"\"\" if not self.project: return '' return os.path.join( self.project.results_path, '.cache', 'steps', '{}.json'.format(self.id) ) @property def id(self)", "label": 0}, {"snippet_id": 3458, "code": " self.locale='en-US' self.client=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user", "label": 0}, {"snippet_id": 47391, "code": "'POST': if form.is_valid(): priority=form.cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource,", "label": 0}, {"snippet_id": 59925, "code": "'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect().get(database,{}).get(\"tables\") def inspect(self): \"", "label": 0}, {"snippet_id": 1228, "code": " it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item", "label": 0}, {"snippet_id": 35935, "code": " TaggedItemBase, TagBase from taggit.managers import TaggableManager from django.db import models from django.urls import reverse from django.utils.translation import ugettext_lazy as _ from.common_info", "label": 0}, {"snippet_id": 36206, "code": ".ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__", "label": 0}, {"snippet_id": 60254, "code": "[\"file\"]==\":memory:\": conn=sqlite3.connect(\":memory:\") else: conn=sqlite3.connect( \"file:{}?immutable=1\".format(info[\"file\"]), uri=True, check_same_thread=False, ) self.prepare_connection(conn) setattr", "label": 0}, {"snippet_id": 54730, "code": ".number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] ", "label": 1}, {"snippet_id": 66334, "code": " widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window.set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self, widget", "label": 0}, {"snippet_id": 47606, "code": " return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents", "label": 0}, {"snippet_id": 61339, "code": " retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue", "label": 0}, {"snippet_id": 8440, "code": " server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past", "label": 0}, {"snippet_id": 7124, "code": " distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.'''", "label": 0}, {"snippet_id": 71000, "code": "%(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n':", "label": 0}, {"snippet_id": 16978, "code": "': r, 'games': games, 'formset': formset} return render(request, 'rounds/seeded_games.html', context) @permission_required('tournament.add_game') def create_games(request, tournament_id, round_num): \"\"", "label": 0}, {"snippet_id": 64485, "code": ", redirecting user{} to{}'.format(user, location_on_success)) return response except current_app.central_userdb.exceptions.UserDoesNotExist: current_app.logger.error('No user with eduPersonPrincipalName", "label": 0}, {"snippet_id": 24948, "code": "\"Monitor: \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel", "label": 0}, {"snippet_id": 9591, "code": " enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"", "label": 0}, {"snippet_id": 23528, "code": " requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor method. default_resources", "label": 0}, {"snippet_id": 69983, "code": " show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath", "label": 1}, {"snippet_id": 81494, "code": " new_start_date, new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-", "label": 0}, {"snippet_id": 25633, "code": ", new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging", "label": 0}, {"snippet_id": 51628, "code": "+values[i] for i in range(len(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript(endpoint, params): keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i]", "label": 0}, {"snippet_id": 66140, "code": "=self.builder.get_object(\"headerbar\") headerbar.set_subtitle(self.database_filepath) self.window.set_titlebar(headerbar) self.parent_widget.set_headerbar(headerbar) back_button=self.builder.get_object(", "label": 0}, {"snippet_id": 69754, "code": "'List of usernames set to be admin' ) argparser.add_argument( '--user-requirements-txt-url', help='URL to a requirements.txt file that should be installed in the user enviornment' ) argparser.add_argument(", "label": 0}, {"snippet_id": 52270, "code": "(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new board and update page without refresh; ajax", "label": 0}, {"snippet_id": 22565, "code": " event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline", "label": 0}, {"snippet_id": 79953, "code": ".close_time=datetime.datetime.now() session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'close_datarequest_creator", "label": 1}, {"snippet_id": 55543, "code": "(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t", "label": 0}, {"snippet_id": 17434, "code": " ban_str=('<strong>Login failed!</strong> You are banned with the ' 'reason \"{0}\" If you believe that this is a mistake, contact ' 'a moderator on IRC.'.format(ban_reason)) flask.flash(flask.Markup(ban_str)", "label": 0}, {"snippet_id": 37520, "code": "=['puc'] class BulkProductPUCForm(forms.ModelForm): id_pks=forms.CharField(label='Product Titles', widget=forms.HiddenInput(), required=True) class Meta: model=ProductToPUC fields=['puc', 'id_pks'] class", "label": 0}, {"snippet_id": 79357, "code": ".organization_id: data_dict['organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id)", "label": 0}, {"snippet_id": 51037, "code": " self._enabled_options=self._enabled_options.union( s for s in steps if s[0] not in \"+-\") def modify_optional_steps(self, *steps): ''' Add or remove optional steps in the build. \"+foo\" include step foo", "label": 0}, {"snippet_id": 41678, "code": "'].all_matched(),( 'UploadForm should not be included in the page!')) self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self", "label": 0}, {"snippet_id": 30938, "code": "=Grudge(name=request.form['name'], description=request.form[ 'description'], processed=request.form['processed'], takeaway=request.form['takeaway'], grudget_id=grudget_id, user_id=login_session['user_id'])", "label": 1}, {"snippet_id": 61846, "code": " try: page=requests.get(url, allow_redirects=allow_redirects) soup=BeautifulSoup(page.content, \"lxml\") except requests.exceptions.MissingSchema: page=requests.get('https://{}'.format(url), allow_redirects", "label": 0}, {"snippet_id": 76786, "code": " tile if tile.getbands()==(\"R\", \"G\", \"B\"): return tile pixdata=tile.load() for row in xrange(tile.size[0]): for col in xrange(tile.size[1]): if pixdata[row, col][3] <=_ALPHA_THRESHOLD: pixdata[row, col]", "label": 0}, {"snippet_id": 20229, "code": ") def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until", "label": 0}, {"snippet_id": 26668, "code": " already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes", "label": 0}, {"snippet_id": 9332, "code": "'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise", "label": 0}, {"snippet_id": 27908, "code": ".extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray.profile(...) as prof:\", we can call", "label": 0}, {"snippet_id": 61530, "code": " -> ScanResult: \"\"\" Takes a DirectoryEntry and a dictionary of pshtt results for that domain, scans the page itself and then combines those results into an unsaved ScanResult object \"\"\" try: page, soup", "label": 1}, {"snippet_id": 9437, "code": " Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden(", "label": 0}, {"snippet_id": 60707, "code": ".util.config as config from os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue", "label": 0}, {"snippet_id": 60769, "code": " monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated :rtype: bool or CrashEvent \"\"\" class LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 23268, "code": " a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function", "label": 0}, {"snippet_id": 10353, "code": "=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states", "label": 0}, {"snippet_id": 7547, "code": " import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth", "label": 0}, {"snippet_id": 12195, "code": ", context) return render_to_response('student_account/login_and_register.html', context) @require_http_methods(['POST']) def password_change_request_handler(request): \"\"\"Handle password change requests", "label": 0}, {"snippet_id": 69464, "code": ".info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1) continue raise except URLError", "label": 0}, {"snippet_id": 2080, "code": " This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking", "label": 0}, {"snippet_id": 61952, "code": "/whotracks.me/trackers/krux_digital.html \"\"\" analytics_scripts=('ga.js', 'analytics.js', 'quant.js', 'chartbeat.js', 'chartbeat_mab.js', 'beacon.js', 'krxd.net') page_str=str(page.content) for script in", "label": 0}, {"snippet_id": 55273, "code": "\treturn os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path", "label": 0}, {"snippet_id": 7212, "code": " Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable", "label": 0}, {"snippet_id": 25182, "code": " keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver", "label": 0}, {"snippet_id": 62192, "code": "): return validate_security_header(page, \"Pragma\", \"no-cache\") def validate_expires(page): return validate_security_header(page, \"Expires\", \"-1\") def validate_cache_control_set(page): if 'Cache-Control", "label": 0}, {"snippet_id": 34491, "code": ") prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual", "label": 0}, {"snippet_id": 83486, "code": " if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision( self.old_content, self.old_title", "label": 0}, {"snippet_id": 46593, "code": ") else: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html", "label": 0}, {"snippet_id": 51553, "code": "=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder.get_dependency_args, 'add_option':builder.add_option, 'add_bool_option':builder.add_bool_option,", "label": 0}, {"snippet_id": 15639, "code": "('input_source_final', '') for index, command in enumerate(get_command('change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices", "label": 0}, {"snippet_id": 52717, "code": " rest_framework.generics import CreateAPIView from rest_framework.permissions import IsAuthenticated from rest_framework.response import Response from rest_framework import status from django.conf import", "label": 1}, {"snippet_id": 64745, "code": " k in globals() } instr_globals['__name__']=name instr_globals['__builtins__']={ k: __builtins__.__dict__[k] for k in builtins_whitelist if k in __builtins__.__dict__ } instr_locals={} try: exec(code_obj", "label": 1}, {"snippet_id": 15054, "code": "' time_series.append(ts) time_series.sort(key=lambda ts_item: ts_item['result_type'], reverse=False) return render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField", "label": 0}, {"snippet_id": 58587, "code": "=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course.DoesNotExist: print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course", "label": 1}, {"snippet_id": 35532, "code": "=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm", "label": 0}, {"snippet_id": 4165, "code": "/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 3123, "code": " url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op", "label": 0}, {"snippet_id": 11091, "code": "=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string", "label": 0}, {"snippet_id": 17152, "code": " send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset})", "label": 0}, {"snippet_id": 1761, "code": " show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root'", "label": 0}, {"snippet_id": 36920, "code": "'created_at', 'month', output_field=DateField())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in", "label": 0}, {"snippet_id": 84784, "code": "'bleachit') return HttpResponse(rv, content_type='text/html') def article_diff(request): \"\"\"This is a AJAX function that diffs the body of the article as it is currently displayed with the current version", "label": 0}, {"snippet_id": 43523, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\"", "label": 0}, {"snippet_id": 34073, "code": ")) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 44400, "code": "\") dd_url=self.live_server_url +f'/datadocument/{doc.pk}/' self.browser.get(dd_url) try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') except NoSuchElementException", "label": 0}, {"snippet_id": 725, "code": " file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t", "label": 0}, {"snippet_id": 57289, "code": " request.method=='POST': form=TransactionEditForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid", "label": 0}, {"snippet_id": 15536, "code": ".data=str_to_datetime(get_command('start_day')[0]['start_day']) if get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]['number_of_days'] if get_command('exe_models'):", "label": 0}, {"snippet_id": 13041, "code": " unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js", "label": 0}, {"snippet_id": 62579, "code": " def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py", "label": 0}, {"snippet_id": 69470, "code": ".format(i +1, times)) urlopen('http://127.0.0.1') return except HTTPError as h: if h.code in[404, 502, 503]: time.sleep(1) continue raise except URLError as e: if isinstance(e.reason, ConnectionRefusedError", "label": 0}, {"snippet_id": 49767, "code": "'email' in session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs", "label": 0}, {"snippet_id": 79138, "code": "._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.OPEN_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound", "label": 0}, {"snippet_id": 17055, "code": " initial=data) if formset.is_valid(): for f in formset: try: g, created=Game.objects.get_or_create(name=f.cleaned_data['game_name'], the_round=r, the_set=f.cleaned_data['the_set']) except KeyError: continue", "label": 0}, {"snippet_id": 11189, "code": "\"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url", "label": 0}, {"snippet_id": 72274, "code": " old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id'", "label": 0}, {"snippet_id": 58968, "code": "=None, update_fields=None): user=Invite.search_user_by_email(self.email) self.user=user return super(Invite, self).save(force_insert, force_update, using, update_fields) def send_mail(self, request, view)", "label": 0}, {"snippet_id": 36839, "code": "'document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats[type].append({'upload_date': current_date , 'document_count'", "label": 0}, {"snippet_id": 57388, "code": "') \\ .order_by('-id') return self.queryset def post(self, request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) print_transaction=request.POST.get", "label": 0}, {"snippet_id": 84066, "code": "=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name='edit.html', template_dir='wiki', extra_context=None, check_membership=False, is_member=None, is_private=None, *args, **kw)", "label": 0}, {"snippet_id": 52530, "code": "\", \"You rock.\", \"Nice.\"] if checked_lst==\"is-checked\": project_object.phase_code=\"done\" flash(\"Action item is completed.{}\".format (random.choice(congratulatory_messages))) else: flash(\"Changes saved.\"", "label": 0}, {"snippet_id": 50256, "code": "(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('/'", "label": 0}, {"snippet_id": 45185, "code": "'upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'", "label": 0}, {"snippet_id": 46201, "code": "'data_document_id'])) d.raw_category=row.pop('raw_category') wft=request.POST.get('weight_fraction_type', None) if wft: w='weight_fraction_type' row[w]=WeightFractionType.objects.get(pk=int(wft)) unit_type_id", "label": 0}, {"snippet_id": 14319, "code": "'total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data", "label": 0}, {"snippet_id": 836, "code": "[^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) >", "label": 0}, {"snippet_id": 80099, "code": " QInputDialog, QMessageBox, QApplication from matisse import Matisse from.handled_decorators import handled_function, handled_slot from.logging_stream import LoggingStream from.status_monitor import StatusMonitor", "label": 0}, {"snippet_id": 54502, "code": "} response=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content,", "label": 0}, {"snippet_id": 8543, "code": " of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration", "label": 0}, {"snippet_id": 35422, "code": " document=doc) p.save() document_type=form['document_type'].value() if document_type !=doc.document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form", "label": 0}, {"snippet_id": 51952, "code": ".form.get('email') pw=request.form.get('pw') user_record=q.get_user_by_email(email) if user_record is None: flash(\"No account found with that email. Would you like to register?\") return redirect(\"/login\")", "label": 0}, {"snippet_id": 10551, "code": " import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie", "label": 0}, {"snippet_id": 2772, "code": ") ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce", "label": 0}, {"snippet_id": 32240, "code": " while self.char and self.char !=end: value.append(self.char) self.read() if self.char is None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType", "label": 0}, {"snippet_id": 30608, "code": ") def grudgeJSON(grudget_id, grudge_id): grudge=session.query(Grudge).filter_by(id=grudge_id).one() return jsonify(grudge=Grudge.serialize) @app.route('/grudget/JSON') def grudgetsJSON(): grudgets=session", "label": 0}, {"snippet_id": 58852, "code": " type', max_length=50, choices=TYPE_CHOICES, default='tester') course=models.ForeignKey(Course) enroll_unit_code=models.ForeignKey(EnrollUnitCode, null=True) added=models.DateTimeField('added datetime'", "label": 0}, {"snippet_id": 77427, "code": ".name) logger.debug(\"Layers processing done\") return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer", "label": 0}, {"snippet_id": 67276, "code": ".get_context_data(**kwargs) context['search_form']=SearchForm() ip=self.kwargs['pk'] context['geoip']=GeoIP().lookup(ip) try: context['domain']=socket.gethostbyaddr(ip)[0] except Exception as e: pass vt", "label": 0}, {"snippet_id": 68847, "code": " hooks, migrator, systemd, traefik, user, ) from.config import( CONFIG_DIR, CONFIG_FILE, HUB_ENV_PREFIX, INSTALL_PREFIX, STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath(os.path", "label": 0}, {"snippet_id": 43482, "code": "*') card_div=parent_div.find_element_by_xpath( '../..') self.assertTrue(\"errorlist\" in card_div.get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait", "label": 0}, {"snippet_id": 41002, "code": "/datadocument/179486/') self.assertIn('Download Script',response.content.decode('utf-8')) self.assertIn('Extraction Script',response.content.decode('utf-8')) def test_product_card_location(self): response", "label": 0}, {"snippet_id": 78316, "code": ".helpers as helpers import ckan.lib.mailer as mailer import ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import", "label": 0}, {"snippet_id": 69190, "code": "') systemd.restart_service('traefik') systemd.enable_service('jupyterhub') systemd.enable_service('traefik') def ensure_jupyterlab_extensions(): \"\"\" Install the JupyterLab extensions we want. \"\"\" extensions", "label": 0}, {"snippet_id": 26302, "code": ".include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill", "label": 0}, {"snippet_id": 9126, "code": " BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie", "label": 0}, {"snippet_id": 69496, "code": " time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format(times)) def ensure_symlinks(prefix): \"\"\" Ensure we symlink appropriate things into /usr/bin We", "label": 0}, {"snippet_id": 14208, "code": " _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response", "label": 0}, {"snippet_id": 15892, "code": "*kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email.data) if user: self.password.errors.append('Email already registered", "label": 0}, {"snippet_id": 75170, "code": ".id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate, 'form': form, 'ID_VAL_SEPARATOR': ID_VAL_SEPARATOR} return render(request, 'etd_app/candidate_metadata.html', context", "label": 0}, {"snippet_id": 84149, "code": "(): if request.user.is_authenticated(): form.editor=request.user if((article is None) and(group_slug is not None)): form.group=group new_article, changeset=form.save() return redirect(new_article) elif", "label": 0}, {"snippet_id": 84312, "code": "(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs", "label": 0}, {"snippet_id": 52756, "code": ".chat.models import Room logger=logging.getLogger(__name__) class MessageCreateAPIView(CreateAPIView): \"\"\" Creates a new message object with a file attachment Returns on the socket { 'id': \"id\", 'sent_by'", "label": 1}, {"snippet_id": 20975, "code": "=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if process_info is not None: self.all_processes[ray_constants.PROCESS_TYPE_WEB_UI]=[ process_info ] def start_plasma_store(self): \"", "label": 0}, {"snippet_id": 37714, "code": "] def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form", "label": 0}, {"snippet_id": 182, "code": "(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size", "label": 0}, {"snippet_id": 58034, "code": " get_onboarding_setting, ONBOARDING_STEPS_DEFAULT_TEMPLATE, \\ get_onboarding_status_with_settings @ddt class UtilityTest(TestCase): \"\"\" Test auxiliary functions. \"\"\" def test_send_email(self): \"\"\" Test email sending.", "label": 0}, {"snippet_id": 44727, "code": "()) text=ExtractedText(doc_date='January 1984', data_document=self.objects.doc, extraction_script=self.objects.script) try: text.clean() except ValidationError: self.fail(\"clean() raised ExceptionType unexpectedly", "label": 0}, {"snippet_id": 26599, "code": "): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the", "label": 0}, {"snippet_id": 71458, "code": " EngineAuthRequest from engineauth import models import test_base import webapp2 __author__='kyle.finley@gmail.com(Kyle Finley)' app=AuthMiddleware(webapp2.WSGIApplication()) class TestAuthMiddleware(test_base", "label": 0}, {"snippet_id": 36516, "code": "/').content.decode('utf8') self.assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '/", "label": 0}, {"snippet_id": 31683, "code": "): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url @pytest.mark.django_db def test_election_not_open(client,create_user): user=create_user", "label": 1}, {"snippet_id": 3149, "code": " django.core.exceptions import SuspiciousOperation from django.core.urlresolvers import reverse from django.contrib import auth from django.http import HttpResponseRedirect from django.utils.crypto import", "label": 0}, {"snippet_id": 29141, "code": " flask import Flask, g, url_for from flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_admin import Admin, helpers from flask_security import Security from flask_login import", "label": 1}, {"snippet_id": 5551, "code": " response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/", "label": 0}, {"snippet_id": 28217, "code": " message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client", "label": 0}, {"snippet_id": 940, "code": " the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like", "label": 0}, {"snippet_id": 360, "code": ": files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified", "label": 0}, {"snippet_id": 6399, "code": " logger.error('Token has expired') return False if id_token['iat'] <(self.time() -self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token.get('hd') !=self", "label": 0}, {"snippet_id": 39309, "code": " max_length=100, null=True, blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank=models.PositiveIntegerField(\"Ingredient", "label": 0}, {"snippet_id": 35530, "code": "=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST:", "label": 0}, {"snippet_id": 74729, "code": "('candidate_home', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) person_instance=get_person_instance(request) degree_type=request.GET.get('type', '') if person_instance", "label": 0}, {"snippet_id": 73293, "code": ") if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email", "label": 0}, {"snippet_id": 47513, "code": " HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F, Sum from django.forms", "label": 1}, {"snippet_id": 64478, "code": ".persist() response=redirect(location_on_success) session.set_cookie(response) current_app.logger.info('Successful token login, redirecting user{} to{}'.format(user, location_on_success)) return response", "label": 0}, {"snippet_id": 66022, "code": " quit_button=builder.get_object(\"quit_button\") back_button.connect(\"clicked\", self.on_back_button_clicked) quit_button.connect(\"clicked\", self.on_quit_button_clicked) unsaved_databases_list_box=builder.get_object", "label": 0}, {"snippet_id": 75741, "code": " error_response except Exception: import traceback logger.error('fast lookup exception: %s' % traceback.format_exc()) return error_response try: select2_results=_fast_results_to_select2_list(r.json()['response'", "label": 0}, {"snippet_id": 28210, "code": ": The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message", "label": 0}, {"snippet_id": 19706, "code": " __future__ import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import time import traceback import redis import ray from", "label": 0}, {"snippet_id": 49635, "code": " return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\")", "label": 0}, {"snippet_id": 61004, "code": " str \"\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def", "label": 0}, {"snippet_id": 5996, "code": "['OIDC_ID_TOKEN_COOKIE_NAME']] return self.cookie_serializer.loads(id_token_cookie) except(KeyError, SignatureExpired): logger.debug(\"Missing or invalid ID token cookie\", exc_info=True) return None def", "label": 0}, {"snippet_id": 74772, "code": ", 'register': True}) @login_required def candidate_profile(request, candidate_id): from.forms import PersonForm, CandidateForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except", "label": 0}, {"snippet_id": 16530, "code": ") context['form']=form return render(request, 'rounds/get_seven.html', context) def _sitters_and_two_gamers(tournament, the_round): \"\"\" Return a(sitters, two_gamers) 2-tuple\"\"\" tourney_players=tournament", "label": 0}, {"snippet_id": 62480, "code": "\"Reauthenticating user{!r} for{!r}.\".format(user, reason)) session['_saml2_session_name_id']=code(session_info['name_id']) session[reason]=int(time()) session.persist() relay_state=request.form.get('RelayState', ", "label": 0}, {"snippet_id": 43921, "code": " expected_conditions as EC from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import", "label": 1}, {"snippet_id": 50576, "code": "'' Acquire a lock scoped to the local user. Only one build at a time can run with the given name per user per machine. While waiting for the lock, prints a notice to stdout every 30s. ''' if platform.system", "label": 0}, {"snippet_id": 67687, "code": ") if type is not None: query=query.filter(type=type) return query class AttributeListView(PaginationMixin, ListView): model=Attribute template_name='threat/attribute_list.html' context_object_name='attributes", "label": 0}, {"snippet_id": 63714, "code": " response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location", "label": 0}, {"snippet_id": 44197, "code": " dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source.pk}' self.browser.get(ds_detail_url) self.browser.find_elements_by_xpath('//*[@title=\"edit\"]')[1].click()", "label": 0}, {"snippet_id": 59593, "code": " None) def config_dict(self): return{ option.name: self.config(option.name) for option in CONFIG_OPTIONS } def metadata(self, key=None, database=None, table=None, fallback=True): \"\"\" Looks up metadata,", "label": 0}, {"snippet_id": 22826, "code": " \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if", "label": 0}, {"snippet_id": 65690, "code": ".on_cancel_button_clicked) override_button.connect(\"clicked\", self.on_override_button_clicked) self.override_dialog.present() else: self.copy_database_file() tab_title=self.create_tab_title_from_filepath(self", "label": 0}, {"snippet_id": 83615, "code": " group def get_articles_for_object(object, article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname", "label": 0}, {"snippet_id": 40265, "code": " return DataDocument.objects.filter(extractedtext__qa_checked=True, extractedtext__extraction_script=self.pk).count() def get_pct_checked(self): count=self.get_datadocument_count() pct=(0 if count==0 else", "label": 0}, {"snippet_id": 28011, "code": " import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def _random_string(): id_hash", "label": 0}, {"snippet_id": 8808, "code": "{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language", "label": 0}, {"snippet_id": 28742, "code": "(_default_handler) def vmstat(stat): \"\"\"Run vmstat and get a particular statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\"", "label": 0}, {"snippet_id": 45627, "code": ".is_valid() and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk", "label": 0}, {"snippet_id": 52456, "code": "\"\" \"\"\" project_object=Project.query.filter_by(p_id=project_id).first() user_id=session.get(\"user_id\") results={\"userId\": user_id, \"pOwnerId\": project_object.user_id, \"pTitle\": project_object.title, \"pNotes", "label": 0}, {"snippet_id": 18535, "code": "\\.[a-zA-Z0-9-.]+$)', self.email)==None): \t\t\tself.render(\"signup.html\",error=\"Your email doesn't look like a valid email\") \t\t\treturn \t\tdoes_it_exist=self.check_if_exists() \t\tif(does_it_exist!=None): \t\t\tself", "label": 0}, {"snippet_id": 67921, "code": " from django.db.models import Q, Count from.models import Hunt from apps.threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from", "label": 0}, {"snippet_id": 76606, "code": "%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching tiles\") logger.debug(\"rect_of_tiles: %s\", rect_of_tiles) world_extent_in_tiles=2 ** zoom_level", "label": 0}, {"snippet_id": 68770, "code": " proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr", "label": 0}, {"snippet_id": 8075, "code": "['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else:", "label": 0}, {"snippet_id": 44446, "code": ": user=User.objects.create_user(username='Karyn', password='specialP@55word') superuser=User.objects.create_superuser(username='SuperKaryn', password='specialP@55word', email='me@epa.gov') ds=DataSource", "label": 0}, {"snippet_id": 69649, "code": "(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()))) if conda_packages: logger.info('Installing{} conda packages collected from plugins:{}'.format( len(conda_packages", "label": 0}, {"snippet_id": 57426, "code": "\"'.format(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return self.get", "label": 0}, {"snippet_id": 74120, "code": " ReportBasePartial(EvalDataMixin, wizard_builder_partials.WizardFormPartial): model=models.Report storage_helper=view_helpers.EncryptedReportStorageHelper EVAL_ACTION_TYPE=\"VIEW\" @property def site_id(self): return", "label": 0}, {"snippet_id": 1498, "code": "=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return", "label": 0}, {"snippet_id": 23824, "code": " memory_in_bytes=psutil_memory_in_bytes elif sys.platform==\"linux\" or sys.platform==\"linux2\": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl(", "label": 0}, {"snippet_id": 26349, "code": " process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside", "label": 0}, {"snippet_id": 18931, "code": ") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\": if request.user.role==\"SimpleUsers\": topredir=request.localconfig.parameters.get_value( \"default_top_redirection", "label": 1}, {"snippet_id": 7725, "code": "\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 44617, "code": " raw_chem_name='Test Chem Name', raw_cas='test_cas' ) rc=ec.rawchem_ptr ing=Ingredient.objects.create(lower_wf_analysis=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr", "label": 0}, {"snippet_id": 27949, "code": ".\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. ", "label": 0}, {"snippet_id": 82388, "code": "), name='url-detail-view'), re_path(r'^update/(?P<pk>(\\d)+)/$', URLUpdateView.as_view(), name='url-update-view'), re_path(r'^delete/(?P<pk>(\\d)+)/$', URLDeleteView.as_view(), name='url-delete-view'), re_path", "label": 0}, {"snippet_id": 68057, "code": "'threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_edit_form.html'", "label": 0}, {"snippet_id": 81035, "code": ") existing_registration.state='open' subscription_update_counter -=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: _logger.info('Found existing registration, no seats", "label": 0}, {"snippet_id": 7409, "code": " Exam from app.models.theq import CSR from app.schemas.bookings import ExamSchema from qsystem import api, jwt from datetime import datetime, timedelta @api.route(\"/exams/\", methods=[\"GET\"]) class ExamList", "label": 0}, {"snippet_id": 57324, "code": "=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form']=form", "label": 0}, {"snippet_id": 19143, "code": ".mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client", "label": 1}, {"snippet_id": 15582, "code": " get_command('change_timeseries_value_several_days_add_delta'): form.change_timeseries_value_several_days_add_delta.append_entry() for index, command in enumerate(get_command('change_input_series_one_model')", "label": 0}, {"snippet_id": 19382, "code": " determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file to a list of strings representing its contents", "label": 1}, {"snippet_id": 32415, "code": " args.append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command(", "label": 0}, {"snippet_id": 78753, "code": " to update a data request. The function checks the access rights of the user before updating the data request. If the user is not allowed a NotAuthorized exception will be risen. In addition, you should", "label": 0}, {"snippet_id": 79494, "code": " NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD", "label": 0}, {"snippet_id": 68237, "code": "/index.html' context_object_name='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) search_form=SearchForm(self.request.GET) context['search_form']=search_form", "label": 0}, {"snippet_id": 49109, "code": "=DocumentTypeForm(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group.group_type) document_type_form.fields['document_type'].queryset=qs context={'doc': doc, 'edit':", "label": 0}, {"snippet_id": 31760, "code": " test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password", "label": 1}, {"snippet_id": 71080, "code": " modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re", "label": 0}, {"snippet_id": 71672, "code": ".serialize() resp=req.get_response(app) resp.request=req resp._save_session() self.assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1)", "label": 0}, {"snippet_id": 7007, "code": " render_template('auth/reset_password.html', form=form) @auth.route('/change-email', methods=['GET', 'POST']) @login_required def change_email_request(): form=ChangeEmailForm() if form.validate_on_submit", "label": 0}, {"snippet_id": 43341, "code": "'value') true_cas=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed", "label": 0}, {"snippet_id": 424, "code": " header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError except(AttributeError, ValueError, OverflowError): return True return False", "label": 0}, {"snippet_id": 65661, "code": "/override_dialog.ui\") self.override_dialog=builder.get_object(\"override_dialog\") self.override_dialog.set_destroy_with_parent(True) self.override_dialog.set_modal(True) self.override_dialog.set_transient_for(self", "label": 0}, {"snippet_id": 37715, "code": " def __init__(self, *args, **kwargs): super(DocumentTypeForm, self).__init__(*args, **kwargs) self.fields['document_type'].label='' self.fields['document_type'].widget.attrs.update({ 'onchange': 'form.submit", "label": 0}, {"snippet_id": 59807, "code": "\"): table_definition_rows=list( await self.execute( database_name, 'select sql from sqlite_master where name=:n and type=:t', {\"n\": table, \"t\": type_}, ) ) if not table_definition_rows: return None return", "label": 0}, {"snippet_id": 10550, "code": ".bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']", "label": 0}, {"snippet_id": 78825, "code": "(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict", "label": 0}, {"snippet_id": 20300, "code": " update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info in local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\", "label": 0}, {"snippet_id": 44186, "code": ".assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source.pk", "label": 0}, {"snippet_id": 24877, "code": " self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os", "label": 0}, {"snippet_id": 81521, "code": "=end_date +relativedelta(months=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist", "label": 0}, {"snippet_id": 61500, "code": " TYPE_CHECKING from pshtt.pshtt import inspect_domains import tldextract from django.utils import timezone from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain", "label": 1}, {"snippet_id": 56489, "code": " given_a_deep_link_domain(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse", "label": 0}, {"snippet_id": 34819, "code": " download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv", "label": 1}, {"snippet_id": 55670, "code": "==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path", "label": 0}, {"snippet_id": 27165, "code": " used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log", "label": 0}, {"snippet_id": 37993, "code": " return(ExtractedTextForm, ChemicalFormSet) def two(): FunctionalUseFormSet=make_formset(parent, child) return(ExtractedTextForm, FunctionalUseFormSet) def three(): HnPFormSet=make_formset(parent, child)", "label": 0}, {"snippet_id": 10651, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept", "label": 0}, {"snippet_id": 10372, "code": " import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth", "label": 0}, {"snippet_id": 68983, "code": "/QuNxh qpcIGaVbtQ1bn7m+k5Qe/fz+bFuUeXPivafLLlGc6KbdgMvSW9EVMO7yBy/2JE15 ZJgl7lXKLQ31VQPAHT3an5IV2C/ie12eEqZWlnCiHV/wT+zhOkSpWdrheWfBT+ac hR4jDH80AS3F8jo3byQATJb3RoCYUCVc3u1ouhNZa5yLgYZ/iZkpk5gKjxHPudFb", "label": 0}, {"snippet_id": 57924, "code": " with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_course\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\"", "label": 0}, {"snippet_id": 745, "code": ".select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE", "label": 0}, {"snippet_id": 62109, "code": " not matches: return True elif len(matches.group()) > 1: return False else: return True def validate_csp(page): if 'Content-Security-Policy' not in page.headers: return False elif \"default-src 'self'\" not", "label": 0}, {"snippet_id": 18626, "code": " None or the error message. \t\"\"\" \tdef check_database(self): \t\tph=PasswordHasher() \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self.username}) \t\tif(document_username==None): \t\t\terror", "label": 1}, {"snippet_id": 73622, "code": ".get('key') is not None: if(authenticate_user(request.GET.get('key'))): return render(request, 'registration/login.html', {'login_form': form, 'account_confirmed': format(LoginFormText.account_confirmed ", "label": 1}, {"snippet_id": 77062, "code": " layer_id, label, projection, request_type, db_type, version, tile_arg_names): self.target_url=target_url self.name=name self.layer_id=layer_id self.label=label self.projection=projection self.request_type", "label": 0}, {"snippet_id": 33472, "code": "=ProductToPUC.objects.create(product=Product.objects.get(pk=pid), puc=puc, puc_assigned_usr=User.objects.get(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid", "label": 0}, {"snippet_id": 21679, "code": ".PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list(self.all_processes.keys()): self._kill_process_type( process_type, check_alive=check_alive, allow_graceful", "label": 0}, {"snippet_id": 73018, "code": ") parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, 'importapplications/applications.html',{ 'form", "label": 0}, {"snippet_id": 70267, "code": " HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.six.moves.urllib.parse", "label": 1}, {"snippet_id": 72534, "code": " Position from screendoor.parseposter import parse_upload @login_required(login_url='login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html", "label": 0}, {"snippet_id": 33060, "code": "(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin", "label": 0}, {"snippet_id": 7389, "code": " under the License.''' import logging from flask import g, request from flask_restplus import Resource from sqlalchemy import exc, or_ from app.models.bookings import Exam from app.models.theq import CSR", "label": 1}, {"snippet_id": 54634, "code": " \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs[\"chapter\"] \t\t\t\tproblems=assignment.getElementsByTagName", "label": 1}, {"snippet_id": 56848, "code": ".transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context) @login_required() def concept_edit(request, *args, **kwargs): extra_context={}", "label": 0}, {"snippet_id": 37172, "code": " extract_file=forms.FileField(label=\"Extracted Text CSV File\") def __init__(self, *args, **kwargs): self.dg_type=kwargs.pop('dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self)", "label": 0}, {"snippet_id": 67668, "code": "(event=pk).order_by('id') category=self.request.GET.get('category') type=self.request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter", "label": 0}, {"snippet_id": 47, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 48863, "code": "=ProductPUCForm(request.POST or None, instance=p2p) if form.is_valid(): if p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method", "label": 0}, {"snippet_id": 19910, "code": " \" \"Turning off flushing due to exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str", "label": 0}, {"snippet_id": 1401, "code": ".lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path", "label": 1}, {"snippet_id": 38046, "code": " models from django.urls import reverse from django.utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC", "label": 1}, {"snippet_id": 28056, "code": " function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative lines and adding some space to indent the remaining lines nicely. Args: exception_message(str): A", "label": 0}, {"snippet_id": 76365, "code": " _TILE_PIXEL_SIZE, rect_of_tiles.Height() * _TILE_PIXEL_SIZE) set_pixel_to_bgcolor=(layer_properties.image_format==\"image/png\" and layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties.bgcolor if", "label": 0}, {"snippet_id": 39985, "code": " null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True) temp_id=models", "label": 0}, {"snippet_id": 77554, "code": "=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras to datasets to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__", "label": 0}, {"snippet_id": 66387, "code": ".logging_manager.log_debug(\"Could not open database, wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk", "label": 0}, {"snippet_id": 83372, "code": " wikiword_pattern.match(title): raise forms.ValidationError(_('The title contain bad characters.')) cs=ChangeSet.objects.filter(old_title=title).count() if cs > 0: raise forms.ValidationError( _('The title %(title", "label": 1}, {"snippet_id": 80390, "code": "(self.start_thin_etalon_scan) self.lock_all_action.triggered.connect(self.toggle_lock_all) self.lock_slow_piezo_action.triggered.connect(self.toggle_slow_piezo_lock) self.lock_thin_etalon_action.triggered", "label": 0}, {"snippet_id": 24558, "code": " > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in", "label": 1}, {"snippet_id": 19164, "code": " import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in", "label": 1}, {"snippet_id": 17602, "code": ".registration_ip db.session.add(user) db.session.commit() if models.RangeBan.is_rangebanned(user.registration_ip): flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"", "label": 0}, {"snippet_id": 80742, "code": " checked): if checked: for action in self.lock_actions: if not action.isChecked(): action.trigger() if all([action.isChecked() for action in self.lock_actions]): [action.setEnabled(False) for action in", "label": 0}, {"snippet_id": 49460, "code": "=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect", "label": 1}, {"snippet_id": 81260, "code": ".Selection([('daily', 'Dagelijks'), ('weekly', 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user", "label": 0}, {"snippet_id": 45638, "code": ") @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk)", "label": 0}, {"snippet_id": 11056, "code": " 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 54712, "code": " \t\tself.problems=[] \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tprob_id=(assignment.book_edition,assignment.chapter,problem.number) \t\t\t\tprob_data=(assignment.student", "label": 0}, {"snippet_id": 44978, "code": ".title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains", "label": 0}, {"snippet_id": 13099, "code": "'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES],", "label": 0}, {"snippet_id": 78628, "code": " these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title of the data request :type title: string :param", "label": 0}, {"snippet_id": 15584, "code": "'change_timeseries_value_several_days_add_delta'): form.change_timeseries_value_several_days_add_delta.append_entry() for index, command in enumerate(get_command('change_input_series_one_model')): sub_form=form", "label": 0}, {"snippet_id": 34308, "code": "' edited') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field", "label": 0}, {"snippet_id": 63277, "code": "('testing', config) def test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL", "label": 0}, {"snippet_id": 16752, "code": " \"\"\"Seed players to the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) if request.method=='POST': PowerAssignFormset=formset_factory", "label": 0}, {"snippet_id": 28849, "code": " psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes", "label": 0}, {"snippet_id": 24647, "code": ".update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"log monitor to connect ", "label": 1}, {"snippet_id": 71039, "code": "'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This", "label": 0}, {"snippet_id": 72582, "code": "{'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account", "label": 0}, {"snippet_id": 79611, "code": "['auth_user_obj'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest", "label": 1}, {"snippet_id": 15108, "code": "',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeAllModelsForm(FlaskForm): def __init__(self, csrf_enabled", "label": 0}, {"snippet_id": 1816, "code": " like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue", "label": 1}, {"snippet_id": 83489, "code": " article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision( self.old_content, self.old_title, self.old_markup", "label": 0}, {"snippet_id": 47364, "code": ".filter(data_source=datasource)) datasource.registered=(len(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form", "label": 0}, {"snippet_id": 18867, "code": " is_trainee from.models import GospelTrip def gospel_trips_available(request): user=request.user if not hasattr(user, 'type') or not is_trainee(user): return{'gospel_trips_available': False} try: admin", "label": 0}, {"snippet_id": 14370, "code": " method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def", "label": 0}, {"snippet_id": 84305, "code": " changeset=get_object_or_404( changes_qs, revision=int(revision), **article_args) article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}", "label": 0}, {"snippet_id": 78681, "code": " dict \"\"\" model=context['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST, context, data_dict) validator.validate_datarequest(context, data_dict) data_req", "label": 0}, {"snippet_id": 79318, "code": " datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id, 'close_time': close_time, 'closed': datarequest", "label": 0}, {"snippet_id": 2458, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f))", "label": 0}, {"snippet_id": 51592, "code": ".select_optional_steps, 'modify_optional_steps':builder.modify_optional_steps, 'specify_optional_steps':builder.specify_optional_steps, 'userlock':userlock, 'fail':fail, 'scp':scp, 'require_version':require_version ", "label": 0}, {"snippet_id": 81735, "code": " from django.views.generic import CreateView, ListView, UpdateView, DeleteView from django.contrib.auth.mixins import LoginRequiredMixin from.forms import ShortUrlForm, JustURLForm, CategoryModelForm, ManyURLSForm", "label": 0}, {"snippet_id": 58696, "code": " from django.dispatch import receiver from django.contrib.auth.models import User from django.contrib.sites.models import Site from django.conf import settings from django.core.mail import send_mail from", "label": 0}, {"snippet_id": 48505, "code": ".value() product.upc=form['upc'].value() product.size=form['size'].value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists", "label": 0}, {"snippet_id": 9375, "code": " password_change_request_handler(request): \"\"\"Handle password change requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password", "label": 0}, {"snippet_id": 50581, "code": " the local user. Only one build at a time can run with the given name per user per machine. While waiting for the lock, prints a notice to stdout every 30s. ''' if platform.system()=='Windows': return WindowsUserLock", "label": 0}, {"snippet_id": 7185, "code": "'group_exam_ind' ] column_searchable_list={'exam_type_name'} form_excluded_columns=[ 'exam' ] form_create_rules=( 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind'", "label": 1}, {"snippet_id": 4867, "code": " redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,", "label": 0}, {"snippet_id": 72252, "code": " pseudo, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons", "label": 0}, {"snippet_id": 51887, "code": " None: new_user=q.make_user(email, pw, displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname) session[\"new_user\"]=True flash(\"Account", "label": 0}, {"snippet_id": 67939, "code": " codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPConnection class IndexView(PaginationMixin, ListView", "label": 0}, {"snippet_id": 64140, "code": "=client.global_logout(subject_id) loresponse=logouts.values()[0] if isinstance(loresponse, LogoutResponse): if loresponse.status_ok(): current_app.logger.debug('Performing local logout for{!r}'.format(user", "label": 0}, {"snippet_id": 39077, "code": " property. If the zip file cannot be found, dg.zip_url evaluates to boolean False ''' if self.get_zip_url()!='no_path_found': return(self.get_zip_url) else: return False def get_zip_url(self): uuid_path", "label": 0}, {"snippet_id": 25694, "code": " a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional processes like the Redis servers", "label": 0}, {"snippet_id": 49978, "code": " if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] savepath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(savepath, exist_ok=True) saveFilePath", "label": 0}, {"snippet_id": 55945, "code": "}?{}'.format(settings.APP_DEEPLINK_DOMAIN, EMAIL_CONFIRMATION_PATH, request.GET.urlencode()) return response def login_redirect(request): response=HttpResponse('', status=302) response['Location']='{}{", "label": 0}, {"snippet_id": 51461, "code": "(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have", "label": 0}, {"snippet_id": 39611, "code": " on_delete=models.CASCADE, limit_choices_to={'script_type': 'EX'}) qa_checked=models.BooleanField(default=False, verbose_name=\"QA approved\") qa_edited=models.BooleanField(default=False, verbose_name=\"QA edited\"", "label": 0}, {"snippet_id": 46219, "code": " unit_type_id=int(row['unit_type']) row['unit_type']=UnitType.objects.get(pk=unit_type_id) rank=row['ingredient_rank'] row['ingredient_rank']=None if rank=='' else rank ext, created=ext_parent.objects.get_or_create", "label": 0}, {"snippet_id": 74549, "code": " anonymous user: %s' % request.META) return HttpResponseServerError('Internet Server error. Please contact %s for assistance.' % BDR_EMAIL) def redirect_to_home(request): return HttpResponsePermanentRedirect", "label": 0}, {"snippet_id": 3352, "code": ".OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings", "label": 0}, {"snippet_id": 23741, "code": "\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize", "label": 0}, {"snippet_id": 39387, "code": " raw_cas=self.raw_cas, raw_chem_name=self.raw_chem_name, facet_model_name='Extracted Chemical', ) obj.save() return obj.to_dict(include_meta=True) def get_extractedtext(self): return self.extracted_text", "label": 0}, {"snippet_id": 41173, "code": " def test_add_extracted(self): '''Check that the user has the ability to create an extracted record when the document doesn't yet have an extracted record for data group types 'CP' and 'HH' ''' doc=DataDocument", "label": 0}, {"snippet_id": 3002, "code": ".is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, ", "label": 0}, {"snippet_id": 43188, "code": " from dashboard.tests.loader import load_model_objects, fixtures_standard from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver", "label": 1}, {"snippet_id": 1379, "code": " directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path", "label": 1}, {"snippet_id": 44839, "code": " import html from dashboard import views from dashboard.models import * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase", "label": 1}, {"snippet_id": 74754, "code": "=degree_type) else: person_form=PersonForm(initial=shib_info, degree_type=degree_type) candidate_form=CandidateForm(degree_type=degree_type) return render(request, 'etd_app/register.html',{'person_form", "label": 0}, {"snippet_id": 2711, "code": " self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs)", "label": 0}, {"snippet_id": 25799, "code": "._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the", "label": 0}, {"snippet_id": 79583, "code": "(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time=datetime.datetime.now() session.add(data_req", "label": 0}, {"snippet_id": 30893, "code": ",grudget=grudget,creator=creator) else: return render_template('showgrudge.html', grudges=grudges, id=grudget_id, grudget=grudget, creator=creator) @app.route('/grudget/<int:grudget_id>/grudge/new/', methods", "label": 0}, {"snippet_id": 53059, "code": "{'current_rent': 321.49}, 'how_soon_form':{'how_soon': HS_3}, 'personal_profile_form':{ 'first_name': 'TestFirstName', 'last_name': 'TestLastName', 'zipcode': '10118', 'phone_number': '+263771819478', ", "label": 0}, {"snippet_id": 75407, "code": " return render(request, 'etd_app/staff_view_candidates.html',{'candidates': candidates, 'status': status}) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_approve", "label": 0}, {"snippet_id": 44913, "code": "':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS':'1000', 'habits-0-id': self.objects.ehp.pk, 'habits-0-product_surveyed':'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset", "label": 0}, {"snippet_id": 69268, "code": "-dummyauthenticator==0.3.1', 'jupyterhub-systemdspawner==0.11', 'jupyterhub-firstuseauthenticator==0.12', 'jupyterhub-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator==0.8.0' ]", "label": 1}, {"snippet_id": 28666, "code": "\"]=runtime_num_gpus elif default_num_gpus is not None: resources[\"GPU\"]=default_num_gpus return resources _default_handler=None def setup_logger(logging_level, logging_format): \"\"\"Setup default logging", "label": 0}, {"snippet_id": 57233, "code": " extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) if not transaction_code: transaction=Transaction", "label": 0}, {"snippet_id": 2837, "code": " \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string", "label": 0}, {"snippet_id": 51395, "code": "(target=pump_output_thread, args=(stderr, sys.stderr)) stdout_thread.start() stderr_thread.start() stdout_thread.join() stderr_thread.join() return stdout.channel.recv_exit_status() def __call__(self, *args)", "label": 0}, {"snippet_id": 53787, "code": " def __init__(self, step=None): self.step=step self.body=[] self.css=[] self.data=SharedCache() self.files=SharedCache() self.title=self.definition.get('title') self.subtitle=self.definition.get('subtitle", "label": 0}, {"snippet_id": 64324, "code": " in request.form: current_app.logger.debug('Receiving a logout request from the IdP') subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not contain the", "label": 0}, {"snippet_id": 16608, "code": ") % 7==0 if two_gamers: assert(len(rps) +len(two_gamers)) % 7==0 for tp in tourney_players: if not round_players.filter(player=tp.player).exists(): sitters.add(tp) return sitters, two_gamers def _create_game_seeder", "label": 0}, {"snippet_id": 35504, "code": ".objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset", "label": 0}, {"snippet_id": 17695, "code": ".route('/password-reset', methods=['GET', 'POST']) def password_reset(payload=None): if not app.config['ALLOW_PASSWORD_RESET']: return flask.abort(404) if flask.g.user: return flask.redirect(redirect_url()", "label": 0}, {"snippet_id": 70422, "code": " directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat", "label": 1}, {"snippet_id": 66276, "code": ") composite_unlock_button=self.builder.get_object(\"composite_unlock_button\") composite_unlock_button.connect(\"clicked\", self.on_composite_unlock_button_clicked) keyfile_unlock_select_button=self.builder", "label": 0}, {"snippet_id": 47931, "code": ".decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging", "label": 0}, {"snippet_id": 66631, "code": ", self.composite_keyfile_path) self.open_database_page() self.logging_manager.log_debug(\"Opening of database was successfull\") except(OSError): self.show_unlock_failed_revealer() composite_unlock_entry", "label": 0}, {"snippet_id": 62547, "code": " import(auth_response, logout_response, logout_request) from eduid_webapp.authn.app import authn_init_app from eduid_common.api.app import eduid_init_app import logging logger=logging.getLogger(__name__", "label": 0}, {"snippet_id": 22076, "code": " Object Store with hugetlbfs support. Requires plasma_directory. include_webui: Boolean flag indicating whether to start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be", "label": 0}, {"snippet_id": 80946, "code": "(http.Controller): @http.route(['/fit_subscribe_controller/subscribe'], type='http', auth=\"public\", website=True) def event_register(self, event_id, event_is_participating, **post): event_id=int(event_id", "label": 0}, {"snippet_id": 53183, "code": "(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().how_soon, None) data={ 'first_name':", "label": 0}, {"snippet_id": 70701, "code": " Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date", "label": 1}, {"snippet_id": 75022, "code": " unsorted_user_keywords=[] for kw in user_request_keywords: if kw in db_keywords_info: unsorted_user_keywords.append(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords=sorted([kw.text", "label": 0}, {"snippet_id": 48923, "code": " request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def", "label": 0}, {"snippet_id": 73291, "code": "=email, password=password) if user is None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is False: message=forms.ValidationError", "label": 0}, {"snippet_id": 51480, "code": " version of ohDevTools. You have version{0}, but need version{1}.\".format(VERSION, required_version),32) def windows_program_exists(program): return subprocess.call([\"where\", \"/q\", program], shell=False)==0", "label": 0}, {"snippet_id": 82767, "code": " job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring", "label": 0}, {"snippet_id": 20075, "code": " driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add(hex_to_binary(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins=set() for object_id, _ in object_table_objects", "label": 0}, {"snippet_id": 4814, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', ", "label": 0}, {"snippet_id": 19690, "code": "=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address)", "label": 1}, {"snippet_id": 80434, "code": ".status_monitor=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id", "label": 0}, {"snippet_id": 77144, "code": " tile_arg_names=_LAYER_ARG_NAMES[request_type] version_info=server_layer_def.get(\"version\", None) layer=WmsLayer( target_url=target_url, name=layer_ns, layer_id=str(server_layer_def[\"id\"]), label=server_layer_def", "label": 0}, {"snippet_id": 9600, "code": " the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return", "label": 0}, {"snippet_id": 57234, "code": " extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) if not transaction_code: transaction=Transaction.objects", "label": 0}, {"snippet_id": 62777, "code": " session :rtype: str \"\"\" session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2", "label": 0}, {"snippet_id": 53222, "code": " django.views.generic.simple import direct_to_template from oi.projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id", "label": 1}, {"snippet_id": 6289, "code": " is_id_token_valid(self, id_token): \"\"\" Check if `id_token` is a current ID token for this application, was issued by the Apps domain we expected, and that the email address has been verified. @see: http://openid", "label": 0}, {"snippet_id": 57794, "code": ") if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{'$set':{ step: True }}, upsert=True) ONBOARDING_STEPS_DEFAULT_TEMPLATE={ 'title': '', 'description", "label": 0}, {"snippet_id": 63241, "code": " update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE':", "label": 0}, {"snippet_id": 10157, "code": " even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported", "label": 0}, {"snippet_id": 13184, "code": " third_party_auth.is_enabled(): context['duplicate_provider']=pipeline.get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers", "label": 0}, {"snippet_id": 37609, "code": " __init__(self, *args, **kwargs): super(BulkProductTagForm, self).__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms", "label": 0}, {"snippet_id": 56097, "code": " preview_encoded) else: link='{}{}/{}'.format(settings.APP_DEEPLINK_DOMAIN, PROFILE_DEEPLINK_PATH, username) response=HttpResponse('', status=302) response['Location']=link return response def root_redirect", "label": 1}, {"snippet_id": 28119, "code": " use. error_type(str): The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None,", "label": 0}, {"snippet_id": 1974, "code": "\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" ", "label": 0}, {"snippet_id": 81196, "code": "'), ('subscription_partner', '=', partner.id)]) if ai_monthly.subscription_is_active: return; if event_cat=='bokszaktraining': if bz_tickets: bz_tickets.subscription_counter +=subscription_update_counter", "label": 1}, {"snippet_id": 19024, "code": ": if request.user.role==\"SimpleUsers\": topredir=request.localconfig.parameters.get_value( \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos", "label": 1}, {"snippet_id": 35096, "code": ".get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, 'selected taggit-tag' if tag.name in tags else 'taggit-tag", "label": 0}, {"snippet_id": 18043, "code": " send_password_reset_email(user): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']", "label": 0}, {"snippet_id": 9925, "code": " request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register", "label": 0}, {"snippet_id": 5786, "code": ".moves.urllib.parse import urlencode from flask import request, session, redirect, url_for, g from oauth2client.client import flow_from_clientsecrets, OAuth2WebServerFlow,\\ AccessTokenRefreshError import", "label": 0}, {"snippet_id": 28373, "code": " byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id", "label": 0}, {"snippet_id": 35371, "code": "'upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value()", "label": 0}, {"snippet_id": 46638, "code": " request.user, 'name' : default_name, 'data_source' : datasource} if request.method=='POST': form=DataGroupForm(request.POST, request.FILES, user =request.user, initial=initial_values) if form.is_valid", "label": 0}, {"snippet_id": 71341, "code": ".session']=self.session environ['ea.user']=self.user class AuthMiddleware(object): def __init__(self, app, config=None): self.app=app self._config=load_config(config) self._url_parse_re=re.compile(r'%s/([^\\s/", "label": 0}, {"snippet_id": 23729, "code": " in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl(command): \"\"\"Run a sysctl command and", "label": 0}, {"snippet_id": 69349, "code": "'Downloading & setting up user environment...') with conda.download_miniconda_installer(miniconda_version, miniconda_installer_md5) as installer_path: conda.install_miniconda(installer_path, USER_ENV_PREFIX)", "label": 0}, {"snippet_id": 61504, "code": " import inspect_domains import tldextract from django.utils import timezone from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain if TYPE_CHECKING: from directory", "label": 0}, {"snippet_id": 2522, "code": " the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE", "label": 0}, {"snippet_id": 23250, "code": " True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.", "label": 0}, {"snippet_id": 30880, "code": "'username' not in login_session: return render_template('publicgrudges.html', grudges=grudges, id=grudget_id,grudget=grudget,creator=creator) else: return render_template('showgrudge.html', grudges=grudges", "label": 0}, {"snippet_id": 5521, "code": " status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit", "label": 0}, {"snippet_id": 35732, "code": " def assign_puc_to_product(request, pk, template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first(", "label": 0}, {"snippet_id": 69280, "code": " 'oauthenticator==0.8.0' ]) traefik.ensure_traefik_binary(prefix) def ensure_usergroups(): \"\"\" Sets up user groups & sudo rules \"\"\" user.ensure_group('jupyterhub-admins') user.ensure_group('jupyterhub-users", "label": 1}, {"snippet_id": 83578, "code": " except ImportError: notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects.all() def get_articles_by_group(article_qs, group_slug=None, group_slug_field=None, group_qs=None", "label": 0}, {"snippet_id": 28103, "code": "(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error. message(str):", "label": 0}, {"snippet_id": 60715, "code": " NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that represents a component monitoring job(local", "label": 0}, {"snippet_id": 83442, "code": "' self.is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new=False def save(self, *args, **kwargs): editor_ip=self", "label": 0}, {"snippet_id": 47930, "code": "().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line)) except Exception as e: logging", "label": 0}, {"snippet_id": 76601, "code": "=WMS& VERSION=1.3.0&REQUEST=GetMap&STYLES=&FORMAT=image%2Fjpg&CRS=EPSG:3857& BBOX=-400000.0,-400000.0,400000.0,400000.0&WIDTH=800&HEIGHT=800 \"\"\" logger.info(\"Fetching tiles\") logger.debug(\"rect_of_tiles:", "label": 0}, {"snippet_id": 58549, "code": ", EnrollUnitCode from accounts.models import Instructor from core.common.utils import update_onboarding_step, get_onboarding_percentage from core.common import onboarding from django.conf import settings", "label": 0}, {"snippet_id": 69563, "code": "\"\" tljh_config_src=os.path.join(prefix, 'bin', 'tljh-config') tljh_config_dest='/usr/bin/tljh-config' if os.path.exists(tljh_config_dest): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise", "label": 0}, {"snippet_id": 76809, "code": " +_OPAQUE_ALPHA else: (red, green, blue, alpha)=pixdata[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata[row, col]=(red, green, blue) +_OPAQUE_ALPHA return tile def _FetchMapTile(url): \"\"\"Fetches and returns", "label": 0}, {"snippet_id": 52145, "code": "(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(\"/team-invitation\", methods=[\"POST\"]) def update_team_membership()", "label": 0}, {"snippet_id": 73821, "code": ", 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'applicationsForm': ImportApplicationsForm, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort", "label": 0}, {"snippet_id": 25245, "code": " data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been", "label": 0}, {"snippet_id": 19549, "code": ".log_file_handles[log_filename]=open( log_filename, \"r\") except IOError as e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif", "label": 1}, {"snippet_id": 84101, "code": "'content_type': group_ct, 'object_id': group.id}) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write", "label": 0}, {"snippet_id": 41428, "code": "=create_detail_formset(dd) child_formset=ChildForm(instance=et) for form in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields)", "label": 0}, {"snippet_id": 75473, "code": "'etd_app.change_candidate', raise_exception=True) def view_abstract(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) return render(request, 'etd_app/staff_view_abstract.html',{", "label": 0}, {"snippet_id": 77102, "code": " object from a serverDefs layer. Args: target_url: The server's target url, after which we'll append '?query...' server_layer_def: JSON layer spec. Returns: A WmsLayer object. \"\"\" target_path=urlparse.urlsplit", "label": 0}, {"snippet_id": 9612, "code": "} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 36082, "code": " return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self): return self.prod_fam is ", "label": 0}, {"snippet_id": 22014, "code": " if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients", "label": 0}, {"snippet_id": 84558, "code": " history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='recentchanges.html', template_dir='wiki', extra_context=None, *args, ", "label": 0}, {"snippet_id": 79047, "code": ".validate_datarequest_closing(context, data_dict) data_req=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id", "label": 0}, {"snippet_id": 75853, "code": ", ('page', _('Page Redirect')), ('exact', _('Exact Redirect')), ('sphinx_html', _('Sphinx HTMLDir -> HTML')), ('sphinx_htmldir', _('Sphinx HTML -> HTMLDir')), ) from_url_helptext=_( 'Absolute path, excluding", "label": 0}, {"snippet_id": 777, "code": ".append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last", "label": 0}, {"snippet_id": 45033, "code": " django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard", "label": 0}, {"snippet_id": 30824, "code": "/script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets', grudget_id=grudget_id)) else: return render_template", "label": 0}, {"snippet_id": 71448, "code": ".import_class(strategy_location) except Exception, e: raise(Exception, \"You must provide a location for the{0} \"\\ \"strategy. Add a 'location' key to the \"\\ \"'provider.{0}' config dict\".format(provider))", "label": 0}, {"snippet_id": 60374, "code": " template_paths.append(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"] for plugin in get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader", "label": 0}, {"snippet_id": 23995, "code": " guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object's methods to the proxy methods. \"\"\" def", "label": 0}, {"snippet_id": 14407, "code": ".g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used", "label": 0}, {"snippet_id": 80153, "code": ".clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True", "label": 0}, {"snippet_id": 65871, "code": ".remove_page(page_num) self.update_tab_bar_visibility() def on_tab_close_button_clicked(self, sender, widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container", "label": 0}, {"snippet_id": 31211, "code": "'FORCE_CELERY', 'False')): CELERY_ALWAYS_EAGER=True CELERY_EAGER_PROPAGATES_EXCEPTIONS=True HOOK_DOMAIN=os.environ.get('HOOK_DOMAIN', 'localhost:8000') ALLOWED_HOSTS=['testing.com', 'localhost', '127.0.0.1',", "label": 0}, {"snippet_id": 9733, "code": " None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth", "label": 0}, {"snippet_id": 22596, "code": "\" attribute to an appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via", "label": 0}, {"snippet_id": 15722, "code": "=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form.html', form=run_form) }) @app.route(", "label": 0}, {"snippet_id": 19840, "code": " if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy", "label": 0}, {"snippet_id": 77638, "code": " package_ids: default_security_classification=\"PUBLIC\" default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size", "label": 0}, {"snippet_id": 19933, "code": " to. Raises: Exception: An exception is raised if the subscription fails. \"\"\" self.primary_subscribe_client.subscribe(channel) def xray_heartbeat_batch_handler(self, unused_channel, data): \"\"\"Handle an", "label": 0}, {"snippet_id": 61142, "code": "): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash", "label": 0}, {"snippet_id": 12017, "code": "\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in", "label": 0}, {"snippet_id": 44565, "code": " UPC for ProductToPUC') puc=PUC.objects.create(gen_cat='Test General Category', prod_fam='Test Product Family', prod_type='Test Product Type', description='Test Product Description', last_edited_by=user", "label": 0}, {"snippet_id": 58989, "code": ": self, 'current_site': Site.objects.get_current(request) }) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render(context) text_template=loader.get_template", "label": 0}, {"snippet_id": 2579, "code": ".crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated", "label": 0}, {"snippet_id": 35838, "code": " template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags", "label": 0}, {"snippet_id": 14175, "code": " Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"", "label": 0}, {"snippet_id": 5547, "code": ".locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in", "label": 0}, {"snippet_id": 73527, "code": " Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request,", "label": 0}, {"snippet_id": 45916, "code": " django.http import HttpResponse from django.core.paginator import Paginator from dashboard.models import * from dashboard.forms import(DataGroupForm, ExtractionScriptForm, CleanCompDataForm, create_detail_formset", "label": 1}, {"snippet_id": 16402, "code": ") return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))) else: return HttpResponseRedirect(reverse('create_games', args=(tournament_id, r.number()))) return render(request,", "label": 1}, {"snippet_id": 60827, "code": " check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self.pid)", "label": 0}, {"snippet_id": 10462, "code": ".lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers", "label": 0}, {"snippet_id": 77001, "code": " projections _LAYER_ARG_NAMES={ \"ImageryMaps\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"}, \"VectorMapsRaster\":{ \"x\": \"col\", \"y\": \"row\", \"z\": \"level\"}, \"ImageryMapsMercator\":{ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\"} } _SERVER_DEF_URL", "label": 0}, {"snippet_id": 50766, "code": "): self.condition_sets.append(condition_set) def set_default(self, enabled_by_default): self.is_enabled_by_default=enabled_by_default def set_optional(self, optional): self.is_optional=optional def test_conditions", "label": 0}, {"snippet_id": 51673, "code": "{ 'endpoint': endpoint, 'params': params, 'method': method } ] } } script='' if method=='GET': script=createGetScript(endpoint, params) return scope, script def genSI(endpoint, params, method): scope={", "label": 0}, {"snippet_id": 7115, "code": " by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License", "label": 0}, {"snippet_id": 67404, "code": " from.forms import EventSearchForm, AttributeSearchForm from datetime import datetime, timezone, timedelta class EventListView(PaginationMixin, ListView): model=Event template_name='threat/event_list.html", "label": 0}, {"snippet_id": 33556, "code": " test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self", "label": 0}, {"snippet_id": 50, "code": " gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from", "label": 0}, {"snippet_id": 19528, "code": ":{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles[log_filename", "label": 1}, {"snippet_id": 56189, "code": "-redirect'), 'token=ABXZ')) return self def then_response_should_be_a_redirect_to_app_deeplink_with_params(self): assert self.response.status_code==302 assert self.response['Location']=='{}{}?token=ABXZ", "label": 0}, {"snippet_id": 49807, "code": "' in session) and(not 'social' in session): return \"\", 401 if 'email' in session: email=session['email'] elif 'social' in session: email=session['social'] file=request.files['file'] filename=\"\" if file", "label": 0}, {"snippet_id": 57469, "code": " if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) if request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if", "label": 0}, {"snippet_id": 39593, "code": " doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models.CASCADE, limit_choices_to", "label": 0}, {"snippet_id": 19289, "code": "\"Run on arbitrary function on the worker.\"\"\" (driver_id, serialized_function, run_on_other_drivers)=self.redis_client.hmget( key,[\"driver_id\", \"function\", \"run_on_other_drivers\"]) if(utils.decode(run_on_other_drivers", "label": 0}, {"snippet_id": 20097, "code": " task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients) sharded_keys=[", "label": 0}, {"snippet_id": 81816, "code": " created.short_url=f'{request.get_host()}/{short_url}' created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success", "label": 0}, {"snippet_id": 16088, "code": " tournament.forms import BasePlayerRoundFormset from tournament.forms import BasePowerAssignFormset from tournament.forms import GamePlayersForm from tournament.forms import GameScoreForm from tournament", "label": 0}, {"snippet_id": 8692, "code": " the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter", "label": 0}, {"snippet_id": 76504, "code": " str( (user_width, user_height))) im_user=im_true.resize((user_width, user_height), Image.ANTIALIAS) return im_user def _FetchTiles(rect_of_tiles, zoom_level, layer_properties): \"\"\"Fetches all the tiles", "label": 0}, {"snippet_id": 26320, "code": " a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process", "label": 0}, {"snippet_id": 40404, "code": "=True)) if len(doc_text_ids) < 100 and len(doc_text_ids) > 0: texts=ExtractedText.objects.filter(pk__in=doc_text_ids) elif len(doc_text_ids) >=100: random_20=math.ceil(len(doc_text_ids)/5) shuffle(doc_text_ids", "label": 0}, {"snippet_id": 57545, "code": "']=form return render(request, 'transactions/transaction_pay.html', extra_context) def transactions_open(request, *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect", "label": 0}, {"snippet_id": 36536, "code": "'//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct().count() self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s", "label": 0}, {"snippet_id": 82755, "code": " info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s", "label": 0}, {"snippet_id": 33509, "code": "='DTXSID9022528': ethylparaben_stats=e self.assertEqual( 2, ethylparaben_stats['dds_n'], 'There should be 2 datadocuments associated with ethylaraben') self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 23110, "code": " is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None", "label": 0}, {"snippet_id": 68692, "code": "==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index') def expand_url(request): url=request.GET.get('url', None) exurl=expand(url) while exurl", "label": 0}, {"snippet_id": 80974, "code": " partner=http.request.env.user.partner_id partner_id=int(partner.id) if event_is_participating: for registration in event.registration_ids: for partner in registration.partner_id: if partner.id==partner_id", "label": 0}, {"snippet_id": 65576, "code": " builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/create_database.ui\") headerbar=builder.get_object(\"headerbar\") UnlockDatabase(self, self.create_tab(tab_title, headerbar), filepath", "label": 0}, {"snippet_id": 73536, "code": ", 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http", "label": 0}, {"snippet_id": 72971, "code": ": PositionsViewText, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] }) @login_required(login_url='/login/', redirect_field_name=None) def position", "label": 0}, {"snippet_id": 36281, "code": " response_html.xpath('string(/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=", "label": 0}, {"snippet_id": 58109, "code": ".STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding", "label": 1}, {"snippet_id": 150, "code": ").replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 5565, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 14986, "code": "(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', '', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts[", "label": 0}, {"snippet_id": 6418, "code": "') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: logger.error('Invalid google apps domain') return False if not id_token.get('email_verified', False) and \\ self.app.config['OIDC_REQUIRE_VERIFIED_EMAIL'", "label": 0}, {"snippet_id": 14899, "code": " json.load(open(filename)) @app.route('/') def view_home(): return render_template('home.html') @app.route('/models') def view_models(): models=load_json('models.json') return render_template('models.html'", "label": 0}, {"snippet_id": 57423, "code": "'attachment; filename=\"{}.pdf\"'.format(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request", "label": 0}, {"snippet_id": 63955, "code": " \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config", "label": 0}, {"snippet_id": 46657, "code": ".user, initial=initial_values) if form.is_valid(): datagroup=form.save() info=[x.decode('ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info) good_fields=['filename','title'", "label": 0}, {"snippet_id": 45566, "code": " context['edit_text_form']=ParentForm() return render(request, template_name, context) @login_required() def save_doc_form(request, pk): '''Writes changes to the data document form The request object should", "label": 0}, {"snippet_id": 4011, "code": " %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 22663, "code": ": t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t.daemon=True t.start() def _periodically_flush_profile_events(self): \"\"\"Drivers run this as", "label": 1}, {"snippet_id": 41263, "code": " that each detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all(): for ex_child in et.fetch_extracted_records(): child_model", "label": 1}, {"snippet_id": 77128, "code": " server_layer_def[\"projection\"]==\"mercator\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps\") tile_arg_names=_LAYER_ARG_NAMES", "label": 0}, {"snippet_id": 3351, "code": " 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string", "label": 0}, {"snippet_id": 5042, "code": "/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client", "label": 0}, {"snippet_id": 43754, "code": "*[@id=\"approve\"]').click() et.refresh_from_db() self.assertTrue( et.qa_checked, 'The qa_checked attribute should be True') def test_datadoc_add_extracted(self): ''' Test that when a datadocument has no", "label": 0}, {"snippet_id": 43749, "code": " Notes') self.browser.find_element_by_xpath('//*[@id=\"approve\"]').click() et.refresh_from_db() self.assertTrue( et.qa_checked, 'The qa_checked attribute should be True') def test_datadoc_add_extracted(self)", "label": 0}, {"snippet_id": 2989, "code": "='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return", "label": 0}, {"snippet_id": 77679, "code": " not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource={ \"id", "label": 0}, {"snippet_id": 18326, "code": ".find_one({'email':self.email}) \t\tif(document_email!=None): \t\t\terror=\"Email exists already\" \t\treturn error \t\"\"\" do_insert(): \tForms a document of the username, the email, and the hashed password \tand using", "label": 1}, {"snippet_id": 27376, "code": " to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage", "label": 0}, {"snippet_id": 59042, "code": " IntegrityError: return{ 'success': False, 'message': 'You already have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs", "label": 0}, {"snippet_id": 42169, "code": " extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-trash\"></span>' self", "label": 0}, {"snippet_id": 75813, "code": " ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log=logging.getLogger(__name__) HTTP_STATUS_CHOICES", "label": 0}, {"snippet_id": 83389, "code": " _('The title %(title)s is reserved for redirects or old links.'), params={'title': title},) return title def clean(self): super(ArticleForm, self).clean() kw={} if self.cleaned_data['action']=='create", "label": 1}, {"snippet_id": 37437, "code": " Meta: model=Product fields=['title', 'manufacturer', 'brand_name', 'size', 'color', 'model_number', 'short_description', 'long_description'] class ProductViewForm(ProductForm): class Meta(ProductForm.Meta", "label": 0}, {"snippet_id": 53379, "code": " exec_test() else: exec(code, module.__dict__) out=None except threads.ThreadAbortError: out={'success': False} except UserAbortError: out=None except Exception as error: out=render_error(project, error", "label": 0}, {"snippet_id": 78858, "code": "(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data", "label": 0}, {"snippet_id": 20920, "code": ".PROCESS_TYPE_REDIS_SERVER]=( process_infos) def start_log_monitor(self): \"\"\"Start the log monitor.\"\"\" stdout_file, stderr_file=new_log_monitor_log_file() process_info=ray.services.start_log_monitor( self", "label": 0}, {"snippet_id": 56212, "code": " test_when_called_redirect_view_redirects_to_apps_url(self): RedirectLoginEmailTestCase.ScenarioMaker() \\ .when_call_login_email_redirect() \\ .then_response_should_be_a_redirect_to_app_deeplink_with_params() class ScenarioMaker", "label": 0}, {"snippet_id": 81598, "code": " class Partner(models.Model): _name='res.partner' _inherit=['res.partner'] fit_subscriptions=fields.One2many(comodel_name='fit.subscription', inverse_name='subscription_partner', string='Inschrijving',", "label": 0}, {"snippet_id": 41911, "code": ".dg.pk}/') self.assertEqual(response.context['bulk'], 1, 'Not all DataDocuments linked to Product, bulk_create needed') self.assertIn('Bulk Create', response.content.decode(), \"Bulk create button should", "label": 0}, {"snippet_id": 25721, "code": "(bool): If true, a handler will be registered to shutdown the processes started here when the Python interpreter exits. \"\"\" self.all_processes={} ray_params.update_if_absent( node_ip_address=ray.services", "label": 0}, {"snippet_id": 48394, "code": "=20 paginator=Paginator(documents, npage) page=request.GET.get('page') page=1 if page is None else page docs_page=paginator.page(page) return render(request, template_name,{'documents':docs_page, 'datagroup", "label": 0}, {"snippet_id": 15002, "code": "['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:', name): attrs=name.split(',') (ts_name, model_name, ts_author", "label": 0}, {"snippet_id": 47895, "code": " csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error(request,\"Uploaded file", "label": 0}, {"snippet_id": 16837, "code": "/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset}) gp.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) else: r.game_set", "label": 0}, {"snippet_id": 50399, "code": " import subprocess import shutil import time import ctypes import datetime VERSION=5 DEFAULT_STEPS=\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def", "label": 0}, {"snippet_id": 38167, "code": "(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj): return u\", \".join(o", "label": 0}, {"snippet_id": 39705, "code": " text object belongs determines which QA index it will use. \"\"\" group_type_code=self.data_document.data_group.group_type.code if group_type_code in['CP','HH']: return reverse('qa_chemicalpresence_index')", "label": 0}, {"snippet_id": 62397, "code": " successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-chpass) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info", "label": 0}, {"snippet_id": 11193, "code": " \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline", "label": 0}, {"snippet_id": 49706, "code": "' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) session['currentFile']=filename try: with open(filepath) as f: editor_content", "label": 0}, {"snippet_id": 38919, "code": "(self): return self.datadocument_set.filter(matched=True).count() def all_matched(self): return all(self.datadocument_set.values_list('matched', flat=True)) def all_extracted(self): return all(self.datadocument_set", "label": 0}, {"snippet_id": 21167, "code": "._redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, autoscaling_config=self._ray_params.autoscaling_config, redis_password=self._ray_params.redis_password) assert ray_constants", "label": 0}, {"snippet_id": 22036, "code": ", attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory where the", "label": 0}, {"snippet_id": 43350, "code": "').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 53274, "code": " bool): \"\"\" :param on: :return: \"\"\" my_thread=threading.current_thread() if isinstance(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects.Project', step: 'projects", "label": 0}, {"snippet_id": 3563, "code": " path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code", "label": 0}, {"snippet_id": 81531, "code": "._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event existence: ' +old_repeating_event.name +'", "label": 0}, {"snippet_id": 55760, "code": "): \tdef __init__(self,file,number,text): \t\tself.file=file \t\tself.number=number \t\tself.text=text class File(FSItem): \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef", "label": 1}, {"snippet_id": 69418, "code": " if os.path.exists(config_path): with open(config_path, 'r') as f: config=yaml.load(f) else: config={} config['users']=config.get('users',{}) config['users']['admin']=list(admins) with open(config_path", "label": 0}, {"snippet_id": 59557, "code": ".config(\"sql_time_limit_ms\") self.page_size=self.config(\"default_page_size\") if self.plugins_dir: for filename in os.listdir(self.plugins_dir): filepath=os.path.join(self.plugins_dir, filename) mod=module_from_path", "label": 0}, {"snippet_id": 2374, "code": "\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots", "label": 0}, {"snippet_id": 12388, "code": "']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise", "label": 0}, {"snippet_id": 20309, "code": " local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info.get(\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split", "label": 0}, {"snippet_id": 74398, "code": " EVAL_ACTION_TYPE=\"EDIT\" def dispatch(self, request, *args, **kwargs): self._dispatch_processing() return super().dispatch(request, *args, **kwargs) def _rendering_done_hook(self): self.eval_action(\"REVIEW\"", "label": 0}, {"snippet_id": 5600, "code": "[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5", "label": 0}, {"snippet_id": 5038, "code": "\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 28609, "code": ". runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources", "label": 0}, {"snippet_id": 2910, "code": "): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect(self.failure_url) def", "label": 0}, {"snippet_id": 17967, "code": " db.session.add(user) db.session.commit() flask.g.user=user return flask.redirect('/profile') return flask.render_template('profile.html', form=form) def redirect_url(): home_url=flask.url_for('main.home", "label": 1}, {"snippet_id": 18622, "code": " inside the database if the \tdocument exists, returns None or the error message. \t\"\"\" \tdef check_database(self): \t\tph=PasswordHasher() \t\terror=None \t\tdocument_username=sync_db.users.find_one({'username':self", "label": 1}, {"snippet_id": 63163, "code": "())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, 'token': token, 'nonce': nonce, 'ts': timestamp } with", "label": 0}, {"snippet_id": 22887, "code": ".) as prof:\", we can call \"prof.set_attribute\" inside the block. \"\"\" self.start_time=time.time() return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred", "label": 0}, {"snippet_id": 51757, "code": "): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url] else: self.scope=scope self.count +=1 def saveScript(self,script): script_name='result/'+self.cate_str+'_attack'+str(self", "label": 0}, {"snippet_id": 59201, "code": " futures from pathlib import Path from markupsafe import Markup from jinja2 import ChoiceLoader, Environment, FileSystemLoader, PrefixLoader from sanic import Sanic, response from sanic.exceptions import", "label": 0}, {"snippet_id": 73008, "code": ": if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html'", "label": 0}, {"snippet_id": 15030, "code": " series' ts['ts_name']=ts_name ts['ts_author']=ts_author ts['model_name']=model_name if re.search('input,source_type:output', name): source_model_name, rest=source[1], source[2:] ts['source_model_name']", "label": 0}, {"snippet_id": 18970, "code": ":dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle root dispatching based on role.\"\"\" def get_redirect_url(self): \"\"\"Find proper next hop.", "label": 1}, {"snippet_id": 50596, "code": ". ''' if platform.system()=='Windows': return WindowsUserLock(name) return PosixUserLock(name) def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32", "label": 0}, {"snippet_id": 65795, "code": " close_image=Gtk.Image.new_from_gicon(icon, Gtk.IconSize.BUTTON) close_button=Gtk.Button() close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button.connect(\"clicked\", self", "label": 0}, {"snippet_id": 77684, "code": "='0 bytes' else default_size if 'name' in resource: name=resource['name'] if 'description' in resource: description=resource['description'] or name update_resource={ \"id\": resource['id'], \"size\": size,", "label": 0}, {"snippet_id": 60018, "code": ", \"tables\": inspect_tables(conn,(self.metadata(\"databases\") or{}).get(name,{})) } except sqlite3.OperationalError as e: if(e.args[0]=='no such module: VirtualSpatialIndex'): raise click.UsageError( \"It", "label": 0}, {"snippet_id": 18067, "code": "=user, text=flask.render_template('email/reset.txt', user=user), html=flask.render_template('email/reset.html', user=user), ) email.send_email(email_msg) def send_password_reset_request_email(user): ''", "label": 0}, {"snippet_id": 76835, "code": " Args: url: the exact url of the tile to fetch. Returns: The tile bitmap. \"\"\" try: fp=urllib.urlopen(url) f=StringIO.StringIO(fp.read()) im_tile=Image.open(f) im_tile.load() except IOError, e: im_tile=None", "label": 1}, {"snippet_id": 4305, "code": "'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection", "label": 0}, {"snippet_id": 8649, "code": " unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods", "label": 0}, {"snippet_id": 76275, "code": ", 0) _OPAQUE_ALPHA=(255,) _TRANSPARENT_ALPHA=(0,) _ALPHA_THRESHOLD=128 ALL_WHITE_PIXELS=(255, 255, 255) def ProduceImage(layer_properties, user_log_rect, user_width, user_height): \"\"\"High-level production", "label": 0}, {"snippet_id": 5379, "code": " User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response", "label": 0}, {"snippet_id": 28505, "code": ": if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs. If it is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str", "label": 0}, {"snippet_id": 31038, "code": "['name'] if request.form['description']: editgrudge.description=request.form['description'] if request.form['processed']: editgrudge.processed=request.form['processed'] if request.form['takeaway']: editgrudge", "label": 0}, {"snippet_id": 23833, "code": ": bytes_in_kilobyte=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes", "label": 0}, {"snippet_id": 76458, "code": "=_SetTransPixelToBgcolor(im_tile, bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\", str(tilepixel_rect)) offset_within_tiled_image=geom.Pair( tilepixel_rect.x0 %", "label": 0}, {"snippet_id": 59163, "code": ".format(invite_email, invite_domain) ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{", "label": 0}, {"snippet_id": 83671, "code": " article.\"\"\" def __init__(self, title, request, message_template=None): self.title=title self.user_ip=get_real_ip(request) self.created_at=datetime.now() if message_template is None: message_template=(", "label": 0}, {"snippet_id": 58647, "code": ") if Invite.objects.filter(instructor=instructor).exists(): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy", "label": 1}, {"snippet_id": 13392, "code": ".models import UserProfile from student.views import register_user as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth", "label": 0}, {"snippet_id": 24170, "code": ": the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t", "label": 1}, {"snippet_id": 12090, "code": "(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags':", "label": 0}, {"snippet_id": 36002, "code": " blank=True, default='') description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product", "label": 0}, {"snippet_id": 61066, "code": " status dictionary. :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running", "label": 1}, {"snippet_id": 48692, "code": " product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0]", "label": 0}, {"snippet_id": 74050, "code": " import reverse, reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core.reporting import report_delivery from callisto_core", "label": 0}, {"snippet_id": 12871, "code": " api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\")", "label": 0}, {"snippet_id": 65168, "code": "') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except", "label": 0}, {"snippet_id": 66341, "code": ".set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self, widget): password_unlock_entry=self.builder.get_object(\"password_unlock_entry\") if password_unlock_entry", "label": 1}, {"snippet_id": 32323, "code": ".ttype==TokenType.EOF: break class Parser: ''' Parses a stream of tokens into an Abstract Syntax Tree for later execution. Args: tokens: The stream of tokens. ''' def __init__(self, tokens): self.tokens", "label": 0}, {"snippet_id": 18732, "code": "(tornado.web.RequestHandler): \tdef get(self): \t\tself.render('index.html') \"\"\" PostLoginHandler(): Class that handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tChecks if", "label": 1}, {"snippet_id": 23986, "code": " a thread-safe proxy for a given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a", "label": 0}, {"snippet_id": 15785, "code": "): run_form=get_run_form() run_form[field].append_entry() commands=get_commands(run_form) set_form_defaults(run_form, commands) return json.dumps({ 'commands': commands, 'html': render_template('run_form", "label": 0}, {"snippet_id": 56046, "code": "'Location']=link return response def profile_redirect(request, username): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: real_link='{}{}/{}'.format(settings.PUBLIC_DOMAIN, PROFILE_PATH, username)", "label": 0}, {"snippet_id": 10236, "code": " 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages", "label": 0}, {"snippet_id": 56616, "code": "\\ .then_response_should_be_json( '{\"applinks\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID", "label": 0}, {"snippet_id": 51842, "code": ".route(\"/\") def index(): \"\"\"Return index(homepage).\"\"\" logged_in=session.get(\"is_logged_in\") return render_template(\"home.html\") @app.route(\"/register\", methods=[\"POST\"]) def make_new_user(): \"\"\"Validate", "label": 0}, {"snippet_id": 75562, "code": " if not candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis", "label": 0}, {"snippet_id": 58231, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.INTRODUCTION_INTRO, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSE, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 33414, "code": "='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n']) self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects.filter", "label": 0}, {"snippet_id": 2340, "code": "'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]", "label": 0}, {"snippet_id": 58639, "code": " Lesson.objects.filter(addedBy=instructor.user).exists(): update_onboarding_step(onboarding.STEP_5, instructor.user_id) if Invite.objects.filter(instructor=instructor).exists(): update_onboarding_step(onboarding", "label": 1}, {"snippet_id": 22115, "code": " by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the raylet process. temp_dir(str): If provided, it will specify the root temporary directory for the Ray", "label": 0}, {"snippet_id": 4832, "code": "'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/", "label": 0}, {"snippet_id": 54665, "code": " \t\t\t\t\tprint attrs[\"number\"] \t\t\t\t\tprint getText(problem.childNodes) \t\tself.assignments=map(Assignment,self.assignments) \t\tself.book_editions=defaultdict(list) \t\tfor assignment in self.assignments: \t\t\tself", "label": 1}, {"snippet_id": 46108, "code": " form=include_extract_form(dg) context['all_documents']=dg.datadocument_set.get_queryset() context['extract_form']=form context['msg']='Matching records uploaded successfully.' if request.method=='POST", "label": 0}, {"snippet_id": 42056, "code": " DataDocuments, no bulk_create needed.') product=ProductDocument.objects.get(document=doc).product self.assertEqual(product.title, 'unknown', 'Title should be unknown in bulk_create') self.assertEqual(product.upc", "label": 0}, {"snippet_id": 58983, "code": " send_mail(self, request, view): try: context=Context({ 'invite': self, 'current_site': Site.objects.get_current(request) }) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj", "label": 0}, {"snippet_id": 10173, "code": " if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html',{ 'disable_courseware_js", "label": 0}, {"snippet_id": 67996, "code": ", ListView): model=Event template_name='threat_hunter/event_list.html' context_object_name='events' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return", "label": 0}, {"snippet_id": 1753, "code": " def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 48947, "code": "'product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm(request.POST or None, instance=p) tagform['tags'].label='' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags", "label": 0}, {"snippet_id": 58562, "code": " get_onboarding_percentage from core.common import onboarding from django.conf import settings class Command(BaseCommand): help='Onboarding preprocessing' def handle(self, *args, **options): for instructor in", "label": 1}, {"snippet_id": 24507, "code": "\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename]=[] def check_log_files_and_push_updates(self): \"\"\"Get any changes to the log files", "label": 1}, {"snippet_id": 9487, "code": " reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided.\")) def update_context_for_enterprise(request", "label": 0}, {"snippet_id": 59719, "code": " is None: return None return plugins.get(plugin_name) def app_css_hash(self): if not hasattr(self, \"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root), \"datasette/static", "label": 0}, {"snippet_id": 7511, "code": " import datetime import pytz from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required", "label": 0}, {"snippet_id": 62079, "code": ".headers['Server']) if 'nginx' in server_header or 'apache' in server_header: return False else: return True def validate_server_version(page): version_regex=re.compile(r'\\d+.\\d+') if 'Server' not in page", "label": 0}, {"snippet_id": 43669, "code": "))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value", "label": 0}, {"snippet_id": 53993, "code": " try: contents=self.stdout_interceptor.read_all() except Exception as err: contents='' return render_texts.preformatted_text(contents) def flush_stdout(self): \"\"\" Empties \"\"\" try: contents=self.stdout_interceptor", "label": 1}, {"snippet_id": 81161, "code": ", 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner', '=', partner", "label": 0}, {"snippet_id": 47661, "code": " where a product is defined as a product entry in Factotum.\" \"\"\" pucs_n=DSSToxLookup.objects.filter(sid__in=dtxs).\\ annotate(pucs_n=Count('curated_chemical__extracted_text__data_document__product__puc')).\\", "label": 0}, {"snippet_id": 79244, "code": ": return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization", "label": 0}, {"snippet_id": 8979, "code": ".shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from", "label": 0}, {"snippet_id": 12909, "code": " } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest", "label": 0}, {"snippet_id": 9225, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept", "label": 0}, {"snippet_id": 16573, "code": ").count(), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected", "label": 0}, {"snippet_id": 71145, "code": "(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id !=session.user_id: session=models.Session.upgrade_to_user_session( session_id, session.user_id", "label": 0}, {"snippet_id": 2933, "code": "=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): ", "label": 0}, {"snippet_id": 64645, "code": "'object', 'oct', 'ord', 'OSError', 'OverflowError', '__package__', 'PendingDeprecationWarning', 'PermissionError', 'pow', 'print', 'ProcessLookupError', 'property', 'range', 'RecursionError', 'ReferenceError", "label": 0}, {"snippet_id": 75533, "code": " @login_required def view_file(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) if candidate.person.netid !=request.user.username: if not request.user.has_perm('etd_app.change_candidate", "label": 0}, {"snippet_id": 57115, "code": ".get('concept_form', None) concept_class=concept_form._meta.model transaction_code=kwargs.get('transaction_code', None) if transaction_code: transaction=get_transaction_from_kwargs(**kwargs) return concept_class", "label": 0}, {"snippet_id": 51024, "code": "._disabled_options=set(s[1:] for s in steps if s.startswith(\"-\")) self._enabled_options=set(s[1:] for s in steps if s.startswith(\"+\")) self._enabled_options=self._enabled_options.union( s for s in steps if", "label": 0}, {"snippet_id": 19012, "code": " user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==\"None\": if request.user.role==\"SimpleUsers\": topredir=request.localconfig", "label": 1}, {"snippet_id": 63014, "code": ".app.config.get('PERMANENT_SESSION_LIFETIME')), path=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests", "label": 0}, {"snippet_id": 70766, "code": "/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 3736, "code": "'policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"", "label": 0}, {"snippet_id": 23754, "code": " output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return", "label": 0}, {"snippet_id": 36647, "code": " django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models import * from dashboard", "label": 0}, {"snippet_id": 42448, "code": ".models import QAGroup, ExtractedText class ExtractedQaTest(TestCase): def setUp(self): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_qa_group_creation", "label": 0}, {"snippet_id": 46908, "code": "'groups': groups} return render(request, template_name, context) @login_required() def data_group_update(request, pk, template_name='data_group/datagroup_form.html'): datagroup=get_object_or_404(DataGroup", "label": 0}, {"snippet_id": 37680, "code": "'population_gender', 'population_age', 'population_other', 'occupation', 'facility'] class ExtractedHHDocEditForm(ExtractedHHDocForm): class Meta(ExtractedHHDocForm.Meta): fields=ExtractedHHDocForm.Meta", "label": 0}, {"snippet_id": 37426, "code": " **kwargs) self.fields['return_url'].widget=forms.HiddenInput() class ProductForm(forms.ModelForm): required_css_class='required' class Meta: model=Product fields=['title', 'manufacturer', 'brand_name'", "label": 0}, {"snippet_id": 50655, "code": "=process.communicate() exitcode=process.wait() if exitcode !=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode) return eval(stdout.strip()) def default_platform(): if platform.system()", "label": 0}, {"snippet_id": 39007, "code": "): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy\" property.", "label": 0}, {"snippet_id": 39870, "code": "=True, validators=[validate_wf_analysis]) upper_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) script=models.ForeignKey(to=Script", "label": 0}, {"snippet_id": 37618, "code": ".__init__(*args, **kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name'", "label": 0}, {"snippet_id": 20816, "code": " name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path): \"\"\"Prepare the socket file for raylet and plasma. This method helps to prepare a socket file. 1. Make the directory if", "label": 0}, {"snippet_id": 66119, "code": ".unlock_database() def unlock_database(self): self.builder=Gtk.Builder() self.builder.add_from_resource(\"/run/terminal/KeepassGtk/unlock_database.ui\") self.set_headerbar() self.assemble_stack() self.connect_events()", "label": 0}, {"snippet_id": 39370, "code": " return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def indexing(self): obj=ExtractedChemicalIndex( meta={'id': self", "label": 0}, {"snippet_id": 75220, "code": ".POST) committee_member_form=CommitteeMemberForm(request.POST) if person_form.is_valid() and committee_member_form.is_valid(): person=person_form.save() committee_member=committee_member_form.save(commit", "label": 0}, {"snippet_id": 5923, "code": ", None) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_NAME', 'oidc_id_token') app.config.setdefault('OIDC_ID_TOKEN_COOKIE_TTL', 7 * 86400) app.config.setdefault('OIDC_ID_TOKEN_COOKIE_SECURE', True) app.config", "label": 0}, {"snippet_id": 46316, "code": ".extracted=True doc.save() text.save() record.save() fs=FileSystemStorage(store) fs.save(str(dg)+'_extracted.csv', csv_file) context['msg']=(f'{len(good_records)} extracted records ' 'uploaded successfully", "label": 0}, {"snippet_id": 25418, "code": "=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}\".format(num_flushed)) ray.experimental", "label": 0}, {"snippet_id": 44510, "code": ".objects.create(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group for Test', description='Testing...', data_source=ds, download_script=script, downloaded_by=user, downloaded_at", "label": 0}, {"snippet_id": 2944, "code": "+expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session", "label": 0}, {"snippet_id": 28383, "code": ".get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3,", "label": 0}, {"snippet_id": 68951, "code": " Km6V8TBG3flmFlC3DWQfNNFwn5+pWSB8WHG4bTA5RyYEEYfpbekMtdoWW/Ro8Kmh 41nuxZDSuBJhDeFIp0ccnN2Lp1o6XfIeDYPegyEPSSZqrudfqLrSZhStDlJgXjea JjW6UP6txPtYaaila9/Hn6vF87AQ5bR2dEWB/xRJzgNwRiax7KSU0xca6xAuf+TD xCjZ5pp2JwdCjquXLTmUnbIZ9LGV54UZ", "label": 0}, {"snippet_id": 4496, "code": "('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 33491, "code": "'DTXSID9022528') self.assertEqual(1, ethylparaben_stats['pucs_n']) def test_dtxsid_dds_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e", "label": 0}, {"snippet_id": 77922, "code": ".model as model import ckan.plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class", "label": 0}, {"snippet_id": 61150, "code": " comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the", "label": 0}, {"snippet_id": 80753, "code": "[action.isChecked() for action in self.lock_actions]): [action.setEnabled(False) for action in self.lock_actions] else: self.lock_all_action.setChecked(False) print(\"Couldn't lock all laser components.\"", "label": 0}, {"snippet_id": 79057, "code": " Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req) session", "label": 0}, {"snippet_id": 29394, "code": ") +str(current_user.user_id) return \"not logged in \" +str(current_user.is_authenticated) @auth.route('/logout') @login_required def logout(): logout_user() return redirect(url_for('auth.test')) @auth.route", "label": 1}, {"snippet_id": 31, "code": " from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve", "label": 0}, {"snippet_id": 61106, "code": ") self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class", "label": 0}, {"snippet_id": 41704, "code": ".get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm", "label": 0}, {"snippet_id": 20011, "code": " dynamic_resources) else: logger.warning( \"Monitor: \" \"could not find ip for client{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from", "label": 0}, {"snippet_id": 44847, "code": " dashboard.models import * from dashboard.forms import create_detail_formset from dashboard.tests.loader import load_model_objects class HabitViewTest(TestCase): multi_db=True def setUp(self): self.objects", "label": 1}, {"snippet_id": 39419, "code": " @property def true_chemname(self): if hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_chemname else: return None @property def sid(self): if hasattr", "label": 0}, {"snippet_id": 802, "code": " downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of", "label": 0}, {"snippet_id": 26896, "code": ". It will also kill these processes when Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the", "label": 0}, {"snippet_id": 46198, "code": " d=docs.get(pk=int(row['data_document_id'])) d.raw_category=row.pop('raw_category') wft=request.POST.get('weight_fraction_type', None) if wft: w='weight_fraction_type' row[w]=WeightFractionType.objects", "label": 0}, {"snippet_id": 80008, "code": " to be closed :type id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model", "label": 0}, {"snippet_id": 61632, "code": "=validate_server_version(page), csp_origin_only=validate_csp(page), mime_sniffing_blocked=validate_no_sniff(page), noopen_download=validate_download_options(page), xss_protection=validate_xss_protection", "label": 1}, {"snippet_id": 48290, "code": " filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item for", "label": 0}, {"snippet_id": 66192, "code": " password_unlock_stack_page=self.builder.get_object(\"password_unlock_stack_page\") keyfile_unlock_stack_page=self.builder.get_object(\"keyfile_unlock_stack_page\") composite_unlock_stack_page=self.builder.get_object", "label": 0}, {"snippet_id": 58569, "code": ": help='Onboarding preprocessing' def handle(self, *args, **options): for instructor in Instructor.objects.all(): try: course=Course.objects.get(id=settings.ONBOARDING_INTRODUCTION_COURSE_ID) except Course", "label": 1}, {"snippet_id": 54713, "code": "] \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tprob_id=(assignment.book_edition,assignment.chapter,problem.number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t", "label": 0}, {"snippet_id": 3936, "code": ".client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after", "label": 0}, {"snippet_id": 37391, "code": " document_type=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True) return_url=forms.CharField() class Meta: model=Product fields=['title', 'manufacturer', ", "label": 0}, {"snippet_id": 11664, "code": ", 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 50061, "code": " session['currentFile']=filename try: with open(filepath) as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException", "label": 0}, {"snippet_id": 27722, "code": " background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default", "label": 1}, {"snippet_id": 79313, "code": ".user_id, 'title': datarequest.title, 'description': datarequest.description, 'organization_id': datarequest.organization_id, 'open_time': open_time, 'accepted_dataset_id': datarequest.accepted_dataset_id", "label": 0}, {"snippet_id": 37396, "code": " queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True) return_url=forms.CharField() class Meta: model=Product fields=['title', 'manufacturer', 'brand_name', 'upc', 'size', 'color", "label": 0}, {"snippet_id": 4598, "code": "[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5", "label": 0}, {"snippet_id": 73666, "code": "', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') def parse_position_return_dictionary(create_position_form): return parse_upload(create_position_form.save", "label": 0}, {"snippet_id": 72908, "code": "'position_sort'] except KeyError: sort_by='-created' if request.method=='POST': if request.POST.get(\"sort-created\"): sort_by='-created' elif request.POST.get(\"sort-closed\"): sort_by='-date_closed' elif", "label": 1}, {"snippet_id": 68054, "code": " model=Hunt form_class=HuntForm template_name='threat_hunter/hunt_form.html' def get_success_url(self): self.object.run() return '/threat_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class", "label": 0}, {"snippet_id": 50617, "code": " vs100comntools=os.environ['VS100COMNTOOLS'] if vs100comntools is None: raise Exception(\"VS100COMNTOOLS is not set in environment.\") vsvars32=os.path.join(vs100comntools, 'vsvars32.bat') python=sys.executable", "label": 0}, {"snippet_id": 33732, "code": ".assertContains(response, 'Download Uncurated Chemicals') rc=RawChem.objects.filter(dsstox_id__isnull=True).first() response=self.client.get('/dl_raw_chems/') rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas", "label": 1}, {"snippet_id": 23089, "code": " message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id", "label": 0}, {"snippet_id": 31305, "code": "', 'social.pipeline.social_auth.auth_allowed', 'social.pipeline.social_auth.social_user', 'social.pipeline.user.get_username', 'social.pipeline.social_auth.associate_by_email', 'social.pipeline.user.create_user", "label": 0}, {"snippet_id": 63259, "code": " saml_config, }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config)", "label": 0}, {"snippet_id": 66483, "code": "=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_path=keyfile_unlock_select_button.get_label() try: self.database_manager=DatabaseManager(self.database_filepath, password=None, keyfile=keyfile_path", "label": 0}, {"snippet_id": 40601, "code": ".assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), 'The link to /qa/ must be in the logged-in navbar') found=resolve('/qa/extractionscript/') self.assertEqual(found.func, views", "label": 0}, {"snippet_id": 53687, "code": "\"\"\" self.bytes_buffer.seek(0) contents=self.bytes_buffer.read() self.bytes_buffer.truncate(0) self.bytes_buffer.seek(0) if contents is None: return '' return contents.decode(self.source_encoding) def write_both", "label": 1}, {"snippet_id": 11491, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return", "label": 0}, {"snippet_id": 54792, "code": "\tprint self.count_by_groups \t\t \tdef process_hwml(self): \t\tself.prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number", "label": 1}, {"snippet_id": 5832, "code": " don't mind making everyone log in again after a restart. \"\"\" pass class OpenIDConnect(object): \"\"\" @see: https://developers.google.com/api-client-library/python/start/get_started @see: https://developers", "label": 0}, {"snippet_id": 54842, "code": "\t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students", "label": 0}, {"snippet_id": 16, "code": " import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import", "label": 1}, {"snippet_id": 28190, "code": " not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to use. error_type(str): The type of the", "label": 0}, {"snippet_id": 13009, "code": " login/registration/third_party_auth. Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse", "label": 0}, {"snippet_id": 5317, "code": "/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self", "label": 0}, {"snippet_id": 8413, "code": " _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/', request.session), 'password_reset': _local_server_get", "label": 0}, {"snippet_id": 58307, "code": "\"<p>create_course</p>\", \"description\": \"create_course desc\", \"title\": \"create_course\" }, onboarding.CREATE_COURSELET:{ \"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\"", "label": 0}, {"snippet_id": 30115, "code": " database_setup import Grudget, Base, Grudge, User from flask import session as login_session import random import string from oauth2client.client import flow_from_clientsecrets from oauth2client.client import", "label": 0}, {"snippet_id": 13203, "code": " 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings", "label": 0}, {"snippet_id": 20658, "code": ".params.RayParams): The parameters to use to configure the node. head(bool): True if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web", "label": 0}, {"snippet_id": 9961, "code": " Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration", "label": 0}, {"snippet_id": 67258, "code": " HttpResponseRedirect(ip) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='ip/detail.html' def get_context_data(self, **kwargs): context=super(", "label": 1}, {"snippet_id": 70700, "code": " FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date,", "label": 1}, {"snippet_id": 70906, "code": "), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"", "label": 0}, {"snippet_id": 967, "code": " create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip('/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive", "label": 1}, {"snippet_id": 74025, "code": " names \"\"\" import logging import re import ratelimit.mixins from nacl.exceptions import CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied from django.http", "label": 0}, {"snippet_id": 29356, "code": " from flask_security import login_required from benwaonline.database import db from benwaonline.oauth import twitter from benwaonline.models import user_datastore, User from benwaonline.auth import auth", "label": 1}, {"snippet_id": 30897, "code": ",creator=creator) else: return render_template('showgrudge.html', grudges=grudges, id=grudget_id, grudget=grudget, creator=creator) @app.route('/grudget/<int:grudget_id>/grudge/new/', methods=['GET', 'POST']", "label": 0}, {"snippet_id": 44111, "code": "('cancel') self.assertEqual(btn.get_attribute(\"href\"), detail_url, \"User should go back to detail view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource", "label": 0}, {"snippet_id": 28563, "code": "\"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function", "label": 0}, {"snippet_id": 65850, "code": " else: self.container.set_show_tabs(False) def create_tab_title_from_filepath(self, filepath): return ntpath.basename(filepath) def close_tab(self, child_widget): page_num=self.container.page_num(child_widget", "label": 0}, {"snippet_id": 52396, "code": "): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None) phase_code", "label": 0}, {"snippet_id": 50255, "code": "(email) if user !=None: if check_password_hash(user.password, password): session['email']=email returnUrl=session.pop('return_url', None) if returnUrl: return redirect(returnUrl) else: return redirect('", "label": 0}, {"snippet_id": 57169, "code": "]=transaction extra_context['header']=gettext('Delete Transaction?') extra_context['message']=transaction.description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST':", "label": 0}, {"snippet_id": 24744, "code": "\nfrom __future__ import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import time import traceback import redis import ray", "label": 0}, {"snippet_id": 33794, "code": " 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first() rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc.raw_chem_name, rc.sid if rc.sid else '') rc_row", "label": 1}, {"snippet_id": 56394, "code": "']==url return self class RedirectProfileTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_profile(username='a_b", "label": 0}, {"snippet_id": 80984, "code": ".registration_ids: for partner in registration.partner_id: if partner.id==partner_id: _logger.info('Found existing registration, set state to cancelled.') registration.state='cancel' subscription_update_counter", "label": 0}, {"snippet_id": 66550, "code": "(\"composite_unlock_select_button\") filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text.add_mime_type(\"application/octet-stream\") filter_text.add_mime_type(\"application/x-keepass2\")", "label": 0}, {"snippet_id": 9816, "code": "\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider.skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm", "label": 0}, {"snippet_id": 3218, "code": ".failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration", "label": 0}, {"snippet_id": 14875, "code": " password) db_init() login_manager=LoginManager(app) login_manager.login_view='view_login' @login_manager.user_loader def load_user(user_id): return auth_get_user_by_id(user_id) def load_json(name): filename", "label": 0}, {"snippet_id": 45727, "code": " def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True)", "label": 0}, {"snippet_id": 42082, "code": " should be created for second Product') def test_upload_note(self): response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('Please limit upload to <600", "label": 0}, {"snippet_id": 16981, "code": " 'formset': formset} return render(request, 'rounds/seeded_games.html', context) @permission_required('tournament.add_game') def create_games(request, tournament_id, round_num): \"\"\"Provide a form to create", "label": 0}, {"snippet_id": 6985, "code": ") if user.reset_password(token, form.password.data): flash('Your password has been updated.') return redirect(url_for('auth.login')) else: return redirect(url_for('main.index')) return render_template(", "label": 0}, {"snippet_id": 44656, "code": "(extracted_text=extext, product_surveyed='Test Product Surveyed', prevalence='Continuous') return dotdict({'user':user, 'superuser':superuser, 'ds':ds, 'script':script, 'exscript':exscript, 'dg':dg, 'doc':doc", "label": 0}, {"snippet_id": 49854, "code": "'diagram' in request.referrer: return redirect('/diagram?filename=%s'%filename) return redirect('/?filename=%s'%filename) flash(\"Invalid file\") return redirect('/openFile') @app.route('/save') def save()", "label": 0}, {"snippet_id": 64583, "code": "'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'delattr', 'DeprecationWarning', 'dict', 'dir', 'divmod', '__doc__', 'Ellipsis', 'enumerate', 'EnvironmentError", "label": 0}, {"snippet_id": 12782, "code": " _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response", "label": 0}, {"snippet_id": 44519, "code": " for Test', description='Testing...', data_source=ds, download_script=script, downloaded_by=user, downloaded_at=timezone.now(), group_type=gt, csv='register_records_matching.csv', url='https://www.epa.gov", "label": 0}, {"snippet_id": 26966, "code": " limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables). object_manager_port int: The port to use for the object", "label": 0}, {"snippet_id": 64987, "code": " +test_case try: expr=ast.parse(test_case, mode='eval') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) expr=None if not expr: raise ValueError('Failed to parse test case %d' ", "label": 0}, {"snippet_id": 67114, "code": "']=count context['attributes']=Attribute.objects.filter(Q(value__icontains=filehash)).order_by('-timestamp') count=context['attributes'].count() if count > 0: context['attributes_count']=count context[", "label": 0}, {"snippet_id": 37874, "code": ".type in['CO']: return False if dg.extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=[]): '''Returns the pair of", "label": 0}, {"snippet_id": 67772, "code": "') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q", "label": 0}, {"snippet_id": 76990, "code": "\"\" import json import logging import re from socket import gethostname import urllib2 import urlparse import wms.ogc.common.projections as projections _LAYER_ARG_NAMES={ \"ImageryMaps\":{ \"x\": \"x\", \"y\": ", "label": 1}, {"snippet_id": 22503, "code": " appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(", "label": 0}, {"snippet_id": 65158, "code": " !=name: fdef.name=name dock_points(deductions, 1, 'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions", "label": 0}, {"snippet_id": 41833, "code": "}/') self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.gt.code='UN' self.objects.gt.save() response=self.client", "label": 0}, {"snippet_id": 15433, "code": ".input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day", "label": 0}, {"snippet_id": 38396, "code": " import QAGroup from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.PUC import PUC, PUCToTag, PUCTag from.product_to_tag import ProductToTag from.product_to_puc import", "label": 0}, {"snippet_id": 20441, "code": "._config.heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis", "label": 0}, {"snippet_id": 9053, "code": " openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import", "label": 0}, {"snippet_id": 17732, "code": ".validate(): user=models.User.by_email(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if", "label": 0}, {"snippet_id": 30490, "code": " login_session['email'] del login_session['picture'] del login_session['user_id'] del login_session['provider'] flash(\"You have successfully been logged out.\") return redirect(url_for('showGrudgets')) else: flash(", "label": 0}, {"snippet_id": 48965, "code": ".get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' : puc", "label": 0}, {"snippet_id": 48381, "code": "/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get(", "label": 0}, {"snippet_id": 54100, "code": "'-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About Page ", "label": 0}, {"snippet_id": 40591, "code": "='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'), ", "label": 0}, {"snippet_id": 76043, "code": "' def get_full_path(self, filename, language=None, version_slug=None): \"\"\" Return a full path for a given filename. This will include version and language information. No protocol/domain is returned. \"", "label": 1}, {"snippet_id": 52035, "code": " SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[] invites_list=[]", "label": 0}, {"snippet_id": 50997, "code": " steps. \"all\" includes all steps. \"foo\" or \"+foo\" includes step foo. \"-foo\" excludes step foo, even if \"default\" or \"all\" is present. ''' steps=flatten_string_list(steps) steps=flatten_comma_list(steps", "label": 0}, {"snippet_id": 36286, "code": "/html/body/nav//a[@href=\"/\"]/text())'), 'The app name factotum should appear in the public navbar') self.assertNotIn('QA', response_html.xpath('string(/html/body/nav//a[@href=\"/qa/extractionscript/\"])'", "label": 0}, {"snippet_id": 2371, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" ", "label": 0}, {"snippet_id": 74841, "code": "', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person, degree_type=degree_type", "label": 0}, {"snippet_id": 39587, "code": "(max_length=500, null=True, blank=True) doc_date=models.CharField(max_length=25, null=True, blank=True) rev_num=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey", "label": 0}, {"snippet_id": 38888, "code": "' @property def is_hh(self): return self.type=='HH' def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs", "label": 0}, {"snippet_id": 63720, "code": " FOUND') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php?SAMLResponse=', response.location) def test_logout_service_startingIDP_no_subject_id(self): eppn='hubba-bubba", "label": 0}, {"snippet_id": 68339, "code": " data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today", "label": 0}, {"snippet_id": 2211, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 36740, "code": ".objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request", "label": 0}, {"snippet_id": 45392, "code": " if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET", "label": 0}, {"snippet_id": 71862, "code": "'TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, {'level': 'success', 'message':'TEST2'}, ]) msgs=req.get_messages", "label": 0}, {"snippet_id": 35167, "code": "\\ .filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).\\ filter(data_source__isnull=False).annotate(no_category", "label": 0}, {"snippet_id": 56387, "code": " self.response.status_code==302 assert self.response['Location']==url return self class RedirectProfileTestCase(TestCase): def test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase", "label": 0}, {"snippet_id": 21555, "code": ": \"\"\"Kill the raylet. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor", "label": 0}, {"snippet_id": 59078, "code": " passed parameters and user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email ", "label": 0}, {"snippet_id": 75662, "code": ",auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'] if item['type'] !='auth': text='%s(%s)' %(text", "label": 0}, {"snippet_id": 38214, "code": " @property def is_level_two(self): return not self.prod_fam is '' and self.prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self):", "label": 0}, {"snippet_id": 25403, "code": "(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy", "label": 0}, {"snippet_id": 59970, "code": ":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem %s\" % name) try: with sqlite3.connect( \"file", "label": 0}, {"snippet_id": 236, "code": " response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head", "label": 0}, {"snippet_id": 77472, "code": " needs to know about and use, to get tiles from a server. Args: server_url: URL of the server on which command to be executed. target_path: Target published point. Returns: The layers from the server definitions", "label": 0}, {"snippet_id": 37194, "code": ", **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'", "label": 0}, {"snippet_id": 57292, "code": "(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid: transaction.save() if form.cleaned_data['save_button'", "label": 0}, {"snippet_id": 70582, "code": "': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files", "label": 0}, {"snippet_id": 45766, "code": " model=ParentForm.Meta.model script=Script.objects.get(title__icontains='Manual(dummy)') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST", "label": 1}, {"snippet_id": 73386, "code": " ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm, ImportApplicationsText from.models import EmailAuthenticateToken, Position from screendoor.parseposter import parse_upload", "label": 1}, {"snippet_id": 66284, "code": ") keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_unlock_select_button.connect(\"clicked\", self.on_keyfile_unlock_select_button_clicked) composite_unlock_select_button", "label": 0}, {"snippet_id": 72240, "code": "])) old_export=ganesha_conf.update_export({ 'export_id': export_id, 'path': path, 'cluster_id': cluster_id, 'daemons': daemons, 'pseudo': pseudo, 'tag': tag, 'access_type': access_type, 'squash': squash", "label": 0}, {"snippet_id": 64776, "code": "(deductions, points, 'unable to execute function') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals, instr_locals) if not result: dock_points", "label": 1}, {"snippet_id": 9256, "code": " message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth", "label": 0}, {"snippet_id": 46877, "code": ".save() return redirect('data_group_detail', pk=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user", "label": 0}, {"snippet_id": 80626, "code": "=self.matisse.query('MOTBI:WL?', numeric_result=True)) if success: print(f\"Setting BiFi approximate wavelength to{target_wavelength} nm...\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot", "label": 0}, {"snippet_id": 20276, "code": "\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler=self", "label": 0}, {"snippet_id": 11871, "code": " from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 51892, "code": " displayname) q.add_to_db(new_user) user=q.get_user_by_email(email) h.update_session_for_good_login(user.u_id, user.displayname) session[\"new_user\"]=True flash(\"Account created!\") return redirect(\"/dashboard\"", "label": 0}, {"snippet_id": 7636, "code": ".core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student", "label": 0}, {"snippet_id": 1852, "code": "'\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath,", "label": 1}, {"snippet_id": 772, "code": " os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0,", "label": 0}, {"snippet_id": 24116, "code": " import redis import ray from ray import ray_constants from ray import cloudpickle as pickle from ray import profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports", "label": 1}, {"snippet_id": 10588, "code": " initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions", "label": 0}, {"snippet_id": 11467, "code": "'lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request", "label": 0}, {"snippet_id": 59667, "code": " table_metadata) search_list.append(self._metadata) if not fallback: search_list=search_list[:1] if key is not None: for item in search_list: if key in item: return item[key] return None else: m={} for", "label": 0}, {"snippet_id": 642, "code": "=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding", "label": 0}, {"snippet_id": 55936, "code": "'', status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, EMAIL_CONFIRMATION_PATH, request.GET.urlencode()) return response def login_redirect(request): response=HttpResponse(", "label": 0}, {"snippet_id": 22719, "code": " tasks, we may want profiling information to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls", "label": 1}, {"snippet_id": 37404, "code": ") class Meta: model=Product fields=['title', 'manufacturer', 'brand_name', 'upc', 'size', 'color'] def __init__(self, *args, **kwargs): super(ProductLinkForm, self).__init__(*args, **kwargs) self.fields", "label": 0}, {"snippet_id": 71174, "code": "): pass class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session=None if value: session=models.Session.get_by_value(value) if", "label": 0}, {"snippet_id": 55134, "code": ".getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self)", "label": 0}, {"snippet_id": 47264, "code": "/datasource_list.html'): datasources=DataSource.objects.all() ds_list, frm_list=[],[] for ds in datasources: frm_list.append(PriorityForm(request.POST or None, instance=ds)) registered=Count('datagroup__datadocument", "label": 0}, {"snippet_id": 955, "code": " index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath(path) path=path.lstrip", "label": 1}, {"snippet_id": 9472, "code": " if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request)", "label": 0}, {"snippet_id": 41260, "code": " test_fetch_extracted_records(self): ''' Confirm that each detail child object returned by the fetch_extracted_records function has the correct parent ''' for et in ExtractedText.objects.all(): for ex_child in", "label": 1}, {"snippet_id": 6860, "code": "['auth_token']=current_user.auth_token flash('Your password has been updated.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_password.html", "label": 0}, {"snippet_id": 233, "code": "(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html", "label": 0}, {"snippet_id": 50041, "code": "/diagram\") def diagram(): if 'filename' in request.args: filename=request.args['filename'] if('email' in session) or('social' in session): if 'email' in session: email=session['email'] elif 'social' in", "label": 0}, {"snippet_id": 72657, "code": " user) mail_sent=send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ", "label": 1}, {"snippet_id": 70695, "code": " posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist,", "label": 1}, {"snippet_id": 48884, "code": "=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment' pk=p2p.product.pk if referer=='product_detail", "label": 0}, {"snippet_id": 10076, "code": " unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods([", "label": 0}, {"snippet_id": 75676, "code": " text=item['auth'] if item['type'] !='auth': text='%s(%s)' %(text, item[index][0]) if item['idroot'] not in fast_ids: results.append({'id': '%s%s%s' %(item['idroot'], ID_VAL_SEPARATOR, item['auth']), 'text", "label": 0}, {"snippet_id": 72275, "code": ".daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id': '{cluster_id", "label": 0}, {"snippet_id": 17718, "code": ".redirect(redirect_url()) if payload is None: form=forms.PasswordResetRequestForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User.by_email(form.email.data.strip", "label": 0}, {"snippet_id": 68496, "code": " return render(request, 'twitter_hunter/index.html', context) class TweetsView(PaginationMixin, ListView): template_name='twitter_hunter/tweets.html' context_object_name='tws' paginate_by=30 def get_context_data", "label": 0}, {"snippet_id": 28811, "code": ".split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory(): \"\"\"Return the total amount of system memory in bytes. Returns: The total amount of system memory in bytes", "label": 0}, {"snippet_id": 1640, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll", "label": 0}, {"snippet_id": 68779, "code": "=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in", "label": 0}, {"snippet_id": 11425, "code": " commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete':", "label": 0}, {"snippet_id": 3795, "code": "=Client() self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects", "label": 0}, {"snippet_id": 45465, "code": " template_name='data_document/data_document_detail.html' doc=get_object_or_404(DataDocument, pk=pk,) code=doc.data_group.group_type.code edit=1 if doc.detail_page_editable else 0 ParentForm, ChildFormSet", "label": 0}, {"snippet_id": 21434, "code": " process.returncode)) if process_info.stdout_file is not None: with open(process_info.stdout_file, \"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None: with open", "label": 0}, {"snippet_id": 11035, "code": "=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo", "label": 0}, {"snippet_id": 9886, "code": " to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form", "label": 0}, {"snippet_id": 24991, "code": "\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data", "label": 0}, {"snippet_id": 75031, "code": "(db_keywords_info[kw].text) else: unsorted_user_keywords.append(kw) db_keywords=sorted([kw.text for kw in db_keywords_info.values()]) user_keywords=sorted([kw.split(ID_VAL_SEPARATOR)[-1] for kw in unsorted_user_keywords", "label": 0}, {"snippet_id": 71788, "code": "=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) auth_id='test:abc' user_info", "label": 0}, {"snippet_id": 247, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta", "label": 0}, {"snippet_id": 4901, "code": "/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301)", "label": 0}, {"snippet_id": 21535, "code": " the plasma store. Args: check_alive(bool): Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet", "label": 0}, {"snippet_id": 67783, "code": "=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(value__icontains=keyword)).order_by('-timestamp') return query def thirty_day_data(self): data=[", "label": 0}, {"snippet_id": 81170, "code": "([('subscription_type', '=', 'bc_montly'), ('subscription_partner', '=', partner.id)]) bc_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner", "label": 0}, {"snippet_id": 61911, "code": "): \"\"\"Scan for common analytics scripts anywhere in the page Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support.chartbeat.com/docs/ Quantcast: https:/", "label": 0}, {"snippet_id": 23648, "code": "(\"ray\") if type(logging_level) is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler", "label": 1}, {"snippet_id": 13499, "code": "( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass", "label": 1}, {"snippet_id": 52091, "code": ".team.desc} invites_list.append(invite_dict) return render_template('dashboard.html', teams_list=teams_list, invites_list=invites_list, displayname=user_object.displayname) else: return redirect(\"/\") @app", "label": 1}, {"snippet_id": 2672, "code": ".GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']:", "label": 0}, {"snippet_id": 45186, "code": " document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count", "label": 0}, {"snippet_id": 65775, "code": "() page_instance=ContainerPage(headerbar) tab_hbox=Gtk.HBox(False, 0) tab_label=Gtk.Label(title) tab_hbox.pack_start(tab_label, False, False, False) icon=Gio.ThemedIcon(name=\"window-close-symbolic\") close_image", "label": 0}, {"snippet_id": 63367, "code": " config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE': saml_config, 'NO_AUTHN_URLS':['^/test$'], }) return config def load_app(self, config): \"\"\" Called from the parent class, so", "label": 0}, {"snippet_id": 46875, "code": "() datagroup.save() return redirect('data_group_detail', pk=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm", "label": 0}, {"snippet_id": 75375, "code": " HttpResponseRedirect(reverse('review_candidates', kwargs={'status': 'all'})) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) def staff_view_candidates(request, status): if", "label": 0}, {"snippet_id": 39293, "code": " max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True)", "label": 0}, {"snippet_id": 13982, "code": "\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send", "label": 0}, {"snippet_id": 29539, "code": "%s already in use' % username) return redirect(url_for('auth.signup')) user=user_datastore.create_user(user_id=session['user_id'], username=username) user.oauth_token=session.pop('token') user.oauth_secret", "label": 0}, {"snippet_id": 68476, "code": ": query=Hunt.objects.order_by('id') query=query.annotate(count=Count('tweet')) return query def get(self, request): self.object_list=self.get_queryset(request) context=self.get_context_data() return render", "label": 0}, {"snippet_id": 41109, "code": "], 'document_type':[1], 'return_url' :['/datadocument/245401/']} response=self.client.post('/link_product_form/245401/', data=data) self.assertRedirects(response,'/datadocument/245401/') response=self.client", "label": 0}, {"snippet_id": 83467, "code": "'comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None:", "label": 0}, {"snippet_id": 38862, "code": "(self.group_type.code) @property def is_composition(self): return self.type=='CO' @property def is_habits_and_practices(self): return self.type=='HP' @property def is_functional_use(self): return self.type", "label": 0}, {"snippet_id": 51233, "code": " python(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args)", "label": 0}, {"snippet_id": 11382, "code": " detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"", "label": 0}, {"snippet_id": 68555, "code": " HuntCreateView(CreateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_form.html' def get_success_url(self): self.object.start() return '/twitter_hunter' class HuntUpdateView(UpdateView", "label": 0}, {"snippet_id": 23222, "code": ".__name__==\"cython_function_or_method\" return check_cython(obj) or \\ (hasattr(obj, \"__func__\") and check_cython(obj.__func__)) def is_function_or_method(obj): \"\"\"Check if an object is a function or method", "label": 0}, {"snippet_id": 57786, "code": "{onboarding.USER_ID: user_id} onboarding_data=c_onboarding_status(use_secondary=True).find_one(find_crit) if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{", "label": 0}, {"snippet_id": 14625, "code": "['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 59820, "code": ") if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view') def update_with_inherited_metadata", "label": 0}, {"snippet_id": 64369, "code": " relay_state=request.form['RelayState'] ) state.sync() location=get_location(http_info) session.clear() return redirect(location) current_app.logger.error('No SAMLResponse or SAMLRequest parameter found'", "label": 0}, {"snippet_id": 40756, "code": ") dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures(TestCase", "label": 0}, {"snippet_id": 72587, "code": "'account_created': format(CreateAccountFormText.account_created % user)}) return render(request, 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model(", "label": 0}, {"snippet_id": 78380, "code": " _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id': organization_id}) except Exception as e: log.warn(e) def", "label": 0}, {"snippet_id": 74223, "code": "\"No key in access request\" form_class=forms.ReportAccessForm access_form_class=forms.ReportAccessForm @property def access_granted(self): self._check_report_owner() try: passphrase=self.request.POST[\"key", "label": 0}, {"snippet_id": 31309, "code": " 'social.pipeline.social_auth.social_user', 'social.pipeline.user.get_username', 'social.pipeline.social_auth.associate_by_email', 'social.pipeline.user.create_user', 'social.pipeline.social_auth.associate_user", "label": 0}, {"snippet_id": 59091, "code": " Invite.email and user.email are equal, if they not -trying to check Invite.email and user.email !! excluding dots from email-name. !! :param user: request.user :param kwargs: params to search by :return:", "label": 0}, {"snippet_id": 35736, "code": " template_name=('product_curation/' 'product_puc.html')): p=Product.objects.get(pk=pk) p2p=ProductToPUC.objects.filter(classification_method='MA', product=p).first() form=ProductPUCForm(request.POST or None,", "label": 0}, {"snippet_id": 84146, "code": ") form.cache_old_content() if form.is_valid(): if request.user.is_authenticated(): form.editor=request.user if((article is None) and(group_slug is not None)): form.group=group new_article, changeset=form", "label": 0}, {"snippet_id": 39081, "code": ".zip_url evaluates to boolean False ''' if self.get_zip_url()!='no_path_found': return(self.get_zip_url) else: return False def get_zip_url(self): uuid_path=f'{self.get_dg_folder()}/{str(self.fs_id)}.zip", "label": 0}, {"snippet_id": 71886, "code": " req.add_message('TEST1', 'error') req.add_message('TEST2', 'success', '_mykey') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, ]) msgs_key=req.get_messages('_mykey", "label": 0}, {"snippet_id": 8978, "code": " django.shortcuts import redirect from django.utils.translation import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods", "label": 0}, {"snippet_id": 46756, "code": ".split('.')[0] if code=='': errors.append([count, \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType", "label": 0}, {"snippet_id": 11365, "code": "\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the", "label": 0}, {"snippet_id": 59049, "code": " have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course', kwargs={'code': self.code}) @staticmethod def get_by_user_or_404", "label": 0}, {"snippet_id": 29445, "code": "/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response() if not resp: flash(u'You denied the request to sign in.') return redirect(url_for('gallery.show_posts')) user_id=resp['user_id']", "label": 0}, {"snippet_id": 45882, "code": " import Path from django import forms from django.urls import reverse from django.conf import settings from django.core.files import File from django.core.exceptions import ValidationError from django.core", "label": 1}, {"snippet_id": 75883, "code": " relative URL. Example: ' '<b>/tutorial/install.html</b>', ) redirect_type_helptext=_('The type of redirect you wish to use.') class Redirect(models.Model): \"\"\"A HTTP redirect associated with a Project", "label": 0}, {"snippet_id": 64161, "code": " session.clear() location=current_app.config.get('SAML2_LOGOUT_REDIRECT_URL') location=request.form.get('RelayState', location) return LogoutPayload().dump({'location': location}).data else: abort(500)", "label": 1}, {"snippet_id": 65317, "code": ") builder.add_from_resource(\"/run/terminal/KeepassGtk/main_window.ui\") self.headerbar=builder.get_object(\"headerbar\") file_open_button=builder.get_object(\"open_button\") file_open_button.connect(\"clicked", "label": 0}, {"snippet_id": 20043, "code": " The driver id. \"\"\" xray_task_table_prefix=( ray.gcs_utils.TablePrefix_RAYLET_TASK_string.encode(\"ascii\")) xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects", "label": 0}, {"snippet_id": 40297, "code": "( self.get_qa_complete_extractedtext_count() / count * 100)) return pct def qa_button_text(self): if self.get_qa_status(): return \"QA Complete\" elif self.qa_begun: return \"Continue QA\" else: return \"Begin", "label": 0}, {"snippet_id": 27901, "code": "} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): \"\"\"Log the beginning of a span event. Returns: The object itself is returned so that if the block is opened using \"with ray", "label": 0}, {"snippet_id": 59116, "code": " invite if found :raise: Http404 if not found ''' if not user: raise Http404 invites=Invite.objects.filter( **kwargs ) my_invite=None for invite in invites: if invite and invite.email==user.email: my_invite", "label": 0}, {"snippet_id": 76402, "code": "=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str(rect_of_tiles), str(rect_of_tiles.Extent())) logger.debug", "label": 0}, {"snippet_id": 55265, "code": " splitunc(self): \t\treturn os.path.splitunc(self.path) \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): ", "label": 0}, {"snippet_id": 7418, "code": " import datetime, timedelta @api.route(\"/exams/\", methods=[\"GET\"]) class ExamList(Resource): exam_schema=ExamSchema(many=True) @jwt.requires_auth def get(self): try: csr=CSR.find_by_username(g.jwt_oidc_token_info", "label": 0}, {"snippet_id": 38388, "code": " ExtractedHHRec from.script import Script from.dsstox_lookup import DSSToxLookup from.qa_group import QAGroup from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.PUC import", "label": 0}, {"snippet_id": 84547, "code": " old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, changes_qs=ALL_CHANGES,", "label": 0}, {"snippet_id": 17140, "code": " {'tournament': t, 'round': r, 'formset': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games", "label": 0}, {"snippet_id": 54899, "code": "\t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data", "label": 0}, {"snippet_id": 13243, "code": " import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core", "label": 0}, {"snippet_id": 24181, "code": "=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run", "label": 1}, {"snippet_id": 47780, "code": "=row['sid'])['dds_n'] or 0) if not dds_wf_n.filter(sid=row['sid']): row['dds_wf_n']=0 else: row['dds_wf_n']=int(dds_wf_n.get(sid=row['sid'])['dds_wf_n'] or 0) row['products_n']=int(products_n.get(sid=row[", "label": 0}, {"snippet_id": 55205, "code": " start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile(self,other): \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile", "label": 0}, {"snippet_id": 15413, "code": " elif field.name=='change_input_series_all_models': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry", "label": 0}, {"snippet_id": 62588, "code": " update the configuration according to the needs of this test case. \"\"\" saml_config=os.path.join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '", "label": 0}, {"snippet_id": 18550, "code": "\t\tdoes_it_exist=self.check_if_exists() \t\tif(does_it_exist!=None): \t\t\tself.render(\"signup.html\",error=does_it_exist) \t\t\treturn \t\thashed_password=self.hash_password() \t\tawait self.do_insert(hashed_password", "label": 0}, {"snippet_id": 10809, "code": " page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 84316, "code": " is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=article_qs.get(**article_args) if", "label": 0}, {"snippet_id": 5147, "code": " test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/'", "label": 0}, {"snippet_id": 27638, "code": " appropriate color. Similarly, if you set the \"name\" attribute, then that will set the text displayed on the box in the timeline. Returns: An object that can profile a span of time via a \"with\" statement. ", "label": 0}, {"snippet_id": 54629, "code": "): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[\"book_edition\"] \t\t\t\tprint attrs", "label": 1}, {"snippet_id": 38395, "code": " DSSToxLookup from.qa_group import QAGroup from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.PUC import PUC, PUCToTag, PUCTag from.product_to_tag import ProductToTag from", "label": 0}, {"snippet_id": 37226, "code": ".fields['weight_fraction_type'] self.collapsed=True class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type=", "label": 0}, {"snippet_id": 39396, "code": " obj.save() return obj.to_dict(include_meta=True) def get_extractedtext(self): return self.extracted_text @property def true_cas(self): if hasattr(self, 'curated_chemical') and self.curated_chemical is", "label": 0}, {"snippet_id": 10835, "code": " Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403", "label": 0}, {"snippet_id": 79107, "code": ". Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string", "label": 0}, {"snippet_id": 56501, "code": "=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self def then_response_should_be_a_redirect_to(self, url): assert self.response.status_code==302 assert self.response[", "label": 0}, {"snippet_id": 32764, "code": " os.path.exists(self.command): return self.command path=os.environ['PATH'].split(':') for di in path: cmd=os.path.join(di, self.command) if os.path.exists(cmd): return cmd raise FileNotFoundError('command", "label": 0}, {"snippet_id": 9534, "code": "']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context", "label": 0}, {"snippet_id": 62687, "code": ".dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set(session.token, came_from) session.persist() return session.token def login(self, eppn, came_from): \"\"\" Add a SAML2 authentication", "label": 0}, {"snippet_id": 49652, "code": "', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename", "label": 0}, {"snippet_id": 28945, "code": " warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of the pickled object. obj_type: type of the pickled object, can be 'function', 'remote function', 'actor'", "label": 0}, {"snippet_id": 37815, "code": ".instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname']=forms.CharField(max_length=400) self.fields['true_chemname'].initial=self.instance.dsstox.true_chemname self", "label": 0}, {"snippet_id": 45735, "code": " filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer'", "label": 1}, {"snippet_id": 67144, "code": "'tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count", "label": 0}, {"snippet_id": 30970, "code": " else: return render_template('newgrudge.html', grudget_id=grudget_id) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/edit', methods=['GET', 'POST']) def editGrudge(grudget_id, grudge_id): if", "label": 0}, {"snippet_id": 63648, "code": "=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingIDP(self): eppn='hubba-bubba' came_from", "label": 0}, {"snippet_id": 53662, "code": " buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format(err)", "label": 1}, {"snippet_id": 70970, "code": "<h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}", "label": 0}, {"snippet_id": 22289, "code": ".redis_max_clients=redis_max_clients self.redis_password=redis_password self.plasma_directory=plasma_directory self.worker_path=worker_path self.huge_pages=huge_pages self.include_webui=include_webui self", "label": 0}, {"snippet_id": 37105, "code": " File'), 'url': _('URL'),} def __init__(self, *args, **kwargs): qs=Script.objects.filter(script_type='DL') self.user=kwargs.pop('user', None) super(DataGroupForm, self).__init__(*args, **kwargs) self.fields", "label": 0}, {"snippet_id": 84537, "code": ") messages.error( request, 'Reverting not possible because an article with name \\'%s\\' already exists' % old_title) return redirect(article) return HttpResponseNotAllowed(['POST']) def history(request,", "label": 0}, {"snippet_id": 17530, "code": ".route('/logout') def logout(): flask.g.user=None flask.session.permanent=False flask.session.modified=False response=flask.make_response(flask.redirect(redirect_url())) response.set_cookie(app.session_cookie_name", "label": 0}, {"snippet_id": 32422, "code": ", args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command()) else: return node else: return None def redirections", "label": 0}, {"snippet_id": 63594, "code": " self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state'", "label": 1}, {"snippet_id": 82865, "code": " NoSuchProcess: pass self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with", "label": 0}, {"snippet_id": 47926, "code": "\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if DSSToxLookup.objects.filter(sid=str.strip(line)).count() > 0: dtxsids.append(str.strip(line", "label": 0}, {"snippet_id": 1850, "code": ").replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 8630, "code": " current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405", "label": 0}, {"snippet_id": 37806, "code": " self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname']=forms.CharField", "label": 0}, {"snippet_id": 10872, "code": " limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request", "label": 0}, {"snippet_id": 25588, "code": " redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils", "label": 1}, {"snippet_id": 21823, "code": "\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a", "label": 0}, {"snippet_id": 54628, "code": ".getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf(assignment) \t\t\t\tprint attrs[\"student\"] \t\t\t\tprint attrs[", "label": 1}, {"snippet_id": 39421, "code": " true_chemname(self): if hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_chemname else: return None @property def sid(self): if hasattr(self, ", "label": 0}, {"snippet_id": 2101, "code": " is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches", "label": 0}, {"snippet_id": 62429, "code": ", session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in the session(key reauthn-for-termination", "label": 0}, {"snippet_id": 21665, "code": " any of the processes were already dead. \"\"\" if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful", "label": 0}, {"snippet_id": 17772, "code": "=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time", "label": 0}, {"snippet_id": 84055, "code": " def edit_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name='edit.html', template_dir", "label": 0}, {"snippet_id": 24057, "code": "(*args, **kwargs) self._wrapper_cache[attr]=_wrapper wrapper=_wrapper return wrapper def thread_safe_client(client, lock=None): \"\"\"Create a thread-safe proxy which locks every method call for the given", "label": 0}, {"snippet_id": 59736, "code": ".css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or", "label": 0}, {"snippet_id": 58841, "code": "=models.CharField('status', max_length=20, choices=STATUS_CHOICES, default='pending') type=models.CharField('invite type', max_length=50, choices=TYPE_CHOICES, default='tester') course=models.ForeignKey", "label": 0}, {"snippet_id": 54855, "code": " in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text].append(assignment.student) \t\tfor t,s in problem_text_students.items(): \t\t\tif len(s) > 1: \t\t", "label": 1}, {"snippet_id": 51454, "code": "(message, exitcode=1) Abort the build with an error message. ''' raise AbortRunException(*args, **kwargs) def require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION", "label": 0}, {"snippet_id": 62760, "code": " logged in :type eppn: str :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str", "label": 0}, {"snippet_id": 1525, "code": "{% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content", "label": 0}, {"snippet_id": 31907, "code": "=request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request", "label": 0}, {"snippet_id": 4134, "code": " email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected", "label": 0}, {"snippet_id": 60517, "code": ".json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"plugins.json\", self.plugins), r\"/-/plugins<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"config.json\", lambda: self._config", "label": 0}, {"snippet_id": 65979, "code": " window, event): unsaved_databases_list=[] for db in self.opened_databases: if db.database_manager.changes is True: unsaved_databases_list.append(db) if unsaved_databases_list.__len__() > 0: builder=Gtk", "label": 0}, {"snippet_id": 8620, "code": " user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was", "label": 0}, {"snippet_id": 47911, "code": ".multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines", "label": 0}, {"snippet_id": 66211, "code": " \"Password\") stack.child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property", "label": 0}, {"snippet_id": 79152, "code": ".get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id", "label": 0}, {"snippet_id": 70860, "code": "(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath", "label": 1}, {"snippet_id": 49518, "code": " from werkzeug import generate_password_hash, check_password_hash, secure_filename from database.database_create import Base, User from database.database_insert import insert_user, insert_social_user from", "label": 0}, {"snippet_id": 21967, "code": " deterministic generation of object IDs. The same value can be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However, the same ID should not be used", "label": 0}, {"snippet_id": 46895, "code": "=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context={'form': form, 'header': header, 'datasource': datasource, 'groups': groups} return render", "label": 0}, {"snippet_id": 6799, "code": ".index')) @auth.route('/confirm') @login_required def resend_confirmation(): token=current_user.generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm'", "label": 0}, {"snippet_id": 61437, "code": ") logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance", "label": 0}, {"snippet_id": 81142, "code": ".sudo().search([('subscription_type', '=', 'ai_montly'), ('subscription_partner', '=', partner.id)]) cf_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'cf_montly", "label": 0}, {"snippet_id": 13627, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html',", "label": 0}, {"snippet_id": 67486, "code": ") if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query=query.filter(orgc=org) level=self.request.GET.get('level') if level is not None: query=query", "label": 0}, {"snippet_id": 25110, "code": " task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add(hex_to_binary(task_id_hex)) object_table_objects=self.state.object_table() driver_object_id_bins", "label": 0}, {"snippet_id": 73477, "code": "().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name", "label": 0}, {"snippet_id": 19848, "code": " self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1)", "label": 0}, {"snippet_id": 29323, "code": "\"Creates the database tables.\"\"\" init_db() print('Initialized the database.') def init_db(): import benwaonline.models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db", "label": 0}, {"snippet_id": 23891, "code": ".close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type, worker): \"\"\"Send a warning message if the pickled object is too large. Args: pickled: the pickled object. name: name of", "label": 0}, {"snippet_id": 36637, "code": " datetime from dateutil.relativedelta import relativedelta from django.http import HttpResponse from django.shortcuts import render from django.db.models import Count, F, DateField, DateTimeField from django", "label": 0}, {"snippet_id": 45978, "code": " dg.doc_types=DocumentType.objects.filter(group_type=dg.group_type) docs=dg.datadocument_set.get_queryset() prod_link=ProductDocument.objects.filter(document__in=docs) page=request.GET.get('page') paginator", "label": 0}, {"snippet_id": 12805, "code": "\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the", "label": 0}, {"snippet_id": 58655, "code": "): update_onboarding_step(onboarding.STEP_8, instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy=instructor.user, isPreview=True, isLive=False, isTest", "label": 1}, {"snippet_id": 40149, "code": " previous_raw_cas=instance.tracker.previous('raw_cas') previous_raw_chem_name=instance.tracker.previous('raw_chem_name') if instance.tracker.has_changed('raw_cas') or \\ instance.tracker.has_changed('raw_chem_name')", "label": 0}, {"snippet_id": 17950, "code": ".'), 'danger') return flask.redirect('/profile') user.password_hash=form.new_password.data flask.flash(flask.Markup( '<strong>Password successfully changed!</strong>'), 'success') db.session.add(user) db", "label": 0}, {"snippet_id": 2676, "code": " kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does", "label": 0}, {"snippet_id": 17766, "code": ".render_template('password_reset_request.html', form=form) else: s=get_serializer() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id", "label": 0}, {"snippet_id": 73991, "code": " docs / reference: -https://docs.djangoproject.com/en/1.11/topics/class-based-views/ -https://github.com/project-callisto/callisto-core/blob/master/callisto_core/wizard_builder/view_partials.py view_partials", "label": 0}, {"snippet_id": 38110, "code": " description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product', through='ProductToPUC", "label": 0}, {"snippet_id": 22058, "code": " mapped files will be created. worker_path(str): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the Object Store with hugetlbfs support.", "label": 0}, {"snippet_id": 77765, "code": " default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand", "label": 1}, {"snippet_id": 49750, "code": " in session): if 'diagram' in request.args: return redirect('/login?return_url=openFile&diagram=true') return redirect('/login?return_url=openFile') files=[] if 'email' in session: email=session['email'", "label": 0}, {"snippet_id": 27020, "code": " IDs in a consistent manner. However, the same ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output", "label": 0}, {"snippet_id": 72594, "code": ", 'registration/register.html', {'register_form': register_form}) def create_account(request): user=get_user_model().objects.create_user( request.POST['email'].lower(), password=request.POST['password1", "label": 0}, {"snippet_id": 55246, "code": "\t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive(self): \t\treturn os.path.splitdrive(self.path) \tdef splitext(self): \t\treturn os.path.splitext(self.path) \tdef splitunc(self): \t\treturn os.path.splitunc", "label": 0}, {"snippet_id": 84746, "code": "(article, request.user): notification.stop_observing(article, request.user) return redirect(article) def article_preview(request): \"\"\"This is a AJAX function that previews the body of the article as it", "label": 0}, {"snippet_id": 29740, "code": "/'.join(['thumbs', fname]) created=datetime.utcnow() preview=Preview(filepath=fpath, created=created) db.session.add(preview) fpath='/'.join(['imgs', fname]) image=Image(filepath=fpath, created=created", "label": 0}, {"snippet_id": 20830, "code": " and plasma. This method helps to prepare a socket file. 1. Make the directory if the directory does not exist. 2. If the socket file exists, raise exception. Args: socket_path(string): the socket file", "label": 0}, {"snippet_id": 27492, "code": " __future__ import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object):", "label": 0}, {"snippet_id": 81953, "code": ", ) clicktracker.url.add(object) clicktracker.save() object.save() return link_redirect(request, pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) class URLUpdateView(LoginRequiredMixin", "label": 0}, {"snippet_id": 52224, "code": "\"\"\"Renders view of team page, with board\"\"\" team_id=session.get(\"team_id\") team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"", "label": 0}, {"snippet_id": 16009, "code": " render_template('register.html', form=register_form) @app.route('/login', methods=['GET', 'POST']) def view_login(): if current_user.is_authenticated: return redirect(url_for('view_home')) login_form=LoginForm", "label": 0}, {"snippet_id": 19975, "code": " static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message.ResourcesAvailableLabel(i) static=heartbeat_message.ResourcesTotalLabel(i) dynamic_resources[dyn]=( heartbeat_message", "label": 0}, {"snippet_id": 54183, "code": "', q=name) \"\"\"Search -> Politician Page \"\"\" @app.route('/search', methods=['POST', 'GET']) def search(): query=request.args.get('q').lower() politicians=Politician.all() politicians.filter(\"name=\", query", "label": 1}, {"snippet_id": 70575, "code": ", ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.')", "label": 0}, {"snippet_id": 3858, "code": " test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self", "label": 0}, {"snippet_id": 64167, "code": "=request.form.get('RelayState', location) return LogoutPayload().dump({'location': location}).data else: abort(500) headers_tuple=loresponse[1]['headers'] location=headers_tuple[0][1] current_app.logger", "label": 1}, {"snippet_id": 79347, "code": " helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest.id, qualified=True) } if datarequest.organization_id: data_dict['organization']", "label": 0}, {"snippet_id": 28616, "code": ": A dictionary of the resource requirements for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy()", "label": 0}, {"snippet_id": 83193, "code": "\"\"\"Starts the monitoring thread. :return: None \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled", "label": 0}, {"snippet_id": 23967, "code": " length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is used to create a", "label": 0}, {"snippet_id": 48959, "code": "'' puc=p.get_uber_puc() assumed_tags=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request", "label": 0}, {"snippet_id": 21994, "code": " should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if", "label": 0}, {"snippet_id": 53841, "code": ", stderr.last_write_time if stderr else 0, ]) @property def project(self): return self.step.project if self.step else None @property def results_cache_path(self) -> str: \"\"\" Location where step report is", "label": 0}, {"snippet_id": 51745, "code": " self.scope={} self.category=category self.cate_str='_'.join(category.split(' ')) self.count=0 def updateScope(self,scope): if(self.count): self.scope['results'][start_url]+=scope['results'][start_url]", "label": 0}, {"snippet_id": 63022, "code": "'SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"\"\" def init_data(self): \"\"\" Called", "label": 0}, {"snippet_id": 25670, "code": " from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit", "label": 0}, {"snippet_id": 36880, "code": "'upload_month') \\ .order_by('upload_month')) if len(document_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(document_stats) or document_stats", "label": 0}, {"snippet_id": 20063, "code": " driver_task_id_bins=set() for task_id_hex, task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex", "label": 0}, {"snippet_id": 30193, "code": " xrange(32)) login_session['state']=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods=['POST']) def gconnect(): if request.args.get('state') !=login_session['state']", "label": 1}, {"snippet_id": 52415, "code": "\", None) phase_code=request.form.get(\"project-phase\") board_id=request.form.get(\"board-id\") new_project=q.make_project(title, notes, phase_code, board_id) q.add_to_db(new_project) flash(\"New a new{} has", "label": 0}, {"snippet_id": 21612, "code": ".PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool): Raise an exception if the process was already dead.", "label": 0}, {"snippet_id": 59613, "code": " fallback=True): \"\"\" Looks up metadata, cascading backwards from specified level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata(", "label": 0}, {"snippet_id": 55140, "code": ": \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) ", "label": 0}, {"snippet_id": 9204, "code": ".skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except", "label": 1}, {"snippet_id": 37354, "code": "{ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText", "label": 1}, {"snippet_id": 7151, "code": " import Base from flask_login import current_user from qsystem import db class ExamTypeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible(self): return current_user.is_authenticated and current_user", "label": 1}, {"snippet_id": 39918, "code": " ExtractedText class QANotes(CommonInfo): extracted_text=models.OneToOneField(ExtractedText, on_delete=models.CASCADE) qa_notes=models.TextField(null=True, blank=True) def __str__(self): return 'Notes for", "label": 1}, {"snippet_id": 38744, "code": ": name_fill_space=instance.name.replace(' ', '_') name='{0}/{0}_{1}'.format(name_fill_space, filename) return name def csv_upload_path(instance, filename): name='{0}/{1}'.format(instance.fs_id, filename", "label": 0}, {"snippet_id": 12242, "code": " wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter", "label": 0}, {"snippet_id": 7574, "code": " from lms.djangoapps.commerce.utils import EcommerceService from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login", "label": 0}, {"snippet_id": 21366, "code": ". The process had already died and check_alive is true. 2. The process had been started in valgrind and had a non-zero exit code. \"\"\" process_infos=self.all_processes[process_type] if process_type !=ray_constants", "label": 0}, {"snippet_id": 41969, "code": ".objects.dg.group_type=GroupType.objects.create( title='Habits and practices') response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertNotIn('Bulk Create', response.content.decode(), (", "label": 0}, {"snippet_id": 40271, "code": " extractedtext__extraction_script=self.pk).count() def get_pct_checked(self): count=self.get_datadocument_count() pct=(0 if count==0 else( self.get_qa_complete_extractedtext_count() / count * 100)) return \"{0:.0f}%\".format", "label": 0}, {"snippet_id": 44472, "code": " Source for Test', estimated_records=2, state='AT', priority='HI') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script", "label": 0}, {"snippet_id": 4248, "code": ", target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4", "label": 0}, {"snippet_id": 71377, "code": ".app(environ, start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config", "label": 1}, {"snippet_id": 50819, "code": "(arglist): \"\"\" Assemble a list of string, such as for a subprocess call. Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if", "label": 0}, {"snippet_id": 22684, "code": "\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling", "label": 1}, {"snippet_id": 15640, "code": ", '') for index, command in enumerate(get_command('change_timeseries_value_several_days')): sub_form=form.change_timeseries_value_several_days[index] sub_form.input_source_initial.choices=get_inputs_choices", "label": 0}, {"snippet_id": 14835, "code": " None return auth_get_user_by_id(user_id) def auth_get_user_by_id(user_id): key='user:%s' % user_id if db.hlen(key)==0: return None user_data=db.hgetall(key) user=User() user.user_id=user_data['user_id", "label": 0}, {"snippet_id": 74083, "code": " _PassphrasePartial(views.base.TemplateView): storage_helper=view_helpers.ReportStorageHelper @property def storage(self): return self.storage_helper(self) class _PassphraseClearingPartial(EvalDataMixin,", "label": 0}, {"snippet_id": 33262, "code": "'tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType", "label": 0}, {"snippet_id": 60289, "code": ".cursor() cursor.execute(sql, params or{}) max_returned_rows=self.max_returned_rows if max_returned_rows==page_size: max_returned_rows +=1 if max_returned_rows and truncate: rows=cursor.fetchmany(max_returned_rows", "label": 0}, {"snippet_id": 70320, "code": ".static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if", "label": 0}, {"snippet_id": 81072, "code": ".sudo().create( { 'partner_id': partner_id, 'event_id': event_id, 'name': partner.name if partner.name else '', 'phone': partner.mobile if partner.mobile else '', 'email': partner.email if partner.email", "label": 0}, {"snippet_id": 39220, "code": ".exceptions import ValidationError from.extracted_text import ExtractedText from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.raw_chem import RawChem def validate_ingredient_rank", "label": 1}, {"snippet_id": 78829, "code": " organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if not datarequest_id", "label": 0}, {"snippet_id": 84854, "code": " to use '[[title]]' for searching. \"\"\" this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title", "label": 0}, {"snippet_id": 63564, "code": ".dispatch_request() self.assertEqual(response2.status, '200 OK') self.assertIn('https://idp.example.com/simplesaml/saml2/idp/' 'SingleLogoutService.php', json.loads(response2.data)['payload']['location'", "label": 0}, {"snippet_id": 61219, "code": "\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates", "label": 0}, {"snippet_id": 38824, "code": ".UUIDField(default=uuid.uuid4, editable=False) csv=models.FileField(upload_to=csv_upload_path, null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models", "label": 0}, {"snippet_id": 23863, "code": ". Returns: The size of the shared memory file system in bytes. \"\"\" assert sys.platform==\"linux\" or sys.platform==\"linux2\" shm_fd=os.open(\"/dev/shm\", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail", "label": 0}, {"snippet_id": 22313, "code": "=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def update(self, **kwargs): \"\"\"Update the settings according", "label": 0}, {"snippet_id": 61015, "code": "%(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring job.\"\"\" def __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring", "label": 0}, {"snippet_id": 27529, "code": "(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows", "label": 0}, {"snippet_id": 3285, "code": " match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView", "label": 0}, {"snippet_id": 20052, "code": " xray_object_table_prefix=( ray.gcs_utils.TablePrefix_OBJECT_string.encode(\"ascii\")) task_table_objects=self.state.task_table() driver_id_hex=binary_to_hex(driver_id) driver_task_id_bins=set() for task_id_hex, task_info", "label": 0}, {"snippet_id": 68145, "code": ").encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt", "label": 0}, {"snippet_id": 43312, "code": " should cause the relationship to be deleted. ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext", "label": 0}, {"snippet_id": 56465, "code": "(self, username, bio, pic): orm_person=ORMPerson.objects.create() profile=ORMProfile.objects.create(username=username, bio=bio, person=orm_person) profile.picture=pic profile.save() return self def given_a_public_domain", "label": 0}, {"snippet_id": 82725, "code": "\"\" if self.host_status.get(self.hostname): cmd='ssh -F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent", "label": 0}, {"snippet_id": 10005, "code": " api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\")", "label": 0}, {"snippet_id": 2387, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}<", "label": 0}, {"snippet_id": 60068, "code": ": \"Register any custom units defined in the metadata.json with Pint\" for unit in self.metadata(\"custom_units\") or[]: ureg.define(unit) def versions(self): conn=sqlite3.connect(\":memory:\") self.prepare_connection", "label": 0}, {"snippet_id": 450, "code": " Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date", "label": 1}, {"snippet_id": 22390, "code": ", kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self): if self.resources is not None: assert \"CPU\" not in self", "label": 0}, {"snippet_id": 26960, "code": " memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables(task and object tables).", "label": 0}, {"snippet_id": 31224, "code": ".0.1', 'localhost:4200', HOOK_DOMAIN] ALLOWED_HOSTS +=os.environ.get('DJANGO_ALLOWED_HOSTS', '').split() CORS_ORIGIN_WHITELIST=ALLOWED_HOSTS CORS_ALLOW_CREDENTIALS=True GITMATE_PLUGINS=[ 'code_analysis", "label": 0}, {"snippet_id": 82135, "code": ".create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save() data=[instance.input_url, instance.short_url] data_list.append(data) response=HttpResponse(content_type='text", "label": 0}, {"snippet_id": 39017, "code": " return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy\" property. If the folder cannot be found, dg.dg_folder evaluates to boolean False ''' if self.get_dg_folder() !='no_folder_found", "label": 0}, {"snippet_id": 39005, "code": ".isdir(uuid_dir): return uuid_dir elif bool(self.csv.name) and os.path.isdir(csv_fullfolderpath): return csv_fullfolderpath else: return 'no_folder_found' @property def dg_folder(self): '''This is a \"falsy", "label": 0}, {"snippet_id": 4304, "code": ".client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection", "label": 0}, {"snippet_id": 47565, "code": " puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices", "label": 0}, {"snippet_id": 29181, "code": " benwaonline.admin import setup_adminviews from benwaonline.models import user_datastore, User from benwaonline.gallery import gallery from benwaonline.gallery.forms import images from benwaonline.user", "label": 1}, {"snippet_id": 55561, "code": ".path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t\tl=FSPathList() \t\tl.append(self) \t\tl.append(other) \t\tr=l.commonprefix() \t\tif r.isdir(): \t\t\treturn Folder(r.path", "label": 0}, {"snippet_id": 17638, "code": " user_name=user.username), user.username)), 'warning') else: if app.config['USE_EMAIL_VERIFICATION']: send_verification_email(user) return flask.render_template('waiting.html') else: user.status=models", "label": 0}, {"snippet_id": 35665, "code": "=True)) )[:max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None", "label": 1}, {"snippet_id": 45387, "code": "=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']", "label": 0}, {"snippet_id": 6959, "code": ".is_anonymous: return redirect(url_for('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is None: return redirect(url_for(", "label": 0}, {"snippet_id": 82547, "code": " bool or CrashEvent \"\"\" class LocalComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a local component monitoring job.\"\"\" def __init__(self, pid, comp_name): \"\"\"Creates a monitoring", "label": 0}, {"snippet_id": 30673, "code": "'POST']) def newGrudget(): if 'username' not in login_session: return redirect('/login') if request.method=='POST': newGrudget=Grudget(name=request.form['name']) session.add(newGrudget) session.commit()", "label": 0}, {"snippet_id": 39291, "code": " composition\", max_length=100, null=True, blank=True) unit_type=models.ForeignKey(UnitType, on_delete=models.PROTECT) report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True,", "label": 0}, {"snippet_id": 49163, "code": " edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance=extracted_text), 'extracted_text':", "label": 0}, {"snippet_id": 70406, "code": " HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.", "label": 1}, {"snippet_id": 83202, "code": ".DEBUG) logger.debug(\"Started run funtion\") while not self.end: comp_jobs=[] jobs=[] already_handleled={} while not self.job_queue.empty(): mon_job=self.job_queue.get() if isinstance(mon_job, HostMonitorJob", "label": 0}, {"snippet_id": 67027, "code": "(self, request, **kwargs): if request.GET.get('keyword'): filehash=request.GET.get('keyword') return HttpResponseRedirect(filehash) context=self.get_context_data() return self.render_to_response(context", "label": 1}, {"snippet_id": 40248, "code": " self.pk}) def get_datadocument_count(self): return DataDocument.objects.filter( extractedtext__extraction_script=self.pk).count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects", "label": 0}, {"snippet_id": 22133, "code": " the root temporary directory for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis.", "label": 0}, {"snippet_id": 80908, "code": " 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views/fit_event_views", "label": 0}, {"snippet_id": 27456, "code": " the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not", "label": 0}, {"snippet_id": 31612, "code": "', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page, name='search'), url(r'^error', home_page, name='error'), url(r'^sign-up', home_page, name='sign_up", "label": 0}, {"snippet_id": 40971, "code": " status code') try: extracted_text=ExtractedText.objects.get(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains(resp, 'No Extracted Text exists for this Data Document') else: self", "label": 0}, {"snippet_id": 7249, "code": " WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.''' from app.models.theq import Office", "label": 0}, {"snippet_id": 6899, "code": "=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, 'Reset Your Password", "label": 0}, {"snippet_id": 34756, "code": "(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n", "label": 0}, {"snippet_id": 70327, "code": "'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory.", "label": 0}, {"snippet_id": 57511, "code": "'transaction_detail', transaction_code=transaction.code) if form.cleaned_data['save_button']: transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) else: extra_context", "label": 0}, {"snippet_id": 45862, "code": "(DataDocument, pk=pk) _, ChildFormSet=create_detail_formset(doc, extra=1, can_delete=True) formset=ChildFormSet(request.POST, instance=doc.extractedtext) if formset.is_valid(): formset.save() return redirect", "label": 0}, {"snippet_id": 46822, "code": "'\\n') if errors: datagroup.csv.close() datagroup.delete() return render(request, template_name,{'line_errors': errors, 'form': form}) datagroup.save() with open(datagroup.csv.path,'w') as f: myfile=File", "label": 0}, {"snippet_id": 61633, "code": "=validate_server_version(page), csp_origin_only=validate_csp(page), mime_sniffing_blocked=validate_no_sniff(page), noopen_download=validate_download_options(page), xss_protection=validate_xss_protection(page", "label": 1}, {"snippet_id": 9622, "code": ".logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template", "label": 0}, {"snippet_id": 54284, "code": "\"name=\", politician.lower()) politician=None for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician.constituency,", "label": 0}, {"snippet_id": 31469, "code": "': os.environ.get('DB_USER', 'postgres'), 'PASSWORD': os.environ.get('DB_PASSWORD', ''), 'HOST': os.environ.get('DB_ADDRESS', ''), 'PORT': os.environ.get('DB_PORT', '') } } AUTH_PASSWORD_VALIDATORS=[ {", "label": 0}, {"snippet_id": 84665, "code": "*args, **kw): article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) article_args.update({'content_type': get_ct(group),", "label": 0}, {"snippet_id": 33040, "code": "'Product Count' num_products.admin_order_field='num_products' def tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number", "label": 0}, {"snippet_id": 40526, "code": " DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client.logout() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring", "label": 0}, {"snippet_id": 6211, "code": " flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow.redirect_uri=url_for('oidc_callback', _external=True) return flow def redirect_to_auth_server(self,", "label": 0}, {"snippet_id": 70769, "code": " in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 53229, "code": " import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not task.has_perm(request.user, OI_READ): raise Http404 return direct_to_template", "label": 1}, {"snippet_id": 79894, "code": ".get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db", "label": 0}, {"snippet_id": 40077, "code": "(self): '''Find the child object by trying each of the classes, then return the datadocument id from it NOTE: this will be obsolete once we move the data_document foreign key into RawChem in ticket 654 '", "label": 0}, {"snippet_id": 41398, "code": " def test_curated_chemical(self): ''''Confirm that if an ExtractedChemical record has been matched to DSSToxLookup, the DSSToxLookup fields are displayed in the card This checks every data document. ''", "label": 0}, {"snippet_id": 74792, "code": "=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.", "label": 0}, {"snippet_id": 36807, "code": "')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime", "label": 0}, {"snippet_id": 55123, "code": "(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self): \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os", "label": 0}, {"snippet_id": 49215, "code": " browser to the appropriate place after saving the edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST.get('referer',", "label": 0}, {"snippet_id": 35069, "code": " taggit.forms import TagField from taggit_labels.widgets import LabelWidget from django.core.paginator import Paginator from django.db.models import Max class FilteredLabelWidget(LabelWidget): def tag_list", "label": 0}, {"snippet_id": 23083, "code": " The type of the error. message(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will", "label": 0}, {"snippet_id": 22425, "code": " not in self.resources,( \"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated", "label": 0}, {"snippet_id": 2630, "code": ".failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration", "label": 0}, {"snippet_id": 37804, "code": ".dsstox is not None: self.fields['true_cas']=forms.CharField(max_length=200) self.fields['true_cas'].initial=self.instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname", "label": 0}, {"snippet_id": 65159, "code": " fdef.name=name dock_points(deductions, 1, 'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions", "label": 0}, {"snippet_id": 35626, "code": ",{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned", "label": 0}, {"snippet_id": 7073, "code": " @auth.route('/change-email/<token>') @login_required def change_email(token): if current_user.change_email(token): session['auth_token']=current_user.auth_token flash('Your email address has been updated.'", "label": 0}, {"snippet_id": 18999, "code": ".extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST", "label": 1}, {"snippet_id": 46446, "code": " csv_file=request.FILES.get('clean_comp_data_file') info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table", "label": 0}, {"snippet_id": 228, "code": "(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {%", "label": 0}, {"snippet_id": 61224, "code": " name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name, hostname): \"\"\"Creates a remote crash event with a component name and a host generating", "label": 0}, {"snippet_id": 29612, "code": " import gallery from benwaonline.gallery.forms import CommentForm, PostForm @gallery.before_request def before_request(): g.user=current_user @gallery.route('/gallery/') @gallery.route('/gallery/<string", "label": 0}, {"snippet_id": 32600, "code": " to execute. second: The second node to execute. ''' def __init__(self, first, second): self.first=first self.second=second def execute(self, *args): self.first.execute(*args) self.first.wait() self.second", "label": 0}, {"snippet_id": 33950, "code": " doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get(self.live_server_url +doc_qa_link) rc_id=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]').get_attribute(", "label": 0}, {"snippet_id": 76155, "code": "=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path(path, language,", "label": 1}, {"snippet_id": 34152, "code": "*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the", "label": 0}, {"snippet_id": 76395, "code": ".image_format==\"image/jpeg\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str", "label": 0}, {"snippet_id": 73774, "code": "/importposition.html',{ 'form': CreatePositionForm, 'baseVisibleText': InterfaceText }) def get_positions_sort_method(request): try: return request.session['position_sort'] except KeyError: return '-created' def", "label": 0}, {"snippet_id": 14954, "code": "() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$', name): attrs=name.split(':') (ts_name, ts_author), rest=attrs[:2], attrs[2:] ts[", "label": 0}, {"snippet_id": 59148, "code": ") if invite_domain !=user_domain: continue res=re.search( \"^{}@{}$\".format(r\"\\.?\".join(user_email_name), user_domain), \"{}@{}\".format(invite_email, invite_domain) ) if res and res.string: my_invite=invite", "label": 0}, {"snippet_id": 80319, "code": "') self.lock_piezo_etalon_action.setCheckable(True) self.lock_fast_piezo_action=lock_menu.addAction('Lock Fast Piezo') self.lock_fast_piezo_action.setCheckable(True) tools_menu=menu_bar.addMenu('Tools'", "label": 0}, {"snippet_id": 53309, "code": " module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code(source_code, step.source_path) except SyntaxError as error: return", "label": 1}, {"snippet_id": 12419, "code": "[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration", "label": 0}, {"snippet_id": 14100, "code": " current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline", "label": 0}, {"snippet_id": 78293, "code": "'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id'], users", "label": 0}, {"snippet_id": 24307, "code": ".fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be unreachable.\") def", "label": 0}, {"snippet_id": 19104, "code": " driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the worker object", "label": 1}, {"snippet_id": 37357, "code": ", } labels={ 'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class='required' class Meta: model=ExtractedText fields=['prod_name", "label": 1}, {"snippet_id": 72575, "code": "(request) send_user_email(request, user) return render(request, 'registration/register.html', {'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created % user)}) return", "label": 0}, {"snippet_id": 20907, "code": "._ray_params.redis_password, redis_max_memory=self._ray_params.redis_max_memory) assert( ray_constants.PROCESS_TYPE_REDIS_SERVER not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_REDIS_SERVER", "label": 0}, {"snippet_id": 83162, "code": " queues to send notifications to. :param queue: Subscribing queue that will get notifications by this thread :type queue: Queue.Queue :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Added", "label": 0}, {"snippet_id": 68628, "code": "/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\"", "label": 0}, {"snippet_id": 45123, "code": ") stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month", "label": 0}, {"snippet_id": 32790, "code": " RedirectionsNode(Node): ''' A node that performs a number of IO redirections. Args: base: The base node to operate on. redirections: The redirections to apply. ''' def __init__(self, base, redirections)", "label": 0}, {"snippet_id": 1113, "code": "\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title>", "label": 0}, {"snippet_id": 82952, "code": " with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name) self.message='Component %s", "label": 0}, {"snippet_id": 65165, "code": "'misnamed function') valid=True if not valid: dock_points(deductions, args.points, 'not just a single function definition') output_json(args.points, deductions) return try: code_obj=compile(tree, '<unknown", "label": 0}, {"snippet_id": 35234, "code": "'product_curation/' 'category_assignment.html')): \"\"\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list", "label": 0}, {"snippet_id": 3245, "code": "\"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={", "label": 0}, {"snippet_id": 44620, "code": "'Test Chem Name', raw_cas='test_cas' ) rc=ec.rawchem_ptr ing=Ingredient.objects.create(lower_wf_analysis=0.123456789012345, central_wf_analysis=0.2, upper_wf_analysis=1, script=script, rawchem_ptr=rc) pt", "label": 0}, {"snippet_id": 19744, "code": " get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor for Ray processes", "label": 0}, {"snippet_id": 16861, "code": ") default_set=GameSet.objects.get(pk=1) data=[] if t.power_assignment==Tournament.AUTO: games=_seed_games_and_powers(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG", "label": 0}, {"snippet_id": 63946, "code": "(get_location(authn_request)) @authn_views.route('/saml2-acs', methods=['POST']) def assertion_consumer_service(): \"\"\" Assertion consumer service, receives POSTs from SAML2 IdP's \"\"\" if 'SAMLResponse' not", "label": 0}, {"snippet_id": 48726, "code": " assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def", "label": 0}, {"snippet_id": 33309, "code": ".register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register", "label": 0}, {"snippet_id": 77887, "code": " user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor' updates_required", "label": 0}, {"snippet_id": 43989, "code": "'specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects() if settings.TEST_BROWSER=='firefox':", "label": 1}, {"snippet_id": 82093, "code": " class ShortManyURLSView(View): def get(self, request, *args, **kwargs): form=ManyURLSForm() return render(request, 'short-many-urls.html',{'form': form}) def post(self, request, *args, **kwargs): form", "label": 0}, {"snippet_id": 69542, "code": " place, and works with sudo -E in sudo's search $PATH. We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"", "label": 0}, {"snippet_id": 16570, "code": "\" %(rp.gameplayers().count(), str(rp)) rps.append(rp) if rp.game_count==1: continue elif rp.game_count==0: sitters.add(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()", "label": 0}, {"snippet_id": 64509, "code": ".format(eppn)) except current_app.central_userdb.exceptions.MultipleUsersReturned: current_app.logger.error(\"There are more than one user with eduPersonPrincipalName={}\".format(eppn)) current_app.logger", "label": 0}, {"snippet_id": 59506, "code": " self.files=files if not self.files: self.files=[MEMORY] elif memory: self.files=(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data self._metadata=metadata or", "label": 0}, {"snippet_id": 27133, "code": " default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name(str): If provided, it will", "label": 0}, {"snippet_id": 20708, "code": ".path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui=True) else: redis_client=ray.services.create_redis_client(", "label": 0}, {"snippet_id": 42460, "code": ".login(username='Karyn', password='specialP@55word') def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()", "label": 0}, {"snippet_id": 63814, "code": ".acs_registry import get_action, schedule_action from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp.authn.schemas import LogoutPayload, LogoutResponseSchema authn_views=Blueprint", "label": 1}, {"snippet_id": 62110, "code": " elif len(matches.group()) > 1: return False else: return True def validate_csp(page): if 'Content-Security-Policy' not in page.headers: return False elif \"default-src 'self'\" not in page.headers['Content", "label": 0}, {"snippet_id": 11513, "code": "/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query", "label": 0}, {"snippet_id": 34554, "code": " template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(", "label": 0}, {"snippet_id": 74797, "code": " HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': post_data=request", "label": 0}, {"snippet_id": 46272, "code": "'extracted_cpcat']=ext.extractedtext_ptr row=clean_dict(row, ext_child) try: ext.full_clean() ext.save() record=ext_child(**row) record.full_clean() good_records.append((d,ext,record)) except ValidationError as e:", "label": 0}, {"snippet_id": 47546, "code": "'get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects", "label": 0}, {"snippet_id": 82177, "code": " CreateView): template_name='category-create-view.html' form_class=CategoryModelForm class CategoryListView(LoginRequiredMixin, ListView): queryset=Category.objects.all().order_by('name') template_name=", "label": 0}, {"snippet_id": 79994, "code": " opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id: string :returns: A dict with the data request", "label": 0}, {"snippet_id": 77043, "code": "\"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label,", "label": 0}, {"snippet_id": 39211, "code": "(sender, instance, **kwargs): \"\"\" Deletes datagroup directory from filesystem when datagroup instance is deleted. \"\"\" dg_folder=instance.get_dg_folder() if os.path.isdir(dg_folder): shutil.rmtree(dg_folder)", "label": 0}, {"snippet_id": 63748, "code": ", }): del session['_saml2_session_name_id'] session.persist() response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location)", "label": 0}, {"snippet_id": 60555, "code": "(\\.db)$>\" ) app.add_route( DatabaseView.as_view(self), r\"/<db_name:[^/]+?><as_format:(\\.jsono?|\\.csv)?$>\" ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app", "label": 0}, {"snippet_id": 37259, "code": "\"Clean Composition Data CSV File\", required=True) def __init__(self, *args, **kwargs): super(CleanCompDataForm, self).__init__(*args, **kwargs) self.fields['script_selection'].widget.attrs.update( {'style':", "label": 0}, {"snippet_id": 81455, "code": " new_start_date, new_end_date) def _handle_weekly_event_repetition(self, old_repeating_event): _logger.info('Handling weekly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-", "label": 0}, {"snippet_id": 50891, "code": " result class Builder(object): def __init__(self): self._steps=[] self._optionParser=OptionParser() self.add_bool_option(\"-v\", \"--verbose\") self._enabled_options=set() self._disabled_options=set() self", "label": 0}, {"snippet_id": 44983, "code": ") self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True", "label": 0}, {"snippet_id": 50062, "code": " session['currentFile']=filename try: with open(filepath) as f: data=f.read() parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed)) except parser.ParserException:", "label": 0}, {"snippet_id": 3060, "code": " absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params", "label": 0}, {"snippet_id": 29553, "code": "'user_id'], username=username) user.oauth_token=session.pop('token') user.oauth_secret=session.pop('secret') db.session.commit() login_user(user) next=request.args.get('next') flash('You were signed in as %s", "label": 0}, {"snippet_id": 22899, "code": ") return self def __exit__(self, type, value, tb): \"\"\"Log the end of a span event. Log any exception that occurred.\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance", "label": 0}, {"snippet_id": 3289, "code": " SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success() return self.login_failure() class OIDCAuthenticationRequestView(View): \"\"\"OIDC", "label": 0}, {"snippet_id": 47005, "code": ".delete() return redirect('data_group_list') return render(request, template_name,{'object': datagroup}) @login_required def dg_pdfs_zip_view(request, pk): dg=DataGroup.objects.get(pk=pk) zip_file_name", "label": 0}, {"snippet_id": 23423, "code": " 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify", "label": 0}, {"snippet_id": 43435, "code": "+doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//*[@id='save", "label": 0}, {"snippet_id": 77741, "code": "['value'] or default_data_driven_application if 'version' in pkg: version=pkg['version'] or default_version if 'author_email' in pkg: author_email=pkg['author_email'] or default_author_email if 'notes'", "label": 0}, {"snippet_id": 81243, "code": ", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week=fields.Char(string='Dag', default='') fit_repetition_enabled=fields.Boolean(string='Herhalen?',", "label": 0}, {"snippet_id": 5763, "code": "=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual(11,", "label": 0}, {"snippet_id": 60397, "code": ")}, delimiter=\":\" ), ] ) self.jinja_env=Environment(loader=template_loader, autoescape=True) self.jinja_env.filters[\"escape_css_string\"]=escape_css_string self.jinja_env.filters[\"quote_plus\"]=lambda u:", "label": 0}, {"snippet_id": 31769, "code": "=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')=", "label": 1}, {"snippet_id": 34567, "code": ", } if request.method=='POST': form=HabitsPUCForm(request.POST) if form.is_valid(): puc=PUC.objects.get(pk=form['puc'].value()) pucs=puc.get_the_kids() link_table=ExtractedHabitsAndPracticesToPUC links", "label": 0}, {"snippet_id": 78797, "code": " The ID of the data request to be updated :type id: string :param title: The title of the data request :type title: string :param description: A brief description for your data request :type description", "label": 0}, {"snippet_id": 42659, "code": " test_product_facet_returns(self): response=self.c.get('/find/?q=insecticide') brands=response.content.count(b'name=\"brand_name\"') self.assertTrue(brands>10,('There should be ~143 product returns ' 'for this search term'))", "label": 0}, {"snippet_id": 38483, "code": " associated with the document's extracted data ``products`` Products are associated with the data document in a many-to-many relationship ``matched`` When a source file for the document has been uploaded to", "label": 0}, {"snippet_id": 3011, "code": "\"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT", "label": 0}, {"snippet_id": 25632, "code": " get_raylet_socket_name, new_log_monitor_log_file, new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory", "label": 0}, {"snippet_id": 82273, "code": "() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy('category-list-view') class CategoryDeleteView(LoginRequiredMixin, DeleteView): model=Category template_name", "label": 0}, {"snippet_id": 10051, "code": " def account_settings(request): \"\"\"Render the current user's account settings page. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 33915, "code": ".Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_break_curation(self): ''' Changing the raw_cas or raw_chemname on a RawChem record with", "label": 0}, {"snippet_id": 48919, "code": ".url_name\\ if 'HTTP_REFERER' in request.META else 'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form':", "label": 0}, {"snippet_id": 79289, "code": "{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time", "label": 0}, {"snippet_id": 21671, "code": " if ray_constants.PROCESS_TYPE_RAYLET in self.all_processes: self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive, allow_graceful=allow_graceful) for process_type in list", "label": 0}, {"snippet_id": 42931, "code": " response=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter", "label": 0}, {"snippet_id": 20936, "code": " self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes", "label": 1}, {"snippet_id": 16998, "code": "\"Provide a form to create the games for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) games=r.game_set.all() data=[] for g in games: current", "label": 0}, {"snippet_id": 31290, "code": "://localhost:4200') SOCIAL_AUTH_LOGIN_URL='/login' SOCIAL_AUTH_PIPELINE=( 'social.pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid', 'social.pipeline.social_auth.auth_allowed", "label": 1}, {"snippet_id": 58439, "code": "\"description\": \"next_steps desc\", \"title\": \"next_steps\" } }, onboarding.INVITE_SOMEBODY:{ \"done\": True, \"settings\":{ \"html\": \"<p>invite_somebody</p>\", \"description\": \"invite_somebody desc\", \"title\": \"invite_somebody", "label": 0}, {"snippet_id": 64911, "code": " students code against. Each test case \" \"must take the form of of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5,", "label": 0}, {"snippet_id": 31919, "code": " main(): sh=Shell() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): '''", "label": 0}, {"snippet_id": 9255, "code": ".message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, ", "label": 0}, {"snippet_id": 42718, "code": "\" self.assertFalse(Script.objects.get(pk=5).qa_begun, 'The Script should have qa_begun of False at the beginning') response=self.client.get('/qa/extractionscript/5/') self.assertTrue(Script.objects.get", "label": 0}, {"snippet_id": 28547, "code": "\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus, runtime_resources): \"\"\"Determine a", "label": 0}, {"snippet_id": 29195, "code": " gallery from benwaonline.gallery.forms import images from benwaonline.user import user from benwaonline.auth import auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security() login_manager=LoginManager() def", "label": 1}, {"snippet_id": 20065, "code": ", task_info in task_table_objects.items(): task_table_object=task_info[\"TaskSpec\"] task_driver_id_hex=task_table_object[\"DriverID\"] if driver_id_hex !=task_driver_id_hex: continue driver_task_id_bins.add", "label": 0}, {"snippet_id": 20391, "code": " logger.info(\"Monitor: num_flushed{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever", "label": 0}, {"snippet_id": 20444, "code": ".heartbeat_timeout_milliseconds() * 1e-3) if __name__==\"__main__\": parser=argparse.ArgumentParser( description=(\"Parse Redis server for the \" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True,", "label": 0}, {"snippet_id": 14544, "code": " 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset", "label": 0}, {"snippet_id": 35181, "code": ").\\ filter(data_source__isnull=False).annotate(no_category=Count('id')).order_by('data_source') list_no_puc=[ds_no_puc for ds_no_puc in qs_no_puc] for ds in data_sources: try: ds.no_category=next((item", "label": 0}, {"snippet_id": 52404, "code": "\"\" title=request.form.get(\"new-project-title\", \"Untitled\") notes=request.form.get(\"new-project-notes\", None) phase_code=request.form.get(\"project-phase\") board_id=request.form.get(\"board-id\") new_project", "label": 0}, {"snippet_id": 10996, "code": " a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field", "label": 0}, {"snippet_id": 35613, "code": " assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return render(request, template_name,{'products': products, 'puc_form': puc_form, 'form", "label": 0}, {"snippet_id": 5377, "code": ".locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path,", "label": 0}, {"snippet_id": 68216, "code": ".http import JsonResponse from urllib.parse import urlparse from http.client import HTTPSConnection from datetime import datetime, timezone, timedelta class IndexView(PaginationMixin, ListView): template_name", "label": 0}, {"snippet_id": 45274, "code": " i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count':", "label": 0}, {"snippet_id": 48628, "code": "('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter", "label": 0}, {"snippet_id": 59363, "code": "=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download the original SQLite database files \"\"\".strip()), ConfigOption(\"suggest_facets\", True, \"\"\" Calculate and display", "label": 0}, {"snippet_id": 3086, "code": "]=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT", "label": 1}, {"snippet_id": 74296, "code": " dispatch(self, request, *args, **kwargs): logger.debug(f\"{self.__class__.__name__} access check\") if( self.access_granted or self.access_form_valid ) and self._passphrase_next_url(request): return self", "label": 0}, {"snippet_id": 13052, "code": "'student_account/finish_auth.html',{ 'disable_courseware_js': True, 'disable_footer': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object", "label": 0}, {"snippet_id": 56771, "code": "=concept transaction=concept.transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext", "label": 0}, {"snippet_id": 68790, "code": "-sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE) extensions=[ 'nbresuse/main', 'jupyter-js-widgets/extension' ] for e in extensions: assert '{} \\x1b[32m enabled \\x1b[0m'.format(e) in proc", "label": 0}, {"snippet_id": 65834, "code": ".container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance def update_tab_bar_visibility(self): if self.container.get_n_pages() > 1: self.container.set_show_tabs(True) else:", "label": 0}, {"snippet_id": 71702, "code": " s_count=models.Session.query().count() self.assertTrue(s_count==1) s1=models.Session.query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user('test:12345')", "label": 0}, {"snippet_id": 2507, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"", "label": 0}, {"snippet_id": 49360, "code": " request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument", "label": 0}, {"snippet_id": 80144, "code": ".setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show()", "label": 0}, {"snippet_id": 62196, "code": "-cache\") def validate_expires(page): return validate_security_header(page, \"Expires\", \"-1\") def validate_cache_control_set(page): if 'Cache-Control' in page.headers: return True else: return False def validate_cache_must_revalidate", "label": 0}, {"snippet_id": 10968, "code": ") context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received", "label": 0}, {"snippet_id": 81542, "code": " new event existence: ' +old_repeating_event.name +', date: ' +str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id existing_event=self.env['event.event'].search([('event_type_id', '=',", "label": 0}, {"snippet_id": 54756, "code": "\t\tassignment_student,problem_text=prob_data \t\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data)) \t\t\tself.code_list.append((prob_code,prob_code_data)) \t\t\tself.problem_groups", "label": 0}, {"snippet_id": 13741, "code": "(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try", "label": 0}, {"snippet_id": 27237, "code": ", redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False", "label": 1}, {"snippet_id": 25243, "code": ".GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor:", "label": 0}, {"snippet_id": 4925, "code": ".client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant", "label": 0}, {"snippet_id": 68570, "code": "/twitter_hunter' class HuntUpdateView(UpdateView): model=Hunt form_class=HuntForm template_name='twitter_hunter/hunt_edit_form.html' def get_success_url(self): self.object.restart() return '/twitter_hunter", "label": 0}, {"snippet_id": 13024, "code": " sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP", "label": 0}, {"snippet_id": 61369, "code": " down the thread by signalling the run function to end. :return: None \"\"\" logger=logging.getLogger(__name__) logger.debug(\"Killing process monitoring thread\") self.end=True def add_subscriber(self, queue)", "label": 0}, {"snippet_id": 13547, "code": ".message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, ", "label": 0}, {"snippet_id": 11620, "code": "': True, }) def account_settings_context(request): \"\"\" Context for the account settings page. Args: request: The request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year", "label": 0}, {"snippet_id": 81837, "code": ".pk})) return redirect(reverse('success-url-view', kwargs={'pk': created.pk})) return render(request, 'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs)", "label": 0}, {"snippet_id": 46502, "code": " ExtractedChemical.DoesNotExist as e: extracted_chemical=None context['clean_comp_err'][i +1]={'id':['No ExtractedChemical matches rawchem_ptr_id ' +row['id'],]} print('No ExtractedChemical matches rawchem_ptr_id %s'", "label": 0}, {"snippet_id": 29053, "code": " the proxy methods. \"\"\" def __init__(self, orig_obj, lock): self.orig_obj=orig_obj self.lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable", "label": 0}, {"snippet_id": 12740, "code": "(str): The URL of the request(excluding the protocol and domain) session(SessionStore): The session of the original request, used to get past the CSRF checks. Returns: str: The content of the response \"", "label": 0}, {"snippet_id": 79341, "code": "'accepted_dataset': None, 'followers': 0, 'dataset_url': helpers.url_for(controller='ckanext.datarequests.controllers.ui_controller:DataRequestsUI', action='show', id=datarequest.id, qualified=True) } if", "label": 0}, {"snippet_id": 6649, "code": " login(): form=LoginForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user is not None and user.verify_password(form.password.data): login_user(user, form", "label": 0}, {"snippet_id": 55115, "code": "(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef getctime(self):", "label": 0}, {"snippet_id": 45776, "code": "(dummy)') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form.is_valid(): form.save() return redirect(referer, pk", "label": 1}, {"snippet_id": 35709, "code": ".create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to Selected Products' return render(request, template_name,{'products': p, 'q':", "label": 0}, {"snippet_id": 20228, "code": "._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process all messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate", "label": 0}, {"snippet_id": 61915, "code": " analytics scripts anywhere in the page Google Analytics: https://support.google.com/analytics/answer/1032399?hl=en Chartbeat: http://support.chartbeat.com/docs/ Quantcast: https://quantcast.zendesk.com", "label": 0}, {"snippet_id": 34551, "code": " dashboard.forms import HabitsPUCForm def get_data(request, template_name='get_data/get_data.html'): hnp=None form=HabitsPUCForm() context={ 'hnp': hnp, 'form': form, 'first': None, } if request.method=='POST'", "label": 0}, {"snippet_id": 60654, "code": "=exception.error_dict message=exception.message if exception.messagge_is_html: message=Markup(message) title=exception.title else: status=500 info={} message=str(exception) traceback.print_exc() templates=[\"500", "label": 0}, {"snippet_id": 68773, "code": ": \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user/bin/jupyter-nbextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE, stdout=subprocess.PIPE)", "label": 0}, {"snippet_id": 38421, "code": " import CommonInfo from django.urls import reverse from django.utils import timezone from.document_type import DocumentType from django.core.exceptions import ValidationError class DataDocument(CommonInfo): ", "label": 0}, {"snippet_id": 62014, "code": " return expected_directive in directives def validate_no_redirects(page): if page.is_redirect: return False else: return True def validate_200_ok(page): if page.status_code==200: return True else: return", "label": 0}, {"snippet_id": 20329, "code": " def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS", "label": 0}, {"snippet_id": 54214, "code": ".search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else: return render_template('politician_notfound.html', q=query) \"\"\"", "label": 1}, {"snippet_id": 13552, "code": ".tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth': _third_party_auth_context(request, redirect_to, third_party_auth_hint), 'third_party_auth_hint", "label": 0}, {"snippet_id": 49570, "code": ".secret_key='fe2917b485cc985c47071f3e38273348' app.config['UPLOAD_FOLDER']='userFiles/' app.config['ALLOWED_EXTENSIONS']=set(['pml']) def get_resource_as_string(name, charset='utf-8'): with app.open_resource", "label": 0}, {"snippet_id": 69369, "code": ".ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[ 'jupyterhub==0.9.4', 'notebook==5.7.0', 'jupyterlab==0.35.3', 'nteract-on-jupyter==1.9.12', 'nbgitpuller=", "label": 1}, {"snippet_id": 9991, "code": "+'.' +str(user.id) if use_cache else None api=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for", "label": 0}, {"snippet_id": 48225, "code": "'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self,", "label": 1}, {"snippet_id": 8215, "code": "'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context", "label": 0}, {"snippet_id": 25059, "code": ")) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return objects belonging to the driver", "label": 0}, {"snippet_id": 66050, "code": "(\"toggled\", self.on_save_check_button_toggled, db) unsaved_database_row.add(check_button) unsaved_database_row.show_all() unsaved_databases_list_box.add(unsaved_database_row) self.quit_dialog.present()", "label": 0}, {"snippet_id": 37938, "code": "=get_extracted_models(group_type) extracted=hasattr(document, 'extractedtext') def make_formset(parent_model, model, formset=BaseInlineFormSet, form=forms.ModelForm, exclude=exclude): formset_fields=model", "label": 0}, {"snippet_id": 37450, "code": "'long_description'] class ProductViewForm(ProductForm): class Meta(ProductForm.Meta): exclude=('title', 'long_description',) def __init__(self, *args, **kwargs): super(ProductForm, self).__init__(*args, **kwargs)", "label": 0}, {"snippet_id": 36779, "code": "(document_count=Count('id')) \\ .order_by('upload_date')) document_stats_by_type=DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(source_type=F('document_type__title'", "label": 0}, {"snippet_id": 25597, "code": "=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=args.redis_password) traceback_str=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed with the following", "label": 1}, {"snippet_id": 68304, "code": "=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list", "label": 0}, {"snippet_id": 55228, "code": "\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive", "label": 0}, {"snippet_id": 17146, "code": "'formset': formset}) i.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) return render(request, 'rounds/create_games.html', {'tournament': t,", "label": 0}, {"snippet_id": 23131, "code": "\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the local scheduler client is not available", "label": 0}, {"snippet_id": 50420, "code": " def __init__(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname=os.path.split(os.path.abspath(self.filename))[0] if not os.path.exists(dirname): os.makedirs(dirname", "label": 0}, {"snippet_id": 17776, "code": "() try: request_timestamp, pw_hash, user_id=s.loads(payload) except: return flask.abort(404) user=models.User.by_id(user_id) if not user: return flask.abort(404) if(time.time() -request_timestamp) > 6 ", "label": 0}, {"snippet_id": 66703, "code": ".get_object(\"password_unlock_entry\") composite_unlock_entry=self.builder.get_object(\"composite_unlock_entry\") password_unlock_entry.set_text(\"\") composite_unlock_entry.set_text(\"\") def show_unlock_failed_revealer", "label": 0}, {"snippet_id": 67171, "code": " SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder']='Lookup IP Address", "label": 1}, {"snippet_id": 46739, "code": "[count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']=='': line['title']=line['filename'].split('.", "label": 0}, {"snippet_id": 57918, "code": " according status name Argument: user_id(int): user's id Return: dict with data Example: { \"instructor_intro\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_course", "label": 0}, {"snippet_id": 15099, "code": "=NoValidationSelectField('Model',[validators.required()], choices=[]) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final", "label": 0}, {"snippet_id": 55384, "code": "\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn", "label": 0}, {"snippet_id": 53557, "code": " render_error( project: 'projects.Project', error: Exception ) -> dict: \"\"\" :param project: :param error: :return: \"\"\" render_data=dict( type=error.__class__.__name__, message='{}'.format(error), stack=", "label": 0}, {"snippet_id": 45724, "code": "': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename", "label": 0}, {"snippet_id": 50740, "code": "(object): def __init__(self, name, action): if name in ILLEGAL_STEP_NAMES: fail(\"'{0}' is not allowed as a build step name.\".format(name)) self.name=name self.condition_sets=[] self.is_optional=False self", "label": 0}, {"snippet_id": 77132, "code": "\": projection=projections.Mercator() else: projection=projections.Flat() request_type=server_layer_def.get(\"requestType\", \"ImageryMaps\") tile_arg_names=_LAYER_ARG_NAMES[request_type] version_info=server_layer_def", "label": 0}, {"snippet_id": 68642, "code": ".encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt", "label": 0}, {"snippet_id": 38309, "code": " content_object=models.ForeignKey(PUC, on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False", "label": 0}, {"snippet_id": 49449, "code": ".objects.get(title__icontains='Manual(dummy)', script_type='EX') exttext, _=model.objects.get_or_create(extraction_script=script, data_document_id=pk) form=ParentForm(request.POST, instance=exttext) if form", "label": 1}, {"snippet_id": 56703, "code": " from django.shortcuts import get_object_or_404, render, redirect, reverse from django.utils.translation import gettext, gettext_lazy from clickgestion.transactions.filters import ConceptFilter, TransactionFilter", "label": 0}, {"snippet_id": 47399, "code": "] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource, 'datagroup_list': datagroup_list, 'form': form} return render(request", "label": 0}, {"snippet_id": 84272, "code": "=ALL_ARTICLES, changes_qs=ALL_CHANGES, template_name='changeset.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title", "label": 0}, {"snippet_id": 56618, "code": "\":{\"apps\":[], \"details\":[{\"appID\": \"ASDF.com.myapp.ios\", \"paths\":[\"*\"]}]}}') class ScenarioMaker: def given_an_apple_appid(self, appid): settings.APPLE_APPID=appid return self def when_call_aasa(self):", "label": 0}, {"snippet_id": 28008, "code": " hashlib import inspect import logging import numpy as np import os import subprocess import sys import threading import time import uuid import ray.gcs_utils import ray.ray_constants as ray_constants def", "label": 0}, {"snippet_id": 26873, "code": " address of the Redis server to connect to. If this address is not provided, then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers", "label": 0}, {"snippet_id": 82129, "code": "+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance=JustURL.objects.create(input_url=result, short_url=f'{request.get_host()}/{token_generator()}') instance.save() data=[instance", "label": 0}, {"snippet_id": 27320, "code": " self.redirect_worker_output=redirect_worker_output self.redirect_output=redirect_output self.num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients self.redis_password=redis_password", "label": 0}, {"snippet_id": 42132, "code": "', response, 'Data Group should contain a count of 0 total extracted documents') self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{DataGroup.objects.first()", "label": 0}, {"snippet_id": 14042, "code": " enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\"", "label": 0}, {"snippet_id": 82571, "code": ": Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs", "label": 0}, {"snippet_id": 67548, "code": "(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(publish_timestamp__gte=from_date, publish_timestamp__lte=to_date).count() data.append", "label": 0}, {"snippet_id": 30669, "code": "/grudget/new/', methods=['GET', 'POST']) def newGrudget(): if 'username' not in login_session: return redirect('/login') if request.method=='POST': newGrudget=Grudget(name=request.form['name']) session", "label": 0}, {"snippet_id": 127, "code": "/') newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 34873, "code": "'attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={} if \"GET\"==request.method: return render", "label": 0}, {"snippet_id": 79300, "code": "(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest.id, 'user_id': datarequest.user_id,", "label": 0}, {"snippet_id": 32820, "code": ".base.execute(builtins) def wait(self): self.base.wait() class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file descriptor to modify. newfd: The new file descriptor. ''", "label": 0}, {"snippet_id": 84293, "code": "=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update({'article__content_type': get_ct(group), 'article__object_id': group.id}) changeset=get_object_or_404( changes_qs, revision=int", "label": 0}, {"snippet_id": 41845, "code": "!')) self.objects.gt.code='UN' self.objects.gt.save() response=self.client.get(f'/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!'", "label": 0}, {"snippet_id": 11163, "code": "\"), } if third_party_auth.is_enabled(): enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint", "label": 0}, {"snippet_id": 75554, "code": " HttpResponseForbidden('You don\\'t have permission to view this candidate\\'s thesis.') if not candidate.thesis.current_file_name: return HttpResponse('Couldn\\'t find a file: please email %s if there should be one.", "label": 0}, {"snippet_id": 71794, "code": "') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) auth_id='test:abc' user_info={ 'auth_id': auth_id, 'info':{}, ", "label": 0}, {"snippet_id": 36551, "code": " orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) p2puc=ProductToPUC.objects.first() p2puc.id=None p2puc.classification_method='MB' p2puc.puc_id=21 p2puc.save(", "label": 0}, {"snippet_id": 66209, "code": "\"password_unlock\", \"Password\") stack.child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack", "label": 0}, {"snippet_id": 45996, "code": "=request.GET.get('page') paginator=Paginator(docs, 50) store=settings.MEDIA_URL +str(dg.fs_id) ext=ExtractedText.objects.filter(data_document_id__in=docs).first() context={ 'datagroup' : dg, 'documents' :", "label": 0}, {"snippet_id": 81428, "code": "%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(days=+1) new_end_date=end_date +relativedelta", "label": 1}, {"snippet_id": 59730, "code": " if not hasattr(self, \"_app_css_hash\"): self._app_css_hash=hashlib.sha1( open( os.path.join(str(app_root), \"datasette/static/app.css\") ).read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash", "label": 0}, {"snippet_id": 27574, "code": " argument, and it can have keys \"name\" and \"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on", "label": 0}, {"snippet_id": 7806, "code": " account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url", "label": 0}, {"snippet_id": 75518, "code": "=candidate.thesis.format_checklist) if format_form.is_valid(): format_form.handle_post(request.POST, candidate) return HttpResponseRedirect(reverse('approve', kwargs={'candidate_id': candidate_id})) @login_required", "label": 0}, {"snippet_id": 44056, "code": ".find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\")", "label": 0}, {"snippet_id": 60905, "code": ":param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str", "label": 0}, {"snippet_id": 5862, "code": "\"\"\" def __init__(self, app=None, credentials_store=None, http=None, time=None, urandom=None): self.credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials() self.http", "label": 0}, {"snippet_id": 54737, "code": "(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t\tfor problem in self.problems: \t\t\tprob_id, prob_data=problem ", "label": 1}, {"snippet_id": 82271, "code": "=Category.objects.all() form_class=CategoryUpdateModelForm template_name='category-update-view.html' success_url=reverse_lazy('category-list-view') class CategoryDeleteView(LoginRequiredMixin, DeleteView)", "label": 0}, {"snippet_id": 33881, "code": "(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn'", "label": 0}, {"snippet_id": 79009, "code": "=data_dict.get('id', '') if not datarequest_id: raise tk.ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict", "label": 0}, {"snippet_id": 7005, "code": "(url_for('main.index')) return render_template('auth/reset_password.html', form=form) @auth.route('/change-email', methods=['GET', 'POST']) @login_required def change_email_request(): form=ChangeEmailForm(", "label": 0}, {"snippet_id": 6296, "code": " a current ID token for this application, was issued by the Apps domain we expected, and that the email address has been verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token", "label": 0}, {"snippet_id": 81265, "code": ", 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if self.env.user !=self.env.ref('base.public_user'): email=self.env.user.partner_id.email", "label": 0}, {"snippet_id": 1803, "code": " of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. \"\"\" path=posixpath.normpath", "label": 1}, {"snippet_id": 18141, "code": ").read().split('\\n') \r print \"\\n -Trying payload \"+payload+\" -\"\r for domain in domains:\r if domain !=\"\":\r \r url=\"https://\" +domain +payload\r url=url.strip()\r \r try:\r r=requests.head(url, allow_redirects", "label": 0}, {"snippet_id": 75949, "code": "'HTTP Status'), choices=HTTP_STATUS_CHOICES, default=301, ) status=models.BooleanField(choices=STATUS_CHOICES, default=True) create_dt=models.DateTimeField(auto_now_add=True) update_dt=models.DateTimeField", "label": 0}, {"snippet_id": 33611, "code": " chemicals \\ with weight fraction data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for", "label": 0}, {"snippet_id": 3312, "code": "): super(OIDCAuthenticationRequestView, self).__init__(*args, **kwargs) self.OIDC_OP_AUTH_ENDPOINT=import_from_settings('OIDC_OP_AUTHORIZATION_ENDPOINT') self.OIDC_RP_CLIENT_ID=import_from_settings('OIDC_RP_CLIENT_ID", "label": 0}, {"snippet_id": 65473, "code": ".first_start_grid.destroy() self.container=Gtk.Notebook() self.container.set_border_width(0) self.container.set_scrollable(True) self.container.set_show_border(False) self.container.connect(\"switch-page\"", "label": 0}, {"snippet_id": 53401, "code": "(project, error) set_executing(False) return{'success': True} if out is None else out def render_syntax_error( project: 'projects.Project', code: str, error: SyntaxError ) -> dict: \"\"\" :param project: :param", "label": 0}, {"snippet_id": 78976, "code": " allowed, a NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param", "label": 0}, {"snippet_id": 39958, "code": " django.db.models.signals import pre_save from django.dispatch import receiver from model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name", "label": 1}, {"snippet_id": 16532, "code": " return render(request, 'rounds/get_seven.html', context) def _sitters_and_two_gamers(tournament, the_round): \"\"\" Return a(sitters, two_gamers) 2-tuple\"\"\" tourney_players=tournament.tournamentplayer_set.all(", "label": 0}, {"snippet_id": 33592, "code": "=0.1 ec.save() stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(2, ethylparaben_stats['dds_wf_n'], 'There should be 2 extracted chemicals ", "label": 0}, {"snippet_id": 19155, "code": "\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client=self.redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock", "label": 1}, {"snippet_id": 28453, "code": " ValueError( \"The argument{} must be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray", "label": 0}, {"snippet_id": 37202, "code": "'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['extract_file'].widget.attrs.update({'accept': '.csv'})", "label": 0}, {"snippet_id": 10220, "code": ") for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None", "label": 0}, {"snippet_id": 12308, "code": "() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status", "label": 0}, {"snippet_id": 43411, "code": " ExtractedChemical without a unit type should return a validation error ''' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation:", "label": 0}, {"snippet_id": 31114, "code": " !=grudget.user_id: return \"<script>function myFunction(){alert('You are not authorized to delete any grudges not created by yourself. Please create your own grudges.');}</script><body onload='myFunction", "label": 0}, {"snippet_id": 43520, "code": ".select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse", "label": 0}, {"snippet_id": 37880, "code": "() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=[]): '''Returns the pair of formsets that will be needed based on group_type", "label": 0}, {"snippet_id": 61798, "code": " result_data) current_result.compute_grade() current_result.securedrop=securedrop try: prior_result=securedrop.results.latest() except ScanResult.DoesNotExist: results_to_be_written.append(current_result", "label": 1}, {"snippet_id": 72699, "code": "=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request.GET._mutable=False form=LoginForm(request.POST) if form.is_valid(): user=form.get_user() login(request,", "label": 1}, {"snippet_id": 76180, "code": ".debug('Redirecting %s', self) return self.to_url if '$rest' in self.from_url: match=self.from_url.split('$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s' % match, self.to_url, full_path", "label": 0}, {"snippet_id": 23062, "code": " push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Args: worker: The worker to use. error_type(str): The type of the error", "label": 0}, {"snippet_id": 75356, "code": "(reverse('register')) candidate.thesis.submit() return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) @login_required @permission_required('etd_app.change_candidate',", "label": 0}, {"snippet_id": 46686, "code": ".csv.close() datagroup.delete() return render(request, template_name, {'field_error': table.fieldnames, 'good_fields': good_fields, 'form': form}) text=['DataDocument_id,' +','.join(table.fieldnames)+'", "label": 0}, {"snippet_id": 57273, "code": "'message', message=gettext('Transaction Closed')) available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts']=available_concepts if request.method=='POST': form", "label": 0}, {"snippet_id": 34331, "code": " raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue( et.qa_edited, 'The qa_edited attribute should be True') self.browser.find_element_by_xpath('//*[@id=\"approve\"]')", "label": 0}, {"snippet_id": 24889, "code": ": self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes: addr_port=self.redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) >", "label": 0}, {"snippet_id": 42314, "code": ".dg.pk dspk=str(self.objects.ds.pk) gtpk=str(self.objects.gt.pk) data={'name':['Changed Name'], 'group_type':[gtpk], 'downloaded_by':[str(User.objects.get(username='Karyn').pk)], 'downloaded_at':['08/20", "label": 0}, {"snippet_id": 3415, "code": "\"Return the logout url defined in settings.\"\"\" return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request", "label": 0}, {"snippet_id": 5262, "code": "]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password", "label": 0}, {"snippet_id": 74839, "code": "(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: shib_info=get_shib_info_from_request(request) degree_type=request.GET.get('type', '') person_form=PersonForm(instance=candidate.person", "label": 0}, {"snippet_id": 72191, "code": " set(self, cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf", "label": 0}, {"snippet_id": 3804, "code": ") self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username", "label": 0}, {"snippet_id": 59712, "code": "\"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def app_css_hash(self): if not hasattr(self, \"_app_css_hash\"): self._app_css_hash", "label": 0}, {"snippet_id": 52310, "code": ".get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app", "label": 1}, {"snippet_id": 16970, "code": "(the_round=r, initial=data) context={'tournament': t, 'round': r, 'games': games, 'formset': formset} return render(request, 'rounds/seeded_games.html', context) @permission_required('tournament.add_game", "label": 0}, {"snippet_id": 62063, "code": "-1'): return True else: return False def validate_server_software(page): if 'Server' not in page.headers: return True else: server_header=str.lower(page.headers['Server']) if 'nginx' in server_header or", "label": 0}, {"snippet_id": 57333, "code": ", extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_edit.html', extra_context) class TransactionList(PaginationMixin", "label": 0}, {"snippet_id": 46853, "code": "/\" +str(datagroup.fs_id) +\".zip\") new_zip_path=Path(settings.MEDIA_ROOT +\"/\" +str(datagroup.fs_id) +\"/\" +str(datagroup.fs_id) +\".zip\") zf=zipfile.ZipFile(str(new_zip_path), 'w', zipfile.ZIP_DEFLATED) datagroup", "label": 0}, {"snippet_id": 8910, "code": ".provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url", "label": 0}, {"snippet_id": 80247, "code": "=set_menu.addAction('BiFi Approx. Wavelength') self.set_bifi_motor_pos_action=set_menu.addAction('BiFi Motor Position') self.set_thin_eta_motor_pos_action=set_menu.addAction('Thin Etalon Motor Position", "label": 0}, {"snippet_id": 71992, "code": " from.. import logger from..security import Scope from..services.cephfs import CephFS from..services.cephx import CephX from..services.exception import serialize_dashboard_exception from..services.ganesha", "label": 0}, {"snippet_id": 26002, "code": "=new_webui_log_file() self._webui_url, process_info=ray.services.start_ui( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file) assert ray_constants.PROCESS_TYPE_WEB_UI not in self.all_processes if", "label": 0}, {"snippet_id": 6680, "code": "('next') or url_for('main.index')) flash('Invalid username or password.') return render_template('auth/login.html', form=form) @auth.route('/logout') @login_required def logout(): logout_user() flash('You", "label": 1}, {"snippet_id": 70470, "code": "=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return", "label": 0}, {"snippet_id": 58978, "code": " super(Invite, self).save(force_insert, force_update, using, update_fields) def send_mail(self, request, view): try: context=Context({ 'invite': self, 'current_site': Site.objects.get_current(request) }", "label": 0}, {"snippet_id": 35372, "code": "() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name", "label": 0}, {"snippet_id": 56067, "code": " get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute() preview_content={'st': '@{}'.format(profile.username", "label": 0}, {"snippet_id": 17605, "code": ".session.add(user) db.session.commit() if models.RangeBan.is_rangebanned(user.registration_ip): flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator<", "label": 0}, {"snippet_id": 8742, "code": " in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response(", "label": 0}, {"snippet_id": 36302, "code": "/a[@href=\"/qa/extractionscript/\"])'), 'The link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response", "label": 0}, {"snippet_id": 24873, "code": ".local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes", "label": 0}, {"snippet_id": 11519, "code": "(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the", "label": 0}, {"snippet_id": 14536, "code": "(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _", "label": 0}, {"snippet_id": 72270, "code": "=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask", "label": 0}, {"snippet_id": 78621, "code": " exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title:", "label": 0}, {"snippet_id": 41569, "code": " django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import Client from importlib import import_module from django.db.models import Max", "label": 1}, {"snippet_id": 33238, "code": "(self, obj): return u\", \".join(o.name for o in obj.tags.all()) class HHDocAdmin(admin.ModelAdmin): list_display=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object", "label": 0}, {"snippet_id": 10213, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context", "label": 0}, {"snippet_id": 72835, "code": " position=d.get('position') request.session['position_id']=position.id return render(request, 'createposition/importposition.html', {'position': position, 'form': create_position_form, 'baseVisibleText':", "label": 1}, {"snippet_id": 34447, "code": "(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element(", "label": 0}, {"snippet_id": 79711, "code": " title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] datarequest_id=data_dict.get('id', '') if", "label": 0}, {"snippet_id": 40329, "code": " above the threshold \"\"\" return self.get_pct_checked_numeric() >=self.QA_COMPLETE_PERCENTAGE * 100 def create_qa_group(self, force_doc_id=None): \"\"\" Creates a QA Group for the specified Script object; Use", "label": 0}, {"snippet_id": 32346, "code": ") self.token=None self.last=None self.next() def parse(self): ''' Parse the stream of tokens. Returns: The root node of the Abstract Syntax Tree. Throws: May throw a ValueError in the case that the stream", "label": 0}, {"snippet_id": 79290, "code": "': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time", "label": 0}, {"snippet_id": 48743, "code": " @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip()", "label": 0}, {"snippet_id": 73147, "code": "), mime=True) ][0] if not(file_type=='.pdf'): msg=forms.ValidationError( ErrorMessages.incorrect_mime_type) self.add_error('pdf', msg) if url: msg=forms.ValidationError( ErrorMessages.url_upload_not_supported_yet", "label": 1}, {"snippet_id": 59075, "code": " search for invite by passed parameters and user. NOTE: this function firstly try to get invite by passed kwargs, then check that Invite.email and user.email are equal, if they not -trying to check Invite", "label": 0}, {"snippet_id": 25005, "code": "(heartbeat_data, 0)) for j in range(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for", "label": 0}, {"snippet_id": 32447, "code": " while redir: redirs.append(redir) redir=self.redirection() if len(redirs) > 0: return RedirectionsHelper(redirs) else: return None def redirection(self): if self.accept(TokenType.REDIRECT_OUT): filename", "label": 0}, {"snippet_id": 18850, "code": "], \t\ttemplate_path=os.path.join(os.path.dirname(__file__),\"templates\"), \t\tstatic_path=os.path.join(os.path.dirname(__file__),\"static\"), \t\tui_modules={'bootstrap': BootstrapModule}, \t\tdebug=True, \t\tasync_db", "label": 1}, {"snippet_id": 63776, "code": " abort, make_response from flask import current_app, Blueprint from eduid_common.api.decorators import MarshalWith from eduid_common.authn.utils import get_location from eduid_common.authn.loa import get_loa", "label": 0}, {"snippet_id": 60625, "code": " help=None if isinstance(exception, NotFound): status=404 info={} message=exception.args[0] elif isinstance(exception, InvalidUsage): status=405 info={} message=exception.args[0] elif isinstance(exception,", "label": 0}, {"snippet_id": 65610, "code": ".ResponseType.OK)) self.filechooser_creation_dialog.set_current_name(\"Database.kdbx\") self.filechooser_creation_dialog.set_modal(True) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keepass 2 Database", "label": 0}, {"snippet_id": 79989, "code": " request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen. :param id: The ID of the data request to be closed :type id", "label": 0}, {"snippet_id": 171, "code": "): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %", "label": 1}, {"snippet_id": 31752, "code": "('elections:vote')==request.url @pytest.mark.django_db def test_election_is_open(client,create_user, create_election_with_positions): election, positions=create_election_with_positions election=Election", "label": 1}, {"snippet_id": 54673, "code": ") \t\tself.assignments=map(Assignment,self.assignments) \t\tself.book_editions=defaultdict(list) \t\tfor assignment in self.assignments: \t\t\tself.book_editions[assignment.book_edition].append(assignment) \t\t \t", "label": 1}, {"snippet_id": 73204, "code": " model=ScreenDoorUser fields=('email',) def clean(self): email=self.cleaned_data.get('email') email_domain=email.split('@')[1].lower() if email_domain !=\"canada.ca\": message=forms.ValidationError( format", "label": 0}, {"snippet_id": 79157, "code": "('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] data_req.closed=False data_req.accepted_dataset_id=None data_req.close_time=None session.add(data_req) session.commit", "label": 0}, {"snippet_id": 68303, "code": "(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self", "label": 0}, {"snippet_id": 51539, "code": " program is None: raise \"Cannot find scp(or pscp) in the path.\" subprocess.check_call([program] +list(args)) def run(buildname=\"build\", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies", "label": 0}, {"snippet_id": 60989, "code": " True def info(self): \"\"\"Generate a status information for the job describing what is being monitored. :return: Information about this job :rtype: str \"\"\" return \"Running check for remote component %s with", "label": 0}, {"snippet_id": 37814, "code": "'].initial=self.instance.dsstox.true_cas self.fields['true_cas'].disabled=True self.fields['true_chemname']=forms.CharField(max_length=400) self.fields['true_chemname'].initial=self.instance.dsstox.true_chemname", "label": 0}, {"snippet_id": 4179, "code": " print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for", "label": 0}, {"snippet_id": 10447, "code": ".djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from openedx.core", "label": 0}, {"snippet_id": 34149, "code": "[@id=\"id_rawchem-1-raw_cas\"]/parent::*') card_div=parent_div.find_element_by_xpath( '../..') self.assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the", "label": 0}, {"snippet_id": 20119, "code": " sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix", "label": 0}, {"snippet_id": 43972, "code": " body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word", "label": 0}, {"snippet_id": 65622, "code": ".set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") self.filechooser_creation_dialog.add_filter(filter_text) response=self.filechooser_creation_dialog.run() if response==Gtk", "label": 0}, {"snippet_id": 36043, "code": "='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats", "label": 0}, {"snippet_id": 6333, "code": ": %s' % id_token['iss']) return False if isinstance(id_token['aud'], list): if self.flow.client_id not in id_token['aud']: logger.error('We are not a valid audience') return False if 'azp' not in id_token", "label": 0}, {"snippet_id": 65180, "code": " deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions, args.points", "label": 0}, {"snippet_id": 991, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 49219, "code": " document type in the data document detail view or the extracted text QA page template ''' referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk) document_type_form", "label": 0}, {"snippet_id": 65456, "code": "/terminal/KeepassGtk/main_window.ui\") self.first_start_grid=builder.get_object(\"first_start_grid\") self.add(self.first_start_grid) def create_container(self): if self.first_start_grid !=NotImplemented:", "label": 0}, {"snippet_id": 25240, "code": "=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId(", "label": 0}, {"snippet_id": 33435, "code": "(dsstox__sid='DTXSID9022528'). values('extracted_text__data_document')) dd=dds[0] ds=dd.data_group.data_source p=Product.objects.create(data_source=ds, title='Test Product', upc='Test UPC for ProductToPUC') pd", "label": 0}, {"snippet_id": 6931, "code": " instructions for resetting your password has been ' 'sent.') return redirect(url_for('auth.login')) return render_template('auth/reset_password.html', form=form) @auth.route('/reset/<token>', methods=['GET", "label": 0}, {"snippet_id": 64457, "code": "} tried to log in using token login'.format(user)) return redirect(location_on_fail) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn session['eduPersonAssurance']=loa session", "label": 0}, {"snippet_id": 13375, "code": " from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page", "label": 0}, {"snippet_id": 16460, "code": " count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) doubles=7 -sitters context={'tournament': t, 'round'", "label": 0}, {"snippet_id": 56261, "code": "'a', description='d', share_id='AsdE43E4', pic='url') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http://dynamic.link/link={}&other=param') \\ .when_call_experience_redirect", "label": 0}, {"snippet_id": 51325, "code": " dependencies=flatten_string_list(dependencies) dependency_collection=self._dependency_collection() return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__", "label": 0}, {"snippet_id": 30818, "code": " Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgetToDelete) session.commit() return redirect( url_for('showGrudgets'", "label": 0}, {"snippet_id": 14502, "code": "=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.'", "label": 0}, {"snippet_id": 11136, "code": " send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ ", "label": 0}, {"snippet_id": 12004, "code": ", defaulting to login This relies on the JS to asynchronously load the actual form from the user_api. Keyword Args: initial_mode(string): Either \"login\" or \"register\". \"\"\" redirect_to=get_next_url_for_login_page", "label": 0}, {"snippet_id": 52686, "code": " \"\"\" return redirect(\"/\") @app.after_request def add_header(r): \"\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate", "label": 0}, {"snippet_id": 26827, "code": " return any(self.live_processes()) def remaining_processes_alive(self): \"\"\"Return true if all remaining processes are still alive. Note that this ignores processes that have been explicitly killed, e.g", "label": 0}, {"snippet_id": 83239, "code": " already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs: logger.debug(mon_job.info()) ret=mon_job.run_check() if ret is True: logger.debug(\"S'all good man\") self.job_queue.put(mon_job", "label": 0}, {"snippet_id": 29271, "code": "(app) register_teardowns(app) app.register_blueprint(gallery) app.register_blueprint(auth) app.register_blueprint(user) configure_uploads(app,(images,)) patch_request_class(app, FILE_SIZE_LIMIT) return", "label": 0}, {"snippet_id": 28997, "code": " uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR, warning_message, driver_id=worker.task_driver_id) class", "label": 0}, {"snippet_id": 31999, "code": " _builtin_exit(self, name, n=0): sys.exit(n) def _builtin_pwd(self, name): wd=os.getcwd() print(wd) def _builtin_cd(self, name, d): os.chdir(d) class TokenType(Enum): ''' Token types that are recognized", "label": 0}, {"snippet_id": 9523, "code": " enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data'", "label": 0}, {"snippet_id": 47458, "code": ", pk=pk) form=DataSourceForm(request.POST or None, instance=datasource) if form.is_valid(): if form.has_changed(): form.save() return redirect('data_source_detail', pk=pk) form.referer=request.META.get", "label": 0}, {"snippet_id": 82427, "code": "/category/(?P<pk>(\\d)+)/$', CategoryDetailView.as_view(), name='category-detail-view'), re_path(r'^update/category/(?P<pk>(\\d)+)/$', CategoryUpdateView.as_view(), name='category-update-view'), re_path(r", "label": 0}, {"snippet_id": 49153, "code": "=ExtractedText.objects.get_subclass(pk=doc.pk) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']", "label": 0}, {"snippet_id": 49096, "code": ", ChildFormSet=create_detail_formset( doc, extra=edit, can_delete=bool(edit)) document_type_form=DocumentTypeForm(request.POST or None, instance=doc) qs=DocumentType.objects.filter(group_type=doc.data_group", "label": 0}, {"snippet_id": 10931, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata.", "label": 0}, {"snippet_id": 50515, "code": ",7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle(self.handle) class PosixUserLock(BaseUserLock): def __init__(self, name): BaseUserLock.__init__(self", "label": 0}, {"snippet_id": 72655, "code": "=generate_confirmation_url(request, user) mail_sent=send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email],", "label": 1}, {"snippet_id": 78477, "code": ".organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id) data_dict['followers']=db.DataRequestFollower.get_datarequest_followers_number", "label": 0}, {"snippet_id": 7195, "code": "'ita_ind', 'group_exam_ind' ) form_edit_rules=( 'exam_type_name', 'exam_color', 'number_of_hours', 'method_type', 'ita_ind', 'group_exam_ind' ) column_sortable_list=[ 'exam_type_name', 'exam_color', 'number_of_hours", "label": 1}, {"snippet_id": 36891, "code": "+relativedelta(months=i) if i +1 > len(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats", "label": 0}, {"snippet_id": 56905, "code": " extra_context) else: form=concept_form(instance=concept) extra_context['form']=form return render(request, 'transactions/concept_edit.html', extra_context) class ConceptList(PaginationMixin, ListView)", "label": 0}, {"snippet_id": 30908, "code": "('/grudget/<int:grudget_id>/grudge/new/', methods=['GET', 'POST']) def newGrudge(grudget_id): if 'username' not in login_session: return redirect('/login') grudget=session.query(Grudget).filter_by(id=grudget_id", "label": 0}, {"snippet_id": 34054, "code": ".data_document_id self.browser.get(self.live_server_url +doc_qa_link) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec", "label": 0}, {"snippet_id": 39339, "code": " central composition\", max_length=100, null=True, blank=True) def __str__(self): return str(self.raw_chem_name) if self.raw_chem_name else '' @classmethod def detail_fields(cls): return['extracted_text', ", "label": 0}, {"snippet_id": 22654, "code": "): self.worker=worker self.events=[] self.lock=threading.Lock() def start_flush_thread(self): t=threading.Thread( target=self._periodically_flush_profile_events, name=\"ray_push_profiling_information\") t", "label": 1}, {"snippet_id": 24701, "code": " to use for Redis\") parser.add_argument( \"--logging-level\", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP)", "label": 0}, {"snippet_id": 24162, "code": ": worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client", "label": 1}, {"snippet_id": 43103, "code": " Presence Lists\".encode(), response.content) response=self.client.get( f'/qa/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps", "label": 0}, {"snippet_id": 45337, "code": "': '0', 'puc_assigned_month': chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also", "label": 0}, {"snippet_id": 71852, "code": " MESSAGE'}]) msgs=req.get_messages() self.assertEquals(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error", "label": 0}, {"snippet_id": 21443, "code": "\"r\") as f: message +=\"\\nPROCESS STDOUT:\\n\" +f.read() if process_info.stderr_file is not None: with open(process_info.stderr_file, \"r\") as f: message +=\"\\nPROCESS STDERR:\\n\" +f.read() raise Exception(message", "label": 0}, {"snippet_id": 61977, "code": " True def validate_security_header(page, header, expected_value): if header not in page.headers: return False elif page.headers[header]==expected_value: return True else: return False def validate_cache_control_header", "label": 0}, {"snippet_id": 57147, "code": "*kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction", "label": 0}, {"snippet_id": 77321, "code": ".loads(result) def _LayersFromServerVars(target_url): \"\"\"Fetch layer information from ServerVars. Args: target_url: Server URL hosting the target database. Returns: layers_by_name: A dict of all the layers", "label": 0}, {"snippet_id": 50558, "code": " fcntl.lockf(self.f, fcntl.LOCK_EX) return True except IOError: self.f.close() return False def release(self): self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only one build", "label": 0}, {"snippet_id": 63472, "code": " test_metadataview(self): with self.app.test_client() as c: response=c.get('/saml2-metadata') self.assertEqual(response.status, '200 OK') def test_logout_nologgedin(self): eppn='hubba-bubba' csrft='csrf token' with", "label": 0}, {"snippet_id": 66248, "code": " self.unlock_database_stack_box.add(self.overlay) self.unlock_database_stack_box.show_all() self.parent_widget.add(self.unlock_database_stack_box) def connect_events(self): password_unlock_button=self.builder", "label": 0}, {"snippet_id": 60099, "code": " hasversion in( (\"json1\", \"SELECT json('{}')\", False), (\"spatialite\", \"SELECT spatialite_version()\", True), ): try: result=conn.execute(testsql) if hasversion: sqlite_extensions[extension]=result.fetchone()[0", "label": 0}, {"snippet_id": 36485, "code": "/*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures", "label": 0}, {"snippet_id": 36243, "code": " TestCase from dashboard.tests.loader import load_model_objects, fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects", "label": 0}, {"snippet_id": 12338, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's", "label": 0}, {"snippet_id": 3418, "code": " return import_from_settings('LOGOUT_REDIRECT_URL', '/') def post(self, request): \"\"\"Log out the user.\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings", "label": 0}, {"snippet_id": 51594, "code": "'modify_optional_steps':builder.modify_optional_steps, 'specify_optional_steps':builder.specify_optional_steps, 'userlock':userlock, 'fail':fail, 'scp':scp, 'require_version':require_version } try: execfile(os.path.join", "label": 0}, {"snippet_id": 39185, "code": "'group_type_id') and self.extracted_docs(): msg=\"The Group Type may not be changed once extracted documents have been associated with the group.\" raise ValidationError({'group_type': msg}) @receiver(models", "label": 0}, {"snippet_id": 79666, "code": " are invalid. Data QLD modification Will send email notification if organisation was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type", "label": 0}, {"snippet_id": 73119, "code": "=forms.ValidationError(ErrorMessages.empty_create_position_form) self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error", "label": 1}, {"snippet_id": 9543, "code": "'enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field", "label": 0}, {"snippet_id": 8183, "code": ".get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format( start_bold=u'<b>', end_bold=u'", "label": 0}, {"snippet_id": 50506, "code": "-build\\\\\"+name+\".lock\") def tryacquire(self, filename): self.handle=ctypes.windll.kernel32.CreateFileA(filename,7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes.windll.kernel32.CloseHandle", "label": 0}, {"snippet_id": 73571, "code": "(account_key): if EmailAuthenticateToken.objects.filter(key=account_key).exists(): token=EmailAuthenticateToken.objects.get(key=account_key) user=token.user user.email_confirmed=True user.save() token.delete", "label": 0}, {"snippet_id": 80906, "code": "\"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security/user_groups.xml', 'views", "label": 0}, {"snippet_id": 1427, "code": "'\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath,", "label": 1}, {"snippet_id": 8118, "code": " enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name", "label": 0}, {"snippet_id": 41720, "code": ") self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects", "label": 0}, {"snippet_id": 15704, "code": " '') @app.route('/run') def view_run(): return render_template('run.html') @app.route('/run/form/init', methods=['POST']) def view_run_init(): run_form=get_run_form() commands=json.loads(request.data)[", "label": 0}, {"snippet_id": 10024, "code": " order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order[", "label": 0}, {"snippet_id": 84032, "code": ": True}) if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join([template_dir, template_name]),", "label": 0}, {"snippet_id": 22851, "code": " or not isinstance(value, str): raise ValueError(\"The arguments 'key' and 'value' must both be \" \"strings. Instead they are{} and{}.\".format( key, value)) self.extra_data[key]=value def __enter__(self): ", "label": 0}, {"snippet_id": 73319, "code": " include from. import views urlpatterns=[ path('', views.index, name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views", "label": 0}, {"snippet_id": 64234, "code": " IdP can request a logout even when we didn't initiate the process as a single logout request started by another SP. \"\"\" current_app.logger.debug('Logout service started') state=StateCache(session) identity", "label": 0}, {"snippet_id": 67930, "code": ".models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import", "label": 0}, {"snippet_id": 52867, "code": "), 'timestamp': instance.time_ago, 'timestamp_string': instance.timestamp_string, 'user_handle': self.request.user.full_name, 'user_type': self.request.user.user_type, 'message': instance.text, 'file_name", "label": 0}, {"snippet_id": 21041, "code": ".all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self, use_valgrind=False, use_profiler=False): \"\"\"Start the raylet. Args: use_valgrind(bool", "label": 0}, {"snippet_id": 40682, "code": ".prod_fam +',' +p.prod_type +',' +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response", "label": 1}, {"snippet_id": 36146, "code": " if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products", "label": 0}, {"snippet_id": 39557, "code": " import models from django.core.exceptions import ValidationError from django import forms from django.urls import reverse from.common_info import CommonInfo \t \t \t \t \t class ExtractedText(CommonInfo): data_document", "label": 1}, {"snippet_id": 49921, "code": ".args or diagram: return redirect('/login?return_url=saveAs&diagram=true') return redirect('/login?return_url=saveAs') else: return render_template('saveFile.html', diagram=diagram) @app.route('/saveAs", "label": 0}, {"snippet_id": 70843, "code": " HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.", "label": 1}, {"snippet_id": 65649, "code": " os.path.exists(self.filechooser_creation_dialog.get_filename()): builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/override_dialog.ui\") self.override_dialog=builder.get_object", "label": 0}, {"snippet_id": 48828, "code": " to Selected Products' return render(request, template_name,{'products': p, 'q': q, 'form': form, 'full_p_count': full_p_count}) @login_required() def assign_puc_to_product(request, pk, template_name=(", "label": 0}, {"snippet_id": 11462, "code": "(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's", "label": 0}, {"snippet_id": 3368, "code": "(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get", "label": 1}, {"snippet_id": 54611, "code": " error in \"+homework_file.path \t\t\t\traise \t\tself.assignments=[] \t\tfor homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment", "label": 0}, {"snippet_id": 50381, "code": "(url_for('login')) user=query_social_user(social); session['social']=social if user is None: insert_social_user(social) return redirect('/') if __name__==\"__main__\": \tapp.run(host=\"localhost\", port=8000,", "label": 0}, {"snippet_id": 34489, "code": ".browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get", "label": 0}, {"snippet_id": 21350, "code": " true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true.", "label": 0}, {"snippet_id": 81009, "code": "'event.registration'].sudo().search([('partner_id', '=', partner_id), ('event_id', '=', event.id)]) try: if existing_registration: if event.seats_available > 0 and event.seats_availability==u'limited':", "label": 0}, {"snippet_id": 36369, "code": " extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('", "label": 0}, {"snippet_id": 75485, "code": "'etd_app/staff_view_abstract.html',{'candidate': candidate}) @login_required @permission_required('etd_app.change_candidate', raise_exception=True) @require_http_methods(['POST']) def staff_format_post", "label": 0}, {"snippet_id": 13796, "code": " update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's", "label": 0}, {"snippet_id": 61499, "code": " Dict, TYPE_CHECKING from pshtt.pshtt import inspect_domains import tldextract from django.utils import timezone from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain", "label": 1}, {"snippet_id": 49552, "code": "=True app=Flask(__name__) app.config['SECRET_KEY']='secret' app.config['OAUTH_CREDENTIALS']={ 'facebook':{ 'id': '604820106335654', 'secret': '5eb3f15f84c722df9cbc577206557cc8' }, 'twitter':{ 'id': 'cGFr2WV93py7an7FrGXXNDS6p", "label": 1}, {"snippet_id": 53224, "code": ".views.generic.simple import direct_to_template from oi.projects.models import Project, OINeedsPrjPerms from oi.helpers import OI_READ def get_feature(request, id): task=Project.objects.get(id=id) if not", "label": 1}, {"snippet_id": 24212, "code": ".worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock", "label": 1}, {"snippet_id": 39763, "code": " data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict", "label": 0}, {"snippet_id": 38928, "code": " all(self.datadocument_set.values_list('matched', flat=True)) def all_extracted(self): return all(self.datadocument_set.values_list('extracted', flat=True)) def registered_docs(self): return self.datadocument_set", "label": 0}, {"snippet_id": 5341, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location", "label": 1}, {"snippet_id": 50714, "code": "(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path) logfile.write", "label": 0}, {"snippet_id": 57155, "code": " invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction extra_context['header", "label": 0}, {"snippet_id": 25772, "code": ".services.include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self._node_ip_address=ray_params", "label": 0}, {"snippet_id": 84504, "code": "( revision=revision+1).get().old_title try: art=Article.objects.exclude(pk=article.pk).get(title=old_title) except ObjectDoesNotExist: if request.user.is_authenticated(): article.revert_to(revision, get_real_ip", "label": 1}, {"snippet_id": 39357, "code": " 'unit_type', 'weight_fraction_type', 'report_funcuse', 'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document", "label": 0}, {"snippet_id": 10853, "code": "' POST parameter HttpResponse: 403 if the client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if", "label": 0}, {"snippet_id": 8142, "code": " the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return", "label": 0}, {"snippet_id": 42161, "code": " extracted', response, 'Data Group should contain a count of 1 total extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client.get(url", "label": 0}, {"snippet_id": 47149, "code": "' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid(): hp_formset.save() if ext_form.is_valid(): ext_form.save() doc", "label": 0}, {"snippet_id": 10649, "code": " configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response", "label": 0}, {"snippet_id": 50799, "code": "]==value for(key, value) in conditions.items()): return True return False def run(self, context): return self.action(context) class BuildContext(object): pass def flatten_string_list(arglist): \"\"\" Assemble", "label": 0}, {"snippet_id": 25801, "code": ".start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address(self): \"\"\"Get the cluster Redis address", "label": 0}, {"snippet_id": 70820, "code": "'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath", "label": 1}, {"snippet_id": 9526, "code": " sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update", "label": 0}, {"snippet_id": 20292, "code": " else: raise Exception(\"This code should be unreachable.\") message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map=", "label": 0}, {"snippet_id": 22279, "code": "=local_mode self.driver_mode=driver_mode self.redirect_worker_output=redirect_worker_output self.redirect_output=redirect_output self.num_redis_shards=num_redis_shards self.redis_max_clients=redis_max_clients", "label": 0}, {"snippet_id": 81920, "code": " return redirect('home-view') class URLDetailView(LoginRequiredMixin, View): def get(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, ", "label": 0}, {"snippet_id": 13800, "code": "\"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy", "label": 0}, {"snippet_id": 30920, "code": "(grudget_id): if 'username' not in login_session: return redirect('/login') grudget=session.query(Grudget).filter_by(id=grudget_id).one() if request.method=='POST': newGrudge=Grudge(name=request.form['name'", "label": 1}, {"snippet_id": 10761, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) response=render_to_response('student_account/login_and_register.html',", "label": 0}, {"snippet_id": 3191, "code": " endpoint\"\"\" http_method_names=['get'] @property def failure_url(self): return import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get", "label": 0}, {"snippet_id": 28351, "code": " state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes", "label": 0}, {"snippet_id": 62605, "code": "'TOKEN_LOGIN_SHARED_KEY': 'shared_secret', 'TOKEN_LOGIN_SUCCESS_REDIRECT_URL': 'http://test.localhost/success', 'TOKEN_LOGIN_FAILURE_REDIRECT_URL': 'http://test.localhost/failure' }) return config def load_app(self, config", "label": 1}, {"snippet_id": 33940, "code": "'' ets_with_curation=ExtractedText.objects.filter( rawchem__dsstox__isnull=False).filter(pk=245401) for et in ets_with_curation: doc_qa_link=f'/qa/extractedtext/%s/' % et.data_document_id self.browser.get", "label": 0}, {"snippet_id": 30048, "code": "=True) name=Column(String(80), nullable=False) description=Column(String(450),nullable=False) processed=Column(String(5)) takeaway=Column(String(250)) grudget_id=Column(Integer, ForeignKey('Grudget.id'", "label": 1}, {"snippet_id": 83765, "code": " None) and is_private(group): return False return True def has_write_perm(user, group, is_member): \"\"\"Return True if the user have permission to edit Articles, False otherwise.\"\"\" if(group is None) or(is_member", "label": 0}, {"snippet_id": 22012, "code": "(bool): True if stdout and stderr for non-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard", "label": 0}, {"snippet_id": 41980, "code": "/datagroup/{self.objects.dg.pk}/') self.assertNotIn('Bulk Create', response.content.decode(), (\"Bulk button shouldn't be present w/ \" \"Habits and practices group_type.\")) def test_bulk_create_post(self): ''", "label": 0}, {"snippet_id": 5942, "code": ", ['accounts.google.com', 'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True) app.route('/oidc_callback')(self.oidc_callback", "label": 0}, {"snippet_id": 63497, "code": " method='POST', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn']=eppn session['eduPersonPrincipalName']=eppn response=self.app.dispatch_request() self.assertEqual(response.status, '200", "label": 0}, {"snippet_id": 14735, "code": " FieldList, FormField, StringField, PasswordField, validators from datetime import datetime import os.path import json import redis import re import pprint pp=pprint.PrettyPrinter(indent=4) app=Flask(__name__", "label": 0}, {"snippet_id": 55841, "code": "(self,mode): \t\treturn open(self.path,mode) \t\t class Link(FSItem): \tdef __init__(self,path): \t\tsuper(Link,self).__init__(path) \t\tassert(self.islink()) def current(): \tr=Folder(os.getcwd()) \treturn r def", "label": 0}, {"snippet_id": 75479, "code": "): candidate=get_object_or_404(Candidate, id=candidate_id) return render(request, 'etd_app/staff_view_abstract.html',{'candidate': candidate}) @login_required @permission_required('etd_app.change_candidate", "label": 0}, {"snippet_id": 12219, "code": " Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom", "label": 0}, {"snippet_id": 74424, "code": "=reverse_lazy(\"dashboard\") def form_valid(self, form): logger.debug(f\"{self.__class__.__name__} form valid\") output=super().form_valid(form) self.view_action() return output def form_invalid(self, form", "label": 0}, {"snippet_id": 82118, "code": " urls=form.cleaned_data['input_url'] urls_list=re.findall(r\"[\\w.']+\", urls) data_list=[] for url in urls_list: result=check_input_url(url) instance=JustURL.objects.create(input_url=result, short_url=f'", "label": 0}, {"snippet_id": 66145, "code": "\") headerbar.set_subtitle(self.database_filepath) self.window.set_titlebar(headerbar) self.parent_widget.set_headerbar(headerbar) back_button=self.builder.get_object(\"back_button\") back_button.connect(", "label": 0}, {"snippet_id": 39767, "code": " there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict", "label": 0}, {"snippet_id": 22560, "code": " box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json", "label": 0}, {"snippet_id": 38790, "code": ") downloaded_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) downloaded_at=models.DateTimeField() download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default", "label": 0}, {"snippet_id": 53858, "code": "> str: \"\"\" Location where step report is cached between sessions to prevent loss of display data between runs :return: \"\"\" if not self.project: return '' return os.path.join( self.project.results_path,", "label": 0}, {"snippet_id": 76309, "code": " not lat/lon, limits of the desired region. Ie BBOX, pretty much. user_width: The user-requested width of the image. user_height: The user-requested height of the image. Returns: The image to be presented", "label": 0}, {"snippet_id": 67380, "code": ".shortcuts import get_object_or_404, render from django.views.generic import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event", "label": 1}, {"snippet_id": 83791, "code": ": return True return False def article_list(request, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, template_name='index.html', template_dir='wiki", "label": 0}, {"snippet_id": 41737, "code": ".assertEqual(str(self.objects.dg.group_type),'Composition', 'Type of DataGroup needs to be \"composition\" for this test.') response=self.client.get(f'/datagroup/{pk}/') self.assertEqual(response.context", "label": 0}, {"snippet_id": 12147, "code": " 'login_form_desc': json.loads(form_descriptions['login']), 'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset", "label": 0}, {"snippet_id": 9382, "code": " originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views", "label": 0}, {"snippet_id": 21541, "code": " exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet. Args", "label": 0}, {"snippet_id": 24530, "code": " if log_filename in self.log_file_handles: new_lines=[] while True: current_position=( self.log_file_handles[log_filename].tell()) next_line=self.log_file_handles[log_filename].readline() if next_line ", "label": 1}, {"snippet_id": 65429, "code": "( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid", "label": 1}, {"snippet_id": 72568, "code": "=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid(): user=create_account(request) send_user_email(request, user) return render(request, 'registration/register.html', {'register_form':", "label": 0}, {"snippet_id": 74591, "code": "'etd_app/faq.html') def copyright(request): return render(request, 'etd_app/copyright.html') def get_person_instance(request): person_instance=None try: person_instance=Person.objects.get(netid=request", "label": 0}, {"snippet_id": 51551, "code": ", argv=None): builder=Builder() behaviour_globals={ 'fetch_dependencies':builder.fetch_dependencies, 'get_dependency_args':builder.get_dependency_args, 'add_option':builder.add_option, 'add_bool_option", "label": 0}, {"snippet_id": 77050, "code": " WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label, projection, request_type, db_type, version, tile_arg_names):", "label": 0}, {"snippet_id": 21589, "code": " \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_LOG_MONITOR, check_alive=check_alive) def kill_monitor(self, check_alive=True): \"\"\"Kill the monitor. Args: check_alive(bool): Raise an exception", "label": 0}, {"snippet_id": 5173, "code": " paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects", "label": 0}, {"snippet_id": 22989, "code": "=hashlib.sha1() id_hash.update(uuid.uuid4().bytes) id_bytes=id_hash.digest() assert len(id_bytes)==ray_constants.ID_SIZE return id_bytes def format_error_message(exception_message, task_exception=False):", "label": 0}, {"snippet_id": 33605, "code": " ethylparaben_stats['dds_wf_n'], 'There should be 2 extracted chemicals \\ with weight fraction data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\"", "label": 0}, {"snippet_id": 76546, "code": " the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster -~0.017s vs ~0.029s", "label": 0}, {"snippet_id": 78237, "code": " org_id, 'users': users}) def command(self): \"\"\" :return: \"\"\" self._load_config() username_prefix=self.options.username_prefix updates=0 for org in self.get_organizations(): print('--------------------", "label": 0}, {"snippet_id": 62868, "code": " session, '/', None, force_authn=force_authn)) idp_url=authn_req.split('?')[0] self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(idp_url)) def acs(self, url, eppn, check_fn", "label": 1}, {"snippet_id": 23657, "code": " logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler) logger", "label": 1}, {"snippet_id": 47109, "code": "=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script=script) if created: extext.doc_date='please add...'", "label": 0}, {"snippet_id": 32645, "code": ": The node to pipe the output from. second: The node to pipe the input into. ''' def __init__(self, first, second): self.first=first self.second=second def execute(self, builtins): read, write=os.pipe(", "label": 0}, {"snippet_id": 28764, "code": "-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0]) raise ValueError(\"Can't find{} in 'vmstat' output.\".format(stat)) def sysctl", "label": 0}, {"snippet_id": 70652, "code": " is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len", "label": 0}, {"snippet_id": 16633, "code": ": \"\"\"Return a GameSeeder that knows about the tournament so far\"\"\" tourney_players=tournament.tournamentplayer_set.all() seeder=GameSeeder(GreatPower.objects.all(), starts=100, iterations=10) for tp in", "label": 0}, {"snippet_id": 63457, "code": ".test_client() as c: resp=c.get('/test3') self.assertEqual(resp.status_code, 200) class LogoutRequestTests(AuthnAPITestBase): def test_metadataview(self): with self.app.test_client() as c: response=c.get(", "label": 0}, {"snippet_id": 47283, "code": "=Count('datagroup__datadocument', filter=Q(datagroup__datadocument__matched=True)) extracted =Count('datagroup__datadocument__extractedtext') ds_list =DataSource.objects.annotate(registered=registered)", "label": 0}, {"snippet_id": 82979, "code": " RemoteCrashEvent(CrashEvent): \"\"\"Crash event subclass for remote component crashes. Provides the name of the crashed component along with the host it ran on and a short message. \"\"\" def __init__(self, comp_name,", "label": 0}, {"snippet_id": 45722, "code": ",{'object': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename", "label": 0}, {"snippet_id": 74713, "code": " if banner_id: person.bannerid=banner_id person.save() candidate=candidate_form.save(commit=False) candidate.person=person candidate.save() return HttpResponseRedirect(reverse('candidate_home', kwargs=", "label": 0}, {"snippet_id": 60176, "code": " fts_versions, \"extensions\": sqlite_extensions, \"compile_options\":[ r[0] for r in conn.execute(\"pragma compile_options;\").fetchall() ], }, } def plugins(self, show_all=False): ps=list(get_plugins(pm)) if not", "label": 0}, {"snippet_id": 70146, "code": ".templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f", "label": 0}, {"snippet_id": 60180, "code": "\"compile_options\":[ r[0] for r in conn.execute(\"pragma compile_options;\").fetchall() ], }, } def plugins(self, show_all=False): ps=list(get_plugins(pm)) if not show_all: ps=[p for p in ps if p[\"name\"] not in", "label": 0}, {"snippet_id": 24594, "code": " e: if e.errno==os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{}", "label": 1}, {"snippet_id": 34113, "code": ".get_attribute(\"innerHTML\")) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() wait=WebDriverWait(self.browser, 10) save_button=wait.until( ec.element_to_be_clickable((By.XPATH, \"//", "label": 0}, {"snippet_id": 50942, "code": " build_step(self, name=None, optional=False, default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None:", "label": 0}, {"snippet_id": 19144, "code": " self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True t.start() def _run(self): import_pubsub_client", "label": 1}, {"snippet_id": 23452, "code": ".unhexlify(hex_identifier) def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers", "label": 0}, {"snippet_id": 44994, "code": "=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True) self.assertContains(response, f'href=\"/datagroup/{self.objects.dg.pk}/\" role=\"button\">Cancel</a>'", "label": 0}, {"snippet_id": 80368, "code": ".set_bifi_approx_wavelength_action.triggered.connect(self.set_bifi_approx_wavelength_dialog) self.set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self", "label": 0}, {"snippet_id": 24613, "code": ".warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the log monitor. This will query Redis once every second", "label": 1}, {"snippet_id": 4656, "code": "\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http", "label": 0}, {"snippet_id": 78915, "code": "'].id) tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id", "label": 1}, {"snippet_id": 31460, "code": "'default':{ 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': os.environ.get('DB_NAME', 'postgres'), 'USER': os.environ.get('DB_USER', 'postgres'), 'PASSWORD': os.environ.get('DB_PASSWORD', ''),", "label": 0}, {"snippet_id": 71378, "code": " start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self._config['base_uri'", "label": 1}, {"snippet_id": 81845, "code": " return render(request, 'home.html',{'form': form}) class SuccessUrlView(View): def get(self, request, pk, *args, **kwargs): object=JustURL.objects.get(pk=pk) form=CounterCountingForm() return render(request", "label": 0}, {"snippet_id": 18677, "code": " database to verify if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"\" \tdef post(self): \t\tself", "label": 1}, {"snippet_id": 17313, "code": ", forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask.current_app bp=flask.Blueprint", "label": 0}, {"snippet_id": 8374, "code": ".extra_tags.split()[0]==\"social-auth\": context['errorMessage']=_(unicode(msg)) break return context def _get_form_descriptions(request): \"\"\"Retrieve form descriptions from the user API. Arguments: request", "label": 0}, {"snippet_id": 56440, "code": " test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary://app') \\ .given_a_dynamic_link('') \\ .when_call_profile_redirect(", "label": 0}, {"snippet_id": 32416, "code": ".append(self.last.lexeme) node=CommandNode(command, args) redirs=self.redirections() if redirs: node=RedirectionsNode(node, redirs) if self.accept(TokenType.PIPE): return PipeNode(node, self.command())", "label": 0}, {"snippet_id": 19508, "code": " if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE", "label": 1}, {"snippet_id": 57519, "code": ": transaction.save() return redirect('transaction_detail', transaction_code=transaction.code) else: extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context)", "label": 0}, {"snippet_id": 12987, "code": " email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present", "label": 0}, {"snippet_id": 4603, "code": "=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly", "label": 0}, {"snippet_id": 45319, "code": "'puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime +relativedelta(months=i) if i +1 > len(product_stats) or product_stats[i]['puc_assigned_month'] !=chart_month:", "label": 0}, {"snippet_id": 43944, "code": " from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * def log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url", "label": 0}, {"snippet_id": 75475, "code": " raise_exception=True) def view_abstract(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) return render(request, 'etd_app/staff_view_abstract.html',{'candidate': candidate})", "label": 0}, {"snippet_id": 525, "code": " like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you'd like to override it, you can create a template called ``static/directory_index.html``. ", "label": 0}, {"snippet_id": 55928, "code": "'/e' PROFILE_PATH='/p' EXPERIENCE_DEEPLINK_PATH='/experiences' PROFILE_DEEPLINK_PATH='/profiles' def email_confirmation_redirect(request): response=HttpResponse('', status=302) response['Location']='{}", "label": 0}, {"snippet_id": 40949, "code": "'specialP@55word') def test_absent_extracted_text(self): for dd in DataDocument.objects.all(): ddid=dd.id resp=self.client.get('/datadocument/%s/' % ddid) self.assertEqual(resp.status_code, 200, 'The page", "label": 0}, {"snippet_id": 46534, "code": ".rawchem_ptr) ingredient.lower_wf_analysis=row['lower_wf_analysis'] ingredient.central_wf_analysis=row['central_wf_analysis'] ingredient.upper_wf_analysis=row['upper_wf_analysis'] ingredient.script=script", "label": 0}, {"snippet_id": 29853, "code": " add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post) db.session", "label": 0}, {"snippet_id": 4234, "code": "(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2", "label": 0}, {"snippet_id": 83459, "code": ", **kwargs): editor_ip=self.cleaned_data['user_ip'] comment=self.cleaned_data['comment'] article=super(ArticleForm, self).save(*args, **kwargs) editor=getattr(self, 'editor', None) group=getattr(self, ", "label": 0}, {"snippet_id": 51791, "code": ") params=get_params(url) params['redirect']='https://www.google.com' fullURL=generate_url_with_params(url, params) req=requests.get(fullURL) if req.content.find('google') !=-1: success_message(fullURL)", "label": 1}, {"snippet_id": 24724, "code": "-logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() ray.utils.setup_logger(args.logging_level, args.logging_format)", "label": 0}, {"snippet_id": 60139, "code": "{fts}(data)\".format(fts=fts) ) fts_versions.append(fts) except sqlite3.OperationalError: continue datasette_version={\"version\": __version__} if self.version_note: datasette_version[\"note\"]=self.version_note", "label": 0}, {"snippet_id": 22253, "code": ".object_id_seed=object_id_seed self.redis_address=redis_address self.num_cpus=num_cpus self.num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory", "label": 0}, {"snippet_id": 55527, "code": "(self): \t\treturn FSPath(*(self._raw())) class FSItem(FSPath): \tdef __init__(self,path): \t\tsuper(FSItem,self).__init__(path) \t\tassert(self.isabs()) \t\tassert(self.lexists()) \tdef parent(self): \t\tp=self.dirname", "label": 0}, {"snippet_id": 40683, "code": ".prod_type +',' +p.description + ',' +str(p.get_level()) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii", "label": 1}, {"snippet_id": 81930, "code": "(self, request, pk, *args, **kwargs): form=CounterCountingForm() object=JustURL.objects.get(pk=pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form}) def post(self, request", "label": 0}, {"snippet_id": 49954, "code": "(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'] if name: if name[-4:] !=\".pml\": name +=\".pml\" if allowed_file(name", "label": 0}, {"snippet_id": 12393, "code": " enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions", "label": 0}, {"snippet_id": 11650, "code": "=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options':", "label": 0}, {"snippet_id": 52327, "code": " AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(\"/current-board\", methods=[\"POST\"]) def update_most_recently_clicked_board(): \"\"\" \"\"\" board_id=request.form.get(\"boardId\") session[\"current_board", "label": 1}, {"snippet_id": 47646, "code": " chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined as", "label": 0}, {"snippet_id": 10384, "code": " messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django.core.urlresolvers import reverse from django.http import HttpResponse, HttpResponseBadRequest", "label": 0}, {"snippet_id": 78822, "code": " request. :type organization_id: string :returns: A dict with the data request(id, user_id, title, description, organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict", "label": 0}, {"snippet_id": 66338, "code": "(self, widget): self.window.set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self, widget): password_unlock_entry=self.builder.get_object(\"password_unlock_entry", "label": 0}, {"snippet_id": 40720, "code": ")) self.assertEqual(csv_lines[1], puc_line) class DashboardTestWithFixtures(TestCase): fixtures=fixtures_standard def test_chemical_card(self): response=self.client.get('/').content.decode('utf8') self", "label": 1}, {"snippet_id": 58593, "code": " print(\"Onboarding course is not provided\") return chat_exists=Chat.objects.filter( user=instructor.user, enroll_code__courseUnit__course=course, progress__gte=70 ).exists() if chat_exists: update_onboarding_step", "label": 1}, {"snippet_id": 63898, "code": ".config.get('SAML2_LOGIN_REDIRECT_URL', '/') relay_state=request.args.get('next', redirect_url) idps=current_app.saml2_config.getattr('idp') assert len(idps)==1 idp=idps.keys()[0] idp=request.args.get(", "label": 1}, {"snippet_id": 53574, "code": ".format(error), stack=[format_stack_frame(f, project) for f in get_stack_frames()] ) return dict( success=False, error=error, message=templating.render_template( 'user-code-error.txt', **render_data ),", "label": 0}, {"snippet_id": 54984, "code": "\tbut make a more OO interface to dealing with files and folders. \tEnvisioned class hierarchy would be something like: \tFSItem \t\tFolder \t\tFile \tand there would be intuitive properties/methods \tfor FSItem", "label": 0}, {"snippet_id": 15532, "code": "') if get_command('start_day'): form.start_day.data=str_to_datetime(get_command('start_day')[0]['start_day']) if get_command('number_of_days'): form.number_of_days.data=get_command('number_of_days')[0]", "label": 0}, {"snippet_id": 57761, "code": ".find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()] return round( len(filter(lambda x: x, steps)) / float(len(steps)) * 100, 0 ) return 0", "label": 0}, {"snippet_id": 60831, "code": " has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"\"\" try: proc=Process(self.pid) if proc.is_running(): return", "label": 0}, {"snippet_id": 69009, "code": "/affmIMoMXSozKmga81JSwkADO1JMgUy6dApXz9kP4EE3g== =CLGF -----END PGP PUBLIC KEY BLOCK----- \"\"\".strip() apt.trust_gpg_key(key) apt.add_source('nodesource', 'https://deb.nodesource.com/node_10.x', 'main') apt.install_packages(['nodejs']", "label": 0}, {"snippet_id": 59957, "code": " if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":", "label": 0}, {"snippet_id": 67463, "code": "'30_day_labels']=self.thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request.GET.get(", "label": 0}, {"snippet_id": 16477, "code": " 'round': r, 'count': count, 'sitters': sitters, 'doubles': doubles} form=GetSevenPlayersForm(request.POST or None, the_round=r) if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1): rp", "label": 0}, {"snippet_id": 69454, "code": " up and running Loops given number of times, waiting a second each. \"\"\" for i in range(times): try: logger.info('Waiting for JupyterHub to come up({}/{} tries)'.format(i +1, times)) urlopen('http://127.0", "label": 0}, {"snippet_id": 67527, "code": ")).order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0)", "label": 0}, {"snippet_id": 61461, "code": " if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled[mon_job.comp_name]=True jobs.extend(comp_jobs) for mon_job in jobs", "label": 0}, {"snippet_id": 62182, "code": " \"X-Permitted-Cross-Domain-Policies\", \"master-only\", ) def validate_pragma(page): return validate_security_header(page, \"Pragma\", \"no-cache\") def validate_expires(page): return validate_security_header", "label": 0}, {"snippet_id": 8530, "code": " detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"", "label": 0}, {"snippet_id": 39847, "code": "': value}) class Ingredient(CommonInfo): lower_wf_analysis=models.DecimalField(max_digits=16, decimal_places=15, null=True, blank=True, validators=[validate_wf_analysis]) central_wf_analysis=models.DecimalField", "label": 0}, {"snippet_id": 5013, "code": " %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response", "label": 1}, {"snippet_id": 44312, "code": ".get(url) submit=self.browser.find_element_by_id('tag_submit') self.assertFalse(submit.is_enabled(), \"Button should be disabled\") tag=self.browser.find_element_by_class_name('taggit-tag') tag.click() self", "label": 0}, {"snippet_id": 45251, "code": "=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count',", "label": 0}, {"snippet_id": 24432, "code": " A dictionary mapping the name of a log file to a list of strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__", "label": 1}, {"snippet_id": 40795, "code": " card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) orm_prod_puc_count=ProductToPUC.objects.values( 'product_id').distinct", "label": 0}, {"snippet_id": 11179, "code": ".Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image", "label": 0}, {"snippet_id": 62907, "code": " url: the url of the desired authentication mode. :type url: str :param eppn: the eppn of the user to access the service :type eppn: str :param check_fn: the function that checks the side effects after", "label": 0}, {"snippet_id": 76544, "code": " with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For 8 tiles, unthreaded was faster", "label": 0}, {"snippet_id": 83861, "code": "=ArticleClass(title='NewArticle', content_type=get_ct(group), object_id=group.id) else: new_article=ArticleClass(title='NewArticle') template_params['new_article']=new_article if extra_context is not None", "label": 0}, {"snippet_id": 69880, "code": ", put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You", "label": 0}, {"snippet_id": 76385, "code": " if set_pixel_to_bgcolor else _TRANSPARENT_ALPHA if layer_properties.image_format==\"image/jpeg\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent", "label": 0}, {"snippet_id": 47233, "code": " login_required from django.shortcuts import render, redirect, get_object_or_404 from dashboard.forms import DataSourceForm, PriorityForm from dashboard.models import DataSource, DataGroup, DataDocument", "label": 0}, {"snippet_id": 4897, "code": "): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self.locale,) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertRedirects(response, '/', status_code", "label": 0}, {"snippet_id": 59463, "code": ".strip()), ) DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS } async def favicon(request): return response.text(\"\") class Datasette: def __init__( self, files, cache_headers=True", "label": 0}, {"snippet_id": 58077, "code": "=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email/milestone_ortc_notify_text\" ) self.assertEqual(len(mail.outbox), 1) @mock", "label": 0}, {"snippet_id": 33601, "code": " ethylparaben_stats=e self.assertEqual(2, ethylparaben_stats['dds_wf_n'], 'There should be 2 extracted chemicals \\ with weight fraction data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs", "label": 0}, {"snippet_id": 84732, "code": " allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) if notification.is_observing(article, request.user): notification.stop_observing(article, request.user)", "label": 0}, {"snippet_id": 60385, "code": "\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( [ FileSystemLoader(template_paths), PrefixLoader( {\"default\": FileSystemLoader(default_templates)}, delimiter=", "label": 0}, {"snippet_id": 68030, "code": ".order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html',", "label": 0}, {"snippet_id": 70608, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If", "label": 0}, {"snippet_id": 82638, "code": " check for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__", "label": 0}, {"snippet_id": 48451, "code": "')} form=ProductLinkForm(initial=initial) queryset=DocumentType.objects.filter(group_type=doc.data_group.group_type) form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm", "label": 0}, {"snippet_id": 61939, "code": "/115014888548--Implement-Quantcast-Tag-Directly-on-Your-Site comScore: http://www.scorecardresearch.com/(no public docs) Krux Digital: https://whotracks.me/trackers/krux_digital.html \"\"\" analytics_scripts=(", "label": 0}, {"snippet_id": 56116, "code": " root_redirect(request): dynamic_link=settings.DYNAMIC_LINK if len(dynamic_link) > 0: link=dynamic_link.format('{}/'.format(settings.PUBLIC_DOMAIN)) else: link='{}/'.format(settings.APP_DEEPLINK_DOMAIN", "label": 1}, {"snippet_id": 25707, "code": "(bool): True if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered", "label": 0}, {"snippet_id": 81053, "code": " no seats available') else: if event.seats_available > 0 and event.seats_availability==u'limited': _logger.info('No registration found, create new one') http.request.env['event.registration'].sudo().create", "label": 0}, {"snippet_id": 29901, "code": " comment=Comment.query.get_or_404(comment_id) if current_user.has_role('admin') or comment.owner(current_user): db.session.delete(comment) db.session.commit() else: flash('you can\\'t delete this comment", "label": 0}, {"snippet_id": 46358, "code": "'document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 for doc in docs_needing_products: try: ext=ExtractedText", "label": 0}, {"snippet_id": 49152, "code": "=ExtractedText.objects.get_subclass(pk=doc.pk) child_formset=ChildFormSet(instance=extracted_text) if not edit: for form in child_formset.forms: for field in form.fields: form.fields[field].widget.attrs", "label": 0}, {"snippet_id": 38980, "code": " get_dg_folder(self): uuid_dir=f'{settings.MEDIA_ROOT}{str(self.fs_id)}' name_dir=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2", "label": 0}, {"snippet_id": 15850, "code": "['id'], 'date': datetime.fromtimestamp(item['date'] / 1000), 'commands': item['commands'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm", "label": 0}, {"snippet_id": 19949, "code": "\"\"Handle an xray heartbeat batch message from Redis.\"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData", "label": 0}, {"snippet_id": 71292, "code": " _get_messages(self, key='_messages'): try: return self.session.data.pop(key) except KeyError: pass get_messages=_get_messages def _set_redirect_uri(self): next_uri=self.GET.get('next') if next_uri is not None", "label": 1}, {"snippet_id": 71394, "code": ", provider_params=self._url_parse_re.match( req.path_info).group(1, 2) if provider: req.provider=provider req.provider_params=provider_params strategy_class=self._load_strategy(provider) resp=req.get_response", "label": 0}, {"snippet_id": 79233, "code": " log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')({'ignore_auth", "label": 0}, {"snippet_id": 26856, "code": " logging import ray.ray_constants as ray_constants class RayParams(object): \"\"\"A class used to store the parameters used by Ray. Attributes: redis_address(str): The address of the Redis server to connect to", "label": 0}, {"snippet_id": 77413, "code": "\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers processing done\") return layers_by_name class", "label": 0}, {"snippet_id": 16192, "code": "': r} return render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def roll_call(request, tournament_id, round_num=None): \"\"\"Provide a form to specify", "label": 0}, {"snippet_id": 76756, "code": "\"\"\" logger.debug(\"Processing the transparency for tile\") if not tile: return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile) tile=(tile if rgba_tile.getpixel", "label": 0}, {"snippet_id": 25431, "code": ".info(\"Monitor: num_flushed{}\".format(num_flushed)) ray.experimental.flush_redis_unsafe(self.redis) self.gcs_flush_policy.record_flush() def run(self): \"\"\"Run the monitor. This function loops forever, checking", "label": 0}, {"snippet_id": 64082, "code": "') return LogoutPayload().dump({'location': location}).data user=current_app.central_userdb.get_user_by_eppn(eppn) current_app.logger.debug('Logout process started for user{!r}'.format(user)) state=StateCache", "label": 0}, {"snippet_id": 62323, "code": ": the authenticated user :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{!r} logging in.\".format(user)) session['_saml2_session_name_id']=code(session_info['name_id']) session['eduPersonPrincipalName", "label": 0}, {"snippet_id": 71968, "code": "'/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri", "label": 1}, {"snippet_id": 77303, "code": " result=p.sub(\"\", result) p=re.compile(r\";\\s*$\") result=p.sub(\"\", result) p=re.compile(r\"([\\[\\{,])\\s*(\\w+)\\s*:\") result=p.sub(r'\\g<1>\"\\g<2>\":', result) return json.loads(result) def _LayersFromServerVars", "label": 0}, {"snippet_id": 84575, "code": "): if request.method=='GET': if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) changes_qs=changes_qs.filter(article__content_type=get_ct(group), article__object_id", "label": 0}, {"snippet_id": 2471, "code": "): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime", "label": 0}, {"snippet_id": 74038, "code": " settings from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import", "label": 0}, {"snippet_id": 30712, "code": " def editGrudget(grudget_id): editedGrudget=session.query( Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if editGrudget.user_id !=login_session['user_id", "label": 1}, {"snippet_id": 68917, "code": " AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAWVaCraFdigHTmD/9OKhUy jJ+h8gMRg6ri5EQxOExccSRU0i7UHktecSs0DVC4lZG9AOzBe+Q36cym5Z1di6JQ kHl69q3zBdV3KTW+H1pdmnZlebYGz8paG9iQ/wS9gpnSeEyx0Enyi167Bzm0O4A1 GK0prkLnz", "label": 0}, {"snippet_id": 69301, "code": "-admins') user.ensure_group('jupyterhub-users') logger.info(\"Granting passwordless sudo to JupyterHub admins...\") with open('/etc/sudoers.d/jupyterhub-admins', 'w') as f: f.write('%jupyterhub-admins ALL=", "label": 0}, {"snippet_id": 20128, "code": " driver_object_id_bins: sharded_keys[to_shard_index(object_id_bin)].append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0", "label": 0}, {"snippet_id": 81527, "code": "(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def _event_does_not_exist(self, old_repeating_event, new_end_date): _logger.info('Checking new event", "label": 0}, {"snippet_id": 22137, "code": " Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling", "label": 0}, {"snippet_id": 75531, "code": "'candidate_id': candidate_id})) @login_required def view_file(request, candidate_id): candidate=get_object_or_404(Candidate, id=candidate_id) if candidate.person.netid !=request.user.username: if not request", "label": 0}, {"snippet_id": 49268, "code": "=doc_note doc.save() return redirect('data_document', pk=pk) @login_required() def save_ext_form(request, pk): referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument, pk=pk", "label": 0}, {"snippet_id": 15387, "code": " field.data}) elif field.name=='change_input_series_one_model': for entry in field.entries: result.append({ 'command': field.name, 'model_system_name': entry.model_system_name.data, 'input_source_initial", "label": 0}, {"snippet_id": 43949, "code": " import * def log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please", "label": 0}, {"snippet_id": 10887, "code": ".is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens", "label": 0}, {"snippet_id": 79266, "code": " organization_show=tk.get_action('organization_show') return organization_show({'ignore_auth': True},{'id': organization_id}) except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk", "label": 0}, {"snippet_id": 37790, "code": "*args, **kwargs): super(ExtractedChemicalForm, self).__init__(*args, **kwargs) if hasattr(self.instance, 'dsstox') and self.instance.dsstox is not None: self.fields['true_cas']=forms.CharField(max_length", "label": 0}, {"snippet_id": 61452, "code": ".job_queue.get() if isinstance(mon_job, HostMonitorJob): jobs.append(mon_job) if isinstance(mon_job, ComponentMonitorJob) and mon_job.comp_name not in already_handleled: comp_jobs.append(mon_job) already_handleled", "label": 0}, {"snippet_id": 8533, "code": " orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[]", "label": 0}, {"snippet_id": 79579, "code": " data_dict) validator.validate_datarequest(context, data_dict) data_req=db.DataRequest() _undictize_datarequest_basic(data_req, data_dict) data_req.user_id=context['auth_user_obj'].id data_req.open_time", "label": 0}, {"snippet_id": 28283, "code": ": The Python object in question. Returns: True if the object is an function or method. \"\"\" return inspect.isfunction(obj) or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether", "label": 0}, {"snippet_id": 72901, "code": " redirect_field_name=None) def positions(request): try: sort_by=request.session['position_sort'] except KeyError: sort_by='-created' if request.method=='POST': if request.POST.get(\"sort-created\"): sort_by='", "label": 1}, {"snippet_id": 13237, "code": " import json import logging import urlparse from datetime import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django", "label": 0}, {"snippet_id": 48931, "code": " render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,)", "label": 0}, {"snippet_id": 59177, "code": "() def __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email) @receiver(post_save, sender=Invite) def onboarding_invite_created(sender, instance, **kwargs): update_onboarding_step(onboarding", "label": 1}, {"snippet_id": 59332, "code": " for requested facets \"\"\".strip()), ConfigOption(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"\"\" Time limit", "label": 0}, {"snippet_id": 81732, "code": " reverse_lazy from django.views import View from django.views.generic import CreateView, ListView, UpdateView, DeleteView from django.contrib.auth.mixins import LoginRequiredMixin from.forms import ShortUrlForm,", "label": 0}, {"snippet_id": 23839, "code": " bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"", "label": 0}, {"snippet_id": 54900, "code": "\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item in code_list: \t\t(prob_code,prob_code_data)=code_item \t\t(assignment_student,prob_id)=prob_code_data ", "label": 0}, {"snippet_id": 43347, "code": "[@id=\"id_rawchem-0-true_cas\"]').get_attribute('value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser", "label": 0}, {"snippet_id": 15312, "code": " return[( value['series_name_system'], value['series_name_system'] +':' +value['series_name_user'] ) for key, value in model['inputs'].iteritems()] def get_inputs_choices(): models=load_json('models.json')", "label": 0}, {"snippet_id": 7873, "code": "( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing': True, 'disable_courseware_js", "label": 0}, {"snippet_id": 34717, "code": " Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id", "label": 0}, {"snippet_id": 3179, "code": " import( absolutify, import_from_settings, is_authenticated, ) class OIDCAuthenticationCallbackView(View): \"\"\"OIDC client authentication callback HTTP endpoint\"\"\" http_method_names=['get'] @property def", "label": 0}, {"snippet_id": 57986, "code": "\"description\": \"\", \"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps(): data[step]", "label": 0}, {"snippet_id": 40892, "code": "'/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1,", "label": 0}, {"snippet_id": 84399, "code": "=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article", "label": 0}, {"snippet_id": 43583, "code": ".current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type", "label": 1}, {"snippet_id": 82691, "code": " str \"\"\" super(RemoteComponentMonitoringJob, self).__init__(pid, comp_name) self.hostname=hostname self.host_status=host_status def run_check(self): \"\"\"Runs a check if a remote process is still running.", "label": 0}, {"snippet_id": 56597, "code": ".response.status_code==302 assert self.response['Location']==url return self class AASATestCase(TestCase): def test_aasa_returns_json_with_appid(self): AASATestCase.ScenarioMaker() \\ .given_an_apple_appid(", "label": 0}, {"snippet_id": 11674, "code": "(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES", "label": 0}, {"snippet_id": 57789, "code": " user_id} onboarding_data=c_onboarding_status(use_secondary=True).find_one(find_crit) if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{'$set':{ step:", "label": 0}, {"snippet_id": 64540, "code": "') def metadata(): \"\"\" Returns an XML with the SAML 2.0 metadata for this SP as configured in the saml2_settings.py file. \"\"\" metadata=entity_descriptor(current_app.saml2_config) response=make_response", "label": 0}, {"snippet_id": 55592, "code": ".dirname().path) \tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os", "label": 0}, {"snippet_id": 39969, "code": " model_utils import FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField", "label": 1}, {"snippet_id": 65011, "code": " if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0] left_valid=False if type(left)==ast.Call:", "label": 0}, {"snippet_id": 17127, "code": " else: i.player=field.player try: i.full_clean() except ValidationError as e: f.add_error(None, e) i.delete() return render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset':", "label": 0}, {"snippet_id": 55380, "code": " None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path", "label": 0}, {"snippet_id": 57903, "code": " get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int): user's id Return: dict with", "label": 0}, {"snippet_id": 14546, "code": "'options': released_languages(), }, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }", "label": 0}, {"snippet_id": 71942, "code": "=req.get_redirect_uri() self.assertEqual(redirect_uri, '/callback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback') req._load_session() req.set_redirect_uri() req._config={'success_uri': ", "label": 1}, {"snippet_id": 68297, "code": " query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: from_date=today", "label": 0}, {"snippet_id": 68679, "code": " redirect('twitter_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return", "label": 0}, {"snippet_id": 26424, "code": ".PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process.poll() is not None: if check_alive: raise Exception(\"Attempting to kill a process", "label": 0}, {"snippet_id": 17211, "code": "): content[gp.power.name]=gp.score data.append(content) formset=GameScoreFormset(request.POST or None, initial=data) if formset.is_valid(): for f in formset: g=Game.objects.get(name=f.cleaned_data['game_name", "label": 0}, {"snippet_id": 29128, "code": " will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock", "label": 0}, {"snippet_id": 60966, "code": "-F %s %s \"ps -p %s > /dev/null\"' %(config.CUSTOM_SSH_CONFIG_PATH, self.hostname, self.pid) if call(cmd, shell=True)==0: return True else: return RemoteCrashEvent(self.comp_name, self.hostname) return True", "label": 0}, {"snippet_id": 44605, "code": "=WeightFractionType.objects.create(title='reported', description='reported') ec=ExtractedChemical.objects.create(extracted_text=extext, unit_type=ut, weight_fraction_type=wft, raw_chem_name='Test Chem Name'", "label": 0}, {"snippet_id": 28370, "code": " make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random", "label": 0}, {"snippet_id": 23790, "code": " of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f", "label": 0}, {"snippet_id": 38068, "code": "), ('FO', 'formulations'), ('AR', 'articles'), ('OC', 'occupational')) kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False", "label": 0}, {"snippet_id": 19466, "code": " logger.info(\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename]=[] def check_log_files_and_push_updates(self): \"\"\"Get any changes to", "label": 1}, {"snippet_id": 63965, "code": "' not in request.form: abort(400) xmlstr=request.form['SAMLResponse'] session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated", "label": 0}, {"snippet_id": 78261, "code": ",[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting", "label": 0}, {"snippet_id": 78578, "code": "'organization']['users'] if user.get('capacity')=='admin']) return users @tk.chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request. The function", "label": 0}, {"snippet_id": 59621, "code": " value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata() with table=specified but not database=\" databases=self._metadata.get(\"databases\") or{} search_list=[]", "label": 0}, {"snippet_id": 13149, "code": "'PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link': configuration_helpers.get_value( 'PASSWORD_RESET_SUPPORT_LINK', settings.PASSWORD_RESET_SUPPORT_LINK ) or settings.SUPPORT_SITE_LINK", "label": 0}, {"snippet_id": 35558, "code": " form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'", "label": 0}, {"snippet_id": 84824, "code": " dmp.diff_cleanupSemantic(diffs) return HttpResponse(dmp.diff_prettyHtml(diffs), content_type='text/html') def backlinks(request, title): \"\"\"Simple text search for links in other wiki articles pointing", "label": 0}, {"snippet_id": 26647, "code": " already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_MONITOR, check_alive=check_alive) def kill_raylet_monitor(self, check_alive=True): \"\"\"Kill the raylet monitor. Args: check_alive(bool", "label": 0}, {"snippet_id": 1692, "code": " header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 3526, "code": "\"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get", "label": 0}, {"snippet_id": 40222, "code": ", blank =False, default ='EX') confidence=models.PositiveSmallIntegerField('Confidence', blank=True, validators=[ MaxValueValidator(100), MinValueValidator(1)], default=1) def __str__(self): return str", "label": 0}, {"snippet_id": 72053, "code": ": RESOURCE_ID=\"cluster_id/export_id\" def list(self): result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports", "label": 0}, {"snippet_id": 3841, "code": "(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self)", "label": 0}, {"snippet_id": 52844, "code": ": return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings", "label": 0}, {"snippet_id": 3847, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"", "label": 0}, {"snippet_id": 54808, "code": " in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str(book_edition)+\" on problem \"+problem_number \t\t\tfor item in value: \t\t\t\tprint \"=\"*50 \t\t\t\tprint item", "label": 1}, {"snippet_id": 29586, "code": " render_template, flash, g, current_app from werkzeug.utils import secure_filename from flask_security import login_required, current_user from benwaonline.database import db from benwaonline.models import Post, Tag", "label": 1}, {"snippet_id": 54252, "code": "-Page \"\"\" @app.errorhandler(500) def page_not_found(error): \treturn render_template('500.html'), 500 \"\"\" ** JSON response routes ** \"\"\" \"\"\"JSON response containing information for a particular politician ", "label": 0}, {"snippet_id": 73076, "code": "=CreatePositionFormText.browse_for_pdf url_text=CreatePositionFormText.link_to_job_description upload_text=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText.browse submit_text=CreatePositionFormText", "label": 0}, {"snippet_id": 62753, "code": ". :param eppn: the eppn of the user to be logged in :type eppn: str :param came_from: url to redirect back the client after finishing with the authn service. :type came_from: str :return: the cookie corresponding", "label": 0}, {"snippet_id": 61871, "code": " page, soup def validate_subdomain(url): \"\"\"Is the landing page on a subdomain\"\"\" parsed_domain=tldextract.extract(url) return parsed_domain.subdomain not in('', 'www') def validate_not_using_cdn(page):", "label": 0}, {"snippet_id": 67839, "code": "=day) label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs' def get_context_data(self", "label": 0}, {"snippet_id": 29129, "code": " be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe proxy for the given client. \"\"\" if lock is None: lock=threading.Lock() return _ThreadSafeProxy(client, lock) def", "label": 0}, {"snippet_id": 72356, "code": "[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [{'daemon_id': daemon_id, 'cluster_id': cluster_id} for daemon_id in GaneshaConf.instance", "label": 0}, {"snippet_id": 41562, "code": " from dashboard.views.data_group import ExtractionScriptForm, DataGroupForm from django.core.files.uploadedfile import SimpleUploadedFile from django.contrib.auth.models import User from django.test import", "label": 1}, {"snippet_id": 41188, "code": " extracted record for data group types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data={'hhe_report_number'", "label": 0}, {"snippet_id": 2873, "code": ".crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import( absolutify, import_from_settings, is_authenticated", "label": 0}, {"snippet_id": 23847, "code": " docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return memory_in_bytes def get_shared_memory_bytes(): \"\"\"Get the size of the shared memory file system. Returns: The size of the", "label": 0}, {"snippet_id": 21843, "code": " command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The port that the", "label": 0}, {"snippet_id": 48777, "code": "=Product.objects.filter(Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form[", "label": 0}, {"snippet_id": 57867, "code": " data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE \"\"\" try: ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError: return onboarding_setting=c_onboarding_settings(use_secondary=True).find_one({'name': setting_name", "label": 0}, {"snippet_id": 48033, "code": " hp_formset=HnPFormSet(request.POST or None, instance=extext, prefix='habits') if request.method=='POST' and 'save' in request.POST: if hp_formset.is_valid() and ext_form.is_valid(): if not doc.extracted", "label": 0}, {"snippet_id": 48663, "code": "=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags |", "label": 0}, {"snippet_id": 53094, "code": "=data[form] data[form][form]='Update' response=self.client.post(update_url, data_to_pass) self.assertEqual(response.status_code, 302) self.assertTemplateUsed('users/update.html') data={'purchase_step':", "label": 1}, {"snippet_id": 29663, "code": ", posts=posts, tags=tags) @gallery.route('/gallery/benwa/') def show_post_redirect(): return redirect(url_for('gallery.show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id", "label": 1}, {"snippet_id": 83843, "code": " HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group new_article=ArticleClass", "label": 0}, {"snippet_id": 47167, "code": "(): ext_form.save() doc.extracted=True doc.save() context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required def dg_raw_extracted_records", "label": 0}, {"snippet_id": 54731, "code": ") \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[] \t", "label": 1}, {"snippet_id": 57712, "code": "*kwargs): if settings.SUSPEND_SIGNALS: return return func(sender, **kwargs) return fake_receiver return our_wrapper def get_onboarding_steps(): \"\"\" Get fields from somewhere, haven't decided yet Return", "label": 0}, {"snippet_id": 71488, "code": " from engineauth.strategies.google import GoogleStrategy strategy_class=app._load_strategy('google') self.assertEqual(strategy_class, GoogleStrategy) self.assertRaises(Exception, app._load_strategy, 'enron", "label": 0}, {"snippet_id": 52653, "code": ") is True: user_id=session.get(\"user_id\") projects_objects=q.get_projects_by_user(user_id) return render_template(\"actions-board.html\", projects=projects_objects) @app.route(\"/logout\", methods=[\"POST\"]", "label": 0}, {"snippet_id": 66267, "code": ".on_password_unlock_button_clicked) keyfile_unlock_button=self.builder.get_object(\"keyfile_unlock_button\") keyfile_unlock_button.connect(\"clicked\", self.on_keyfile_unlock_button_clicked) composite_unlock_button=self.builder", "label": 0}, {"snippet_id": 36765, "code": "(dashboard_datadocument.created_at)\"\"\"} document_stats={} document_stats['all']=list(DataDocument.objects.extra(select=select_upload_date) \\ .values('upload_date') \\ .annotate(document_count=Count('id'", "label": 0}, {"snippet_id": 52079, "code": " None: invite_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name, \"desc\": userteam.team.desc} invites_list.append(invite_dict) return render_template('dashboard.html', teams_list=teams_list,", "label": 1}, {"snippet_id": 6941, "code": ")) return render_template('auth/reset_password.html', form=form) @auth.route('/reset/<token>', methods=['GET', 'POST']) def password_reset(token): if not current_user.is_anonymous: return redirect(url_for", "label": 0}, {"snippet_id": 36810, "code": "=list(document_stats_by_type.filter(source_type='msds/sds')) for type in{'all'}: document_count=0 for item in document_stats[type]: if isinstance(item['upload_date'], datetime.date): item['upload_date'", "label": 0}, {"snippet_id": 47077, "code": "\"DataDocument_id\"}, use_verbose_names=False) else: qs=DataDocument.objects.filter(data_group_id=0).values(*columnlist) return render_to_csv_response(qs, filename=\"registered_records.csv\", use_verbose_names=False", "label": 0}, {"snippet_id": 43588, "code": "%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text(\"MSDS", "label": 1}, {"snippet_id": 77423, "code": ".debug(\"Found server layer: %s\", layer.name) logger.debug(\"Layers processing done\") return layers_by_name class GEELayer(object): \"\"\"Represents a Google Earth Enterprise Layer server.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 394, "code": " is the modification time of the item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9", "label": 0}, {"snippet_id": 12450, "code": "('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr", "label": 0}, {"snippet_id": 49238, "code": " document_type_form=DocumentTypeForm(request.POST, instance=doc) if document_type_form.is_valid() and document_type_form.has_changed(): document_type_form.save() return redirect(referer, pk=pk) @login_required", "label": 0}, {"snippet_id": 59704, "code": " plugin, falling back from specified database/table\" plugins=self.metadata( \"plugins\", database=database, table=table, fallback=fallback ) if plugins is None: return None return plugins.get(plugin_name) def", "label": 0}, {"snippet_id": 13620, "code": ", 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER']", "label": 0}, {"snippet_id": 51980, "code": "(remaining) return render_template(template) else: h.update_session_for_good_login(user_record.u_id, user_record.displayname) flash(\"Welcome back to SamePage\") return redirect(\"/dashboard\") @app.route(\"/login", "label": 0}, {"snippet_id": 35447, "code": "'data_document', pk=doc.pk) else: return redirect('link_product_list', pk=doc.data_group.pk) else: pass return render(request, template_name,{'document': doc, 'form': form}) @login_required() def detach_puc_from_product", "label": 0}, {"snippet_id": 25222, "code": " shard_index)) def xray_driver_removed_handler(self, unused_channel, data): \"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"", "label": 0}, {"snippet_id": 54117, "code": " politicians=politicians) \"\"\"About Page +Feedback \"\"\" @app.route('/about') def aboutpage(): return render_template('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation()", "label": 0}, {"snippet_id": 63027, "code": "'SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"\"\" def init_data(self): \"\"\" Called from the parent class, so we can extend data initialized. ", "label": 0}, {"snippet_id": 28801, "code": "\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory(): \"", "label": 0}, {"snippet_id": 26762, "code": ", process_info.process)) return result def dead_processes(self): \"\"\"Return a list of the dead processes. Note that this ignores processes that have been explicitly killed, e.g., via a command like node", "label": 0}, {"snippet_id": 41807, "code": " 'raw_category', 'raw_cas', 'raw_chem_name','report_funcuse'], \"Fieldnames passed are incorrect!\") def test_unidentifed_group_type(self): pk=self.objects.dg.pk self.objects.doc.matched=True self.objects", "label": 0}, {"snippet_id": 19520, "code": ": self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self", "label": 1}, {"snippet_id": 23415, "code": " be a bytes object.\".format(byte_str)) if sys.version_info >=(3, 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id)", "label": 0}, {"snippet_id": 75933, "code": "=from_url_helptext, blank=True, ) to_url=models.CharField( _('To URL'), max_length=255, db_index=True, help_text=to_url_helptext, blank=True, ) http_status=models.SmallIntegerField( _('HTTP Status'), choices", "label": 0}, {"snippet_id": 11499, "code": " page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response('student_account/account_settings.html', account_settings_context(request", "label": 0}, {"snippet_id": 44652, "code": "=ExtractedHabitsAndPractices.objects.create(extracted_text=extext, product_surveyed='Test Product Surveyed', prevalence='Continuous') return dotdict({'user':user, 'superuser':superuser, 'ds':ds, 'script", "label": 0}, {"snippet_id": 73715, "code": "(create_position_form) errors=dictionary.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=dictionary.get('position') request.session['position_id", "label": 0}, {"snippet_id": 30785, "code": " deleteGrudget(grudget_id): grudgetToDelete=session.query(Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if grudgetToDelete.user_id !=login_session", "label": 1}, {"snippet_id": 1639, "code": ".render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None", "label": 0}, {"snippet_id": 37350, "code": " model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA Notes(required if approving edited records)'), } class ExtractedTextQAForm(forms.ModelForm): required_css_class", "label": 1}, {"snippet_id": 21638, "code": "=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that This is slower than necessary because it calls kill, wait, kill, wait,... instead", "label": 0}, {"snippet_id": 51465, "code": " require_version(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have version{0}, but need version{1}.\"", "label": 0}, {"snippet_id": 72361, "code": "(): result.extend( [{'daemon_id': daemon_id, 'cluster_id': cluster_id} for daemon_id in GaneshaConf.instance(cluster_id).list_daemons()]) return result @UiApiController('/nfs-ganesha') class NFSGaneshaUi", "label": 0}, {"snippet_id": 39250, "code": "{'value': value},) class ExtractedChemical(CommonInfo, RawChem): raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length", "label": 0}, {"snippet_id": 76541, "code": "-explanatory. layer_properties: Object with details about the layer. Returns: ImageArray of the tiles. FWIW fetching isn't a big part of the total time for our WMS(~0.3s), so we don't bother with threads. For", "label": 0}, {"snippet_id": 25056, "code": " for client{}\".format(client_id)) def _xray_clean_up_entries_for_driver(self, driver_id): \"\"\"Remove this driver's object/task entries from redis. Removes control-state entries of all tasks and task return", "label": 0}, {"snippet_id": 15703, "code": "'delta', '') @app.route('/run') def view_run(): return render_template('run.html') @app.route('/run/form/init', methods=['POST']) def view_run_init(): run_form=get_run_form() commands=json.loads(request", "label": 0}, {"snippet_id": 44224, "code": " ds_detail_url, \"User should go back to detail view when clicking cancel\") dg_detail_url=f'{self.live_server_url}/datagroup/{dg.pk}/' self.browser.get(dg_detail_url) self.browser.find_element_by_xpath('//*[@title", "label": 0}, {"snippet_id": 26504, "code": "(message) continue if process_info.use_valgrind_profiler: os.kill(process.pid, signal.SIGINT) time.sleep(0.1) if allow_graceful: process.terminate() timer=threading.Timer(1, lambda process: process.kill", "label": 0}, {"snippet_id": 373, "code": "\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item", "label": 0}, {"snippet_id": 27467, "code": "\"'GPU' should not be included in the resource dictionary. Use \" \"num_gpus instead.\") if self.num_workers is not None: raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus", "label": 0}, {"snippet_id": 21634, "code": "._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note that This is", "label": 0}, {"snippet_id": 24178, "code": ", mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run, name=\"ray_import_thread\") t.daemon=True", "label": 1}, {"snippet_id": 73181, "code": ".email_address password_text=CreateAccountFormText.choose_password password_confirm_text=CreateAccountFormText.confirm_password email=forms.EmailField( label=StandardFormText.username_or_email_label, max_length", "label": 0}, {"snippet_id": 80870, "code": ") sys.argv.append('COM5') print(sys.argv) exit_code=ControlApplication.EXIT_CODE_RESTART while exit_code==ControlApplication.EXIT_CODE_RESTART: gui=ControlApplication([]) with redirect_stdout(gui.log_stream", "label": 1}, {"snippet_id": 6785, "code": ".confirm(token): flash('Your account is confirmed. Thank you!') else: flash('The confirmation link is invalid or has expired.') return redirect(url_for('main.index')) @auth.route('/confirm') @login_required", "label": 0}, {"snippet_id": 71777, "code": ".assertEqual(user_count, 1) user=models.User.query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p)", "label": 0}, {"snippet_id": 67217, "code": " apps.reputation.models import blacklist from apps.twitter.models import tweet from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='ip/index.html' def get_context_data(self", "label": 0}, {"snippet_id": 71656, "code": ".create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() resp=req.get_response(app) resp.request=req resp", "label": 0}, {"snippet_id": 36223, "code": "=models.BooleanField(default=False) def __str__(self): return str(self.content_object) class PUCTag(TagBase, CommonInfo): class Meta: verbose_name=_(\"PUC Attribute\") verbose_name_plural=_(\"PUC Attributes\"", "label": 1}, {"snippet_id": 83846, "code": "'title') template_params={'articles': articles, 'allow_write': allow_write} if group_slug is not None: template_params['group']=group new_article=ArticleClass(title='NewArticle', content_type=get_ct(group)", "label": 0}, {"snippet_id": 2791, "code": "['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT", "label": 1}, {"snippet_id": 57472, "code": " redirect('message', message=gettext('Transaction Closed')) if request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True", "label": 0}, {"snippet_id": 25906, "code": " try_to_create_directory(path) else: raise Exception(\"Socket file{} exists!\".format(socket_path)) def start_redis(self): \"\"\"Start the Redis servers.\"\"\" assert self._redis_address is None (self._redis_address", "label": 0}, {"snippet_id": 32063, "code": ". ''' def __init__(self, ttype, lexeme=None, position=None): self.lexeme=lexeme self.ttype=ttype self.position=position class Tokenizer: ''' Performs lexical analysis on a raw string. Args: string: The", "label": 0}, {"snippet_id": 68830, "code": " secrets import subprocess import sys import time from urllib.error import HTTPError from urllib.request import urlopen, URLError import pluggy from tljh import( apt, conda, hooks, migrator, systemd, traefik", "label": 0}, {"snippet_id": 7258, "code": " governing permissions and limitations under the License.''' from app.models.theq import Office from.base import Base from flask_login import current_user from qsystem import db class OfficeConfig(Base", "label": 0}, {"snippet_id": 7662, "code": " as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter", "label": 0}, {"snippet_id": 63008, "code": "\"\" return dump_cookie(self.app.config.get('SESSION_COOKIE_NAME'), session_id, max_age=float(self.app.config.get('PERMANENT_SESSION_LIFETIME')), path=self.app.config.get('SESSION_COOKIE_PATH'), domain=self", "label": 0}, {"snippet_id": 20532, "code": "=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config", "label": 1}, {"snippet_id": 43399, "code": " None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical without a unit type should return a validation error ", "label": 0}, {"snippet_id": 79981, "code": " open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception will be risen.", "label": 0}, {"snippet_id": 8603, "code": " 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url': EcommerceService().get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders", "label": 0}, {"snippet_id": 81951, "code": " user_agent=client_agent, ) clicktracker.url.add(object) clicktracker.save() object.save() return link_redirect(request, pk) return render(request, 'url-detail-view.html',{'object': object, 'form': form})", "label": 0}, {"snippet_id": 14672, "code": " def _get_node(board_cfg): if board_cfg.linux_on_class is not None: return board_cfg.linux_on_class() return board_cfg.board_class() @log_to_stderr def main(): \"\"\" serial_redirection cli main function ", "label": 0}, {"snippet_id": 61771, "code": " results back to the database. \"\"\" securedrops=securedrops.with_domain_annotation() domains=securedrops.values_list('domain', flat=True) results=inspect_domains(domains,{'timeout': 10}) results_to_be_written=", "label": 1}, {"snippet_id": 27334, "code": ".worker_path=worker_path self.huge_pages=huge_pages self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self", "label": 0}, {"snippet_id": 11966, "code": " third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log", "label": 0}, {"snippet_id": 8637, "code": " HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings", "label": 0}, {"snippet_id": 44028, "code": "=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"//table[@id='sources']/tbody/tr", "label": 0}, {"snippet_id": 32888, "code": " redirections. ''' def __init__(self, redirections): self.redirections=redirections self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in", "label": 0}, {"snippet_id": 82868, "code": " self.host_lock.acquire() self.host_status[self.hostname]=None self.host_lock.release() return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname", "label": 0}, {"snippet_id": 74828, "code": " candidate_form=CandidateForm(post_data, instance=candidate) if person_form.is_valid() and candidate_form.is_valid(): person=person_form.save() banner_id=request.META.get('Shibboleth-brownBannerID', '')", "label": 0}, {"snippet_id": 34006, "code": "'changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox", "label": 0}, {"snippet_id": 5059, "code": "', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response", "label": 0}, {"snippet_id": 26881, "code": " then this command will start Redis, a global scheduler, a local scheduler, a plasma store, a plasma manager, and some workers. It will also kill these processes when Python exits. redis_port(int): The", "label": 0}, {"snippet_id": 47742, "code": "'extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(", "label": 0}, {"snippet_id": 46763, "code": "\"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType.objects.get( group_type=datagroup.group_type", "label": 0}, {"snippet_id": 57148, "code": "*kwargs): extra_context={} if not request.user.is_authenticated: return invalid_permission_redirect(request) transaction_code=kwargs.get('transaction_code', None) transaction=get_object_or_404(Transaction,", "label": 0}, {"snippet_id": 31703, "code": "): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8')", "label": 1}, {"snippet_id": 36706, "code": "=DataDocument.objects.count() stats['datadocument_with_extracted_text_percent']=\\ DataDocument.objects.filter(extracted=True).count()/DataDocument.objects.count()*100 stats['datadocument_count_by_date'", "label": 0}, {"snippet_id": 57969, "code": "\"title\": \"Title\" } }, \"invite_somebody\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_thread\":{ \"done\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" ", "label": 0}, {"snippet_id": 81409, "code": "._handle_montly_event_repetition(repeating_event) def _handle_daily_event_repetition(self, old_repeating_event): _logger.info('Handling daily repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y", "label": 1}, {"snippet_id": 37623, "code": " lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num']", "label": 0}, {"snippet_id": 46342, "code": "' and 'bulk' in request.POST: a=set(docs.values_list('pk',flat=True)) b=set(prod_link.values_list('document_id',flat=True)) docs_needing_products=DataDocument.objects.filter(pk__in=list(a-b)) stub=Product", "label": 0}, {"snippet_id": 31701, "code": ",create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode", "label": 1}, {"snippet_id": 47049, "code": ": columnlist=['filename','title','document_type','url','organization'] dg=DataGroup.objects.filter(pk=pk).first() if dg: columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id=pk).values", "label": 0}, {"snippet_id": 24363, "code": " self.worker}) except Exception: traceback_str=traceback.format_exc() utils.push_error_to_driver( self.worker, ray_constants.FUNCTION_TO_RUN_PUSH_ERROR, traceback_str, driver_id=ray.DriverID(driver_id))", "label": 0}, {"snippet_id": 26904, "code": "): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis shards. num_cpus(int): Number", "label": 0}, {"snippet_id": 39499, "code": " ExtractedListPresence(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=100, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\", max_length=500, null=True, blank=True", "label": 1}, {"snippet_id": 51342, "code": " __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host, username=username, look_for_keys='True'", "label": 0}, {"snippet_id": 50570, "code": " self.f.close() def userlock(name): ''' Acquire a lock scoped to the local user. Only one build at a time can run with the given name per user per machine. While waiting for the lock, prints a notice to", "label": 0}, {"snippet_id": 33977, "code": "'value') rc=RawChem.objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle", "label": 0}, {"snippet_id": 56776, "code": " return redirect('message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction extra_context['header']=gettext('Delete{}?'.format(concept.concept_type)) extra_context['message", "label": 0}, {"snippet_id": 50319, "code": " content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session", "label": 0}, {"snippet_id": 57631, "code": " sender's email. to_email(list): list of addresses to send an email to. template_subject(str): path to a subject template, e.g. 'ctms/email/subject.txt' template_text(str): path to a body template, e.g", "label": 0}, {"snippet_id": 39307, "code": " functional use\", max_length=100, null=True, blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default='1') ingredient_rank=models.PositiveIntegerField", "label": 0}, {"snippet_id": 83622, "code": " article_qs=None): if article_qs is None: article_qs=ALL_ARTICLES return article_qs.filter(content_type=get_ct(object), object_id=object.id) def get_url(urlname, group=None, args=None, kw=None): if group", "label": 0}, {"snippet_id": 9471, "code": " user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 28828, "code": " amount of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\")", "label": 0}, {"snippet_id": 35407, "code": ".value() product.color=form['color'].value() product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type", "label": 0}, {"snippet_id": 17616, "code": "'Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator</a> to manually ' 'activate your account <a href=\"{}\">\\'{}\\'</a>.' .format(flask.url_for('site.help') +' flask.url_for", "label": 0}, {"snippet_id": 83325, "code": " object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class Meta: model=Article exclude=('creator', 'creator_ip', 'group', 'created_at',", "label": 0}, {"snippet_id": 35570, "code": ".filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects", "label": 0}, {"snippet_id": 44671, "code": ":superuser, 'ds':ds, 'script':script, 'exscript':exscript, 'dg':dg, 'doc':doc, 'p':p, 'puc':puc, 'extext':extext, 'ut':ut, 'wft':wft, 'rc':rc, 'ec':ec, 'pt':pt, 'pd':pd, 'ing':ing, 'dt':dt, 'gt':gt, 'ehp':ehp }", "label": 0}, {"snippet_id": 46731, "code": " if len(line['filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']", "label": 0}, {"snippet_id": 9136, "code": "=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login/registration form,", "label": 0}, {"snippet_id": 41766, "code": "'raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'], \"Fieldnames passed are incorrect!\") self.objects.gt.title='Functional use' self.objects.gt.code='FU' self.objects.gt.save() self.assertEqual(str", "label": 0}, {"snippet_id": 41042, "code": "(p_idx > e_idx,('Product card should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, '/link_product_form", "label": 0}, {"snippet_id": 56223, "code": ".then_response_should_be_a_redirect_to_app_deeplink_with_params() class ScenarioMaker: def when_call_login_email_redirect(self): client=Client() self.response=client.get('{}?{}'.format(reverse('login-redirect'), ", "label": 0}, {"snippet_id": 80162, "code": " self.window.show() def setup_logging(self): self.log_area=QTextEdit() self.log_area.setReadOnly(True) self.log_queue=queue.Queue() self.log_stream=LoggingStream(self.log_queue) self.log_thread=LoggingThread", "label": 0}, {"snippet_id": 25976, "code": "._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes", "label": 1}, {"snippet_id": 21918, "code": " redis_max_memory: The max amount of memory(in bytes) to allow redis to use, or None for no limit. Once the limit is exceeded, redis will start LRU eviction of entries. This only applies to the sharded redis tables", "label": 0}, {"snippet_id": 20327, "code": ".local_scheduler_id_to_ip_map[client_id]=ip_address def _maybe_flush_gcs(self): \"\"\"Experimental: issue a flush request to the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must", "label": 0}, {"snippet_id": 34712, "code": "=dtxs).filter( Q(raw_max_comp__isnull=False) | Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs)", "label": 0}, {"snippet_id": 80796, "code": ".lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock(checked) self.lock_slow_piezo_action.setChecked(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked):", "label": 0}, {"snippet_id": 80296, "code": "=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon') self.lock_thin_etalon_action.setCheckable(True)", "label": 0}, {"snippet_id": 9906, "code": "'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments:", "label": 0}, {"snippet_id": 37029, "code": ".writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs:", "label": 1}, {"snippet_id": 33019, "code": ": return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self, obj): return obj.num_products num_products.short_description", "label": 0}, {"snippet_id": 65477, "code": ".container=Gtk.Notebook() self.container.set_border_width(0) self.container.set_scrollable(True) self.container.set_show_border(False) self.container.connect(\"switch-page\", self.on_tab_switch) self.add(self", "label": 0}, {"snippet_id": 20246, "code": " reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of messages to process before returning. \"\"\" subscribe_clients", "label": 0}, {"snippet_id": 77644, "code": " default_data_driven_application=\"NO\" default_version=\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ ", "label": 0}, {"snippet_id": 56752, "code": " django_xhtml2pdf.utils import generate_pdf @login_required() def concept_delete(request, *args, **kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs(**kwargs) extra_context", "label": 0}, {"snippet_id": 60489, "code": "\", ) app.add_route( JsonDataView.as_view(self, \"metadata.json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions", "label": 0}, {"snippet_id": 5874, "code": ".credentials_store=credentials_store\\ if credentials_store is not None\\ else MemoryCredentials() self.http=http if http is not None else httplib2.Http() self.time=time if time is not None else time_module.time self", "label": 0}, {"snippet_id": 45923, "code": ".models import * from dashboard.forms import(DataGroupForm, ExtractionScriptForm, CleanCompDataForm, create_detail_formset, include_extract_form, include_clean_comp_data_form) from dashboard.utils import", "label": 1}, {"snippet_id": 22308, "code": "=include_log_monitor self.autoscaling_config=autoscaling_config self.include_java=include_java self.java_worker_options=java_worker_options self._internal_config=_internal_config self._check_usage() def", "label": 0}, {"snippet_id": 18281, "code": "(so everything is synchronous) to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending on conditions, returns None or the error message to be", "label": 1}, {"snippet_id": 25494, "code": "\" \"monitor to connect to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str,", "label": 0}, {"snippet_id": 42333, "code": "], 'data_source':[dspk]} response=self.client.post(f'/datagroup/edit/{dgpk}/', data=data) self.assertEqual(response.status_code, 302, \"User is redirected to detail page.\") self.assertEqual(response.url", "label": 0}, {"snippet_id": 18014, "code": " activation_link, 'user': user } email_msg=email.EmailHolder( subject='Verify your{} account'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/verify.txt', **tmpl_context)", "label": 0}, {"snippet_id": 79752, "code": " raise tk.ObjectNotFound(tk._('Data Request %s not found in the data base') % datarequest_id) data_req=result[0] context['avoid_existing_title_check']=data_req.title==data_dict['title'] validator.validate_datarequest", "label": 0}, {"snippet_id": 5414, "code": ".assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 38835, "code": ", null=True) zip_file=models.CharField(max_length=100) group_type=models.ForeignKey(GroupType, on_delete=models.SET_DEFAULT, default=1, null=True, blank=True) url=models.CharField(max_length=150, blank", "label": 0}, {"snippet_id": 74242, "code": " return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger.info(self.invalid_access_no_key_message", "label": 0}, {"snippet_id": 42823, "code": "'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=9 response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True) self.assertEqual(response", "label": 1}, {"snippet_id": 16283, "code": " for form in formset: try: p=form.cleaned_data['player'] except KeyError: continue i, created=TournamentPlayer.objects.get_or_create(player=p, tournament=t) try: i.full_clean() except ValidationError as e", "label": 0}, {"snippet_id": 7922, "code": " requests originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled", "label": 0}, {"snippet_id": 46599, "code": " template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects", "label": 0}, {"snippet_id": 51434, "code": " AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message self.exitcode=exitcode def fail(*args, **kwargs): ''' fail(message,", "label": 0}, {"snippet_id": 59738, "code": ".read().encode( \"utf8\" ) ).hexdigest()[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names", "label": 0}, {"snippet_id": 23207, "code": " driver_id.binary(), error_data) def is_cython(obj): \"\"\"Check if an object is a Cython function or method\"\"\" def check_cython(x): return type(x).__name__==\"cython_function_or_method\" return check_cython", "label": 0}, {"snippet_id": 73958, "code": " request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request,", "label": 0}, {"snippet_id": 37393, "code": "=forms.ModelChoiceField( queryset=DocumentType.objects.all(), label=\"Data Document Type\", required=True) return_url=forms.CharField() class Meta: model=Product fields=['title', 'manufacturer', 'brand_name',", "label": 0}, {"snippet_id": 54162, "code": " politician=p if politician !=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=name, politician=politician) else: return render_template(", "label": 1}, {"snippet_id": 58513, "code": " onboarding.INTRODUCTION_INTRO: False, onboarding.CREATE_COURSE: True, onboarding.CREATE_COURSELET: False, onboarding.CREATE_THREAD: False, onboarding.INVITE_SOMEBODY: True, onboarding.NEXT_STEPS: False,", "label": 1}, {"snippet_id": 42930, "code": ".pk response=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects", "label": 0}, {"snippet_id": 55231, "code": ".path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive(self): \t\treturn os.path.splitdrive", "label": 0}, {"snippet_id": 19036, "code": "\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation", "label": 1}, {"snippet_id": 75110, "code": " Please make sure your abstract is correct in the information section below.') if thesis.title !=form.cleaned_data['title']: messages.info(request, 'Your title contained invisible characters that we\\'ve", "label": 0}, {"snippet_id": 48669, "code": "'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\"", "label": 0}, {"snippet_id": 83405, "code": ".clean() kw={} if self.cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id'] except", "label": 0}, {"snippet_id": 16184, "code": " request.user) r=get_round_or_404(t, round_num) context={'tournament': t, 'round': r} return render(request, 'rounds/%s.html' % template, context) @permission_required('tournament.add_roundplayer') def", "label": 0}, {"snippet_id": 62973, "code": " oq_cache.set(token, came_from) resp=self.app.dispatch_request() self.assertEquals(resp.status_code, 302) self.assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id", "label": 0}, {"snippet_id": 29955, "code": " TWITTER_CONSUMER_KEY='consume' TWITTER_CONSUMER_SECRET='secret' WTF_CSRF_ENABLED=False SECRET_KEY='not-so-secret' class ProdConfig(Config): DEBUG=False app_config={ 'dev': DevConfig, 'test': TestConfig, 'prod':", "label": 0}, {"snippet_id": 1578, "code": "/a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index", "label": 0}, {"snippet_id": 77018, "code": " \"y\", \"z\": \"z\"} } _SERVER_DEF_URL=\"query?request=Json&var=geeServerDefs&is2d=t\" _TILE_BASE_URL=\"%s/query?request=%s\" _IMAGE_FMT=\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\" _TILE_ARGS=\"&%s=%d", "label": 0}, {"snippet_id": 61736, "code": ": result.securedrop=securedrop result.save() return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet') -> None: \"\"\" This method takes a queryset and scans the securedrop pages. Unlike the scan", "label": 1}, {"snippet_id": 20365, "code": " if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard): return max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush", "label": 0}, {"snippet_id": 62254, "code": " validate_no_referrer_policy(page): return validate_security_header(page, \"Referrer-Policy\", \"no-referrer\") def validate_no_cookies(page): if len(page.cookies.keys()) > 0: return False else: return True", "label": 0}, {"snippet_id": 34286, "code": "(By.XPATH, \"//*[@id='id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr", "label": 0}, {"snippet_id": 54582, "code": " prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t\tself.p=pprint.PrettyPrinter(indent=2) \t\tself.homeworks=[] \t\tfor homework_file in self.d: \t\t\ttry: \t\t\t\tif homework_file.basename() !", "label": 1}, {"snippet_id": 4379, "code": "'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the", "label": 0}, {"snippet_id": 62357, "code": " relay_state=request.form.get('RelayState', '/') current_app.logger.debug('Redirecting to the RelayState: ' +relay_state) response=redirect(location=relay_state) session.set_cookie(response) current_app.logger", "label": 1}, {"snippet_id": 1497, "code": "), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"", "label": 0}, {"snippet_id": 51317, "code": " AbortRunException() def get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection=self._dependency_collection() return dependency_collection.get_args", "label": 0}, {"snippet_id": 33117, "code": ") admin.site.register(ExtractedFunctionalUse) admin.site.register(ExtractedHabitsAndPractices) admin.site.register(DSSToxLookup) admin.site.register(QAGroup) admin.site.register(UnitType) admin.site.register", "label": 0}, {"snippet_id": 40028, "code": " blank=True) dsstox=models.ForeignKey(DSSToxLookup, related_name='curated_chemical', on_delete=models.PROTECT, null=True, blank=True) objects=InheritanceManager() tracker=FieldTracker() def __str__(self", "label": 1}, {"snippet_id": 62045, "code": " validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if page.encoding is None: return False if page.encoding.upper() in('UTF-8', 'ISO-8859-1')", "label": 0}, {"snippet_id": 57805, "code": ": '', 'html': '' } ONBOARDING_SETTINGS_DEFAULT={ onboarding.INTRODUCTION_COURSE_ID: settings.ONBOARDING_INTRODUCTION_COURSE_ID, onboarding.VIEW_INTRODUCTION: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding", "label": 0}, {"snippet_id": 59351, "code": " calculating a suggested facet \"\"\".strip()), ConfigOption(\"allow_facet\", True, \"\"\" Allow users to specify columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow", "label": 0}, {"snippet_id": 44461, "code": "'specialP@55word', email='me@epa.gov') ds=DataSource.objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI') script=Script.objects.create(title='Test Download Script", "label": 0}, {"snippet_id": 23750, "code": "): \"\"\"Run a sysctl command and parse the output. Args: command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command", "label": 0}, {"snippet_id": 2373, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=", "label": 0}, {"snippet_id": 41725, "code": "'ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects.dg.group_type),'Composition', 'Type of DataGroup needs", "label": 0}, {"snippet_id": 46085, "code": ".pop(0) doc=DataDocument.objects.get(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +'/pdf') afn=doc.get_abstract_filename() fs.save(afn", "label": 0}, {"snippet_id": 38478, "code": " determines much of the available relationships and behavior associated with the document's extracted data ``products`` Products are associated with the data document in a many-to-many relationship ``matched``", "label": 0}, {"snippet_id": 60375, "code": "(self.template_dir) template_paths.extend( [ plugin[\"templates_path\"] for plugin in get_plugins(pm) if plugin[\"templates_path\"] ] ) template_paths.append(default_templates) template_loader=ChoiceLoader( ", "label": 0}, {"snippet_id": 9944, "code": " mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate", "label": 0}, {"snippet_id": 51427, "code": " ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message self", "label": 0}, {"snippet_id": 48925, "code": "'category_assignment' form.referer_pk=p.id if form.referer=='product_detail' else p.data_source.id return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_detail(request", "label": 0}, {"snippet_id": 1080, "code": ".st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <", "label": 0}, {"snippet_id": 25549, "code": "( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format", "label": 0}, {"snippet_id": 15012, "code": "'model_name']=model_name if re.search('input,source_type:', name): attrs=name.split(',') (ts_name, model_name, ts_author, _), source=attrs[:4], attrs[4:] ts['result_type']='Intermediate input time series", "label": 0}, {"snippet_id": 3046, "code": "', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME', 'next') params={ 'response_type': 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify", "label": 0}, {"snippet_id": 7929, "code": " user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django", "label": 0}, {"snippet_id": 69971, "code": ") fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not", "label": 1}, {"snippet_id": 64791, "code": ", instr_locals) if not result: dock_points(deductions, points_per_case, 'failed test case %d' % i) except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) dock_points(deductions, points_per_case", "label": 1}, {"snippet_id": 68311, "code": ") for day in range(30)[::-1]: from_date=today -timedelta(days=day) to_date=today -timedelta(days=day-1) count=self.object_list.filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append", "label": 0}, {"snippet_id": 35121, "code": " tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta: model=Product fields=['tags'] def __init__(self, *args, **kwargs)", "label": 0}, {"snippet_id": 22699, "code": " profiling data to the global control store. By default, profiling information for a given task won't appear in the timeline until after the task has completed. For very long-running tasks, we may want", "label": 1}, {"snippet_id": 17608, "code": ".session.commit() if models.RangeBan.is_rangebanned(user.registration_ip): flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator</a> to manually '", "label": 0}, {"snippet_id": 81896, "code": "(request) client_agent=request.META['HTTP_USER_AGENT'] clicktracker=ClickTracking.objects.create( client_ip=ip, user_agent=client_agent, ) clicktracker.url.add(object) clicktracker.save() object.save()", "label": 1}, {"snippet_id": 39680, "code": "(ExtractedText.objects.filter( qa_group=self.qa_group, qa_checked=False), self, 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The", "label": 0}, {"snippet_id": 25921, "code": ", redis_shards, process_infos)=ray.services.start_redis( self._node_ip_address, port=self._ray_params.redis_port, redis_shard_ports=self._ray_params.redis_shard_ports, num_redis_shards=self._ray_params", "label": 1}, {"snippet_id": 63603, "code": "'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn", "label": 1}, {"snippet_id": 69891, "code": ": '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view", "label": 0}, {"snippet_id": 22361, "code": " def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs: The keyword arguments to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg", "label": 0}, {"snippet_id": 42467, "code": " def test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects.extext.extraction_script.pk response", "label": 0}, {"snippet_id": 5392, "code": ".com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual", "label": 0}, {"snippet_id": 13504, "code": " redirect_url=redirect_to) ) third_party_auth_hint=provider_id initial_mode=\"hinted_login\" except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value", "label": 1}, {"snippet_id": 74638, "code": "-sn', '') info['first_name']=request.META.get('Shibboleth-givenName', '') info['email']=request.META.get('Shibboleth-mail', '') return info def _get_candidate(candidate_id, request): candidate=Candidate", "label": 0}, {"snippet_id": 69799, "code": " Views and functions for serving static files. These are only to be used during development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes", "label": 0}, {"snippet_id": 12441, "code": " enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer", "label": 0}, {"snippet_id": 41446, "code": " None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) self.assertFalse( 'SID' in form.fields) else: self.assertFalse( ", "label": 0}, {"snippet_id": 52767, "code": " object with a file attachment Returns on the socket { 'id': \"id\", 'sent_by':'user_id', 'room':\"room_id\", 'text':message.txt, 'file_name': message.attachment, 'file_link': message.attachment.path } \"\"\" model", "label": 0}, {"snippet_id": 7649, "code": " enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view", "label": 0}, {"snippet_id": 70045, "code": ".st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en", "label": 0}, {"snippet_id": 60491, "code": " app.add_route( JsonDataView.as_view(self, \"metadata.json\", lambda: self._metadata), r\"/-/metadata<as_format:(\\.json)?$>\", ) app.add_route( JsonDataView.as_view(self, \"versions.json\", self.versions), r\"/", "label": 0}, {"snippet_id": 68131, "code": ", event.get_threat_level_id_display(), event.attribute_count, event.org.name] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue()", "label": 0}, {"snippet_id": 35241, "code": "\"Deliver a datasource and its associated products\"\"\" ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at'", "label": 0}, {"snippet_id": 46911, "code": " render(request, template_name, context) @login_required() def data_group_update(request, pk, template_name='data_group/datagroup_form.html'): datagroup=get_object_or_404(DataGroup, pk=pk) form=DataGroupForm", "label": 0}, {"snippet_id": 38560, "code": "=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank=True, max_length=100) data_group=models.ForeignKey", "label": 0}, {"snippet_id": 39539, "code": " def get_datadocument_url(self): return self.extracted_cpcat.data_document.get_absolute_url() def get_extractedtext(self): return self.extracted_cpcat.extractedtext_ptr @property def data_document(self)", "label": 0}, {"snippet_id": 66418, "code": "-stream\") filter_text.add_mime_type(\"application/x-keepass2\") filter_text.add_mime_type(\"text/plain\") filter_text.add_mime_type(\"application/x-iwork-keynote-sffkey\") keyfile_chooser_dialog.add_filter(filter_text", "label": 0}, {"snippet_id": 62735, "code": " user is logged in(the session corresponding to the cookie has her eppn). This method returns the cookie that has to be sent with any subsequent request that needs to be athenticated. :param eppn: the eppn", "label": 0}, {"snippet_id": 4333, "code": " path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 41727, "code": " be included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects.dg.group_type),'Composition', 'Type of DataGroup needs to be \"composition", "label": 0}, {"snippet_id": 298, "code": " endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index", "label": 0}, {"snippet_id": 62980, "code": " self.assertEquals(resp.status_code, 302) self.assertEquals(resp.location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param", "label": 0}, {"snippet_id": 76368, "code": " _TILE_PIXEL_SIZE) set_pixel_to_bgcolor=(layer_properties.image_format==\"image/png\" and layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor else _NO_DATA_PIXELS", "label": 0}, {"snippet_id": 56343, "code": " experience.save() return self def given_a_public_domain(self, public_domain): settings.PUBLIC_DOMAIN=public_domain return self def given_a_dynamic_link(self, dynamic_link): settings.DYNAMIC_LINK=dynamic_link", "label": 0}, {"snippet_id": 67929, "code": ".threat.models import Event from.forms import HuntForm import csv from io import StringIO, BytesIO from codecs import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib", "label": 0}, {"snippet_id": 43875, "code": ".find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name of the new object", "label": 0}, {"snippet_id": 61702, "code": " saved to the database. You can optionally pass True for the commit argument, which will save the result to the database. In that case, the passed DirectoryEntry *must* already be in the database. \"\"\" securedrop_domain", "label": 1}, {"snippet_id": 25133, "code": ").binary() if task_id_bin in driver_task_id_bins: driver_object_id_bins.add(object_id.binary()) def to_shard_index(id_bin): return binary_to_object_id(id_bin).redis_shard_hash() % len( self.state.redis_clients", "label": 0}, {"snippet_id": 43194, "code": " from django.contrib.staticfiles.testing import StaticLiveServerTestCase from dashboard.models import * from selenium import webdriver from django.conf import settings from selenium.webdriver.support.select", "label": 1}, {"snippet_id": 54129, "code": "('about.html') \"\"\"Detects Location \"\"\" @app.route('/getlocation') def currentlocation(): return render_template('getlocation.html') \"\"\"Politician Page \"\"\" @app.route('/politicians/id/<name>') def politician_page", "label": 0}, {"snippet_id": 5186, "code": "/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile", "label": 0}, {"snippet_id": 74794, "code": " Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=", "label": 0}, {"snippet_id": 47854, "code": " get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID'", "label": 0}, {"snippet_id": 4775, "code": " from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp", "label": 0}, {"snippet_id": 28494, "code": " def get_cuda_visible_devices(): \"\"\"Get the device IDs in the CUDA_VISIBLE_DEVICES environment variable. Returns: if CUDA_VISIBLE_DEVICES is set, this returns a list of integers with the IDs of the GPUs", "label": 0}, {"snippet_id": 16450, "code": "\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) count=r.roundplayer_set.count() sitters=count % 7 if sitters==0: return HttpResponseRedirect(reverse(", "label": 0}, {"snippet_id": 23497, "code": " set_cuda_visible_devices(gpu_ids): \"\"\"Set the CUDA_VISIBLE_DEVICES environment variable. Args: gpu_ids: This is a list of integers representing GPU IDs. \"\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i)", "label": 0}, {"snippet_id": 72062, "code": "=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [export.to_dict() for export in GaneshaConf.instance(cluster_id).list_exports()]) return result @NfsTask('create',{'path': '{path}',", "label": 0}, {"snippet_id": 30815, "code": " authorized to delete this grudget. Please create your own grudget in order to edit.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgetToDelete) session.commit(", "label": 0}, {"snippet_id": 14790, "code": " auth_add_user('gleb.kondratenko@skybonds.com', 'pwd') def auth_init(): db.set('user:ids', '0') def auth_add_user(email, password): user_id=db.incr('user:ids') db.hset('user:emails', email, user_id) db.hmset(", "label": 0}, {"snippet_id": 23314, "code": " random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these are generated in a deterministic manner, then we will need to make some changes here. Returns", "label": 0}, {"snippet_id": 60699, "code": " import logging import sys import time import hyperion.lib.util.config as config from os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if", "label": 0}, {"snippet_id": 33779, "code": ", rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False).first()", "label": 1}, {"snippet_id": 43811, "code": ") self.assertEqual(\"Cancel\", cancel_button.text, 'The Cancel button should say Cancel') cancel_button.click() self.assertEqual(0, ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count", "label": 0}, {"snippet_id": 28601, "code": " runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked. Returns: A dictionary of the resource requirements", "label": 0}, {"snippet_id": 17502, "code": "'MAINTENANCE_MODE']: db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True return flask.redirect(redirect_url()) return", "label": 0}, {"snippet_id": 25560, "code": ".LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config:", "label": 1}, {"snippet_id": 45419, "code": "'gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc", "label": 1}, {"snippet_id": 51632, "code": "(keys))] evil_param='&'.join(pair) script+=evil_param return script def createPostScript(endpoint, params): keys=params.keys() values=params.values() pair=[keys[i]+'='+values[i] for i in range(len(keys", "label": 0}, {"snippet_id": 78009, "code": "=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email, notes=notes, update_frequency=update_frequency, resources=resources) def command(self): \"\"\" :return: \"\"\"", "label": 0}, {"snippet_id": 46978, "code": " template_name,{'datagroup': datagroup, 'form': form, 'header': header, 'groups': groups}) @login_required() def data_group_delete(request, pk, template_name='data_source/datasource_confirm_delete.html'", "label": 0}, {"snippet_id": 74796, "code": ": return HttpResponseRedirect(reverse('register')) if candidate.thesis.is_locked(): return HttpResponseForbidden('Thesis has already been submitted and is locked.') if request.method=='POST': post_data", "label": 0}, {"snippet_id": 23989, "code": " given object. Every method call will be guarded with a lock. Attributes: orig_obj(object): the original object. lock(threading.Lock): the lock object. _wrapper_cache(dict): a cache from original object", "label": 0}, {"snippet_id": 42556, "code": "): fixtures=fixtures_standard def setUp(self): self.c=Client() def test_faceted_search_excludes_chemicals(self): response=self.c.get('/find/?q=ethyl') self.assertContains(response, 'Data Document') self", "label": 0}, {"snippet_id": 44925, "code": ".objects.ehp.pk, 'habits-0-product_surveyed':'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits", "label": 0}, {"snippet_id": 56700, "code": ".models import BaseConcept, Transaction from django.shortcuts import get_object_or_404, render, redirect, reverse from django.utils.translation import gettext, gettext_lazy from clickgestion.transactions", "label": 0}, {"snippet_id": 48706, "code": ") puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags", "label": 0}, {"snippet_id": 74511, "code": ".views.decorators.http import require_http_methods from.models import Person, Candidate, Keyword, CommitteeMember from.widgets import ID_VAL_SEPARATOR BDR_EMAIL='bdr@brown.edu' logger=logging.getLogger(", "label": 0}, {"snippet_id": 63595, "code": ".app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }):", "label": 1}, {"snippet_id": 46011, "code": " 'datagroup' : dg, 'documents' : paginator.page(1 if page is None else page), 'all_documents' : docs, 'extract_fields': dg.get_extracted_template_fieldnames(), 'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form", "label": 0}, {"snippet_id": 67606, "code": " EventDetailView(PaginationMixin, ListView): model=Attribute template_name='threat/event_detail.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs): pk=self.kwargs", "label": 0}, {"snippet_id": 80774, "code": "\") else: for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking", "label": 0}, {"snippet_id": 10966, "code": "(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): ", "label": 0}, {"snippet_id": 47048, "code": ", pk): columnlist=['filename','title','document_type','url','organization'] dg=DataGroup.objects.filter(pk=pk).first() if dg: columnlist.insert(0, \"id\") qs=DataDocument.objects.filter(data_group_id=pk)", "label": 0}, {"snippet_id": 36371, "code": "'/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8", "label": 0}, {"snippet_id": 46368, "code": "\"id__max\"] +1 for doc in docs_needing_products: try: ext=ExtractedText.objects.get(data_document_id=doc.id) if ext: if ext.prod_name: new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText", "label": 0}, {"snippet_id": 30572, "code": "('/grudget/<int:grudget_id>/grudge/JSON') def grudgetGrudgeJSON(grudget_id): grudget=session.query(Grudget).filter_by(id=grudget_id).one() grudges=session.query(Grudge).filter_by(grudget_id=grudget.id)", "label": 1}, {"snippet_id": 31086, "code": ":grudget_id>/grudge/<int:grudge_id>/delete', methods=['GET', 'POST']) def deleteGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') grudgeToDelete=session.query", "label": 0}, {"snippet_id": 58942, "code": " return code def get_invited_user_username(self): return self.email.split(\"@\")[0] if self.email else '' class Meta: unique_together=('instructor', 'email', 'type', 'course', 'enroll_unit_code') def save", "label": 0}, {"snippet_id": 81331, "code": ", '%Y-%m-%d %H:%M:%S').strftime('%a') def get_attendee_list(self): attendee_list=str('') counter=1 reg_ids=self.sudo().registration_ids reg_ids=sorted(reg_ids, key=lambda x: x.date_open, reverse=False)", "label": 0}, {"snippet_id": 28319, "code": "\"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but we can't interfere", "label": 0}, {"snippet_id": 63372, "code": "', 'SAML2_SETTINGS_MODULE': saml_config, 'NO_AUTHN_URLS':['^/test$'], }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this", "label": 0}, {"snippet_id": 41339, "code": ".assertEqual(type(extsub), ExtractedHHDoc) else: self.assertEqual(type(extsub), ExtractedText) except ObjectDoesNotExist: pass def test_every_extractedtext(self): ''''Loop through all the ExtractedText objects", "label": 0}, {"snippet_id": 77029, "code": "\"&format=%s\" _CHANNEL_VERSION=\"&channel=%s&version=%s\" _TILE_ARGS=\"&%s=%d&%s=%d&%s=%d\" _SUPPORTED_DB_TYPES=(\"gemap\", \"gedb\", \"glm\", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"", "label": 0}, {"snippet_id": 25311, "code": ".get_message() if message is None: break channel=message[\"channel\"] data=message[\"data\"] if channel==ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel", "label": 0}, {"snippet_id": 49646, "code": " CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get('tempFile') is not None: if session['tempFile", "label": 0}, {"snippet_id": 78275, "code": " in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity", "label": 0}, {"snippet_id": 65417, "code": ".get_string( \"history\", \"last-opened-db\") +\")\") tab_title=ntpath.basename(keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager", "label": 1}, {"snippet_id": 7733, "code": "(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args", "label": 0}, {"snippet_id": 461, "code": " Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None,", "label": 0}, {"snippet_id": 44055, "code": ".browser.find_element_by_xpath('//*[@title=\"edit\"]').click() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when", "label": 0}, {"snippet_id": 44488, "code": "='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects", "label": 0}, {"snippet_id": 29448, "code": "=twitter.authorized_response() if not resp: flash(u'You denied the request to sign in.') return redirect(url_for('gallery.show_posts')) user_id=resp['user_id'] user=User.query.filter_by(user_id=user_id", "label": 0}, {"snippet_id": 62052, "code": " return False def validate_encoding(page): if page.encoding is None: return False if page.encoding.upper() in('UTF-8', 'ISO-8859-1'): return True else: return False def validate_server_software(page): if", "label": 0}, {"snippet_id": 72260, "code": ": protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) daemons=list(daemons) for d_id in old_export.daemons: if d_id not in daemons: daemons.append(d_id) if reload_daemons: ganesha_conf", "label": 0}, {"snippet_id": 37145, "code": " script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='EX'), label=\"Extraction Script\") weight_fraction_type=forms.ModelChoiceField( queryset=WeightFractionType.objects.all", "label": 0}, {"snippet_id": 3648, "code": "/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale", "label": 0}, {"snippet_id": 53299, "code": ": :param step: :return: \"\"\" module_name=step.definition.name.rsplit('.', 1)[0] module=types.ModuleType(module_name) with open(step.source_path, 'r') as f: source_code=f.read() try: code=InspectLoader.source_to_code", "label": 1}, {"snippet_id": 13920, "code": "(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value(", "label": 0}, {"snippet_id": 20943, "code": " redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes self.all_processes[ray_constants.PROCESS_TYPE_LOG_MONITOR]=[ process_info ] def start_ui(self)", "label": 1}, {"snippet_id": 792, "code": "(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This", "label": 0}, {"snippet_id": 58668, "code": ".user, isPreview=True, isLive=False, isTest=False ).exists() if enroll_unit_code_exists: update_onboarding_step(onboarding.STEP_6, instructor.user_id) print(\"Instructor{} passed onboarding at{}%\".format", "label": 0}, {"snippet_id": 76815, "code": "=pixdata[row, col] if alpha < _OPAQUE_ALPHA[0]: pixdata[row, col]=(red, green, blue) +_OPAQUE_ALPHA return tile def _FetchMapTile(url): \"\"\"Fetches and returns a tile, given an url. Args: url: the exact url", "label": 0}, {"snippet_id": 22488, "code": ") def profile(event_type, extra_data=None, worker=None): \"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can", "label": 0}, {"snippet_id": 24133, "code": "\"\"A thread used to import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer", "label": 1}, {"snippet_id": 74440, "code": " return output def form_invalid(self, form): return super().form_invalid(form) def view_action(self): pass class ReportDeletePartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"DELETE\" def view_action(self):", "label": 0}, {"snippet_id": 35541, "code": " products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in", "label": 0}, {"snippet_id": 19818, "code": " redis_port, redis_password=redis_password) self.redis=redis.StrictRedis( host=redis_address, port=redis_port, db=0, password=redis_password) self.primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages", "label": 1}, {"snippet_id": 81194, "code": "'subscription_type', '=', 'bz_tickets'), ('subscription_partner', '=', partner.id)]) if ai_monthly.subscription_is_active: return; if event_cat=='bokszaktraining': if bz_tickets: bz_tickets.subscription_counter", "label": 1}, {"snippet_id": 37737, "code": " }) def include_extract_form(dg): '''Returns the ExtractionScriptForm based on conditions of DataGroup type as well as whether all records are matched, but not extracted ''' if not dg.type in['FU', 'CO", "label": 0}, {"snippet_id": 63506, "code": " session['user_eppn']=eppn session['eduPersonPrincipalName']=eppn response=self.app.dispatch_request() self.assertEqual(response.status, '200 OK') self.assertIn(self.app.config['SAML2_LOGOUT_REDIRECT_URL'],", "label": 0}, {"snippet_id": 66494, "code": "=DatabaseManager(self.database_filepath, password=None, keyfile=keyfile_path) self.open_database_page() self.logging_manager.log_debug(\"Database successfully opened with keyfile\") except(OSError, IndexError", "label": 0}, {"snippet_id": 41691, "code": " ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context", "label": 0}, {"snippet_id": 66332, "code": ") else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window.set_headerbar() self.window.close_tab(self.parent_widget) def on_password_unlock_button_clicked(self,", "label": 0}, {"snippet_id": 5298, "code": "/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile", "label": 0}, {"snippet_id": 40893, "code": ".content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1, 'The", "label": 0}, {"snippet_id": 46880, "code": " pk=datagroup.id) else: groups=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context", "label": 0}, {"snippet_id": 31075, "code": "=grudget_id)) else: return render_template('editgrudge.html', grudget_id=grudget_id, grudge_id=grudge_id, grudge=editgrudge) @app.route('/grudget/<int:grudget_id>/grudge/<int:grudge_id>/delete', methods=['GET',", "label": 0}, {"snippet_id": 59012, "code": ".get_template('ctms/email/invite_text.txt') rendered_text=text_template.render(context) send_mail( rendered_subj, rendered_text, settings.EMAIL_FROM, [self.email], fail_silently=False ) return{ 'success", "label": 0}, {"snippet_id": 79385, "code": "['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def _send_mail(user_ids, action_type", "label": 1}, {"snippet_id": 19511, "code": " !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format", "label": 1}, {"snippet_id": 83404, "code": ").clean() kw={} if self.cleaned_data['action']=='create': try: kw['title']=self.cleaned_data['title'] kw['content_type']=self.cleaned_data['content_type'] kw['object_id']=self.cleaned_data['object_id']", "label": 0}, {"snippet_id": 69364, "code": ") apt.install_packages([ 'gcc' ]) conda.ensure_conda_packages(USER_ENV_PREFIX,[ 'conda==4.5.8' ]) conda.ensure_pip_packages(USER_ENV_PREFIX,[ 'jupyterhub==0.9.4', 'notebook==5.7.0', 'jupyterlab==0.35.3", "label": 1}, {"snippet_id": 45738, "code": ".get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer'] if request.POST['referer'", "label": 1}, {"snippet_id": 34628, "code": ") the chemical is associated with datadocs.n \"The number of data documents(e.g. MSDS, SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with", "label": 0}, {"snippet_id": 32180, "code": ".read() return Token(TokenType.REDIRECT_APPEND, None, start) else: return Token(TokenType.REDIRECT_OUT, None, start) elif self.char=='<': token=Token(TokenType.REDIRECT_IN, None, self.position) self.read()", "label": 0}, {"snippet_id": 17656, "code": ".html') else: user.status=models.UserStatusType.ACTIVE db.session.add(user) db.session.commit() flask.g.user=user flask.session['user_id']=user.id flask.session.permanent=True flask.session.modified=True", "label": 0}, {"snippet_id": 616, "code": "=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type", "label": 0}, {"snippet_id": 62840, "code": " the url of the desired authentication mode. :type url: str :param force_authn: whether to force reauthentication for an already authenticated client :type force_authn: bool \"\"\" with self.app.test_client(", "label": 0}, {"snippet_id": 31016, "code": " return \"<script>function myFunction(){alert('You are not authorized to edit this grudge.');}</script><body onload='myFunction()'>\" if request.method=='POST': if request.form['name']: editgrudge.name=request", "label": 0}, {"snippet_id": 22911, "code": "\"\"\" for key, value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \"", "label": 0}, {"snippet_id": 23656, "code": ".upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging.Formatter(logging_format)) logger.addHandler(_default_handler", "label": 1}, {"snippet_id": 7144, "code": " the License.''' from app.models.bookings import ExamType from.base import Base from flask_login import current_user from qsystem import db class ExamTypeConfig(Base): roles_allowed=['SUPPORT'] def is_accessible", "label": 0}, {"snippet_id": 1733, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 73213, "code": ")[1].lower() if email_domain !=\"canada.ca\": message=forms.ValidationError( format(ErrorMessages.invalid_email_domain % email_domain)) self.add_error('email', message) elif get_user_model().objects.filter", "label": 0}, {"snippet_id": 37234, "code": " class CleanCompDataForm(forms.Form): required_css_class='required' script_selection=forms.ModelChoiceField( queryset=Script.objects.filter(script_type='DC'), label=\"Data Cleaning Script\", required=True)", "label": 0}, {"snippet_id": 53484, "code": " def is_cauldron_code(test_filename: str) -> bool: if not test_filename or not test_filename.startswith(cauldron_path): return False if test_filename.startswith(resources_path): return False return True", "label": 0}, {"snippet_id": 47138, "code": "=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HPFormSet(request.POST or None, instance=extext, prefix='habits') context={ 'doc' : doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset,", "label": 0}, {"snippet_id": 33674, "code": " 1 product \\ associated with ethylparaben') def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b", "label": 0}, {"snippet_id": 41427, "code": " ChildForm=create_detail_formset(dd) child_formset=ChildForm(instance=et) for form in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( ", "label": 0}, {"snippet_id": 27217, "code": " defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports", "label": 0}, {"snippet_id": 35580, "code": "\",\") for id in product_ids: product=Product.objects.get(id=id) for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag", "label": 0}, {"snippet_id": 69592, "code": "(tljh_config_src, tljh_config_dest) def setup_plugins(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"\"\" if plugins: conda.ensure_pip_packages(HUB_ENV_PREFIX, plugins) pm=pluggy.PluginManager", "label": 0}, {"snippet_id": 11935, "code": " TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import", "label": 0}, {"snippet_id": 10171, "code": " HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll \"\"\" return render_to_response('student_account/finish_auth.html'", "label": 0}, {"snippet_id": 66517, "code": ".STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(\"Invalid keyfile chosen\") self.logging_manager.log_debug(\"Keyfile path: \" +keyfile_path", "label": 0}, {"snippet_id": 33163, "code": " import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=['gen_cat', 'prod_fam', 'prod_type', 'description','tags',] readonly_fields=('num_products", "label": 1}, {"snippet_id": 81784, "code": "'home.html',{'form': form}) def post(self, request, *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data['input_url'] category=form.cleaned_data['category']", "label": 0}, {"snippet_id": 18481, "code": "\tasync def post(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?=.{8,20", "label": 0}, {"snippet_id": 77764, "code": "] or default_update_frequency self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers", "label": 1}, {"snippet_id": 18255, "code": " handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives at /signup. \t\"\"\" \tdef get(self): \t\tself.render('signup.html',error='') \t ", "label": 1}, {"snippet_id": 2111, "code": "[^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) >", "label": 0}, {"snippet_id": 70664, "code": " header, re.IGNORECASE) header_mtime=parse_http_date(matches.group(1)) header_len=matches.group(3) if header_len and int(header_len) !=size: raise ValueError if int(mtime) > header_mtime: raise ValueError", "label": 0}, {"snippet_id": 22687, "code": " self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store. By default, profiling information for a given task won", "label": 1}, {"snippet_id": 35089, "code": " tag_list(self, tags): puc=self.form_instance.instance.get_uber_puc() or None qs=self.model.objects.filter(content_object=puc,assumed=False) filtered=[unassumed.tag for unassumed in qs] return[(tag.name, ", "label": 0}, {"snippet_id": 40473, "code": " null=True, blank=True) source=models.ForeignKey('TaxonomySource', on_delete=models.CASCADE) category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User", "label": 0}, {"snippet_id": 53214, "code": " self.client.post(update_url, data) self.assertEqual(self.view.get_object().first_name, '') self.assertEqual(self.view.get_object().zipcode, None) self.assertEqual(self.view.get_object().email, 'testuser", "label": 0}, {"snippet_id": 7043, "code": " 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent.') return redirect(url_for('main.index')) else: flash", "label": 0}, {"snippet_id": 24786, "code": " get_port from ray.utils import(binary_to_hex, binary_to_object_id, hex_to_binary, setup_logger) logger=logging.getLogger(__name__) class Monitor(object): \"\"\"A monitor for Ray processes. The monitor is in", "label": 0}, {"snippet_id": 27586, "code": " display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile span. Args: event_type: A string describing the type of", "label": 0}, {"snippet_id": 71620, "code": " s_count=models.Session.query().count() self.assertTrue(s_count==0) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !", "label": 0}, {"snippet_id": 77288, "code": ".close() logger.debug(\"Server definitions data read, start regex\") logger.debug(\"JSON vars: %s\", result) p=re.compile(r\"var geeServerDefs=\") result=p.sub(\"\", result) p=re.compile(r\";\\s*$\") result=p.sub", "label": 1}, {"snippet_id": 34360, "code": ".get_attribute('class')) et.refresh_from_db() self.assertFalse( et.qa_checked, 'The qa_checked attribute should be False') qa_notes_field.send_keys('Some QA Notes') self.browser.find_element_by_xpath('//", "label": 0}, {"snippet_id": 31148, "code": "'showGrudge', grudget_id=grudget_id)) else: return render_template('deletegrudge.html', grudget_id=grudget_id, grudge=grudgeToDelete) if __name__=='__main__': app.secret_key='super_secret_key' app.debug=True app", "label": 0}, {"snippet_id": 15289, "code": "'model_system_name'], model['model_name_user'] +':' +model['author']) for model in models ] def get_inputs_choices_by_model(name): models=load_json('models.json') model=next(item for item in models if item", "label": 0}, {"snippet_id": 33845, "code": ".common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as ec def log_karyn_in(object): ''' Log user in for further testing.", "label": 0}, {"snippet_id": 68868, "code": "=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs from nodesource is installed \"\"\" key=b\"\"\" -----BEGIN PGP PUBLIC KEY BLOCK----- Version:", "label": 0}, {"snippet_id": 27995, "code": " absolute_import from __future__ import division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess", "label": 0}, {"snippet_id": 44069, "code": ".get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit').click() self.assertIn('/datasource/', self.browser.current_url, \"User", "label": 0}, {"snippet_id": 36868, "code": "(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month')", "label": 0}, {"snippet_id": 42935, "code": "/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter( qa_group=new_group).count(", "label": 0}, {"snippet_id": 4016, "code": ", 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self", "label": 1}, {"snippet_id": 78620, "code": " and an exception(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param", "label": 0}, {"snippet_id": 20804, "code": " cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name(self): \"\"\"Get the node's raylet socket name.\"\"\" return self._raylet_socket_name def prepare_socket_file(self, socket_path)", "label": 0}, {"snippet_id": 485, "code": " show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root", "label": 0}, {"snippet_id": 30552, "code": "=session.query(User).filter_by(id=user_id).one() return user def getUserID(email): try: user=session.query(User).filter_by(email=email).one() return user.id except: return None @app.route('/grudget/<int", "label": 1}, {"snippet_id": 72990, "code": " return render(request, 'position.html',{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position }) def import_applications(request):", "label": 0}, {"snippet_id": 40411, "code": " texts=ExtractedText.objects.filter(pk__in=doc_text_ids) elif len(doc_text_ids) >=100: random_20=math.ceil(len(doc_text_ids)/5) shuffle(doc_text_ids) texts=ExtractedText.objects.filter(pk__in=doc_text_ids[", "label": 0}, {"snippet_id": 77328, "code": " information from ServerVars. Args: target_url: Server URL hosting the target database. Returns: layers_by_name: A dict of all the layers in a database. \"\"\" layers_by_name={} server_vars=_GetServerVars(target_url", "label": 0}, {"snippet_id": 58114, "code": ": 0, onboarding.STEP_8: 0}, 0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 0, onboarding.STEP_4: 0, onboarding.STEP_5: 0, onboarding.STEP_6: 0, onboarding.STEP_7: 0, onboarding.STEP_8", "label": 1}, {"snippet_id": 18856, "code": ".path.join(os.path.dirname(__file__),\"static\"), \t\tui_modules={'bootstrap': BootstrapModule}, \t\tdebug=True, \t\tasync_db=async_db, \t\tsync_db=sync_db, \t\t**settings \t) \thttp_server=tornado.httpserver.HTTPServer", "label": 1}, {"snippet_id": 67764, "code": ".get('category') type=self.request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword", "label": 0}, {"snippet_id": 29715, "code": " @login_required def add_post(): form=PostForm() if form.validate_on_submit(): f=form.image.data fname=secure_filename(f.filename) f.save(join( current_app.static_folder, current_app.config['STATIC_BENWA_DIR", "label": 1}, {"snippet_id": 6276, "code": ".format( url=flow.step1_get_authorize_url(), extra_params=urlencode(extra_params)) self.set_cookie_id_token(None) return redirect(auth_url) def is_id_token_valid(self, id_token): \"\"\" Check if `id_token`", "label": 0}, {"snippet_id": 13397, "code": " as old_register_view from student.views import signin_user as old_login_view from third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter", "label": 0}, {"snippet_id": 52195, "code": ", team_id, user_choice) flash(\"Your team invites have been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING", "label": 0}, {"snippet_id": 57538, "code": " extra_context) else: form=TransactionPayForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_pay.html', extra_context) def transactions_open(request, ", "label": 0}, {"snippet_id": 40901, "code": "\nfrom lxml import html from django.test import Client from django.urls import reverse from django.test import TestCase, override_settings from django.core.exceptions import ObjectDoesNotExist from dashboard", "label": 1}, {"snippet_id": 39633, "code": "=models.DateTimeField(null=True, blank=True, verbose_name=\"QA approval date\") qa_approved_by=models.ForeignKey('auth.User', on_delete=models.SET_NULL, verbose_name=\"QA approved by\", null=True, blank=True", "label": 0}, {"snippet_id": 55166, "code": "): \t\treturn os.path.isdir(self.path) \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self", "label": 0}, {"snippet_id": 1416, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 25417, "code": " max_entries_to_flush=self.gcs_flush_policy.num_entries_to_flush() num_flushed=self.redis_shard.execute_command( \"HEAD.FLUSH{}\".format(max_entries_to_flush)) logger.info(\"Monitor: num_flushed{}\".format(num_flushed))", "label": 0}, {"snippet_id": 69013, "code": " PGP PUBLIC KEY BLOCK----- \"\"\".strip() apt.trust_gpg_key(key) apt.add_source('nodesource', 'https://deb.nodesource.com/node_10.x', 'main') apt.install_packages(['nodejs']) def remove_chp(): \"\"\" Ensure CHP", "label": 0}, {"snippet_id": 39434, "code": " import models from.common_info import CommonInfo from django.core.exceptions import ValidationError from.extracted_text import ExtractedText from.raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo", "label": 1}, {"snippet_id": 13242, "code": " import datetime from django.conf import settings from django.contrib import messages from django.contrib.auth import get_user_model from django.contrib.auth.decorators import login_required from django", "label": 0}, {"snippet_id": 54323, "code": " Format: JSON \"\"\" @app.route('/json/politicians/state/<state>') def politicians_by_state(state): pols=Politician.all() pols.filter(\"state=\", state.lower()) pols.order('-search_count') politicians=[] for", "label": 0}, {"snippet_id": 74598, "code": " 'etd_app/copyright.html') def get_person_instance(request): person_instance=None try: person_instance=Person.objects.get(netid=request.user.username) except Person.DoesNotExist: if 'orcid' in request.POST", "label": 0}, {"snippet_id": 30916, "code": "]) def newGrudge(grudget_id): if 'username' not in login_session: return redirect('/login') grudget=session.query(Grudget).filter_by(id=grudget_id).one() if request.method=='POST': newGrudge=Grudge(name", "label": 1}, {"snippet_id": 50631, "code": "=os.path.join(vs100comntools, 'vsvars32.bat') python=sys.executable process=subprocess.Popen('(\"%s\">nul)&&\"%s\" -c \"import os; print repr(os.environ)\"' %(vsvars32, python), stdout=subprocess.PIPE, shell", "label": 0}, {"snippet_id": 6039, "code": " if getattr(g, 'oidc_id_token_dirty', False): signed_id_token=self.cookie_serializer.dumps(g.oidc_id_token) response.set_cookie( self.app.config['OIDC_ID_TOKEN_COOKIE_NAME'], signed_id_token, secure=self", "label": 0}, {"snippet_id": 46899, "code": " initial=initial_values) context={'form': form, 'header': header, 'datasource': datasource, 'groups': groups} return render(request, template_name, context) @login_required() def data_group_update(request", "label": 0}, {"snippet_id": 40215, "code": " script_type=models.CharField( max_length=2, choices =TYPE_CHOICES, blank =False, default ='EX') confidence=models.PositiveSmallIntegerField('Confidence', blank=True, validators=[ MaxValueValidator(100", "label": 0}, {"snippet_id": 35590, "code": " for tag in tags: ProductToTag.objects.update_or_create(tag=tag, content_object=product) puc_form=BulkPUCForm() form=BulkProductTagForm() tag=assign_tag[0] msg=f'The \"{tag.name}\" Attribute was assigned", "label": 0}, {"snippet_id": 50826, "code": " such as for a subprocess call. Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return", "label": 0}, {"snippet_id": 57305, "code": " valid: transaction.save() if form.cleaned_data['save_button']: return redirect('transaction_detail', transaction_code=transaction.code) return redirect('transaction_pay', transaction_code=transaction.code)", "label": 0}, {"snippet_id": 29602, "code": " benwaonline.models import Post, Tag, Comment, Preview, Image from benwaonline.gallery import gallery from benwaonline.gallery.forms import CommentForm, PostForm @gallery.before_request def before_request():", "label": 0}, {"snippet_id": 42815, "code": " Continue QA\".encode(), response.content) def test_qa_script_without_ext_text(self): response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response", "label": 0}, {"snippet_id": 34653, "code": " that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product", "label": 0}, {"snippet_id": 35474, "code": "=p) pp.delete() return redirect('product_detail', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form", "label": 0}, {"snippet_id": 68722, "code": " JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location')==None: return url return res.getheader", "label": 0}, {"snippet_id": 62882, "code": ".assertTrue(resp.location.startswith(idp_url)) def acs(self, url, eppn, check_fn): \"\"\" common code for the tests that need to access the assertion consumer service and then check the side effects of this access", "label": 1}, {"snippet_id": 23526, "code": " task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this function or actor", "label": 0}, {"snippet_id": 34497, "code": ".browser.find_element_by_id( 'extracted-text-modal-save') save_button.click() et=ExtractedText.objects.get(data_document_id=doc_id) self.assertEqual('Fake Product', et.prod_name, \"The prod_name of the new", "label": 0}, {"snippet_id": 31823, "code": "=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class", "label": 1}, {"snippet_id": 55222, "code": " \t\tif isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath", "label": 0}, {"snippet_id": 54270, "code": " information for a particular politician \"\"\" @app.route('/json/politicians/<politician>') def json_politician(politician): politicians=Politician.all() politicians.filter(\"name=\", politician.lower()) politician", "label": 0}, {"snippet_id": 58744, "code": " onboarding from core.common.utils import update_onboarding_step from ct.models import Course STATUS_CHOICES=( ('pendind', 'pending'), ('joined', 'joined'), ) TYPE_CHOICES=( ('student', 'student'), ('tester'", "label": 0}, {"snippet_id": 72395, "code": " client in CephX.list_clients()] @Endpoint('GET', '/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self, root_dir=None, depth=1): if root_dir is None: root_dir", "label": 0}, {"snippet_id": 44985, "code": "(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self.client.get(f'/habitsandpractices/{pk}/') self.assertNotContains(response, 'Raw Category', html=True) self.assertContains", "label": 0}, {"snippet_id": 14780, "code": " email='' password_hash='' def get_id(self): return self.user_id def db_init(): db.flushdb() auth_init() auth_add_user('gleb.kondratenko@skybonds.com', 'pwd') def auth_init(): db.set('user:ids', '0') def", "label": 0}, {"snippet_id": 23950, "code": "\"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants", "label": 0}, {"snippet_id": 48602, "code": ".POST or None) form=BulkProductTagForm() if puc_form['puc'].value(): puc=PUC.objects.get(pk=puc_form['puc'].value()) assumed_tags=puc.get_assumed_tags() puc2tags=(PUCToTag.objects.filter(content_object", "label": 0}, {"snippet_id": 44929, "code": ":'', } hp_formset=HnPFormSet(data, prefix='habits') self.assertFalse(hp_formset.is_valid()) data={'habits-TOTAL_FORMS':'2', 'habits-INITIAL_FORMS':'1', 'habits-MIN_NUM_FORMS':'0', 'habits-MAX_NUM_FORMS", "label": 0}, {"snippet_id": 48153, "code": " from django.contrib.auth.decorators import login_required from django.forms import ModelForm from dashboard.models import * from dashboard.forms import(ProductPUCForm, ProductLinkForm, BulkProductPUCForm,", "label": 1}, {"snippet_id": 72280, "code": " daemons: daemons.append(d_id) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('delete',{'cluster_id': '{cluster_id}', 'export_id': '", "label": 0}, {"snippet_id": 56846, "code": "=concept transaction=concept.transaction extra_context['transaction']=transaction return render(request, 'transactions/concept_detail.html', extra_context) @login_required() def concept_edit(request, *args, *", "label": 0}, {"snippet_id": 37484, "code": "( queryset=PUC.objects.all(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model", "label": 0}, {"snippet_id": 73531, "code": " to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False, ) def generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key", "label": 0}, {"snippet_id": 19569, "code": "(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore.add(log_filename) def run(self): \"\"\"Run the", "label": 1}, {"snippet_id": 20772, "code": " @property def node_ip_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._node_ip_address @property def redis_address(self): \"\"\"Get the cluster Redis address.\"\"\" return self._redis_address", "label": 0}, {"snippet_id": 82674, "code": ":type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname: Name of the host running the component :type hostname: str \"\"\" super(RemoteComponentMonitoringJob,", "label": 0}, {"snippet_id": 12215, "code": " originating from the account page. Uses the Account API to email the user a link to the password reset page. Note: The next step in the password reset process(confirmation) is currently handled by student", "label": 0}, {"snippet_id": 65877, "code": " on_tab_close_button_clicked(self, sender, widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container.page_num(db.parent_widget)==page_num: self.opened_databases.remove(db)", "label": 0}, {"snippet_id": 45875, "code": " collections import OrderedDict from djqscsv import render_to_csv_response from pathlib import Path from django import forms from django.urls import reverse from django.conf import settings from django", "label": 1}, {"snippet_id": 3732, "code": " licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self): \"\"\"Test that we partition image", "label": 0}, {"snippet_id": 10150, "code": " this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged", "label": 0}, {"snippet_id": 38759, "code": " filename): name='{0}/{1}'.format(instance.fs_id, filename) return name extract_models={ 'CO':(ExtractedText, ExtractedChemical), 'FU':(ExtractedText, ExtractedFunctionalUse), 'CP':(ExtractedCPCat, ExtractedListPresence", "label": 0}, {"snippet_id": 30443, "code": ";border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;\"> ' flash(\"you are now logged in as %s\" % login_session['username']) print \"done!\" return output @app.route('/logout') def disconnect", "label": 1}, {"snippet_id": 56722, "code": " from clickgestion.core.utilities import invalid_permission_redirect from django.views.generic import ListView from django.contrib.auth.decorators import login_required from pure_pagination.mixins import", "label": 0}, {"snippet_id": 18361, "code": "': self.username,'email': self.email,'password': hashed_password} \t\tresult=await async_db.users.insert_one(document) \t\"\"\" hash_password(): \tInitializes an instance of PasswordHasher from argon2, hashes", "label": 1}, {"snippet_id": 11396, "code": " by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key", "label": 0}, {"snippet_id": 55059, "code": "):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: \t\t\traise IndexError,(other.path,self.path) \t \t \tdef abspath(self): \t\treturn FSPath(os.path.abspath(self.path)) \tdef basename(self): \t\treturn", "label": 0}, {"snippet_id": 32893, "code": " self.stack=None def __enter__(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type", "label": 0}, {"snippet_id": 2680, "code": "' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation", "label": 0}, {"snippet_id": 25448, "code": " for messages about dead database clients and cleaning up state accordingly. \"\"\" self.subscribe(ray.gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL) self.subscribe(ray.gcs_utils.XRAY_DRIVER_CHANNEL) while True:", "label": 0}, {"snippet_id": 20217, "code": ") logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex(driver_id))) self._xray_clean_up_entries_for_driver(driver_id) def process_messages(self, max_messages=10000): \"\"\"Process", "label": 0}, {"snippet_id": 71250, "code": ": if self.user: self.user.add_profile(profile) else: self.user=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile", "label": 0}, {"snippet_id": 41603, "code": "): self.objects=load_model_objects() self.client.login(username='Karyn', password='specialP@55word') def test_detail_form_load(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/')", "label": 0}, {"snippet_id": 31721, "code": ".decode('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse", "label": 1}, {"snippet_id": 60710, "code": " subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue class ComponentMonitorJob(object): \"\"\"Abstract class that", "label": 0}, {"snippet_id": 12764, "code": "=HttpRequest() request.method=\"GET\" request.session=session view, args, kwargs=resolve(url) response=view(request, *args, **kwargs) return response.content def _external_auth_intercept(request, mode): \"", "label": 0}, {"snippet_id": 71135, "code": ": def _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return session session.put() if session.user_id is not None: session_id=session.key.id() if session_id", "label": 0}, {"snippet_id": 32575, "code": " A dict of builtin commands. ''' pass def wait(self): ''' Wait for the execution of the node to finish. ''' pass class DoubleNode(Node): ''' A node that executes two nodes sequentially. Args: first: The", "label": 0}, {"snippet_id": 41156, "code": "/datadocument/245401/') response=self.client.get(response.url) new_product=Product.objects.get(upc='stub_9101') self.assertContains(response, f'product/%s' % new_product.id) def test_add_extracted(self): '''Check", "label": 0}, {"snippet_id": 24216, "code": ".lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type\"]==\"subscribe\": continue assert", "label": 1}, {"snippet_id": 27597, "code": " click on the box corresponding to this profile span. Args: event_type: A string describing the type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added", "label": 0}, {"snippet_id": 69586, "code": "/bin/tljh-config exists but is not a symlink to{tljh_config_src}') else: return os.symlink(tljh_config_src, tljh_config_dest) def setup_plugins(plugins=None): \"\"\" Install plugins & setup a pluginmanager \"", "label": 0}, {"snippet_id": 67040, "code": " HttpResponseRedirect(filehash) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView): template_name='filehash/detail.html' def get_context_data(self, *", "label": 1}, {"snippet_id": 15241, "code": ",[validators.required()], '%Y-%m-%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models',[validators.required", "label": 0}, {"snippet_id": 3546, "code": ") response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path", "label": 0}, {"snippet_id": 49936, "code": ") else: return render_template('saveFile.html', diagram=diagram) @app.route('/saveAs', methods=['POST']) @app.route('/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not", "label": 0}, {"snippet_id": 23952, "code": " Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants.PICKLING_LARGE_OBJECT_PUSH_ERROR", "label": 0}, {"snippet_id": 7222, "code": " You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an", "label": 0}, {"snippet_id": 10517, "code": " import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view", "label": 0}, {"snippet_id": 54282, "code": "() politicians.filter(\"name=\", politician.lower()) politician=None for p in politicians: politician=p return jsonify(name=politician.name, state=politician.state, party=politician.party, constituency=politician", "label": 0}, {"snippet_id": 4645, "code": " self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with", "label": 0}, {"snippet_id": 24415, "code": " process is running on. This will be used to determine which log files to track. redis_client: A client used to communicate with the Redis server. log_files: A dictionary mapping the name of a log file", "label": 1}, {"snippet_id": 70311, "code": " Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my", "label": 0}, {"snippet_id": 4673, "code": "/example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location", "label": 1}, {"snippet_id": 31765, "code": " create_election_with_positions): election, positions=create_election_with_positions election=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections", "label": 1}, {"snippet_id": 16841, "code": " t, 'round': r, 'formset': formset}) gp.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) else: r.game_set.all().delete() default_set=GameSet", "label": 0}, {"snippet_id": 50602, "code": " return PosixUserLock(name) def get_vsvars_environment(): \"\"\" Returns a dictionary containing the environment variables set up by vsvars32.bat win32-specific \"\"\" vs100comntools=os.environ['VS100COMNTOOLS", "label": 0}, {"snippet_id": 50179, "code": " signUpButton(): email=request.form[\"email\"] user=query_user(email) if user==None: password=request.form[\"password\"] password_hash=generate_password_hash(password) insert_user(email, password_hash) session", "label": 0}, {"snippet_id": 34699, "code": "=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) |", "label": 0}, {"snippet_id": 78938, "code": ".enqueue_job(_send_mail,[users, 'unassigned_datarequest_organisation', datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action,", "label": 1}, {"snippet_id": 74127, "code": "=view_helpers.EncryptedReportStorageHelper EVAL_ACTION_TYPE=\"VIEW\" @property def site_id(self): return self.request.site.id @property def decrypted_report(self): return self.report.decrypt_record(self.storage", "label": 0}, {"snippet_id": 36870, "code": ", 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month')) if len(document_stats", "label": 0}, {"snippet_id": 76839, "code": " tile to fetch. Returns: The tile bitmap. \"\"\" try: fp=urllib.urlopen(url) f=StringIO.StringIO(fp.read()) im_tile=Image.open(f) im_tile.load() except IOError, e: im_tile=None logger.error(\"Failed to fetch", "label": 1}, {"snippet_id": 67817, "code": "(days=day-1) count=self.object_list.filter(timestamp__gte=from_date, timestamp__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta", "label": 0}, {"snippet_id": 6820, "code": "', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index')) @auth.route('/change-password', methods=['GET', 'POST'])", "label": 0}, {"snippet_id": 19089, "code": " profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import", "label": 1}, {"snippet_id": 66535, "code": ", widget): filechooser_opening_dialog=Gtk.FileChooserDialog( \"Choose Keyfile\", self.window, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK))", "label": 0}, {"snippet_id": 29331, "code": " database.') def init_db(): import benwaonline.models db.create_all() def register_teardowns(app): @app.teardown_appcontext def close_db(error): \"\"\"Closes the database again at the end of the request.\"\"", "label": 0}, {"snippet_id": 20643, "code": " which has multiple. \"\"\" def __init__(self, ray_params, head=False, shutdown_at_exit=True): \"\"\"Start a node. Args: ray_params(ray.params.RayParams): The parameters to use to configure the node. head(bool)", "label": 0}, {"snippet_id": 31844, "code": " class=\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request", "label": 1}, {"snippet_id": 31797, "code": " reverse from @pytest.mark.django_db def test_user_not_logged_in(client,create_user): request=client.get(reverse('elections:vote')) assert request.status_code==302 assert reverse('login') in request.url", "label": 1}, {"snippet_id": 83037, "code": ".hostname=hostname self.message='Component %s crashed on remote host %s' %(comp_name, hostname) class DisconnectEvent(object): \"\"\"Class representing a disconnect event for remote hosts.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 53653, "code": ":return: A string for the current state of the print buffer contents \"\"\" try: buffered_bytes=self.bytes_buffer.getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding", "label": 1}, {"snippet_id": 332, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f", "label": 0}, {"snippet_id": 28404, "code": " otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string. TODO(rkn): Remove this flag", "label": 0}, {"snippet_id": 39119, "code": " def get_extracted_template_fieldnames(self): extract_fields=['data_document_id','data_document_filename', 'prod_name', 'doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse", "label": 0}, {"snippet_id": 58323, "code": ", \"title\": \"create_courselet\" }, onboarding.NEXT_STEPS:{ \"html\": \"<p>next_steps</p>\", \"description\": \"next_steps desc\", \"title\": \"next_steps\" }, onboarding.INVITE_SOMEBODY:{ \"html\": \"<p>invite_somebody", "label": 1}, {"snippet_id": 36384, "code": ".extracted=True self.objects.doc.save() response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div", "label": 0}, {"snippet_id": 6415, "code": ") return False if id_token.get('hd') !=self.app.config['OIDC_GOOGLE_APPS_DOMAIN']: logger.error('Invalid google apps domain') return False if not id_token.get('email_verified', False) and \\ self.app.config", "label": 0}, {"snippet_id": 54570, "code": " from hwml import Problem, Assignment from collections import defaultdict import string class HWML_processor(object): \tdef prepare_for_processing(self): \t\tself.d=acedu.paths.corresponding() \t\t \t\tself.p", "label": 1}, {"snippet_id": 42468, "code": " test_qa_group_creation(self): pk=self.objects.extext.pk self.assertIsNone(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects.extext.extraction_script.pk response", "label": 0}, {"snippet_id": 20132, "code": ".append( xray_object_table_prefix +object_id_bin) for shard_index in range(len(sharded_keys)): keys=sharded_keys[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted", "label": 0}, {"snippet_id": 4080, "code": " def test_profile_image_directories(self): \"\"\"Test that we partition image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001", "label": 0}, {"snippet_id": 52303, "code": "(\"new-board-desc\", None) team_id=request.form.get(\"team-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT", "label": 1}, {"snippet_id": 71012, "code": ", ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.')", "label": 0}, {"snippet_id": 37191, "code": "(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {'style': 'height:2.75rem; !important'}) self.fields['script_selection'].widget.attrs.update( ", "label": 0}, {"snippet_id": 73443, "code": " user=create_account(request) send_user_email(request, user) return render(request, 'registration/register.html', {'register_form': register_form, 'account_created': format(CreateAccountFormText.account_created", "label": 0}, {"snippet_id": 54965, "code": ":///Users/chenan/Other/python-2.7.2-docs-html/library/os.html \tand \t\tfile:///Users/chenan/Other/python-2.7.2-docs-html/library/os.path.html \tbut make a more OO interface to dealing with files and folders", "label": 0}, {"snippet_id": 67776, "code": "=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(value__icontains=keyword)).order_by", "label": 0}, {"snippet_id": 16419, "code": ") return render(request, 'tournaments/round_players.html', {'title': _('Roll Call'), 'tournament': t, 'post_url': reverse('roll_call', args=(tournament_id,)), 'formset': formset}) @permission_required(", "label": 0}, {"snippet_id": 72690, "code": "/localhost:8000/confirm?key=\" +str(token.key) def login_form(request): if not request.user.is_authenticated: form=LoginForm() if request.method=='POST': request.GET._mutable=True request.GET['key']=None request", "label": 1}, {"snippet_id": 11925, "code": ".errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data from openedx.core.lib.time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import", "label": 0}, {"snippet_id": 73225, "code": "% email_domain)) self.add_error('email', message) elif get_user_model().objects.filter(username=email.lower()).exists(): message=forms.ValidationError( format(ErrorMessages.user_already_exists % email)", "label": 0}, {"snippet_id": 43358, "code": ".objects.get(pk=rc_id) self.assertEqual(true_cas, rc.dsstox.true_cas, 'The displayed True CAS should match the object attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click", "label": 0}, {"snippet_id": 32975, "code": "=PUC fields=['gen_cat', 'prod_fam', 'prod_type', 'description','tags',] readonly_fields=('num_products',) widgets={ 'tags': LabelWidget(model=PUCTag), } class PUCAdmin(admin.ModelAdmin): list_display=(", "label": 1}, {"snippet_id": 60220, "code": "} for p in ps ] async def execute( self, db_name, sql, params=None, truncate=False, custom_time_limit=None, page_size=None, ): \"\"\"Executes sql against db_name in a thread\"\"\" page_size=page_size or self", "label": 0}, {"snippet_id": 67018, "code": "(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get('keyword'): filehash=request.GET.get", "label": 0}, {"snippet_id": 22106, "code": " ray_constants.py. plasma_store_socket_name(str): If provided, it will specify the socket name used by the plasma store. raylet_socket_name(str): If provided, it will specify the socket path used by the", "label": 0}, {"snippet_id": 21086, "code": " redirect_output=self._ray_params.redirect_worker_output) process_info=ray.services.start_raylet( self._redis_address, self._node_ip_address, self._raylet_socket_name, self._plasma_store_socket_name, self", "label": 1}, {"snippet_id": 31135, "code": ")'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('deletegrudge.html', grudget_id", "label": 0}, {"snippet_id": 2172, "code": " from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To", "label": 0}, {"snippet_id": 30181, "code": "(): state=''.join(random.choice(string.ascii_uppercase +string.digits) for x in xrange(32)) login_session['state']=state return render_template('login.html', STATE=state) @app.route('/gconnect', methods", "label": 1}, {"snippet_id": 27535, "code": "\"\"\"Profile a span of time so that it appears in the timeline visualization. Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task).", "label": 0}, {"snippet_id": 77983, "code": " packages: package_ids.append(pkg.id) return package_ids def update_package(self, package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources):", "label": 0}, {"snippet_id": 81701, "code": ": %s, name: %s', event.event_type_id.name, event.name) can_subscribe=True return can_subscribe def can_unsubscribe(self, event): event_start=datetime.strptime(event.date_begin_located, '%Y-%m-%d %H:%M:", "label": 0}, {"snippet_id": 11752, "code": ".get_duplicate_provider(messages.get_messages(request)) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected", "label": 0}, {"snippet_id": 9517, "code": ", and update it to include that customer's enterprise metadata. \"\"\" context=context.copy() sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc", "label": 0}, {"snippet_id": 41872, "code": ".get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.') doc=DataDocument.objects.create(data_group=self.objects", "label": 0}, {"snippet_id": 74978, "code": ".method=='POST': form=UploadForm(request.POST, request.FILES) if form.is_valid(): form.save_upload(candidate) return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id}", "label": 0}, {"snippet_id": 10350, "code": ".AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'), ), 'accepts_logins': state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id", "label": 0}, {"snippet_id": 13926, "code": " branded_welcome_template=enterprise_customer.branding_configuration.welcome_message else: branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings", "label": 0}, {"snippet_id": 83953, "code": " allow_write=has_write_perm(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() is_observing=False redirected_from=None try: article=article_qs.get(", "label": 0}, {"snippet_id": 17018, "code": " g.the_set} for gp in g.gameplayer_set.all(): current[gp.power.name]=gp.roundplayer() data.append(current) round_players=r.roundplayer_set.count() expected_games=(round_players +6) // 7 if expected_games", "label": 0}, {"snippet_id": 55046, "code": "\tdef __init__(self,path): \t\tself.path=path \tdef __sub__(self,other): \t\tif(self.path.startswith(other.path)): \t\t\tr=self.path[len(other.path):] \t\t\tassert((other.path+r)==self.path) \t\t\treturn r[1:] \t\telse: ", "label": 0}, {"snippet_id": 29425, "code": ") callback_url=url_for('auth.oauthorize_callback', next=request.args.get('next')) return twitter.authorize(callback=callback_url or request.referrer or None) @auth.route('/oauthorize') def oauthorize_callback", "label": 1}, {"snippet_id": 27546, "code": " Note that this only works in the raylet code path. This function can be used as follows(both on the driver or within a task). .. code-block:: python with ray.profile(\"custom event\", extra_data={'key':", "label": 0}, {"snippet_id": 28917, "code": ", os.O_RDONLY) try: shm_fs_stats=os.fstatvfs(shm_fd) shm_avail=shm_fs_stats.f_bsize * shm_fs_stats.f_bavail finally: os.close(shm_fd) return shm_avail def check_oversized_pickle(pickled, name, obj_type", "label": 0}, {"snippet_id": 11976, "code": " util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted", "label": 0}, {"snippet_id": 44593, "code": " Extracted Text Record', data_document=doc, extraction_script=exscript ) ut=UnitType.objects.create(title='percent composition') wft=WeightFractionType.objects.create(title='reported', description='reported')", "label": 0}, {"snippet_id": 24761, "code": " import redis import ray from ray.autoscaler.autoscaler import LoadMetrics, StandardAutoscaler import ray.cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants", "label": 0}, {"snippet_id": 80370, "code": ".set_bifi_approx_wavelength_dialog) self.set_bifi_motor_pos_action.triggered.connect(self.set_bifi_motor_pos_dialog) self.set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action", "label": 0}, {"snippet_id": 128, "code": ") newpath='' for part in path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath", "label": 1}, {"snippet_id": 21880, "code": " the ports to use for the non-primary Redis shards. num_cpus(int): Number of CPUs to configure the raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping", "label": 0}, {"snippet_id": 28375, "code": " ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None) random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str,", "label": 0}, {"snippet_id": 31244, "code": "', 'bug_spotter', 'ack', ] INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles", "label": 0}, {"snippet_id": 75655, "code": "=autoSubject' %(url, urllib.parse.quote('idroot,auth,type,%s' % index)) return url def _fast_results_to_select2_list(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'", "label": 0}, {"snippet_id": 52976, "code": "=UserRedirectView() request=self.factory.get('/fake-url') request.user=self.user view.request=request self.assertEqual( view.get_redirect_url(), '/users/testuser/' ) class TestUserUpdateView(BaseUserTestCase", "label": 0}, {"snippet_id": 4727, "code": ".client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code", "label": 0}, {"snippet_id": 4628, "code": ".\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 55197, "code": " FSPath(os.path.realpath(self.path)) \tdef relpath(self,start=None): \t\tif start is None: \t\t\treturn FSPath(os.path.relpath(self.path)) \t\telse: \t\t\treturn FSPath(os.path.relpath(self.path,start)) \tdef samefile", "label": 0}, {"snippet_id": 5717, "code": "'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params", "label": 0}, {"snippet_id": 84862, "code": "(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title", "label": 0}, {"snippet_id": 74938, "code": "(id=candidate.id) if other_candidacies: context_data['other_candidacies']=other_candidacies return render(request, 'etd_app/candidate.html', context_data) @login_required def candidate_upload(request, candidate_id", "label": 0}, {"snippet_id": 55737, "code": ") \t\telse: \t\t\traise NotImplementedError \t \tdef file_with_name(self,name): \t\ttry: \t\t\tthe_file=self[name] \t\texcept IndexError: \t\t\tthe_file=self.create(File,name) \t\treturn the_file class Line(object): \tdef", "label": 1}, {"snippet_id": 68134, "code": ".get_threat_level_id_display(), event.attribute_count, event.org.name] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse(b_stream.getvalue(), content_type=\"text/csv", "label": 0}, {"snippet_id": 63064, "code": "'/chpass', force_authn=True) def test_terminate_authn(self): self.authn('/terminate', force_authn=True) def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba", "label": 0}, {"snippet_id": 20756, "code": "._raylet_socket_name=None self._webui_url=None self.start_ray_processes() if shutdown_at_exit: atexit.register(lambda: self.kill_all_processes( check_alive=False, allow_graceful=True)) @property def node_ip_address", "label": 0}, {"snippet_id": 59040, "code": "} } except IntegrityError: return{ 'success': False, 'message': 'You already have sent invite to user with{} email'.format(request.POST['email']) } def get_absolute_url(self): return reverse('ctms:tester_join_course", "label": 0}, {"snippet_id": 78555, "code": "(action_type), extra_vars) mailer.mail_user(user_data, subject, body) except Exception: logging.exception(\"Error sending notification to{0}\".format(user_id)) def _get_admin_users_from_organasition(datarequest_dict", "label": 1}, {"snippet_id": 11087, "code": "'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name", "label": 0}, {"snippet_id": 41755, "code": "['data_document_id','data_document_filename', 'prod_name','doc_date','rev_num', 'raw_category', 'raw_cas', 'raw_chem_name', 'report_funcuse','raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank", "label": 0}, {"snippet_id": 53248, "code": " traceback import types from importlib.abc import InspectLoader from cauldron import environ from cauldron import templating from cauldron.cli import threads from cauldron.runner import redirection from", "label": 0}, {"snippet_id": 67146, "code": ") if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter(Q(text__icontains=filehash)).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count']=count", "label": 0}, {"snippet_id": 44146, "code": "(kind='FO')) self.browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser.find_elements_by_class_name('bubble') self.assertEqual(num_pucs, len(bubbles),('There should be a circle", "label": 0}, {"snippet_id": 51790, "code": ": url=get_url(link) params=get_params(url) params['redirect']='https://www.google.com' fullURL=generate_url_with_params(url, params) req=requests.get(fullURL) if req.content.find('google') !=-1: success_message", "label": 1}, {"snippet_id": 5939, "code": " app.config.setdefault('OIDC_VALID_ISSUERS', ['accounts.google.com', 'https://accounts.google.com']) app.config.setdefault('OIDC_CLOCK_SKEW', 60) app.config.setdefault('OIDC_REQUIRE_VERIFIED_EMAIL', True", "label": 0}, {"snippet_id": 38082, "code": " kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='')", "label": 0}, {"snippet_id": 38229, "code": ".prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam", "label": 0}, {"snippet_id": 2918, "code": "') def login_failure(self): return HttpResponseRedirect(self.failure_url) def login_success(self): auth.login(self.request, self.user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS", "label": 0}, {"snippet_id": 62400, "code": " set a timestamp in the session(key reauthn-for-chpass) and redirect back to the app that asked for reauthn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated", "label": 0}, {"snippet_id": 78675, "code": " organization_id, open_time, accepted_dataset, close_time, closed, followers) :rtype: dict \"\"\" model=context['model'] session=context['session'] db.init_db(model) tk.check_access(constants.CREATE_DATAREQUEST", "label": 0}, {"snippet_id": 11942, "code": " enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import register_user as old_register_view from student", "label": 0}, {"snippet_id": 63544, "code": ") csrft='csrf token' with self.app.test_request_context('/logout', method='POST', headers={'Cookie': cookie}, data={'csrf': csrft}): session['_csrft_']=csrft response2=self.app.dispatch_request() self.assertEqual", "label": 0}, {"snippet_id": 26294, "code": "() self.start_plasma_store() self.start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type", "label": 0}, {"snippet_id": 84573, "code": ", **kw): if request.method=='GET': if group_slug is not None: group=get_object_or_404(group_qs, **{group_slug_field: group_slug}) changes_qs=changes_qs.filter(article__content_type=get_ct(group), article__object_id", "label": 0}, {"snippet_id": 10616, "code": ").query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return", "label": 0}, {"snippet_id": 73315, "code": "\nfrom django.urls import path, include from. import views urlpatterns=[ path('', views.index, name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name", "label": 0}, {"snippet_id": 21862, "code": " Python exits. redis_port(int): The port that the primary Redis shard should listen to. If None, then a random port will be chosen. redis_shard_ports: A list of the ports to use for the non-primary Redis", "label": 0}, {"snippet_id": 83828, "code": ", group_qs) allow_read=has_read_perm(request.user, group, is_member, is_private) allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles", "label": 0}, {"snippet_id": 43513, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-1-unit_type\"]')) unit_type_select.select_by_index(1) save_button.send_keys(\"\\n\") parent_div=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"", "label": 0}, {"snippet_id": 22619, "code": "\"with\" statement. \"\"\" if worker is None: worker=ray.worker.global_worker return RayLogSpanRaylet(worker.profiler, event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling", "label": 0}, {"snippet_id": 67167, "code": "\nfrom django import forms class SearchForm(forms.Form): keyword=forms.CharField(label='', max_length=100, required=True) keyword.widget.attrs['class']='form-control mr-sm-2 my-2' keyword.widget.attrs['placeholder", "label": 1}, {"snippet_id": 65432, "code": "\")) self.start_database_opening_routine( tab_title, keepassgtk.config_manager.get_string( \"history\", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found", "label": 1}, {"snippet_id": 62593, "code": ".join(HERE, 'saml2_settings.py') config.update({ 'SAML2_LOGIN_REDIRECT_URL': '/', 'SAML2_LOGOUT_REDIRECT_URL': '/logged-out', 'SAML2_SETTINGS_MODULE': saml_config, 'TOKEN_LOGIN_SHARED_KEY': 'shared_secret'", "label": 0}, {"snippet_id": 72351, "code": "]['desc'] } for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( [{'daemon_id': daemon_id, 'cluster_id': cluster_id", "label": 0}, {"snippet_id": 47645, "code": " chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a product is defined", "label": 0}, {"snippet_id": 1041, "code": "=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type", "label": 0}, {"snippet_id": 15278, "code": " change_timeseries_value_several_days_add_delta=FieldList(FormField(ChangeInputAddDelta), min_entries=0) def get_models_choices(): models=load_json('models.json') return[ (model['model_system_name'], model['model_name_user'] ", "label": 0}, {"snippet_id": 30696, "code": " session.commit() return redirect(url_for('showGrudgets')) else: return render_template('newGrudget.html') @app.route('/grudget/<int:grudget_id>/edit/', methods=['GET', 'POST']) def editGrudget(grudget_id):", "label": 0}, {"snippet_id": 67466, "code": ".thirty_day_labels() context['30_day_data']=self.thirty_day_data() return context def get_queryset(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request.GET.get('tag') if tag is not", "label": 0}, {"snippet_id": 31920, "code": "() sh.run() class Shell: ''' The main shell class. ''' def __init__(self): self.builtins={ 'exit': self._builtin_exit, 'pwd': self._builtin_pwd, 'cd': self._builtin_cd } def run(self): ''' Run the shell", "label": 0}, {"snippet_id": 69038, "code": ".path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try: systemd.stop_service('configurable-http-proxy.service') except", "label": 0}, {"snippet_id": 49664, "code": " session['tempFile'] !=\"\": editor_content=open(session['tempFile']).read(); if 'filename' in request.args or filename !=\"\" or 'currentFile' in session: if not filename: if 'filename' in request.args: filename", "label": 0}, {"snippet_id": 74041, "code": ".exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import generic as views from", "label": 0}, {"snippet_id": 57268, "code": "=transaction if transaction.closed: return redirect('message', message=gettext('Transaction Closed')) available_concepts=get_available_concepts(request.user, transaction) extra_context['available_concepts'", "label": 0}, {"snippet_id": 65461, "code": ".get_object(\"first_start_grid\") self.add(self.first_start_grid) def create_container(self): if self.first_start_grid !=NotImplemented: self.first_start_grid.destroy() self.container=Gtk.Notebook() self", "label": 0}, {"snippet_id": 11461, "code": ".get_receipt_page_url(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the", "label": 0}, {"snippet_id": 40977, "code": "(data_document=dd) except ExtractedText.DoesNotExist: self.assertContains(resp, 'No Extracted Text exists for this Data Document') else: self.assertContains(resp, '<h4>Extracted Text') def test_script_links(self", "label": 0}, {"snippet_id": 74033, "code": ".exceptions import CryptoError from django.conf import settings from django.core.exceptions import PermissionDenied from django.http import HttpResponse from django.shortcuts import redirect from django", "label": 0}, {"snippet_id": 59893, "code": ", num_args, func in self.sqlite_functions: conn.create_function(name, num_args, func) if self.sqlite_extensions: conn.enable_load_extension(True) for extension in self.sqlite_extensions: conn.execute(\"SELECT", "label": 0}, {"snippet_id": 24709, "code": ", required=False, type=str, default=ray_constants.LOGGER_LEVEL, choices=ray_constants.LOGGER_LEVEL_CHOICES, help=ray_constants.LOGGER_LEVEL_HELP) parser.add_argument( \"--logging-format\", required=False", "label": 0}, {"snippet_id": 19970, "code": "(message.BatchLength()): heartbeat_message=message.Batch(j) num_resources=heartbeat_message.ResourcesAvailableLabelLength() static_resources={} dynamic_resources={} for i in range(num_resources): dyn=heartbeat_message", "label": 0}, {"snippet_id": 73131, "code": ".ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf', msg) return if pdf: file_type=mimetypes.MimeTypes().types_map_inv[1][ magic.from_buffer(self.cleaned_data['pdf'].read", "label": 0}, {"snippet_id": 68035, "code": ", pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'threat_hunter/event_list.html', context) class HuntCreateView(CreateView): model=Hunt form_class", "label": 0}, {"snippet_id": 76276, "code": "=(255,) _TRANSPARENT_ALPHA=(0,) _ALPHA_THRESHOLD=128 ALL_WHITE_PIXELS=(255, 255, 255) def ProduceImage(layer_properties, user_log_rect, user_width, user_height): \"\"\"High-level production of the image. Args", "label": 0}, {"snippet_id": 47677, "code": "'curated_chemical__extracted_text__data_document__product__puc')).\\ values('sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n", "label": 0}, {"snippet_id": 11512, "code": "'student_account/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any", "label": 0}, {"snippet_id": 20294, "code": "\"This code should be unreachable.\") message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table() self.local_scheduler_id_to_ip_map={} for local_scheduler_info", "label": 0}, {"snippet_id": 75905, "code": ".ForeignKey( Project, verbose_name=_('Project'), related_name='redirects', ) redirect_type=models.CharField( _('Redirect Type'), max_length=255, choices=TYPE_CHOICES, help_text=redirect_type_helptext, ", "label": 0}, {"snippet_id": 56664, "code": " email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people/me/login$', login_redirect, name='login-redirect'), url(r'^e/(?P<experience_share_id>[a-zA-Z0-9]+)$', experience_redirect", "label": 0}, {"snippet_id": 5593, "code": ".client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant", "label": 0}, {"snippet_id": 1316, "code": " django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files", "label": 0}, {"snippet_id": 16086, "code": " import BaseGamePlayersFormset from tournament.forms import BasePlayerRoundFormset from tournament.forms import BasePowerAssignFormset from tournament.forms import GamePlayersForm from tournament.forms", "label": 0}, {"snippet_id": 12091, "code": "(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages", "label": 0}, {"snippet_id": 33266, "code": " obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register(DataGroup) admin.site.register(DocumentType) admin.site", "label": 0}, {"snippet_id": 43838, "code": "( ec.invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until", "label": 0}, {"snippet_id": 74810, "code": ".method=='POST': post_data=request.POST.copy() post_data['netid']=request.user.username person_form=PersonForm(post_data, instance=candidate.person) candidate_form=CandidateForm(post_data, instance=candidate", "label": 0}, {"snippet_id": 33481, "code": ".get(username='Karyn')) ppuc.refresh_from_db() stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(1, ethylparaben_stats['pucs_n']) def test_dtxsid_dds_n(self", "label": 0}, {"snippet_id": 59817, "code": "\"t\": type_}, ) ) if not table_definition_rows: return None return table_definition_rows[0][0] def get_view_definition(self, database_name, view): return self.get_table_definition(database_name, view, 'view", "label": 0}, {"snippet_id": 17300, "code": "=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num) the_list=r.game_set.all() context={'round': r, 'game_list': the_list} return render(request, 'games/index.html',", "label": 0}, {"snippet_id": 12401, "code": " don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS", "label": 0}, {"snippet_id": 32438, "code": " return node else: return None def redirections(self): redirs=[] redir=self.redirection() while redir: redirs.append(redir) redir=self.redirection() if len(redirs) > 0: return RedirectionsHelper(redirs", "label": 0}, {"snippet_id": 39818, "code": " CommonInfo from django.core.exceptions import ValidationError from.weight_fraction_type import WeightFractionType from.extracted_chemical import ExtractedChemical from.script import Script def validate_wf_analysis", "label": 1}, {"snippet_id": 29512, "code": ": form=RegistrationForm() if request.method=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists=User.query.filter(User.username==username", "label": 1}, {"snippet_id": 14077, "code": "( enabled.provider_id, pipeline.AUTH_ENTRY_REGISTER, redirect_url=redirect_to, ), } context[\"providers\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request", "label": 0}, {"snippet_id": 84051, "code": "['GET']) @login_required def edit_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name", "label": 0}, {"snippet_id": 51289, "code": "\"platform\":None}) dependencies=flatten_string_list(dependencies) platform=kwargs['platform'] or self._context.env[\"PLATFORM\"] dependency_collection=self._dependency_collection() delete_directory(os.path", "label": 0}, {"snippet_id": 50820, "code": "\"\"\" Assemble a list of string, such as for a subprocess call. Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if isinstance", "label": 0}, {"snippet_id": 18090, "code": "=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user': user } email_msg=email.EmailHolder( subject='{} password reset request'.format(app.config['GLOBAL_SITE_NAME']), recipient", "label": 0}, {"snippet_id": 25580, "code": " else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis", "label": 1}, {"snippet_id": 83659, "code": ") return ''.join(['/', app, url]) class ArticleEditLock(object): \"\"\"A soft lock to edting an article.\"\"\" def __init__(self, title, request, message_template=None): self.title=title self.user_ip=get_real_ip", "label": 0}, {"snippet_id": 748, "code": "/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in", "label": 0}, {"snippet_id": 36860, "code": " datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values(", "label": 0}, {"snippet_id": 15331, "code": "'models.json') inputs_by_models=[get_inputs_choices_by_model(model['model_system_name']) for model in models] return[item for inputs in inputs_by_models for item in inputs] def get_commands(form): result=[]", "label": 0}, {"snippet_id": 17026, "code": ".roundplayer() data.append(current) round_players=r.roundplayer_set.count() expected_games=(round_players +6) // 7 if expected_games < 1: expected_games=1 GamePlayersFormset=formset_factory(GamePlayersForm,", "label": 0}, {"snippet_id": 59253, "code": " sqlite_timelimit, to_css_class ) from.inspect import inspect_hash, inspect_views, inspect_tables from.plugins import pm, DEFAULT_PLUGINS from.version import __version__ app_root=Path(__file__).parent.parent", "label": 0}, {"snippet_id": 11253, "code": ".skip_registration_form: if not enterprise_customer: context[\"autoSubmitRegForm\"]=True else: context[\"autoRegisterWelcomeMessage\"]=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' )", "label": 0}, {"snippet_id": 14941, "code": "={ 'id': name, 'values':{ 'x':[], 'y':[] } } dates=[key for key in values] dates.sort() for date in dates: ts['values']['x'].append(date) ts['values']['y'].append(values[date]) if re.search(':timeseries$", "label": 0}, {"snippet_id": 54034, "code": " state of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents", "label": 0}, {"snippet_id": 53497, "code": " False if test_filename.startswith(resources_path): return False return True while len(frames) > 1 and is_cauldron_code(frames[0].filename): frames.pop(0) return frames def format_stack_frame(stack_frame", "label": 0}, {"snippet_id": 5259, "code": ".client.get(response2[\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant", "label": 0}, {"snippet_id": 30637, "code": " grudgets]) @app.route('/') @app.route('/grudget/') def showGrudgets(): grudgets=session.query(Grudget).all() if 'username' not in login_session: return render_template('publicgrudgets.html', grudgets=grudgets", "label": 0}, {"snippet_id": 17158, "code": " render(request, 'rounds/create_games.html', {'tournament': t, 'round': r, 'formset': formset}) @permission_required('tournament.change_gameplayer') def game_scores(request, tournament_id, round_num): \"", "label": 0}, {"snippet_id": 10538, "code": " third_party_auth import pipeline from third_party_auth.decorators import xframe_allow_whitelisted from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized", "label": 0}, {"snippet_id": 32246, "code": "=end: value.append(self.char) self.read() if self.char is None: raise ValueError('unexpected end of line while reading quoted word') else: self.read() return Token(TokenType.WORD, ''.join(value), start)", "label": 0}, {"snippet_id": 72918, "code": "-created\"): sort_by='-created' elif request.POST.get(\"sort-closed\"): sort_by='-date_closed' elif request.POST.get(\"sort-position\"): sort_by='position_title' elif request.POST.get(\"position\"): return position", "label": 1}, {"snippet_id": 22179, "code": ". For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports", "label": 0}, {"snippet_id": 74365, "code": "(self): if not self.report.owner==self.request.user: logger.warn(self.invalid_access_user_message) raise PermissionDenied class _ReportUpdatePartial(_ReportAccessPartial, views.edit.UpdateView): back_url", "label": 0}, {"snippet_id": 49886, "code": "?return_url=saveAs') if 'currentFile' in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False):", "label": 0}, {"snippet_id": 72192, "code": " cluster_id, export_id, path, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance", "label": 0}, {"snippet_id": 53245, "code": " import sys import threading import traceback import types from importlib.abc import InspectLoader from cauldron import environ from cauldron import templating from cauldron.cli import threads from cauldron", "label": 0}, {"snippet_id": 59284, "code": " CONFIG_OPTIONS=( ConfigOption(\"default_page_size\", 100, \"\"\" Default page size for the table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table", "label": 0}, {"snippet_id": 35969, "code": ", 'articles'), ('OC', 'occupational')) kind=models.CharField(max_length=2, blank=True, default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField", "label": 0}, {"snippet_id": 1006, "code": " path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_", "label": 1}, {"snippet_id": 9085, "code": ".time_zone_utils import TIME_ZONE_CHOICES from openedx.features.enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from", "label": 0}, {"snippet_id": 73686, "code": " def save_position_to_user(request): request.user.positions.add(Position.objects.get( id=request.session['position_id'])) @login_required(login_url='/login/', redirect_field_name=None) def import_position", "label": 0}, {"snippet_id": 62861, "code": ") as c: resp=c.get(url) authn_req=get_location(get_authn_request(self.app.config, session, '/', None, force_authn=force_authn)) idp_url=authn_req.split('?')[0] self.assertEqual(resp.status_code, 302) self", "label": 1}, {"snippet_id": 71629, "code": "('/auth/google') req.cookies['_eauth']=s_serialized req._load_session() self.assertTrue(req.session.session_id !=old_sid) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) def test_save_session", "label": 0}, {"snippet_id": 7782, "code": "'ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request) ext_auth_response=_external_auth_intercept", "label": 0}, {"snippet_id": 30121, "code": " from flask import session as login_session import random import string from oauth2client.client import flow_from_clientsecrets from oauth2client.client import FlowExchangeError import httplib2 import json", "label": 0}, {"snippet_id": 18604, "code": "\tCreates an instance of PasswordHasher, finds if there is any document in the database with the \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument exists", "label": 1}, {"snippet_id": 33154, "code": " django.db.models import Count from django import forms from taggit_labels.widgets import LabelWidget from dashboard.signals import * class PUCAdminForm(forms.ModelForm): class Meta: model=PUC fields=[", "label": 1}, {"snippet_id": 11407, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else None api", "label": 0}, {"snippet_id": 40788, "code": ".assertIn('Products Linked To PUC', response, 'Where is the Products Linked to PUC card???') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0]", "label": 0}, {"snippet_id": 46083, "code": "=matched_files.pop(0) doc=DataDocument.objects.get(filename=f.name, data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +'/pdf') afn=doc.get_abstract_filename", "label": 0}, {"snippet_id": 61183, "code": "\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component :type comp_name: str \"\"\" super(LocalCrashEvent, self).__init__(comp_name", "label": 0}, {"snippet_id": 6448, "code": " oidc_callback(self): \"\"\" Exchange the auth code for actual credentials, then redirect to the originally requested page. \"\"\" try: session_csrf_token=session.pop('oidc_csrf_token') state=json.loads(request.args", "label": 0}, {"snippet_id": 31608, "code": "'^project/(?P<proj_id>[0-9]+)/compare/$', project, name='project'), url(r'^analyze$', home_page, name='analyze'), url(r'^search$', home_page, name='search'), url(r'^error', home_page, name='error'), url(r", "label": 0}, {"snippet_id": 48733, "code": " template_name,{'products': products, 'puc_form': puc_form, 'form': form, 'msg': msg}) @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html", "label": 0}, {"snippet_id": 8817, "code": ": list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education':{ 'options':[(choice", "label": 0}, {"snippet_id": 18941, "code": "==\"SimpleUsers\": topredir=request.localconfig.parameters.get_value( \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url", "label": 1}, {"snippet_id": 78348, "code": "=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE={} def _get_user(user_id): try: if user_id in USERS_CACHE: return USERS_CACHE[user_id] else: user=tk.get_action('user_show')", "label": 0}, {"snippet_id": 46210, "code": ") if wft: w='weight_fraction_type' row[w]=WeightFractionType.objects.get(pk=int(wft)) unit_type_id=int(row['unit_type']) row['unit_type']=UnitType.objects.get(pk=unit_type_id) rank=row['ingredient_rank", "label": 0}, {"snippet_id": 70053, "code": "\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http", "label": 0}, {"snippet_id": 19217, "code": " self._process_key(key) except redis.ConnectionError: pass def _process_key(self, key): \"\"\"Process the given export key from redis.\"\"\" if self.mode !=ray.WORKER_MODE: if key.startswith(b\"FunctionsToRun\"", "label": 1}, {"snippet_id": 81416, "code": " _handle_daily_event_repetition(self, old_repeating_event): _logger.info('Handling daily repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '%Y-%m-%d %H:%M:00') present=datetime.now", "label": 1}, {"snippet_id": 2457, "code": "(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f", "label": 0}, {"snippet_id": 52141, "code": ".make_team(name, desc) q.add_to_db(new_team) new_userteam=q.make_userteam(user_id, new_team.t_id) q.add_to_db(new_userteam) return jsonify({\"teamId\": new_team.t_id}) @app.route(\"/team-invitation\", methods=", "label": 0}, {"snippet_id": 68347, "code": "(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label)", "label": 0}, {"snippet_id": 13351, "code": " openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from", "label": 0}, {"snippet_id": 7950, "code": " wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter", "label": 0}, {"snippet_id": 20734, "code": ".include_java_from_redis(redis_client)) self._ray_params=ray_params self._config=(json.loads(ray_params._internal_config) if ray_params._internal_config else None) self._node_ip_address=ray_params.node_ip_address", "label": 0}, {"snippet_id": 49996, "code": "(savepath, exist_ok=True) saveFilePath=os.path.join(savepath, name) tempFilePath=session.pop(\"tempFile\", None) if tempFilePath: shutil.copy(tempFilePath, saveFilePath) if \"diagram\" in request.referrer or ", "label": 0}, {"snippet_id": 40484, "code": " category_code=models.CharField(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC", "label": 0}, {"snippet_id": 22681, "code": " data in the background.\"\"\" try: while True: time.sleep(1) self.flush_profile_data() except AttributeError: pass def flush_profile_data(self): \"\"\"Push the logged profiling data to the global control store", "label": 1}, {"snippet_id": 26160, "code": ".redis_password, use_valgrind=use_valgrind, use_profiler=use_profiler, stdout_file=stdout_file, stderr_file=stderr_file, config=self._config, include_java=self._ray_params.include_java, java_worker_options", "label": 0}, {"snippet_id": 35007, "code": "'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem", "label": 1}, {"snippet_id": 18531, "code": "-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', self.email)==None): \t\t\tself.render(\"signup.html\",error=\"Your email doesn't look like a valid email\") \t\t\treturn \t\tdoes_it_exist=self.check_if_exists() \t\tif(does_it_exist!", "label": 0}, {"snippet_id": 1737, "code": " TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes", "label": 0}, {"snippet_id": 33258, "code": ", 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj): return obj.assumed admin.site.register(DataSource) admin.site.register(GroupType) admin.site.register", "label": 0}, {"snippet_id": 19600, "code": " also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep(1) if __name__==\"__main__\": parser=argparse.ArgumentParser( description", "label": 1}, {"snippet_id": 72348, "code": "'desc': status_dict[cluster_id][daemon_id]['desc'] } for daemon_id in status_dict[cluster_id] for cluster_id in status_dict ] result=[] for cluster_id in Ganesha.get_ganesha_clusters(): result.extend( ", "label": 0}, {"snippet_id": 52694, "code": "\"\"Flask utility to force a cache reload by adding settings in headers\"\"\" r.headers[\"Cache-Control\"]=\"no-cache, no-store, must-revalidate\" return r if __name__==\"__main__\": app.debug=True app.jinja_env.auto_reload", "label": 0}, {"snippet_id": 15659, "code": "'input_source_initial', '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.new_value.data=command.get('new_value',", "label": 0}, {"snippet_id": 57456, "code": ".get('transaction_code', None) transaction=get_object_or_404(Transaction, code=transaction_code) extra_context['transaction']=transaction if transaction.closed: return redirect('message', message=gettext", "label": 0}, {"snippet_id": 75508, "code": " candidate=get_object_or_404(Candidate, id=candidate_id) format_form=FormatChecklistForm(request.POST, instance=candidate.thesis.format_checklist) if format_form.is_valid(): format_form.handle_post(request", "label": 0}, {"snippet_id": 76370, "code": ".image_format==\"image/png\" and layer_properties.is_transparent==\"FALSE\") bgcolor=(layer_properties.bgcolor if set_pixel_to_bgcolor else _NO_DATA_PIXELS) alpha=_OPAQUE_ALPHA if set_pixel_to_bgcolor else", "label": 0}, {"snippet_id": 77494, "code": " server definitions. \"\"\" target_url=urlparse.urljoin(server_url, target_path) logger.debug(\"Fetching layer information for target url '%s'\", target_url) layers_by_name=_LayersFromServerVars(target_url) for", "label": 0}, {"snippet_id": 30462, "code": "): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider']=='facebook': fbdisconnect", "label": 0}, {"snippet_id": 67751, "code": "'search_form']=search_form return context def get_queryset(self): query=Attribute.objects.order_by('-timestamp') category=self.request.GET.get('category') type=self.request.GET.get('type') if category is", "label": 0}, {"snippet_id": 59292, "code": " table view \"\"\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table or custom query \"\"\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads", "label": 0}, {"snippet_id": 64844, "code": " implement\") parser.add_argument('-p', '--points', type=int, default=0, help=\"The number of points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument", "label": 0}, {"snippet_id": 35636, "code": " @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip() if q > '", "label": 0}, {"snippet_id": 14269, "code": " commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user", "label": 0}, {"snippet_id": 60029, "code": " as e: if(e.args[0]=='no such module: VirtualSpatialIndex'): raise click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading the SpatiaLite module.\" \"\\n\\nRead", "label": 0}, {"snippet_id": 51570, "code": "'python':builder.python, 'shell':builder.shell, 'rsync':builder.rsync, 'build_step':builder.build_step, 'build_condition':builder.build_condition, 'default_platform':default_platform, 'get_vsvars_environment", "label": 0}, {"snippet_id": 78168, "code": " return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__", "label": 0}, {"snippet_id": 69165, "code": "(HERE, 'jupyterhub_config.py'), install_prefix=INSTALL_PREFIX, ) systemd.install_unit('jupyterhub.service', hub_unit_template.format(**unit_params)) systemd.install_unit('traefik.service', traefik_unit_template", "label": 0}, {"snippet_id": 63491, "code": "'hubba-bubba' csrft='csrf token' with self.app.test_request_context('/logout', method='POST', data={'csrf': csrft}): session['_csrft_']=csrft session['user_eppn']=eppn session['eduPersonPrincipalName']=eppn", "label": 0}, {"snippet_id": 15853, "code": ".fromtimestamp(item['date'] / 1000), 'commands': item['commands'] } for item in history ] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email", "label": 0}, {"snippet_id": 14129, "code": " for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText\"]=_(\"Continue", "label": 0}, {"snippet_id": 3488, "code": " self.client.login(username=self.test_username, password=self.test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self", "label": 0}, {"snippet_id": 39601, "code": "=models.CharField(max_length=50, null=True, blank=True) extraction_script=models.ForeignKey('Script', on_delete=models.CASCADE, limit_choices_to={'script_type': 'EX'}) qa_checked=models.BooleanField(default", "label": 0}, {"snippet_id": 63116, "code": ", eppn, _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): self.assertIn('reauthn-for-termination', session) then=session['reauthn-for-termination'] now=int(time", "label": 0}, {"snippet_id": 33800, "code": "=False).first() rc_row=f'%s,%s,%s,%s\\r\\n' %( rc.id, rc.raw_cas, rc.raw_chem_name, rc.sid if rc.sid else '') rc_row=bytes(rc_row, 'utf-8') self.assertNotIn(rc_row, response.content, 'The curated row should", "label": 1}, {"snippet_id": 22961, "code": " division from __future__ import print_function import binascii import functools import hashlib import inspect import logging import numpy as np import os import subprocess import sys import threading import", "label": 0}, {"snippet_id": 9696, "code": " pipeline. Arguments: request(HttpRequest): The request, used to determine if a pipeline is currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string):", "label": 0}, {"snippet_id": 32217, "code": "() return token elif self.char==';': token=Token(TokenType.COMMAND_END, None, self.position) self.read() return token elif self.char in '\\'\"': end=self.char self.read() start=self.position value=[] while", "label": 0}, {"snippet_id": 40249, "code": ".pk}) def get_datadocument_count(self): return DataDocument.objects.filter( extractedtext__extraction_script=self.pk).count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects.filter", "label": 0}, {"snippet_id": 65528, "code": ") filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager", "label": 0}, {"snippet_id": 27494, "code": " import division from __future__ import print_function import json import time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log", "label": 1}, {"snippet_id": 36894, "code": "(document_stats) or document_stats[i]['upload_month'] !=chart_month: document_stats.insert(i,{'document_count': '0', 'upload_month': chart_month}) return document_stats def product_with_puc_count_by_month(", "label": 0}, {"snippet_id": 12069, "code": " IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode", "label": 1}, {"snippet_id": 78369, "code": "{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return organization_show", "label": 0}, {"snippet_id": 13723, "code": " client has been rate limited HttpResponse: 405 if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request):", "label": 0}, {"snippet_id": 41054, "code": " test_product_create_link(self): response=self.client.get('/datadocument/167497/') self.assertContains(response, '/link_product_form/167497/') data={'title' :['New Product'], 'upc' :['stub_1860'], 'document_type'", "label": 0}, {"snippet_id": 64849, "code": ".add_argument('-p', '--points', type=int, default=0, help=\"The number of points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument('-c', '--code', help", "label": 0}, {"snippet_id": 25154, "code": "(len(self.state.redis_clients))] for task_id_bin in driver_task_id_bins: sharded_keys[to_shard_index(task_id_bin)].append( xray_task_table_prefix +task_id_bin) for object_id_bin in driver_object_id_bins:", "label": 0}, {"snippet_id": 63440, "code": " no_authn_path='/test3' no_authn_views(self.app,[no_authn_path]) self.assertEqual(no_authn_urls_before +['^{!s}$'.format(no_authn_path)], self.app.config['NO_AUTHN_URLS']) with self.app.test_client() as c: resp", "label": 0}, {"snippet_id": 4420, "code": " image directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range", "label": 0}, {"snippet_id": 12301, "code": " request_password_change(email, request.is_secure()) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset", "label": 0}, {"snippet_id": 12602, "code": ".icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN, redirect_url=redirect_to, ), \"registerUrl\": pipeline.get_login_url( enabled.provider_id, pipeline", "label": 0}, {"snippet_id": 62316, "code": " authn. :param session_info: the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" current_app.logger.info(\"User{!r} logging in.\".format(user)", "label": 0}, {"snippet_id": 53105, "code": ".status_code, 302) self.assertTemplateUsed('users/update.html') data={'purchase_step': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().purchase_step, PS_DAP) data={'status", "label": 1}, {"snippet_id": 38164, "code": "'PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self.gen_cat def tag_list(self, obj):", "label": 0}, {"snippet_id": 15738, "code": "}) @app.route('/run/form/submit', methods=['POST']) def view_run_submit(): run_form=get_run_form() commands=get_commands(run_form) if run_form.validate_on_submit(): return json.dumps({ 'commands': commands", "label": 0}, {"snippet_id": 33204, "code": " get_data['last_edited_by']=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products", "label": 0}, {"snippet_id": 17822, "code": "'POST' and form.validate(): user.password_hash=form.password.data db.session.add(user) db.session.commit() send_password_reset_email(user) flask.flash(flask.Markup('Your password was reset. Log in now.", "label": 0}, {"snippet_id": 34765, "code": ", output_field=IntegerField())) \\ .annotate(dds_wf_n=Value(-1, output_field=IntegerField())) \\ .annotate(products_n=Value(-1, output_field=IntegerField())) for row in stats: row['dds_n']=int(dds_n.get(sid", "label": 0}, {"snippet_id": 43008, "code": " response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext/7', follow=True) def test_hidden_fields(self): '''ExtractionScript 15 includes a functional use", "label": 0}, {"snippet_id": 67507, "code": "') if level is not None: query=query.filter(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(info__icontains=keyword)).order_by('-publish_timestamp", "label": 0}, {"snippet_id": 75354, "code": ".DoesNotExist: return HttpResponseRedirect(reverse('register')) candidate.thesis.submit() return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) @login_required @permission_required", "label": 0}, {"snippet_id": 42097, "code": ".decode('utf8') self.assertIn('Please limit upload to <600 documents at one time', response, 'Note to limit upload to <600 should be on the page') def test_extracted_count(self): response=self.client.get", "label": 0}, {"snippet_id": 31137, "code": "\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('deletegrudge.html', grudget_id=grudget_id", "label": 0}, {"snippet_id": 81492, "code": " new_start_date, new_end_date) def _handle_monthly_event_repetition(self, old_repeating_event): _logger.info('Handling monthly repeating event') end_date=datetime.strptime(old_repeating_event.date_end, '", "label": 0}, {"snippet_id": 75250, "code": "'candidate_id': candidate.id})) else: person_form=CommitteeMemberPersonForm() committee_member_form=CommitteeMemberForm() context={'candidate': candidate, 'person_form': person_form, 'committee_member_form':", "label": 0}, {"snippet_id": 26929, "code": " raylet with. num_gpus(int): Number of GPUs to configure the raylet with. resources: A dictionary mapping the name of a resource to the quantity of that resource available. object_store_memory: The amount", "label": 0}, {"snippet_id": 66162, "code": ".on_headerbar_back_button_clicked) def assemble_stack(self): self.overlay=Gtk.Overlay() unlock_failed_overlay=self.builder.get_object(\"unlock_failed_overlay\") self.overlay.add_overlay(unlock_failed_overlay) stack=Gtk.Stack(", "label": 0}, {"snippet_id": 71679, "code": " self.assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) resp.request.session.user_id='1' resp._save_session() s_count=models", "label": 0}, {"snippet_id": 50455, "code": " 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback): self.release() unlocktime=datetime.datetime", "label": 0}, {"snippet_id": 64373, "code": "] ) state.sync() location=get_location(http_info) session.clear() return redirect(location) current_app.logger.error('No SAMLResponse or SAMLRequest parameter found') abort(400) @authn_views.route('/token", "label": 0}, {"snippet_id": 43826, "code": " ExtractedText.objects.filter( data_document_id=doc_id).count(), \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By.XPATH, '//", "label": 0}, {"snippet_id": 73685, "code": "(commit=False)) def save_position_to_user(request): request.user.positions.add(Position.objects.get( id=request.session['position_id'])) @login_required(login_url='/login/', redirect_field_name=None) def", "label": 0}, {"snippet_id": 77926, "code": ".plugins.toolkit as toolkit import sqlalchemy from ckan.lib.cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand):", "label": 0}, {"snippet_id": 5358, "code": ".assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"", "label": 1}, {"snippet_id": 46889, "code": "=GroupType.objects.all() for group in groups: group.codes=DocumentType.objects.filter(group_type=group) form=DataGroupForm(user=request.user, initial=initial_values) context={'form': form, 'header': header, ", "label": 0}, {"snippet_id": 18794, "code": "'s easier when it's made into a module. \"\"\" class BootstrapModule(tornado.web.UIModule): \tdef render(self): \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': \ttornado", "label": 1}, {"snippet_id": 55356, "code": " lstat(self): \t\treturn os.lstat(self.path) \tdef mkfifo(self,mode=None): \t\tif mode is None: \t\t\treturn os.mkfifo(self.path) \t\telse: \t\t\treturn os.mkfifo(self.path,mode) \t \tdef mkdir(self,mode=None): \t\tif mode", "label": 0}, {"snippet_id": 999, "code": ", part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 3239, "code": " HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce", "label": 0}, {"snippet_id": 62710, "code": " to the queries cache, build a cookie with a session id corresponding to the added query, build a SAML2 authn response for the added query, and send both to the assertion consumer service, so that the user", "label": 0}, {"snippet_id": 74045, "code": " from django.shortcuts import redirect from django.urls import reverse, reverse_lazy from django.views import generic as views from callisto_core.evaluation.view_partials import EvalDataMixin from callisto_core", "label": 0}, {"snippet_id": 66325, "code": " if widget.get_visibility(): widget.set_invisible_char(\"\u25cf\") widget.set_visibility(False) else: widget.set_visibility(True) def on_headerbar_back_button_clicked(self, widget): self.window.set_headerbar(", "label": 0}, {"snippet_id": 10014, "code": "=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed", "label": 0}, {"snippet_id": 25376, "code": " the GCS. The purpose of this feature is to control GCS memory usage. To activate this feature, Ray must be compiled with the flag RAY_USE_NEW_GCS set, and Ray must be started at run time with the flag", "label": 0}, {"snippet_id": 80496, "code": ".exc_info())) desired_width=min(max([len(line) for line in stack]), 185) description=stack.pop() print(description, end='') stack=filter(lambda item: os.path.join('gui', 'handled_decorators.py') not in", "label": 0}, {"snippet_id": 63024, "code": "=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"\"\" def init_data(self): \"\"\" Called from the parent class", "label": 0}, {"snippet_id": 60456, "code": " plugin in get_plugins(pm): if plugin[\"static_path\"]: modpath=\"/-/static-plugins/{}/\".format(plugin[\"name\"]) app.static(modpath, plugin[\"static_path\"]) app.add_route( JsonDataView.as_view(self, \"inspect", "label": 0}, {"snippet_id": 2906, "code": ", '/') @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/') def login_failure(self): return HttpResponseRedirect", "label": 0}, {"snippet_id": 57899, "code": "['data'] def get_onboarding_status_with_settings(user_id): \"\"\" Return combined data with the status by on-boarding steps(done: true/false) and settings for according status name Argument: user_id(int):", "label": 0}, {"snippet_id": 68589, "code": " hunt_del(request, pk): hunt=get_object_or_404(Hunt, id=pk) hunt.stop() hunt.delete() return redirect('twitter_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header", "label": 0}, {"snippet_id": 46051, "code": " d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if not matched_files: context['msg']=('There are no matching records in the ' 'selected directory.') return render(request", "label": 0}, {"snippet_id": 51234, "code": ", *args, **kwargs): args=flatten_string_list(args) self._check_call([sys.executable] +args, env=self._context.env, **kwargs) def shell(self, *args, **kwargs): args=flatten_string_list(args) self._check_call", "label": 0}, {"snippet_id": 47469, "code": "(): form.save() return redirect('data_source_detail', pk=pk) form.referer=request.META.get('HTTP_REFERER', None) return render(request, template_name,{'form': form}) @login_required() def data_source_delete", "label": 0}, {"snippet_id": 60940, "code": "\"\"Runs a check if a remote process is still running. :return: True if the component is still running or the host is not reachable, otherwise a ``RemoteCrashEvent`` is generated. :rtype: bool or RemoteCrashEvent", "label": 0}, {"snippet_id": 57138, "code": ".get('concept_code', None) concept=get_object_or_404(concept_class, code=concept_code) return concept, concept_form def transaction_delete(request, *args, **kwargs): extra_context={} if not request.user", "label": 0}, {"snippet_id": 56868, "code": "'message', message=gettext('Transaction Closed')) extra_context['transaction']=transaction if request.method=='POST': form=concept_form(request.POST, instance=concept) if form.is_valid(): form.save() return", "label": 0}, {"snippet_id": 84743, "code": ") if notification.is_observing(article, request.user): notification.stop_observing(article, request.user) return redirect(article) def article_preview(request): \"\"\"This is a AJAX function that previews", "label": 0}, {"snippet_id": 44678, "code": " timezone from django.contrib.auth.models import User from django.core.exceptions import ValidationError from dashboard.tests.loader import load_model_objects from dashboard.models import ExtractedText", "label": 1}, {"snippet_id": 46091, "code": " data_group=dg.pk) if doc.matched: continue doc.matched=True doc.save() fs=FileSystemStorage(store +'/pdf') afn=doc.get_abstract_filename() fs.save(afn, f) zf.write(store +'/pdf/' +afn, afn) zf.close()", "label": 0}, {"snippet_id": 28184, "code": ", in some instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis", "label": 0}, {"snippet_id": 34593, "code": "(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form context['hnp']=hnp if len(hnp)>0 else 0 if len(hnp)", "label": 0}, {"snippet_id": 24634, "code": " once every second to check if there are new log files to monitor. It will also store those log files in Redis. \"\"\" while True: self.update_log_filenames() self.check_log_files_and_push_updates() time.sleep", "label": 1}, {"snippet_id": 20543, "code": "=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args.redis_password) try: monitor.run() except Exception as e: redis_client=redis.StrictRedis( host=redis_ip_address,", "label": 1}, {"snippet_id": 44713, "code": "'Wednesday, January 21, 2014', data_document=self.objects.doc, extraction_script=self.objects.script) self.assertRaises(ValidationError, text.clean()) text=ExtractedText(doc_date='January 1984', data_document", "label": 0}, {"snippet_id": 22259, "code": ".num_gpus=num_gpus self.resources=resources self.object_store_memory=object_store_memory self.redis_max_memory=redis_max_memory self.redis_port=redis_port self.redis_shard_ports=redis_shard_ports self.object_manager_port", "label": 0}, {"snippet_id": 729, "code": "</li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html", "label": 0}, {"snippet_id": 49540, "code": ".database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil import tempfile import parser DEBUG=True app=Flask(__name__) app.config['SECRET_KEY']='secret", "label": 1}, {"snippet_id": 3859, "code": " test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale,", "label": 0}, {"snippet_id": 42144, "code": " self.objects.doc.save() response=self.client.get(f'/datagroup/{DataGroup.objects.first().id}/').content.decode('utf8') self.assertIn('1 extracted', response, 'Data Group should contain a count of 1 total", "label": 0}, {"snippet_id": 40590, "code": " password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(//*[@id=\"navbarQADropdownMenuLink\"])'", "label": 0}, {"snippet_id": 40659, "code": ".content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%', extracted_doc_count)", "label": 0}, {"snippet_id": 66203, "code": ".builder.get_object(\"composite_unlock_stack_page\") stack.add_titled(password_unlock_stack_page, \"password_unlock\", \"Password\") stack.child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad", "label": 0}, {"snippet_id": 21289, "code": " PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the", "label": 0}, {"snippet_id": 84233, "code": "': article.all_images(), 'article': article, } if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/", "label": 0}, {"snippet_id": 68533, "code": ".order_by('-datetime') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self.get_context_data() return render(request, 'twitter_hunter/tweets.html', context", "label": 0}, {"snippet_id": 3429, "code": "=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth.logout(request", "label": 0}, {"snippet_id": 31551, "code": "='home_page'), url(r'^account/?$', home_page, name='account'), url(r'^projects/$', projects, name='projects'), url(r'^project/$', project, name='project'), url(r'^project/new/', project, name='project'", "label": 0}, {"snippet_id": 84405, "code": " allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) changes=article.changeset_set.all().order_by('-revision') template_params={", "label": 0}, {"snippet_id": 79252, "code": "': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action('organization_show') return", "label": 0}, {"snippet_id": 20793, "code": "(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the cluster's web UI url.\"\"\" return self._webui_url @property def raylet_socket_name", "label": 0}, {"snippet_id": 28149, "code": " is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None", "label": 0}, {"snippet_id": 70960, "code": "> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\".", "label": 0}, {"snippet_id": 46068, "code": " directory.') return render(request, template_name, context) zf=zipfile.ZipFile(dg.zip_file, 'a', zipfile.ZIP_DEFLATED) while matched_files: f=matched_files.pop(0) doc=DataDocument.objects.get(filename", "label": 0}, {"snippet_id": 27270, "code": " include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None, include_log_monitor=None, autoscaling_config", "label": 0}, {"snippet_id": 62824, "code": "): \"\"\" Common code for the tests that need to send an authentication request. This checks that the client is redirected to the idp. :param url: the url of the desired authentication mode. :type url: str", "label": 1}, {"snippet_id": 34411, "code": "(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]').click() wait=WebDriverWait(self.browser, 10) cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"", "label": 0}, {"snippet_id": 37772, "code": " class ExtractedChemicalFormSet(BaseInlineFormSet): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) class ExtractedChemicalForm(forms.ModelForm): def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 17209, "code": ".gameplayer_set.all(): content[gp.power.name]=gp.score data.append(content) formset=GameScoreFormset(request.POST or None, initial=data) if formset.is_valid(): for f in formset: g=Game.objects.get(name", "label": 0}, {"snippet_id": 66087, "code": "=NotImplemented database_filepath=NotImplemented database_manager=NotImplemented unlock_database_stack_box=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented logging_manager=LoggingManager", "label": 0}, {"snippet_id": 30632, "code": ".query(Grudget).all() return jsonify(grudget=[g.serialize for g in grudgets]) @app.route('/') @app.route('/grudget/') def showGrudgets(): grudgets=session.query(Grudget).all() if 'username' not in login_session", "label": 0}, {"snippet_id": 46023, "code": "'ext_err' :{}, 'clean_comp_err' :{}, 'extract_form' : include_extract_form(dg), 'clean_comp_data_form' : include_clean_comp_data_form(dg), 'bulk' : len(docs) -len(prod_link), 'msg' : '', } if request.method=", "label": 0}, {"snippet_id": 26813, "code": ".process)) return result def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes()) def remaining_processes_alive", "label": 0}, {"snippet_id": 83267, "code": ".translation import ugettext_lazy as _ from wiki.models import Article from wiki.models import ChangeSet from wiki.templatetags.wiki_extras import WIKI_WORD_RE wikiword_pattern=re.compile('^' +WIKI_WORD_RE +", "label": 0}, {"snippet_id": 4425, "code": "(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 55396, "code": ".makedirs(self.path) \t\telse: \t\t\treturn os.makedirs(self.path,mode) \t \tdef readlink(self): \t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t", "label": 0}, {"snippet_id": 82662, "code": "): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname: Name", "label": 0}, {"snippet_id": 46799, "code": "=DataDocument(filename=line['filename'], title=line['title'], document_type=doc_type, url=line['url'], organization=line['organization'], data_group=datagroup) doc.save() text.append(str(doc.pk)+','+',", "label": 0}, {"snippet_id": 31398, "code": "', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware", "label": 0}, {"snippet_id": 29390, "code": ": return str(current_user.username) +str(current_user.user_id) return \"not logged in \" +str(current_user.is_authenticated) @auth.route('/logout') @login_required def logout(): logout_user() return redirect", "label": 1}, {"snippet_id": 71937, "code": ": '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/callback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback') req._load_session() req.set_redirect_uri() req", "label": 1}, {"snippet_id": 35108, "code": ", 'selected taggit-tag' if tag.name in tags else 'taggit-tag') for tag in filtered] class ProductTagForm(ModelForm): tags=TagField(required=False, widget=FilteredLabelWidget(model=PUCToTag)) class Meta", "label": 0}, {"snippet_id": 43890, "code": " from dashboard.models import * import os import csv import time import unittest import collections import json import re from selenium import webdriver from selenium.webdriver.support.select import Select", "label": 1}, {"snippet_id": 6533, "code": "']), self.WRONG_GOOGLE_APPS_DOMAIN) return self.oidc_error() self.credentials_store[id_token['sub']]=credentials response=redirect(destination) self.set_cookie_id_token(id_token) return response def oidc_error", "label": 1}, {"snippet_id": 61241, "code": " crash event with a component name and a host generating a short message. :param comp_name: Name of the crashed component :type comp_name: str :param hostname: Name of the host the component was running", "label": 0}, {"snippet_id": 69806, "code": " development, and SHOULD NOT be used in a production setting. \"\"\" from __future__ import unicode_literals import mimetypes import os import posixpath import re import stat from django.http import( FileResponse", "label": 0}, {"snippet_id": 55156, "code": ".isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir(self.path) \tdef islink(self): \t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn", "label": 0}, {"snippet_id": 51250, "code": " **kwargs): args=flatten_string_list(args) self._check_call(args, env=self._context.env, shell=True, **kwargs) def rsync(self, *args, **kwargs): args=flatten_string_list(args) self._check_call([\"rsync\"", "label": 0}, {"snippet_id": 57443, "code": "=context) return result request.method='GET' return self.get(request, *args, **kwargs) @login_required def transaction_pay(request, *args, **kwargs): extra_context={} if not request.user.is_authenticated", "label": 0}, {"snippet_id": 17262, "code": ", {'tournament': t, 'round': round_num, 'formset': formset}) i.save() return HttpResponseRedirect(reverse('round_index', args=(tournament_id))) return render(request, 'rounds/game_score.html', {'tournament", "label": 0}, {"snippet_id": 41302, "code": ") def test_extractedsubclasses(self): ''' Confirm that the inheritance manager is returning appropriate subclass objects and ExtractedText base class objects ''' for doc in DataDocument.objects.all(): try", "label": 0}, {"snippet_id": 80378, "code": ".set_thin_eta_motor_pos_action.triggered.connect(self.set_thin_eta_motor_pos_dialog) self.bifi_scan_action.triggered.connect(self.start_bifi_scan) self.thin_eta_scan_action.triggered.connect(self.start_thin_etalon_scan", "label": 0}, {"snippet_id": 48257, "code": "=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument", "label": 1}, {"snippet_id": 18947, "code": " \"default_top_redirection\") if topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation", "label": 1}, {"snippet_id": 48111, "code": ".objects.create( PUC=puc, extracted_habits_and_practices=hnp ) form=HabitsPUCForm() linked=ExtractedHabitsAndPracticesToPUC.objects.filter( extracted_habits_and_practices=hnp).values('PUC') hnp_puc=PUC", "label": 0}, {"snippet_id": 18678, "code": " if the credentials exist and \tare valid, renders the Sign In page with the error if they don't. \tFinally, sets the secure cookie and redirects to /postlogin. \t\"\"\" \tdef post(self): \t\tself.username=self", "label": 1}, {"snippet_id": 78172, "code": " DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers", "label": 0}, {"snippet_id": 64826, "code": " test cases. Results will be written over stdout in JSON\") parser.add_argument('-n', '--name', required=True, help=\"The name of the function the student was supposed to implement\") parser.add_argument(", "label": 0}, {"snippet_id": 27414, "code": " to set corresponding fields. \"\"\" for arg in kwargs: if hasattr(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent", "label": 0}, {"snippet_id": 59743, "code": ")[ :6 ] return self._app_css_hash def get_canned_queries(self, database_name): queries=self.metadata( \"queries\", database=database_name, fallback=False ) or{} names=queries.keys() return[ self.get_canned_query", "label": 0}, {"snippet_id": 63911, "code": ")==1 idp=idps.keys()[0] idp=request.args.get('idp', idp) loa=request.args.get('required_loa', None) authn_request=get_authn_request(current_app.config, session, relay_state, idp, required_loa=loa, force_authn", "label": 0}, {"snippet_id": 15102, "code": ".required()], choices=[]) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required", "label": 0}, {"snippet_id": 20349, "code": ", and Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is", "label": 0}, {"snippet_id": 64348, "code": " logout'.format( session['eduPersonPrincipalName'] ) ) session.clear() return redirect(next_page) else: http_info=client.handle_logout_request( request.form['SAMLRequest'], subject_id, BINDING_HTTP_REDIRECT", "label": 0}, {"snippet_id": 10446, "code": " openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth.login_and_register import register as external_auth_register from", "label": 0}, {"snippet_id": 40578, "code": " link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8", "label": 0}, {"snippet_id": 80639, "code": "..\") self.matisse.set_bifi_wavelength(target_wavelength) @handled_slot(bool) def set_bifi_motor_pos_dialog(self, checked): target_pos, success=QInputDialog.getInt(self.window, title='Set BiFi Motor Position", "label": 0}, {"snippet_id": 78269, "code": "['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s'", "label": 0}, {"snippet_id": 57736, "code": " onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id", "label": 1}, {"snippet_id": 34160, "code": ".assertFalse( \"errorlist\" in card_div.get_attribute(\"innerHTML\")) def test_redirects(self): ''' Editing the data document type should return the user to the page on which the edits were made ''' for doc_id in[7]:", "label": 0}, {"snippet_id": 42800, "code": ".objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'/qa/extractionscript/15/\\'> Continue QA\".encode(", "label": 0}, {"snippet_id": 74570, "code": "'home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def faq(request): return render(request, 'etd_app/faq.html'", "label": 0}, {"snippet_id": 74312, "code": " self._passphrase_next_url(request): return self._redirect_from_passphrase(request) elif self.access_granted or self.access_form_valid: return super().dispatch(request, *args, **kwargs) else: return self", "label": 0}, {"snippet_id": 1645, "code": "=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of", "label": 0}, {"snippet_id": 19861, "code": ".redis.lrange(\"RedisShards\", 0, -1) if len(addr_port) > 1: logger.warning( \"Monitor: \" \"TODO: if launching > 1 redis shard, flushing needs to \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else", "label": 0}, {"snippet_id": 77519, "code": " \"glb\"): if layers_by_name[layer_name].label !=\"Imagery\": layers_by_name.pop(layer_name) return layers_by_name def main(): obj=GEELayer() hostname=gethostname() target_path=\"merc\" server_url=\"http://%s", "label": 0}, {"snippet_id": 25517, "code": " help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"--logging-level", "label": 0}, {"snippet_id": 27212, "code": "(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\" def __init__(self, redis_address=None, num_cpus=None, num_gpus=None, resources=None, object_store_memory=None", "label": 0}, {"snippet_id": 14882, "code": ".login_view='view_login' @login_manager.user_loader def load_user(user_id): return auth_get_user_by_id(user_id) def load_json(name): filename=os.path.join(app.static_folder, name) return json.load(open(filename", "label": 0}, {"snippet_id": 19525, "code": "=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush(redis_key, *new_lines) elif log_filename in self.files_to_ignore: pass else: try: self.log_file_handles", "label": 1}, {"snippet_id": 49927, "code": "('/login?return_url=saveAs&diagram=true') return redirect('/login?return_url=saveAs') else: return render_template('saveFile.html', diagram=diagram) @app.route('/saveAs', methods=['POST']) @app.route('", "label": 0}, {"snippet_id": 28597, "code": " number of CPUs requested when the task was invoked. runtime_num_gpus: The number of GPUs requested when the task was invoked. runtime_resources: The custom resources requested when the task was invoked", "label": 0}, {"snippet_id": 65803, "code": " close_button.set_relief(Gtk.ReliefStyle.NONE) close_button.set_focus_on_click(False) close_button.connect(\"clicked\", self.on_tab_close_button_clicked, page_instance) close_button.add(close_image) tab_hbox", "label": 0}, {"snippet_id": 41728, "code": " included in the page!')) def test_detail_template_fieldnames(self): pk=self.objects.dg.pk self.assertEqual(str(self.objects.dg.group_type),'Composition', 'Type of DataGroup needs to be \"composition\" for", "label": 0}, {"snippet_id": 47577, "code": "=ExtractedHabitsAndPracticesToPUC links=link_table.objects.filter(PUC__in=pucs).values_list( 'extracted_habits_and_practices', flat=True) hnp=ExtractedHabitsAndPractices.objects.filter(pk__in=links) context['form']=form", "label": 0}, {"snippet_id": 65686, "code": " cancel_button.connect(\"clicked\", self.on_cancel_button_clicked) override_button.connect(\"clicked\", self.on_override_button_clicked) self.override_dialog.present() else: self.copy_database_file() tab_title", "label": 0}, {"snippet_id": 30996, "code": " return redirect('/login') editgrudge=session.query(Grudge).filter_by(id=grudge_id).one() grudget=session.query(Grudget).filter_by(id=grudget_id).one() if login_session['user_id'] !=grudget.user_id: return ", "label": 1}, {"snippet_id": 43393, "code": ".click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a new ExtractedChemical", "label": 0}, {"snippet_id": 68094, "code": ") return redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event in Event.objects.filter(id__in=Hunt(id=pk)", "label": 0}, {"snippet_id": 67602, "code": "(label) return labels class EventDetailView(PaginationMixin, ListView): model=Attribute template_name='threat/event_detail.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, ", "label": 0}, {"snippet_id": 5423, "code": " directories properly.\"\"\" for i in range(1, 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001,", "label": 0}, {"snippet_id": 44090, "code": " should always return to detail page after submit\") detail_url=self.live_server_url +f'/datasource/{ds.pk}' self.browser.get(detail_url) self.browser.find_element_by_xpath('//*[@title=\"edit\"]').click()", "label": 0}, {"snippet_id": 1025, "code": " directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat", "label": 1}, {"snippet_id": 72234, "code": "'{}' cannot be managed by the dashboard.\" .format(fsal['name'])) old_export=ganesha_conf.update_export({ 'export_id': export_id, 'path': path, 'cluster_id': cluster_id, 'daemons': daemons, 'pseudo': pseudo", "label": 0}, {"snippet_id": 30789, "code": " grudgetToDelete=session.query(Grudget).filter_by(id=grudget_id).one() if 'username' not in login_session: return redirect('/login') if grudgetToDelete.user_id !=login_session['user_id']: return \"<script", "label": 1}, {"snippet_id": 28229, "code": ".construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub.ERROR_INFO, driver_id.binary(", "label": 0}, {"snippet_id": 80060, "code": ") session.commit() datarequest_dict=_dictize_datarequest(data_req) users=[data_req.user_id] tk.enqueue_job(_send_mail,[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator", "label": 1}, {"snippet_id": 84234, "code": " article.all_images(), 'article': article, } if group_slug is not None: template_params['group']=group if extra_context is not None: template_params.update(extra_context) return render_to_response('/'.join", "label": 0}, {"snippet_id": 20536, "code": ": autoscaling_config=os.path.expanduser(args.autoscaling_config) else: autoscaling_config=None monitor=Monitor( redis_ip_address, redis_port, autoscaling_config, redis_password=args.redis_password) try", "label": 1}, {"snippet_id": 38579, "code": ".ForeignKey('DataGroup', on_delete=models.CASCADE) products=models.ManyToManyField('Product', through='ProductDocument') matched=models.BooleanField(default=False) extracted=models.BooleanField(default=False", "label": 0}, {"snippet_id": 47495, "code": " import logging import datetime from django import forms from django.db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import", "label": 1}, {"snippet_id": 67504, "code": "=self.request.GET.get('level') if level is not None: query=query.filter(threat_level_id=level) keyword=self.request.GET.get('keyword') if keyword is not None: query=query.filter(Q(info__icontains=keyword", "label": 0}, {"snippet_id": 5659, "code": ") def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com", "label": 0}, {"snippet_id": 23791, "code": " of system memory in bytes. \"\"\" docker_limit=None memory_limit_filename=\"/sys/fs/cgroup/memory/memory.limit_in_bytes\" if os.path.exists(memory_limit_filename): with open(memory_limit_filename, \"r\") as f:", "label": 0}, {"snippet_id": 20517, "code": "=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port", "label": 1}, {"snippet_id": 19731, "code": ".cloudpickle as pickle import ray.gcs_utils import ray.utils import ray.ray_constants as ray_constants from ray.services import get_ip_address, get_port from ray.utils import(binary_to_hex, binary_to_object_id", "label": 0}, {"snippet_id": 44364, "code": "*[@id=\"id_rawchem-0-true_cas\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_chemname\"]') with self.assertRaises(NoSuchElementException", "label": 0}, {"snippet_id": 34209, "code": "=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url +doc_detail_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) doc_type_select.select_by_visible_text", "label": 0}, {"snippet_id": 58068, "code": "), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject\", template_text=\"ct/email", "label": 1}, {"snippet_id": 16845, "code": "': formset}) gp.save() send_board_call(r) return HttpResponseRedirect(reverse('game_index', args=(tournament_id, round_num))) else: r.game_set.all().delete() default_set=GameSet.objects.get(pk=1) data=", "label": 0}, {"snippet_id": 77444, "code": "\"\"\" def __init__(self): logger.debug(\"Initializing GEELayer\") def GetLayers(self, server_url, target_path): \"\"\"Returns WmsLayer representations of the server's layers. These contain metainfo, and the ability", "label": 0}, {"snippet_id": 1713, "code": " production setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, )", "label": 1}, {"snippet_id": 51314, "code": ".fetch(dependencies, self._context.env): raise AbortRunException() def get_dependency_args(self, *dependencies): dependencies=flatten_string_list(dependencies) dependency_collection=self._dependency_collection", "label": 0}, {"snippet_id": 4644, "code": ", }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response", "label": 0}, {"snippet_id": 69119, "code": ") systemd.reload_daemon() with open(os.path.join(HERE, 'systemd-units', 'jupyterhub.service')) as f: hub_unit_template=f.read() with open(os.path.join(HERE, 'systemd-units', 'traefik.service')) as f: traefik_unit_template", "label": 0}, {"snippet_id": 28401, "code": " this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to be None in which case we will return an empty string", "label": 0}, {"snippet_id": 17187, "code": " request.user) r=get_round_or_404(t, round_num) GameScoreFormset=formset_factory(GameScoreForm, extra=0) data=[] the_list=r.game_set.all() for game in the_list: content={'game_name': game.name} for gp in game", "label": 0}, {"snippet_id": 29117, "code": " method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None, a new lock will be used. Returns: A thread-safe", "label": 0}, {"snippet_id": 41366, "code": "'' for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd, EXTRA) extracted_text_form=ParentForm(instance=et) child_formset=ChildForm(instance=et) dd_child_model", "label": 1}, {"snippet_id": 43858, "code": "/*[@id='extracted-text-modal-cancel']\") ) ) prod_name_box=self.browser.find_element_by_id( 'id_prod_name') prod_name_box.send_keys('Fake Product') save_button=self.browser.find_element_by_id( 'extracted", "label": 0}, {"snippet_id": 72678, "code": " generate_confirmation_url(request, user): token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def login_form(request): if not request.user", "label": 0}, {"snippet_id": 73662, "code": "('home') @login_required(login_url='/login/', redirect_field_name=None) def logout_view(request): logout(request) return redirect('login') def parse_position_return_dictionary(create_position_form): return", "label": 0}, {"snippet_id": 18617, "code": " \tusername submitted, verifies the password with the hashed password inside the database if the \tdocument exists, returns None or the error message. \t\"\"\" \tdef check_database(self): \t\tph=PasswordHasher(", "label": 1}, {"snippet_id": 17310, "code": " from nyaa import email, forms, models from nyaa.extensions import db from nyaa.utils import sha1_hash from nyaa.views.users import get_activation_link, get_password_reset_link, get_serializer app=flask", "label": 0}, {"snippet_id": 33297, "code": "(ProductDocument) admin.site.register(SourceCategory) admin.site.register(PUC, PUCAdmin) admin.site.register(ExtractedText) admin.site.register(ExtractedChemical) admin.site.register(ExtractedFunctionalUse", "label": 0}, {"snippet_id": 28544, "code": "\"\" os.environ[\"CUDA_VISIBLE_DEVICES\"]=\",\".join([str(i) for i in gpu_ids]) def resources_from_resource_arguments(default_num_cpus, default_num_gpus, default_resources, runtime_num_cpus, runtime_num_gpus", "label": 0}, {"snippet_id": 4593, "code": "\"location\"]) response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': ", "label": 0}, {"snippet_id": 76097, "code": ".redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None, version_slug=None): if path.startswith(self.from_url): log.debug('Redirecting ", "label": 0}, {"snippet_id": 18920, "code": " user): \"\"\"Find next location for given user after login.\"\"\" if not user.last_login: return reverse(\"core:user_index\") nextlocation=request.POST.get(\"next\", None) if nextlocation is None or nextlocation==", "label": 1}, {"snippet_id": 7620, "code": ".theming.helpers import is_request_in_themed_site from openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.errors import UserNotFound from", "label": 0}, {"snippet_id": 59538, "code": "=dict(DEFAULT_CONFIG, **(config or{})) self.version_note=version_note self.executor=futures.ThreadPoolExecutor( max_workers=self.config(\"num_sql_threads\") ) self.max_returned_rows=self.config(\"max_returned_rows", "label": 0}, {"snippet_id": 55898, "code": "(self,pattern) if __name__==\"__main__\": \tprint \"current has \" \tfor item in current(): \t\tprint item.path \tprint \"root has \" \tfor item in root(): \t\tprint item.path \tprint \"home has \" \tfor item in home(): ", "label": 0}, {"snippet_id": 59001, "code": ".get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render(context) text_template=loader.get_template('ctms/email/invite_text.txt') rendered_text=text_template.render(context) send_mail(", "label": 0}, {"snippet_id": 53080, "code": " }, } self.client.login(username='testuser', password='password') self.assertTemplateUsed('users/update.html') for form in data: data_to_pass=data[form] data[form][form]='Update' response=self.client.post", "label": 1}, {"snippet_id": 75812, "code": ".translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs.projects.models import Project from.managers import RedirectManager log=logging.getLogger(__name__)", "label": 0}, {"snippet_id": 9902, "code": "': get_login_session_form().to_json(), 'registration': RegistrationFormFactory().get_registration_form(request).to_json() } def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept", "label": 0}, {"snippet_id": 76918, "code": " str(e.args[0])) raise def _PasteTile(im_dest, im_src, box): \"\"\"Copy the image. Args: im_dest: Destination of the image to be copied. im_src: Source image to be copied. box: the dimentions of the image.", "label": 0}, {"snippet_id": 65688, "code": ", self.on_cancel_button_clicked) override_button.connect(\"clicked\", self.on_override_button_clicked) self.override_dialog.present() else: self.copy_database_file() tab_title=self.create_tab_title_from_filepath", "label": 0}, {"snippet_id": 84048, "code": "=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def edit_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article,", "label": 0}, {"snippet_id": 63152, "code": " shared_key=self.app.config['TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp))", "label": 0}, {"snippet_id": 27808, "code": " add_event(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str)", "label": 0}, {"snippet_id": 82839, "code": ".pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) <", "label": 1}, {"snippet_id": 59964, "code": "\":memory:\"]={ \"hash\": \"000\", \"file\": \":memory:\", \"size\": 0, \"views\":{}, \"tables\":{}, } else: path=Path(filename) name=path.stem if name in self._inspect: raise Exception(\"Multiple files with same stem ", "label": 0}, {"snippet_id": 72436, "code": "{}/'.format(root_dir) \\ if not root_dir.endswith('/') else root_dir try: cfs=CephFS() paths=cfs.get_dir_list(root_dir, depth) paths=[p[:-1] for p in paths if p !=root_dir] return{'paths': paths} except", "label": 0}, {"snippet_id": 41335, "code": ".data_group.group_type.code=='HH': self.assertEqual(type(extsub), ExtractedHHDoc) else: self.assertEqual(type(extsub), ExtractedText) except ObjectDoesNotExist: pass def test_every_extractedtext(self): ''", "label": 0}, {"snippet_id": 4717, "code": "'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin", "label": 0}, {"snippet_id": 52267, "code": "]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST\"]) def make_new_board(): \"\"\"Make a new", "label": 0}, {"snippet_id": 5499, "code": "', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response self.assertRedirects(response", "label": 0}, {"snippet_id": 31845, "code": "\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request", "label": 1}, {"snippet_id": 82207, "code": "*kwargs) quantity=0 urls_without_category=JustURL.objects.filter(category=None).count() print(urls_without_category) queryset=Category.objects.all() for cat in queryset: quantity +=cat.justurl_set.all(", "label": 0}, {"snippet_id": 53871, "code": " return '' return os.path.join( self.project.results_path, '.cache', 'steps', '{}.json'.format(self.id) ) @property def id(self): return self.step.definition.name if self.step else None @property def definition", "label": 0}, {"snippet_id": 43672, "code": "=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field.get_attribute('value') raw_chem_name_field.send_keys(' edited') self.browser.find_element_by_xpath(", "label": 0}, {"snippet_id": 42153, "code": "}/').content.decode('utf8') self.assertIn('1 extracted', response, 'Data Group should contain a count of 1 total extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects", "label": 0}, {"snippet_id": 76406, "code": " im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect(in tiles): %s %s\", str(rect_of_tiles), str(rect_of_tiles.Extent())) logger.debug(\"im_whole_tiles pixel extent: %s\", str(im_whole_tiles_extent", "label": 0}, {"snippet_id": 60822, "code": " run_check(self): \"\"\"Runs a check if the pid exists and has not finished yet. :return: True if the component is running, otherwise returns a generated ``LocalCrashEvent`` :rtype bool or LocalCrashEvent \"", "label": 0}, {"snippet_id": 80236, "code": "=menu_bar.addMenu('Set') self.set_wavelength_action=set_menu.addAction('Wavelength') self.set_bifi_approx_wavelength_action=set_menu.addAction('BiFi Approx. Wavelength') self.set_bifi_motor_pos_action=set_menu", "label": 0}, {"snippet_id": 64856, "code": " points this question is worth. This argument is \" \"only used when -c is passed, and defaults to 0\") parser.add_argument('-c', '--code', help=\"The student's code submission. Make sure to carefully escape \"", "label": 0}, {"snippet_id": 13748, "code": " HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email, request.is_secure()) user=user if user", "label": 0}, {"snippet_id": 24498, "code": ".node_ip_address), num_current_log_files, -1) for log_filename in new_log_filenames: logger.info(\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename", "label": 1}, {"snippet_id": 53458, "code": " **render_data ), html_message=templating.render_template( 'user-code-error.html', **render_data ) ) def get_stack_frames(): \"\"\" :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ", "label": 0}, {"snippet_id": 20000, "code": ".binary_to_hex(heartbeat_message.ClientId()) ip=self.local_scheduler_id_to_ip_map.get(client_id) if ip: self.load_metrics.update(ip, static_resources, dynamic_resources) else: logger.warning( \"Monitor: \"", "label": 0}, {"snippet_id": 11578, "code": " finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent successfully HttpResponse: 302 if not logged in(redirect to", "label": 0}, {"snippet_id": 23477, "code": " set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",\")] def", "label": 0}, {"snippet_id": 37184, "code": "'dg_type', 0) self.user=kwargs.pop('user', None) super(ExtractionScriptForm, self).__init__(*args, **kwargs) self.fields['weight_fraction_type'].widget.attrs.update( {'style': 'height:2.75rem; !important'}", "label": 0}, {"snippet_id": 76008, "code": ") def get_from_to_url_display(self): if self.redirect_type in['prefix', 'page', 'exact']: from_url=self.from_url to_url=self.to_url if self.redirect_type=='prefix': to_url='/{lang}/{version}/'.format( lang", "label": 0}, {"snippet_id": 45957, "code": ".objects.all() data={} data['object_list']=datagroup return render(request, template_name, data) @login_required() def data_group_detail(request, pk, template_name='data_group/datagroup_detail.html'): dg", "label": 0}, {"snippet_id": 30143, "code": " import httplib2 import json from flask import make_response import requests app=Flask(__name__) CLIENT_ID=json.loads( open('client_secrets.json', 'r').read())['web']['client_id'] APPLICATION_NAME=\"Grudget", "label": 0}, {"snippet_id": 35002, "code": "%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow", "label": 1}, {"snippet_id": 46734, "code": "'filename'])>255: errors.append([count,\"Filename too long!\"]) continue if line['filename'] in filenames: errors.append([count, \"Duplicate filename found in csv\"]) continue if line['title']=='': line['title'", "label": 0}, {"snippet_id": 32044, "code": " Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme: The token value(optional). position: The location of the token in the stream. ''' def __init__(self, ttype, lexeme=None", "label": 0}, {"snippet_id": 51420, "code": " __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception", "label": 0}, {"snippet_id": 566, "code": ".splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect", "label": 1}, {"snippet_id": 10770, "code": "(request, context) response=render_to_response('student_account/login_and_register.html', context) response.delete_cookie( configuration_helpers.get_value(\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME", "label": 0}, {"snippet_id": 18803, "code": " \t\treturn self.render_string('modules/bootstrap_include.html') if __name__=='__main__': \ttornado.options.parse_command_line() \tsettings={ \t\t\"cookie_secret\": \"j84i6ykTfmew9As25eYqAbs5KIhrUv/gmp801s9zRo=", "label": 1}, {"snippet_id": 5960, "code": " app.after_request(self.after_request) self.flow=flow_from_clientsecrets( app.config['OIDC_CLIENT_SECRETS'], scope=app.config['OIDC_SCOPES']) assert isinstance(self.flow, OAuth2WebServerFlow) self.cookie_serializer", "label": 0}, {"snippet_id": 18883, "code": "'gospel_trips_available': False} try: admin=next((gt for gt in GospelTrip.objects.order_by('-open_time') if gt.is_open), None) if admin: if admin.is_open: return{'gospel_trips_available': True} return{", "label": 1}, {"snippet_id": 44497, "code": ".create(title='Test Extraction Script', url='http://www.epa.gov/', qa_begun=False, script_type='EX') gt=GroupType.objects.create(title='Composition', code='CO') dg=DataGroup.objects.create(name='Data Group", "label": 0}, {"snippet_id": 42822, "code": " response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"/qa/extractionscript/15/'> Begin QA\".encode(), response.content) pk=9 response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True", "label": 0}, {"snippet_id": 57735, "code": "[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id", "label": 1}, {"snippet_id": 15631, "code": ": sub_form=form.change_input_series_all_models[index] sub_form.input_source_initial.choices=get_inputs_choices() sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form.input_source_final", "label": 0}, {"snippet_id": 52639, "code": "-board\") def display_user_actions_board(): \"\"\"Retrieve user and project data from db, render projects on action page. \"\"\" if session.get(\"is_logged_in\") is True: user_id=session.get(\"user_id\") projects_objects", "label": 0}, {"snippet_id": 35647, "code": "'q', '')).lstrip() if q > '': p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q)) .exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned", "label": 0}, {"snippet_id": 64193, "code": " continue the logout process ' 'for user{!r}'.format(location, user)) state.sync() return LogoutPayload().dump({'location': location}).data @authn_views.route('/saml2-ls', methods=['POST']) def logout_service", "label": 0}, {"snippet_id": 41445, "code": " None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) self.assertFalse( 'SID' in form.fields) else: self.assertFalse", "label": 0}, {"snippet_id": 45433, "code": " django.http import HttpResponse from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from djqscsv import render_to_csv_response from", "label": 0}, {"snippet_id": 9218, "code": " except(KeyError, ValueError, IndexError): pass if is_request_in_themed_site() and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view", "label": 1}, {"snippet_id": 73347, "code": ", name='confirm_account'), path('createnewposition/', views.import_position, name='importposition'), path('positions/', views.positions, name='positions'), path('position/', views.position, name='position", "label": 1}, {"snippet_id": 35661, "code": "(id__in=(ProductToPUC.objects.values_list('product_id', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={", "label": 1}, {"snippet_id": 26045, "code": "( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, object_store_memory=self", "label": 0}, {"snippet_id": 75567, "code": "\\'t find a file: please email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis.current_file_name) response=FileResponse(open(file_path, 'rb'), content_type", "label": 0}, {"snippet_id": 36149, "code": ": return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url", "label": 0}, {"snippet_id": 48645, "code": " values_list('product_id', flat=True)) products=Product.objects.filter(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag", "label": 0}, {"snippet_id": 18959, "code": "\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return nextlocation class RootDispatchView(auth_mixins.LoginRequiredMixin, generic.RedirectView): \"\"\"Handle", "label": 1}, {"snippet_id": 28873, "code": "=1024 memory_in_bytes=vmstat(\"total memory\") * bytes_in_kilobyte else: memory_in_bytes=sysctl([\"sysctl\", \"hw.memsize\"]) if docker_limit is not None: return min(docker_limit, memory_in_bytes) else: return", "label": 0}, {"snippet_id": 12869, "code": " commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'].lower()=='complete': date_placed=datetime.strptime(order['date_placed'], \"%Y-", "label": 0}, {"snippet_id": 18810, "code": "'__main__': \ttornado.options.parse_command_line() \tsettings={ \t\t\"cookie_secret\": \"j84i6ykTfmew9As25eYqAbs5KIhrUv/gmp801s9zRo=\", \t\t\"xsrf_cookies\":True, \t\t\"login_url\": \"/signin\", \t} \tasync_db=motor.motor_tornado", "label": 1}, {"snippet_id": 63627, "code": ") def test_logout_service_startingSP_already_logout(self): came_from='/afterlogin/' session_id=self.add_outstanding_query(came_from) with self.app.test_request_context('/saml2-ls', method='POST', data=", "label": 0}, {"snippet_id": 51914, "code": "(\"That email address has already been registered\") return redirect(\"/\") @app.route(\"/login\", methods=[\"GET\"]) def display_login(): \"\"\"Load login form.\"\"\" return render_template(\"login.html\") @app.route", "label": 0}, {"snippet_id": 49892, "code": " in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs() @app.route('/saveAs') def saveAs(diagram=False): if(not 'email' in session) and", "label": 0}, {"snippet_id": 15091, "code": "): super(ChangeOneModelForm, self).__init__(csrf_enabled=csrf_enabled, *args, **kwargs) model_system_name=NoValidationSelectField('Model',[validators.required()], choices=[]) input_source_initial=NoValidationSelectField", "label": 0}, {"snippet_id": 47512, "code": " HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render from django.db.models import Count, Q, Value, IntegerField, Subquery, OuterRef, F, Sum from django", "label": 1}, {"snippet_id": 79506, "code": "(ValidationError) will be risen if some of these parameters are not valid. Data QLD modification Will send email notification to users of assigned organisation with admin access :param title: The title", "label": 0}, {"snippet_id": 57764, "code": ") or{} if status: steps=[status.get(key, False) for key in get_onboarding_steps()] return round( len(filter(lambda x: x, steps)) / float(len(steps)) * 100, 0 ) return 0 def update_onboarding_step(step,", "label": 0}, {"snippet_id": 45065, "code": "), '%Y-%m-%d') chart_start_datetime=datetime.datetime(datetime.datetime.now().year -1, min(12,datetime.datetime.now().month +1), 1) def index(request): stats={} stats['datagroup_count']=DataGroup.objects", "label": 0}, {"snippet_id": 66092, "code": " database_manager=NotImplemented unlock_database_stack_box=NotImplemented keyfile=NotImplemented composite_keyfile_path=NotImplemented logging_manager=LoggingManager(True) overlay=NotImplemented def __init__", "label": 0}, {"snippet_id": 77656, "code": " pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources']: size=default_size for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size", "label": 0}, {"snippet_id": 84047, "code": " context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def edit_article(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES,", "label": 0}, {"snippet_id": 50778, "code": "=enabled_by_default def set_optional(self, optional): self.is_optional=optional def test_conditions(self, env): if len(self.condition_sets)==0: return True for conditions in self.condition_sets: if all(key in", "label": 0}, {"snippet_id": 47918, "code": ".2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(\"utf-8\") lines=file_data.split(\"\\n\") dtxsids=[] for line in lines: if", "label": 0}, {"snippet_id": 55693, "code": ".path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isfile(p): \t\t\t\tyield File(p) \t \tdef", "label": 0}, {"snippet_id": 38558, "code": "=models.CharField(max_length=255) title=models.CharField(max_length=255) url=models.CharField(null=True, blank=True, max_length=275) raw_category=models.CharField(null=True, blank=True, max_length=100)", "label": 0}, {"snippet_id": 12974, "code": " params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are", "label": 0}, {"snippet_id": 80292, "code": ".setCheckable(True) self.lock_slow_piezo_action=lock_menu.addAction('Lock Slow Piezo') self.lock_slow_piezo_action.setCheckable(True) self.lock_thin_etalon_action=lock_menu.addAction('Lock Thin Etalon'", "label": 0}, {"snippet_id": 23475, "code": " is not set, this returns None. \"\"\" gpu_ids_str=os.environ.get(\"CUDA_VISIBLE_DEVICES\", None) if gpu_ids_str is None: return None if gpu_ids_str==\"\": return[] return[int(i) for i in gpu_ids_str.split(\",", "label": 0}, {"snippet_id": 66863, "code": " except Exception as e: print(e) pass try: context['ipaddress']=socket.gethostbyname(domain) except Exception as e: pass vt=VT() context['vt_domain']=vt.getDomainReport(domain) tm=ThreatMiner() context[", "label": 0}, {"snippet_id": 54840, "code": "\tself.prepare_for_processing() \t\t \t\tproblem_text_students=defaultdict(list) \t\t \t\tfor assignment in self.assignments: \t\t\tfor problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text", "label": 0}, {"snippet_id": 32836, "code": ": The new file descriptor. ''' def __init__(self, fd, newfd): self.fd=fd self.backup=os.dup(fd) try: filename, mode=newfd self.newfd=os.open(filename, mode) except TypeError: self.newfd=newfd def close", "label": 1}, {"snippet_id": 54147, "code": "/politicians/id/<name>') def politician_page(name): name=name.lower() politicians=Politician.all() politicians.filter(\"name=\", name) politician=None for p in politicians: politician=p if politician !=None:", "label": 1}, {"snippet_id": 56822, "code": "(next_page) else: return render(request, 'core/delete.html', extra_context) @login_required() def concept_detail(request, *args, **kwargs): extra_context={} concept, concept_form=get_concept_and_form_from_kwargs", "label": 0}, {"snippet_id": 25329, "code": "=self.xray_driver_removed_handler else: raise Exception(\"This code should be unreachable.\") message_handler(channel, data) def update_local_scheduler_map(self): local_schedulers=self.state.client_table(", "label": 0}, {"snippet_id": 45941, "code": " get_extracted_models, clean_dict, update_fields from django.db.models import Max @login_required() def data_group_list(request, template_name='data_group/datagroup_list.html'): datagroup=DataGroup.objects.all() data={}", "label": 0}, {"snippet_id": 39193, "code": " extracted documents have been associated with the group.\" raise ValidationError({'group_type': msg}) @receiver(models.signals.post_delete, sender=DataGroup) def auto_delete_file_on_delete(sender, instance,", "label": 0}, {"snippet_id": 7827, "code": ", redirect_to, third_party_auth_hint), 'third_party_auth_hint': third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers", "label": 0}, {"snippet_id": 19174, "code": ": export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1 self._process_key(key) try: for msg in import_pubsub_client.listen(): with self.worker.lock: if msg[\"type", "label": 1}, {"snippet_id": 61334, "code": " Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread", "label": 0}, {"snippet_id": 73959, "code": " request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request, 'importapplications/applications.html',{ 'form': form}) form=ImportApplicationsForm() return render(request, ", "label": 0}, {"snippet_id": 5301, "code": "/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 4332, "code": ".\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password", "label": 0}, {"snippet_id": 14255, "code": " user(User): The user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration", "label": 0}, {"snippet_id": 64108, "code": "(session) client=Saml2Client(current_app.saml2_config, state_cache=state, identity_cache=identity) subject_id=_get_name_id(session) if subject_id is None: current_app.logger.warning( 'The session does not", "label": 0}, {"snippet_id": 53666, "code": ".getvalue() if buffered_bytes is None: return '' return buffered_bytes.decode(self.source_encoding) except Exception as err: return 'Redirect Buffer Error:{}'.format(err) def flush_all(self) -> str: \"\"", "label": 1}, {"snippet_id": 42665, "code": ".loader import * from django.test import TestCase, override_settings, RequestFactory from dashboard.models import DataDocument, Script, ExtractedText, ExtractedChemical, QAGroup from django.db.models import", "label": 0}, {"snippet_id": 55227, "code": "\t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath(head),FSPath(tail)) \tdef splitdrive", "label": 0}, {"snippet_id": 4809, "code": ".user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self.test_password", "label": 0}, {"snippet_id": 31908, "code": " assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')) assert request.status_code==302 assert reverse('elections:vote')==request.url request", "label": 0}, {"snippet_id": 6315, "code": "-connect-core-1_0.html \"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger.error('id_token issued by non-trusted issuer: %s' % id_token['iss']) return", "label": 0}, {"snippet_id": 48673, "code": " if form.is_valid(): assign_tag=PUCTag.objects.filter(id=form['tag'].value()) tags=assumed_tags | assign_tag product_ids=form['id_pks'].value().split(\",\") for id in product_ids: product=Product.objects", "label": 0}, {"snippet_id": 28213, "code": " message to. If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type,", "label": 0}, {"snippet_id": 55550, "code": "\tp=self.dirname() \t\treturn Folder(p.path) \tdef ancestors(self): \t\tc=FSItem(self.path) \t\tp=c.parent() \t\twhile c.path is not p.path: \t\t\tyield p \t\t\tc=p \t\t\tp=c.parent() \t\t \tdef common_parent(self,other): \t", "label": 0}, {"snippet_id": 13649, "code": "\"ENTERPRISE_CUSTOMER_COOKIE_NAME\", settings.ENTERPRISE_CUSTOMER_COOKIE_NAME), domain=configuration_helpers.get_value(\"BASE_COOKIE_DOMAIN\", settings.BASE_COOKIE_DOMAIN), ) return response @require_http_methods(['POST']) def", "label": 0}, {"snippet_id": 83480, "code": "=getattr(self, 'group', None) if self.is_new: article.creator_ip=editor_ip if editor is not None: article.creator=editor article.group=group article.save(*args, **kwargs) changeset=article.new_revision", "label": 0}, {"snippet_id": 26236, "code": "( self._ray_params.redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password", "label": 0}, {"snippet_id": 65525, "code": ".set_name(\"Keepass 2 Database\") filter_text.add_mime_type(\"application/x-keepass2\") filechooser_opening_dialog.add_filter(filter_text) response=filechooser_opening_dialog.run() if response==Gtk.ResponseType.OK", "label": 0}, {"snippet_id": 82526, "code": " def run_check(self): \"\"\"You need to override this function in monitoring subclasses. It is called in the main monitoring thread. :return: True on a successful check, otherwise a CrashEvent is generated", "label": 0}, {"snippet_id": 3428, "code": ".\"\"\" logout_url=self.redirect_url if is_authenticated(request.user): logout_from_op=import_from_settings('OIDC_OP_LOGOUT_URL_METHOD', '') if logout_from_op: logout_url=import_string(logout_from_op)() auth", "label": 0}, {"snippet_id": 64022, "code": " currently logged in user. :param session: The current session object :return: NameID :rtype: saml2.saml.NameID | None \"\"\" try: return decode(session['_saml2_session_name_id']) except KeyError: return None", "label": 0}, {"snippet_id": 25229, "code": "\"\"\"Handle a notification that a driver has been removed. Args: unused_channel: The message channel. data: The message data. \"\"\" gcs_entries=ray.gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) driver_data", "label": 0}, {"snippet_id": 22921, "code": " or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{}.\".format(self.extra_data)) if type is not None: extra_data", "label": 0}, {"snippet_id": 81231, "code": ".Model): _name='event.event' _inherit=['event.event'] fit_is_participating=fields.Boolean(\"Is Participating\", compute=\"_fit_compute_is_participating\") website_published=fields.Boolean(default=True) fit_day_of_week", "label": 0}, {"snippet_id": 61297, "code": " a disconnect event with a hostname and generates a short message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is", "label": 0}, {"snippet_id": 16772, "code": "=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(request.POST, the_round=r) if formset.is_valid(): for f in formset: g=f.game g.name=f.cleaned_data['game_name'", "label": 0}, {"snippet_id": 24739, "code": ", args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) log_monitor=LogMonitor( redis_ip_address, redis_port, args.node_ip_address, redis_password", "label": 1}, {"snippet_id": 33717, "code": "(self): response=self.client.get('/get_data/') self.assertEqual(response.status_code, 200) self.assertContains(response, 'Download Uncurated Chemicals') rc=RawChem.objects.filter(dsstox_id__isnull=True", "label": 1}, {"snippet_id": 12543, "code": " to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={", "label": 0}, {"snippet_id": 13877, "code": "[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration", "label": 0}, {"snippet_id": 77514, "code": " layers_by_name[layer_name].db_type in(\"gedb\", \"glb\"): if layers_by_name[layer_name].label !=\"Imagery\": layers_by_name.pop(layer_name) return layers_by_name def main(): obj=GEELayer() hostname=gethostname()", "label": 0}, {"snippet_id": 39350, "code": " '' @classmethod def detail_fields(cls): return['extracted_text', 'raw_chem_name', 'raw_cas', 'raw_min_comp', 'raw_central_comp', 'raw_max_comp', 'unit_type', 'weight_fraction_type', 'report_funcuse', ", "label": 0}, {"snippet_id": 12454, "code": " enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 28798, "code": " example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result) except ValueError: return result def get_system_memory", "label": 0}, {"snippet_id": 55010, "code": " import os import os.path import fnmatch def specialized(p): \tif os.path.isdir(p): \t\treturn Folder(p) \telif os.path.isfile(p): \t\treturn File(p) \telif os.path.islink(p): \t\treturn Link(p) \telse: \t\treturn", "label": 0}, {"snippet_id": 8044, "code": ")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that", "label": 0}, {"snippet_id": 36158, "code": " querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self", "label": 0}, {"snippet_id": 7070, "code": ".html\", form=form) @auth.route('/change-email/<token>') @login_required def change_email(token): if current_user.change_email(token): session['auth_token']=current_user.auth_token flash('Your email address", "label": 0}, {"snippet_id": 56303, "code": "('AsdE43E4') \\ .then_response_should_be_a_redirect_to('pachatary://app/experiences/AsdE43E4') class ScenarioMaker: def given_an_experience_on_db(self, title, description, share_id, pic): orm_person=ORMPerson", "label": 0}, {"snippet_id": 84280, "code": "=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title': title} if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args", "label": 0}, {"snippet_id": 51431, "code": " class AbortRunException(Exception): def __init__(self, message=\"Aborted due to error.\", exitcode=1): Exception.__init__(self, message) self.message=message self.exitcode=exitcode def fail(*args, **kwargs):", "label": 0}, {"snippet_id": 35664, "code": "', flat=True)) )[:max_products_returned]) full_p_count=Product.objects.filter( Q(title__icontains=q) | Q(brand_name__icontains=q)).count() else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST", "label": 1}, {"snippet_id": 59330, "code": " values to return for requested facets \"\"\".strip()), ConfigOption(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"\".strip()), ConfigOption(\"facet_suggest_time_limit_ms\", 50, \"", "label": 0}, {"snippet_id": 21202, "code": ".start_raylet_monitor( self._redis_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password, config=self._config) assert(ray_constants.PROCESS_TYPE_RAYLET_MONITOR", "label": 0}, {"snippet_id": 61802, "code": " current_result.securedrop=securedrop try: prior_result=securedrop.results.latest() except ScanResult.DoesNotExist: results_to_be_written.append(current_result) continue if prior_result.is_equal_to(current_result", "label": 1}, {"snippet_id": 17562, "code": " 'POST']) def register(): if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User(username", "label": 0}, {"snippet_id": 32872, "code": " value, traceback): os.dup2(self.backup, self.fd) class RedirectionsHelper: ''' Helps perform multiple file redirections. Args: redirections: A list of redirections. ''' def __init__(self, redirections", "label": 0}, {"snippet_id": 57872, "code": "\"\"\" try: ONBOARDING_SETTINGS_DEFAULT[setting_name] except KeyError: return onboarding_setting=c_onboarding_settings(use_secondary=True).find_one({'name': setting_name}) if not onboarding_setting: c_onboarding_settings", "label": 0}, {"snippet_id": 53519, "code": ":param stack_frame: :param project: :return: \"\"\" filename=stack_frame.filename if filename.startswith(project.source_directory): filename=filename[len(project.source_directory) +1:] location=stack_frame", "label": 0}, {"snippet_id": 15992, "code": "'view_home')) register_form=RegisterForm() if register_form.validate_on_submit(): login_user(register_form.user, remember=True) return redirect(url_for('view_home')) return render_template('register.html',", "label": 1}, {"snippet_id": 68511, "code": "='tws' paginate_by=30 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) return context def get_queryset(self, request, pk): query=tweet.objects.filter(hunt_id=Hunt(id=pk)", "label": 0}, {"snippet_id": 16438, "code": " def get_seven(request, tournament_id, round_num): \"\"\"Provide a form to get a multiple of seven players for a round\"\"\" t=get_modifiable_tournament_or_404(tournament_id, request.user) r=get_round_or_404", "label": 0}, {"snippet_id": 78713, "code": " session.add(data_req) session.commit() datarequest_dict=_dictize_datarequest(data_req) if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) users.discard(context", "label": 0}, {"snippet_id": 71972, "code": "('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri() req._config={'success_uri': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback", "label": 1}, {"snippet_id": 49007, "code": ", instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,{'product': p, 'form': form}) @login_required() def product_delete(request,", "label": 0}, {"snippet_id": 80453, "code": ".argv[2]) except Exception as err: self.matisse: Matisse=None raise err @pyqtSlot() def clean_up(self): self.status_monitor_queue.put(ExitFlag()) self.status_monitor.update_thread.wait() self.log_queue", "label": 0}, {"snippet_id": 23355, "code": " return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow", "label": 0}, {"snippet_id": 68720, "code": " exurl=expand(url) return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location')==None:", "label": 0}, {"snippet_id": 2184, "code": " document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$',", "label": 0}, {"snippet_id": 66247, "code": ") self.unlock_database_stack_box.add(self.overlay) self.unlock_database_stack_box.show_all() self.parent_widget.add(self.unlock_database_stack_box) def connect_events(self): password_unlock_button=self", "label": 0}, {"snippet_id": 28968, "code": ": the worker used to send warning message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It will be", "label": 0}, {"snippet_id": 65010, "code": ") valid=False if type(expr)==ast.Expression: comp=expr.body if type(comp)==ast.Compare and len(comp.ops)==len(comp.comparators)==1: left=comp.left right=comp.comparators[0] left_valid=False if type(left", "label": 0}, {"snippet_id": 31249, "code": " INSTALLED_APPS=[ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'social_django', 'gitmate_config'", "label": 0}, {"snippet_id": 56317, "code": " title, description, share_id, pic): orm_person=ORMPerson.objects.create() ORMProfile.objects.create(person=orm_person, username='u') experience=ORMExperience.objects.create(title=title, description=description", "label": 0}, {"snippet_id": 58023, "code": " send_email, get_onboarding_percentage from core.common import onboarding from core.common.utils import get_onboarding_setting, ONBOARDING_STEPS_DEFAULT_TEMPLATE, \\ get_onboarding_status_with_settings @ddt", "label": 0}, {"snippet_id": 9948, "code": " external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce service. Args: user(User): The user to authenticate as when requesting ecommerce. Returns:", "label": 0}, {"snippet_id": 1211, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If", "label": 0}, {"snippet_id": 81305, "code": "] count=self.env['event.registration'].search_count(domain) if count > 0: event.fit_is_participating=True else: event.fit_is_participating=False @api.onchange('date_begin') def update_day_of_week(self)", "label": 0}, {"snippet_id": 68618, "code": " in tweet.objects.filter(hunt_id=Hunt(id=pk)).order_by('datetime'): dt=tw.datetime.astimezone(timezone('Asia/Tokyo')) row=[dt, tw.user, tw.screen_name, tw.text] writer.writerow(row) b_stream=BytesIO(BOM_UTF8", "label": 0}, {"snippet_id": 42932, "code": "=self.client.get(f'/qa/extractedtext/{pk}/') scr=ExtractedText.objects.get(pk=pk).extraction_script new_group=QAGroup.objects.get(extraction_script=scr) initial_qa_count=ExtractedText.objects.filter( qa_group", "label": 0}, {"snippet_id": 20359, "code": ".gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is None: return self.gcs_flush_policy=pickle.loads(serialized) if not self.gcs_flush_policy.should_flush(self.redis_shard", "label": 0}, {"snippet_id": 81711, "code": " django.shortcuts import render from.models import Post def home(request): posts=Post.objects.order_by('pub_date') return render(request, 'posts/home.html',{'posts':posts}) def post_details(request, post_id", "label": 1}, {"snippet_id": 45900, "code": " from django.core.files.storage import FileSystemStorage from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from django.http import", "label": 0}, {"snippet_id": 75307, "code": "})) @login_required def candidate_preview_submission(request, candidate_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect", "label": 0}, {"snippet_id": 54889, "code": "\tself.student=student \t\t\tself.book_edition=book_edition \t\t\tself.chapter=chapter \t\t\tself.number=number \t\t\tself.code=code \tfrom collections import defaultdict \tproblem_groups=defaultdict(list) \tfor code_item", "label": 0}, {"snippet_id": 53271, "code": " pass def set_executing(on: bool): \"\"\" :param on: :return: \"\"\" my_thread=threading.current_thread() if isinstance(my_thread, threads.CauldronThread): my_thread.is_executing=on def run( project: 'projects", "label": 0}, {"snippet_id": 84485, "code": ", is_member) else: allow_read=allow_write=True if not(allow_read or allow_write): return HttpResponseForbidden() article=get_object_or_404(article_qs, **article_args) old_title=article.changeset_set.filter", "label": 0}, {"snippet_id": 27989, "code": "()), }) else: extra_data=json.dumps(self.extra_data) event={ \"event_type\": self.event_type, \"start_time\": self.start_time, \"end_time\": time.time(), \"extra_data\": extra_data, } self.profiler.add_event(event", "label": 0}, {"snippet_id": 53018, "code": ", '/users/~update/ ) def test_get_object(self): self.assertEqual( self.view.get_object(), self.user ) def test_updating_user_info(self): update_url=reverse('users:update') data={ 'purchase_step_form':{", "label": 0}, {"snippet_id": 71796, "code": "._load_user() req.load_user_by_profile(p) user_count=models.User.query().count() self.assertEqual(user_count, 1) auth_id='test:abc' user_info={ 'auth_id': auth_id, 'info':{}, } p1=models.UserProfile.get_or_create", "label": 0}, {"snippet_id": 44475, "code": ", state='AT', priority='HI') script=Script.objects.create(title='Test Download Script', url='http://www.epa.gov/', qa_begun=False, script_type='DL') exscript=Script.objects.create(title='Test Extraction", "label": 0}, {"snippet_id": 68022, "code": "['pk'] query=Event.objects.filter(Q(id__in=Hunt(id=pk).events.all())).order_by('-publish_timestamp') return query def get(self, request, pk): self.object_list=self.get_queryset(request, pk) context=self", "label": 0}, {"snippet_id": 12494, "code": "'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name':", "label": 0}, {"snippet_id": 19634, "code": "=True, type=str, help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address\", required=True, type=str, help=\"The IP address of the node this process is on.\") parser.add_argument( \"--redis", "label": 1}, {"snippet_id": 6395, "code": ">=int(id_token['exp']): logger.error('Token has expired') return False if id_token['iat'] <(self.time() -self.app.config['OIDC_CLOCK_SKEW']): logger.error('Token issued in the past') return False if id_token", "label": 0}, {"snippet_id": 54953, "code": " value: \t\t\tanother_count_by_groups +=1 \t\t\tprint str(item.code)+\", \"+str(book_edition)+\", \"+str(item.student)+\", \"+str(item.number)+\", \"+str(another_count_by_groups) \t\t \t\t def process_hwml(): \thp=HWML_processor", "label": 1}, {"snippet_id": 10729, "code": "'registration_form_desc': json.loads(form_descriptions['registration']), 'password_reset_form_desc': json.loads(form_descriptions['password_reset']), 'account_creation_allowed': configuration_helpers.get_value(", "label": 0}, {"snippet_id": 26268, "code": "(self): \"\"\"Start all of the processes on the node.\"\"\" set_temp_root(self._ray_params.temp_dir) logger.info( \"Process STDOUT and STDERR is being redirected to{}.\".format( get_logs_dir_path())) if self._redis_address", "label": 0}, {"snippet_id": 37475, "code": ".fields: self.fields[f].disabled=True class BasePUCForm(forms.ModelForm): puc=forms.ModelChoiceField( queryset=PUC.objects.all(), label='Category', widget=autocomplete.ModelSelect2( url='puc-autocomplete',", "label": 0}, {"snippet_id": 5108, "code": " import get_partition_id from users.models import UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation", "label": 0}, {"snippet_id": 67475, "code": "(self): query=Event.objects.order_by('-publish_timestamp') tag=self.request.GET.get('tag') if tag is not None: query=query.filter(tags__id=tag) org=self.request.GET.get('org') if org is not None: query", "label": 0}, {"snippet_id": 20567, "code": "=ray.utils.format_error_message(traceback.format_exc()) message=\"The monitor failed with the following error:\\n{}\".format( traceback_str) ray.utils.push_error_to_driver_through_redis( redis_client, ray_constants", "label": 0}, {"snippet_id": 36207, "code": " on_delete=models.CASCADE) tag=models.ForeignKey('PUCTag', on_delete=models.CASCADE, related_name=\"%(app_label)s_%(class)s_items\") assumed=models.BooleanField(default=False) def __str__(self): return str", "label": 1}, {"snippet_id": 44012, "code": ".browser=webdriver.Firefox() else: self.browser=webdriver.Chrome() log_karyn_in(self) def tearDown(self): self.browser.quit() def test_hem(self): for i in range(27): ds=DataSource.objects.create(title=f", "label": 1}, {"snippet_id": 57185, "code": " if request.method=='POST': default_next=reverse('transactions_open') transaction.delete() next_page=request.POST.get('next', default_next) return redirect(next_page) else: return render(request, 'core", "label": 0}, {"snippet_id": 81180, "code": ".subscription'].sudo().search([('subscription_type', '=', 'bc_tickets'), ('subscription_partner', '=', partner.id)]) bz_tickets=http.request.env['fit.subscription'].sudo().search([('subscription_type',", "label": 0}, {"snippet_id": 15394, "code": ": result.append({ 'command': field.name, 'model_system_name': entry.model_system_name.data, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data ", "label": 0}, {"snippet_id": 59505, "code": "): self.files=files if not self.files: self.files=[MEMORY] elif memory: self.files=(MEMORY,) +self.files self.cache_headers=cache_headers self.cors=cors self._inspect=inspect_data self._metadata=metadata", "label": 0}, {"snippet_id": 30841, "code": "'showGrudgets', grudget_id=grudget_id)) else: return render_template('deleteGrudget.html', grudget=grudgetToDelete) @app.route('/grudget/<int:grudget_id>/') @app.route('/grudget/<int:grudget_id>/grudge", "label": 0}, {"snippet_id": 27953, "code": " value in self.extra_data.items(): if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\"The extra_data argument must be a \" \"dictionary mapping strings to strings. \" \"Instead it is{", "label": 0}, {"snippet_id": 84393, "code": " template_name='history.html', template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'title': title} if group_slug is not None:", "label": 0}, {"snippet_id": 63233, "code": "'])) class UnAuthnAPITestCase(EduidAPITestCase): def update_config(self, config): \"\"\" Called from the parent class, so that we can update the configuration according to the needs of this test case. \"\"\"", "label": 0}, {"snippet_id": 378, "code": " it? header This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item", "label": 0}, {"snippet_id": 10127, "code": " message while AJAX calls are made to enroll the user in the course etc. This view is only used if a parameter like \"course_id\" is present during login/registration/third_party_auth. Otherwise, there is", "label": 0}, {"snippet_id": 11106, "code": " return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"\"Context for third party auth providers and the currently running pipeline. Arguments: request(HttpRequest): The request", "label": 0}, {"snippet_id": 16927, "code": ": new_game.name, 'the_set': new_game.the_set} for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment==Tournament.PREFERENCES: new_game.assign_powers_from_prefs", "label": 0}, {"snippet_id": 74568, "code": " HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview.html') def faq(request): return render(request,", "label": 0}, {"snippet_id": 30116, "code": " Grudget, Base, Grudge, User from flask import session as login_session import random import string from oauth2client.client import flow_from_clientsecrets from oauth2client.client import FlowExchangeError", "label": 0}, {"snippet_id": 13997, "code": " currently running. redirect_to: The URL to send the user to following successful authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has", "label": 0}, {"snippet_id": 60204, "code": "\"name\": p[\"name\"], \"static\": p[\"static_path\"] is not None, \"templates\": p[\"templates_path\"] is not None, \"version\": p.get(\"version\"), } for p in ps ] async def execute( self, db_name, sql, params=None,", "label": 0}, {"snippet_id": 78397, "code": " def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest", "label": 0}, {"snippet_id": 60567, "code": " ) app.add_route( TableView.as_view(self), r\"/<db_name:[^/]+>/<table_and_format:[^/]+?$>\", ) app.add_route( RowView.as_view(self), r\"/<db_name:[^/]+>/<table:[^/]+?>/<pk_path:[^/]+?><as_format:(\\.jsono?", "label": 0}, {"snippet_id": 63365, "code": ".join(HERE, 'saml2_settings.py') config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE': saml_config, 'NO_AUTHN_URLS':['^/test$'], }) return config def load_app(self, config): \"\"\"", "label": 0}, {"snippet_id": 44786, "code": "(ValidationError, note.clean) def test_long_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) note.qa_notes=", "label": 1}, {"snippet_id": 50501, "code": "\"APPDATA\"]+\"\\\\openhome-build\\\\\"+name+\".lock\") def tryacquire(self, filename): self.handle=ctypes.windll.kernel32.CreateFileA(filename,7,0,0,2,0x04000100,0) return self.handle !=-1 def release(self): ctypes", "label": 0}, {"snippet_id": 22035, "code": " provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory", "label": 0}, {"snippet_id": 76523, "code": " for a given image. Args: rect_of_tiles: is ul -lr(lr is exclusive!) addresses of tiles at a given zoom_level. zoom_level: self-explanatory. layer_properties: Object with details about the layer. Returns", "label": 0}, {"snippet_id": 66200, "code": "\"keyfile_unlock_stack_page\") composite_unlock_stack_page=self.builder.get_object(\"composite_unlock_stack_page\") stack.add_titled(password_unlock_stack_page, \"password_unlock\", \"Password\") stack.child_set_property", "label": 0}, {"snippet_id": 32381, "code": ".command() if self.accept(TokenType.COMMAND_END): other=self.commands() if base and other: return DoubleNode(base, other) else: return other else: return base def command(self): if self.accept(TokenType", "label": 0}, {"snippet_id": 43631, "code": " 5. Approve ''' for doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit", "label": 0}, {"snippet_id": 9532, "code": "]['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else", "label": 0}, {"snippet_id": 73524, "code": "=generate_confirmation_url(request, user) send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, 'screendoor@screendoor.ca', [user.email], fail_silently=False", "label": 0}, {"snippet_id": 77710, "code": "=default_security_classification data_driven_application=default_data_driven_application version=default_version author_email=default_author_email update_frequency=default_update_frequency if pkg.get('extras',", "label": 0}, {"snippet_id": 52374, "code": ".get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id) return \"HTTP-status-code: 200\" @app.route(\"/add-to-board\", methods=[\"POST\"]) def add_new_project_to_board", "label": 0}, {"snippet_id": 57331, "code": ", 'transactions/transaction_edit.html', extra_context) else: form=TransactionEditForm(instance=transaction) extra_context['form']=form return render(request, 'transactions/transaction_edit.html', extra_context", "label": 0}, {"snippet_id": 8873, "code": ", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, 'show_program_listing': ProgramsApiConfig", "label": 0}, {"snippet_id": 2440, "code": " %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n'", "label": 0}, {"snippet_id": 71860, "code": "(msgs, None) req.add_message('TEST1', 'error') req.add_message('TEST2', 'success') msgs=req.get_messages() self.assertEquals(msgs,[ {'level': 'error', 'message':'TEST1'}, {'level': 'success', 'message'", "label": 0}, {"snippet_id": 4885, "code": ".client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"\" path=\"/%s/login/\" %(self", "label": 0}, {"snippet_id": 54335, "code": ") pols.filter(\"state=\", state.lower()) pols.order('-search_count') politicians=[] for pol in pols: politician={ 'name': pol.name, 'party': pol.party, 'state': pol.state, 'constituency': pol.constituency", "label": 0}, {"snippet_id": 7083, "code": ": if current_user.change_email(token): session['auth_token']=current_user.auth_token flash('Your email address has been updated.') else: flash('Invalid request.') return redirect(url_for('main.index'))", "label": 0}, {"snippet_id": 63403, "code": " with self.app.test_client() as c: resp=c.get('/test') self.assertEqual(resp.status_code, 200) def test_authn(self): with self.app.test_client() as c: resp=c.get('/test2') self.assertEqual(resp.status_code", "label": 0}, {"snippet_id": 33207, "code": "=request.user.pk return get_data def get_queryset(self, request): return super(PUCAdmin, self).get_queryset(request).prefetch_related('tags').annotate(num_products=Count('products')) def num_products(self", "label": 0}, {"snippet_id": 79286, "code": " return package_show({'ignore_auth': True},{'id': package_id}) except Exception as e: log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time", "label": 0}, {"snippet_id": 77164, "code": " projection=projection, request_type=request_type, db_type=server_layer_def[\"db_type\"], version=version_info, tile_arg_names=tile_arg_names ) return layer def GetMapBaseUrl(self): \"\"\"Prepares the base URL", "label": 0}, {"snippet_id": 42397, "code": "'Download Raw', resp.content) dg_ids=DataDocument.objects.filter( id__in=ExtractedChemical.objects.all().values('extracted_text_id') ).order_by().values_list('data_group_id',flat=True).distinct() for dg_id", "label": 0}, {"snippet_id": 52312, "code": "-id\") session[\"team_id\"]=team_id new_board=q.make_board(name, desc, team_id) q.add_to_db(new_board) flash(\"Board created! MAKE THAT BOARD SHOW AS DEFAULT!!!!\") return redirect(\"/view-team\") @app.route(", "label": 1}, {"snippet_id": 83838, "code": " allow_write=has_write_perm(request.user, group, is_member) if not allow_read: return HttpResponseForbidden() articles=articles.order_by('title') template_params={'articles': articles, 'allow_write': allow_write}", "label": 0}, {"snippet_id": 29145, "code": " flask_sqlalchemy import SQLAlchemy from flask_migrate import Migrate from flask_admin import Admin, helpers from flask_security import Security from flask_login import LoginManager from flask_uploads import", "label": 0}, {"snippet_id": 3442, "code": " UserProfile from test_utils import TestCase class TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US", "label": 0}, {"snippet_id": 79296, "code": " log.warn(e) def _dictize_datarequest(datarequest): open_time=str(datarequest.open_time) close_time=datarequest.close_time close_time=str(close_time) if close_time else close_time data_dict={ 'id': datarequest", "label": 0}, {"snippet_id": 65249, "code": ".require_version('Gdk', '3.0') class MainWindow(Gtk.ApplicationWindow): application=NotImplemented database_manager=NotImplemented container=NotImplemented override_dialog=NotImplemented quit_dialog=NotImplemented", "label": 0}, {"snippet_id": 34850, "code": "'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response=HttpResponse(content_type='text/csv') response['Content-Disposition", "label": 0}, {"snippet_id": 49642, "code": ").decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"): editor_content=\"\"; if session.get", "label": 0}, {"snippet_id": 5619, "code": ".assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale", "label": 0}, {"snippet_id": 76726, "code": " _SetTransPixelToBgcolor(tile, bgcolor): \"\"\"Set the transparent pixels to bgcolor. Args: tile: Tile as sent from the server. bgcolor: BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns", "label": 0}, {"snippet_id": 48933, "code": " template_name,{'product': p, 'form': form}) @login_required() def product_detail(request, pk): template_name='product_curation/product_detail.html' p=get_object_or_404(Product, pk=pk,) tagform=ProductTagForm", "label": 0}, {"snippet_id": 4710, "code": "{ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path, params) self.assertContains", "label": 0}, {"snippet_id": 22054, "code": " A directory where the Plasma memory mapped files will be created. worker_path(str): The path of the source code that will be run by the worker. huge_pages: Boolean flag indicating whether to start the", "label": 0}, {"snippet_id": 45179, "code": "=Count('id')) \\ .order_by('upload_date') document_stats['product']=list(document_stats_by_type.filter(source_type='product')) document_stats['msds_sds']=list(document_stats_by_type.filter(source_type='msds", "label": 0}, {"snippet_id": 65500, "code": " self.show_all() def destroy_container(self): self.container.destroy() def open_filechooser(self, widget, none): filechooser_opening_dialog=Gtk.FileChooserDialog( \"Choose Keepass Database\", self, Gtk.FileChooserAction", "label": 0}, {"snippet_id": 12307, "code": " user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return", "label": 0}, {"snippet_id": 21149, "code": " process.\"\"\" raise NotImplementedError def start_monitor(self): \"\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor", "label": 0}, {"snippet_id": 30415, "code": "'picture'] login_session['email']=data['email'] output='' output +='<h1>Welcome, ' output +=login_session['username'] output +='!</h1>' output +='<img src=\"' output +=login_session['picture'] output +=' \"", "label": 0}, {"snippet_id": 54729, "code": ".number) \t\t\t\tprob_data=(assignment.student,problem.text) \t\t\t\tprob=(prob_id,prob_data) \t\t\t\tself.problems.append(prob) \t\tprint len(self.problems) \t\t \t\tself.problem_groups=defaultdict(list) \t\tself.code_list=[", "label": 1}, {"snippet_id": 16330, "code": ".save() for r_name, value in form.cleaned_data.items(): if r_name=='player': continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True: i, created=RoundPlayer.objects.get_or_create(player=p, the_round", "label": 0}, {"snippet_id": 34999, "code": "\"uncurated_chemicals_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y%m%d\")) writer=csv.writer(response) writer.writerow(['data_group_id', 'dashboard_rawchem_id', 'raw_cas', 'raw_chem_name', 'rid']) for rawchem in RawChem", "label": 1}, {"snippet_id": 44352, "code": " self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') with self.assertRaises(NoSuchElementException): self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-true_cas\"]')", "label": 0}, {"snippet_id": 59451, "code": "\"\"\".strip()), ConfigOption(\"force_https_urls\", False, \"\"\" Force URLs in API output to always use https:// protocol \"\"\".strip()), ) DEFAULT_CONFIG={ option.name: option.default for option in CONFIG_OPTIONS", "label": 0}, {"snippet_id": 14651, "code": ": state.provider.accepts_logins, 'disconnect_url': pipeline.get_disconnect_url(state.provider.provider_id, state.association_id), } for state in auth_states if state.provider.display_for_login or state", "label": 0}, {"snippet_id": 80781, "code": "(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} slow piezo.\") self.lock_slow_piezo_action.setChecked(not checked) self.matisse.set_slow_piezo_lock", "label": 0}, {"snippet_id": 16652, "code": "=10) for tp in tourney_players: seeder.add_player(tp) for n in range(1, round_number): rnd=tournament.round_numbered(n) for g in rnd.game_set.all(): game=set() for gp in g.gameplayer_set.all(): game.add(", "label": 0}, {"snippet_id": 45127, "code": ") stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month']=product_with_puc_count_by_month() return render(request, 'dashboard", "label": 0}, {"snippet_id": 43668, "code": "-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field.get_attribute('value') rawchem_id_field=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-rawchem_ptr\"]') rawchem_id=rawchem_id_field", "label": 0}, {"snippet_id": 56552, "code": "/app') \\ .given_a_dynamic_link('') \\ .when_call_root_redirect() \\ .then_response_should_be_a_redirect_to('pachatary://app/') class ScenarioMaker: def given_a_public_domain(self, public_domain): settings", "label": 1}, {"snippet_id": 66013, "code": "(True) self.quit_dialog.set_modal(True) self.quit_dialog.set_transient_for(self) back_button=builder.get_object(\"back_button\") quit_button=builder.get_object(\"quit_button\") back_button.connect(\"clicked\",", "label": 0}, {"snippet_id": 8408, "code": " JSON-serialized form descriptions. \"\"\" return{ 'login': _local_server_get('/user_api/v1/account/login_session/', request.session), 'registration': _local_server_get('/user_api/v1/account/registration/", "label": 0}, {"snippet_id": 66388, "code": " not open database, wrong password\") def on_keyfile_unlock_select_button_clicked(self, widget): keyfile_chooser_dialog=Gtk.FileChooserDialog(\"Choose a keyfile\", self.window, Gtk.FileChooserAction.OPEN,", "label": 0}, {"snippet_id": 62771, "code": " service. :type came_from: str :return: the cookie corresponding to the authn session :rtype: str \"\"\" session_id=self.add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response", "label": 0}, {"snippet_id": 9579, "code": "'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field['name'] not in enterprise_exclusions] def enterprise_sidebar_context", "label": 0}, {"snippet_id": 79861, "code": " NotAuthorized exception will be risen. Data QLD modification Will send email notification to the data request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id", "label": 0}, {"snippet_id": 23810, "code": " psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes is not None: memory_in_bytes=psutil_memory_in_bytes", "label": 0}, {"snippet_id": 28757, "code": " Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b\"\\n\"): line=line.strip() if stat in line: return int(line.split(b\" \")[0])", "label": 0}, {"snippet_id": 21152, "code": " start_monitor(self): \"\"\"Start the monitor.\"\"\" stdout_file, stderr_file=new_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_monitor( self._redis_address, self._node_ip_address,", "label": 0}, {"snippet_id": 50125, "code": "'UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) with open(filepath) as f: data=f.read() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed))", "label": 0}, {"snippet_id": 57053, "code": "() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept in settings.CONCEPTS: permission=concept.replace('.','.add_') concept_model=apps.get_model(concept) if", "label": 0}, {"snippet_id": 72517, "code": " gettext as _ from screendoor.redactor import parse_applications from.forms import ScreenDoorUserCreationForm, LoginForm, CreatePositionForm, ImportApplicationsForm from.models import EmailAuthenticateToken", "label": 1}, {"snippet_id": 42597, "code": "'stub_1845') def test_group_type_facet(self): response=self.c.get('/find/?q=diatom') self.assertContains(response, 'Filter by Group Type') response=self.c.get('/find/?q=diatom&group_type=Unidentified')", "label": 1}, {"snippet_id": 18743, "code": " handles /postlogin \"\"\" class PostLoginHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tChecks if a secure_cookie exists, if it doesn't then it redirects the user to /, \telse it renders /postlogin. \t\"\"\" ", "label": 1}, {"snippet_id": 78390, "code": " True},{'id': organization_id}) except Exception as e: log.warn(e) def _get_package(package_id): try: package_show=tk.get_action('package_show') return package_show({'ignore_auth': True},{'id': package_id", "label": 0}, {"snippet_id": 30117, "code": ", Base, Grudge, User from flask import session as login_session import random import string from oauth2client.client import flow_from_clientsecrets from oauth2client.client import FlowExchangeError import", "label": 0}, {"snippet_id": 71226, "code": " models.User def _load_user(self): if self.session is not None and self.session.user_id: self.user=self._get_user_class().get_by_id(int(self.session.user_id)) if self.user is None: pass else: self.user", "label": 0}, {"snippet_id": 82278, "code": "-view.html' success_url=reverse_lazy('category-list-view') class CategoryDeleteView(LoginRequiredMixin, DeleteView): model=Category template_name='category-delete-view.html' success_url=reverse_lazy('category", "label": 0}, {"snippet_id": 28076, "code": " A message generated by traceback.format_exc(). Returns: A string of the formatted exception message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return ", "label": 0}, {"snippet_id": 40752, "code": "/*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count() self.assertEqual(num_dss, dss_table_count, 'The number shown should match the number of records in DSSToxLookup') class DashboardTestWithFixtures", "label": 0}, {"snippet_id": 53770, "code": " class for each step in a project. These class instances are exposed to Cauldron users, which provide the functionality for adding various element types to the display. \"\"\" def __init__(self, step=None", "label": 0}, {"snippet_id": 4728, "code": ".post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302)", "label": 0}, {"snippet_id": 20522, "code": " args=parser.parse_args() setup_logger(args.logging_level, args.logging_format) redis_ip_address=get_ip_address(args.redis_address) redis_port=get_port(args.redis_address) if args.autoscaling_config: autoscaling_config", "label": 1}, {"snippet_id": 6812, "code": ".generate_confirmation_token() send_email(current_user.email, 'Confirm Your Account', 'auth/email/confirm', user=current_user, token=token) flash('A new confirmation email has been sent.') return redirect(url_for('main.index'))", "label": 0}, {"snippet_id": 60875, "code": " for local component %s with pid %s\" %(self.comp_name, self.pid) class RemoteComponentMonitoringJob(ComponentMonitorJob): \"\"\"Class that represents a remote component monitoring job.\"\"\" def __init__(self", "label": 0}, {"snippet_id": 445, "code": " import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from", "label": 1}, {"snippet_id": 5476, "code": "() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self", "label": 0}, {"snippet_id": 18584, "code": " class SignInHandler(tornado.web.RequestHandler): \t\"\"\" get(): \tRenders the Sign In page when the user arrives at /signin \t\"\"\" \tdef get(self): \t\tself.render('signin.html',error='') \t\"\"\" check_database(): ", "label": 1}, {"snippet_id": 72569, "code": "(request.POST) if register_form.is_valid(): user=create_account(request) send_user_email(request, user) return render(request, 'registration/register.html', {'register_form': register_form, 'account_created", "label": 0}, {"snippet_id": 2798, "code": "]=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url}?{query}'.format(url=self.OIDC_OP_AUTH_ENDPOINT, query=query) return HttpResponseRedirect(redirect_url) class OIDCLogoutView", "label": 1}, {"snippet_id": 67841, "code": ") label=date.strftime('%Y-%m-%d') labels.append(label) return labels class OrgListView(ListView): model=Org template_name='threat/org_list.html' context_object_name='orgs' def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 5606, "code": ".client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after", "label": 0}, {"snippet_id": 2506, "code": " value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking about.", "label": 0}, {"snippet_id": 71421, "code": " None: resp.request=req if resp is None: resp=req.get_response(self.app) resp._save_session() return resp(environ, start_response) def _load_strategy(self, provider): try: strategy_location=self._config[ ", "label": 0}, {"snippet_id": 15974, "code": "'Invalid email or password') return False self.user=user return True @app.route('/register', methods=['GET', 'POST']) def view_register(): if current_user.is_authenticated: return redirect(url_for('view_home'", "label": 1}, {"snippet_id": 58984, "code": ", view): try: context=Context({ 'invite': self, 'current_site': Site.objects.get_current(request) }) subj_template=loader.get_template('ctms/email/invite_subject.txt') rendered_subj=subj_template.render", "label": 0}, {"snippet_id": 34837, "code": ") writer=csv.writer(response) writer.writerow(['DTXSID', 'pucs_n', 'dds_n', 'dds_wf_n', 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat", "label": 1}, {"snippet_id": 15366, "code": " elif field.name=='number_of_days': result.append({'command': field.name, 'number_of_days': field.data}) elif field.name=='exe_models': result.append({'command': field.name, 'include': field.data}) elif", "label": 0}, {"snippet_id": 10491, "code": ".user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import", "label": 0}, {"snippet_id": 31155, "code": " settings for the GitMate project. Generated by 'django-admin startproject' using Django 1.9.7. For more information on this file, see https://docs.djangoproject.com/en/1.9/topics/settings/ For the full", "label": 0}, {"snippet_id": 52260, "code": "=request.form.get(\"team\") session[\"team_id\"]=team_id team_object=Team.query.filter_by(t_id=team_id).first() return render_template(\"team-main.html\", team=team_object) @app.route(\"/new-board\", methods=[\"POST", "label": 0}, {"snippet_id": 69780, "code": "=setup_plugins(args.plugin) ensure_config_yaml(pm) ensure_admins(args.admin) ensure_usergroups() ensure_user_environment(args.user_requirements_txt_url) logger.info(\"Setting up JupyterHub...\") ensure_node()", "label": 0}, {"snippet_id": 47598, "code": "']=hnp if len(hnp)>0 else 0 if len(hnp)>0: context['first']=hnp[0].pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories)", "label": 0}, {"snippet_id": 29939, "code": " 'db', 'benwaonline.db') DEBUG=True SECRET_KEY='not-so-secret' class TestConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite://' TESTING=True TWITTER_CONSUMER_KEY='consume' TWITTER_CONSUMER_SECRET='secret'", "label": 0}, {"snippet_id": 28086, "code": "\"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an error", "label": 0}, {"snippet_id": 61347, "code": " logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG) logger.debug(\"Initialized thread\") super(MonitoringThread, self).__init__() self.job_queue=queue self.subscribed_queues=[] self.end=False", "label": 0}, {"snippet_id": 31378, "code": " 'django.contrib.auth.backends.ModelBackend' ) MIDDLEWARE_CLASSES=[ 'corsheaders.middleware.CorsMiddleware', 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware", "label": 0}, {"snippet_id": 54089, "code": "\"\"Home page \"\"\" @app.route('/') def homepage(): q=Politician.all() q.order('-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return", "label": 0}, {"snippet_id": 8283, "code": " third_party_auth.is_enabled(): if not enterprise_customer_for_request(request): for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, \"name\":", "label": 0}, {"snippet_id": 16828, "code": "=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset': formset}) gp.save", "label": 0}, {"snippet_id": 25183, "code": "[shard_index] if len(keys)==0: continue redis=self.state.redis_clients[shard_index] num_deleted=redis.delete(*keys) logger.info(\"Monitor: \" \"Removed{} dead redis entries of the \" \"driver from redis shard", "label": 0}, {"snippet_id": 41320, "code": ".objects.all(): try: extsub=ExtractedText.objects.get_subclass(data_document=doc) if doc.data_group.group_type.code=='CP': self.assertEqual(type(extsub), ExtractedCPCat) elif doc.data_group.group_type.code", "label": 0}, {"snippet_id": 15915, "code": " registered') return False if len(self.password.data) < 8: self.password.errors.append('Password should be at least 8 characters long') return False self.user=auth_add_user(self.email.data, self.password.data", "label": 0}, {"snippet_id": 73853, "code": "='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get(\"id\"))) elif request.POST.get(\"delete", "label": 1}, {"snippet_id": 19135, "code": " exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode=mode self.redis_client=worker.redis_client def start(self): \"\"\"Start the import thread.\"\"\" t=threading.Thread(target=self._run", "label": 1}, {"snippet_id": 27337, "code": " self.include_webui=include_webui self.plasma_store_socket_name=plasma_store_socket_name self.raylet_socket_name=raylet_socket_name self.temp_dir=temp_dir self.include_log_monitor=include_log_monitor self", "label": 0}, {"snippet_id": 3574, "code": ".test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4", "label": 0}, {"snippet_id": 75280, "code": " candidate_id, cm_id): try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) cm=CommitteeMember.objects.get(id", "label": 0}, {"snippet_id": 8116, "code": ". \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for field in fields['fields'] if field", "label": 0}, {"snippet_id": 35513, "code": ".filter(content_object=puc,assumed=False). values_list('tag', flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list", "label": 0}, {"snippet_id": 19504, "code": ".log_file_handles[log_filename].readline() if next_line !=\"\": new_lines.append(next_line) else: self.log_file_handles[log_filename].seek( current_position) break if len(new_lines) > 0: self.log_files[log_filename", "label": 1}, {"snippet_id": 45391, "code": " the if expression is just checking whether that parameter is there. ''' response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request", "label": 0}, {"snippet_id": 55276, "code": ",mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self):", "label": 0}, {"snippet_id": 9434, "code": " if using an unsupported HTTP method Example usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded", "label": 0}, {"snippet_id": 76347, "code": ", rect_of_tiles=tilecalcs.CalcTileRects( proj, user_log_rect, zoom_level) logger.info(\"Done tile calcs\") tiles_array=_FetchTiles(rect_of_tiles, zoom_level, layer_properties) im_whole_tiles_extent=geom.Pair", "label": 0}, {"snippet_id": 37491, "code": "( url='puc-autocomplete', attrs={'data-minimum-input-length': 3,}) ) class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] class HabitsPUCForm(BasePUCForm): class Meta: model", "label": 0}, {"snippet_id": 65047, "code": ".NameConstant, ast.Dict, ast.Set, ast.List, ast.Tuple, ast.BinOp, ast.UnaryOp]: valid=True if not valid: raise ValueError('Invalid formatting for test case %d' % i) try: obj=compile(expr, '<unknown>', ", "label": 0}, {"snippet_id": 32092, "code": " __init__(self, string): self.string=string self.position=-1 self.char=None self.read() def read(self): ''' Read a single char from the stream and store it in self.char. Returns: The value of self.char.", "label": 0}, {"snippet_id": 39448, "code": " ExtractedText from.raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField", "label": 1}, {"snippet_id": 43694, "code": " rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText.objects.get(pk=doc_id) self.assertTrue", "label": 0}, {"snippet_id": 32479, "code": " | os.O_TRUNC)) elif self.accept(TokenType.REDIRECT_APPEND): filename=self.expect(TokenType.WORD).lexeme return RedirectionHelper(1,(filename, os.O_CREAT | os.O_WRONLY | os.O_APPEND)) elif self.accept(TokenType", "label": 0}, {"snippet_id": 38182, "code": " tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self", "label": 0}, {"snippet_id": 53397, "code": " as error: out=render_error(project, error) set_executing(False) return{'success': True} if out is None else out def render_syntax_error( project: 'projects.Project', code: str, error: SyntaxError ) ->", "label": 0}, {"snippet_id": 60596, "code": " original_response.status==404 and request.path.endswith(\"/\"): path=request.path.rstrip(\"/\") if request.query_string: path=\"{}?{}\".format(path, request.query_string) return response.redirect(path) @app", "label": 0}, {"snippet_id": 7319, "code": "'office_number', 'sb', 'services', 'deleted', 'exams_enabled_ind', 'appointments_enabled_ind', 'timezone') column_labels={'sb': 'Smartboard', 'timezone.timezone_name': 'Timezone Name'} column_sortable_list", "label": 0}, {"snippet_id": 31129, "code": " own grudges.');}</script><body onload='myFunction()'>\" if request.method=='POST': session.delete(grudgeToDelete) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return", "label": 0}, {"snippet_id": 25709, "code": " if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will be registered to shutdown", "label": 0}, {"snippet_id": 48464, "code": ") form.fields['document_type'].queryset=queryset if request.method=='POST': form=ProductLinkForm(request.POST or None) if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created", "label": 0}, {"snippet_id": 36598, "code": "' % orm_prod_puc_count) assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects", "label": 0}, {"snippet_id": 58758, "code": "), ('tester', 'tester') ) def clean_email_name(email): email_name, domain=email.split('@', 1) email_name=email_name.replace('.', '') return email_name, domain class InviteQuerySet(models.QuerySet): def", "label": 0}, {"snippet_id": 25665, "code": " Attributes: all_processes(dict): A mapping from process type(str) to a list of ProcessInfo objects. All lists have length one except for the Redis server list, which has multiple. \"\"\" def __init__(self", "label": 0}, {"snippet_id": 30460, "code": "/logout') def disconnect(): if 'provider' in login_session: if login_session['provider']=='google': gdisconnect() del login_session['gplus_id'] del login_session['access_token'] if login_session['provider'", "label": 0}, {"snippet_id": 84205, "code": "=initial) else: initial['action']='edit' form=ArticleFormClass(instance=article, initial=initial) if not article: template_params={'form': form, 'new_article': True} else: template_params={'form': form,", "label": 0}, {"snippet_id": 65449, "code": " entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui\") self.first_start_grid=builder.get_object(\"first_start_grid\") self.add(self.first_start_grid) def", "label": 0}, {"snippet_id": 54017, "code": ": self.body.append(render_texts.preformatted_text(contents)) self._last_update_time=time.time() return contents def read_stderr(self): \"\"\" Returns the current state of the stderr redirect buffer This is", "label": 0}, {"snippet_id": 21985, "code": " ID should not be used for different jobs. local_mode(bool): True if the code should be executed serially without Ray. This is useful for debugging. redirect_worker_output: True if the stdout and stderr", "label": 0}, {"snippet_id": 48028, "code": " ext_form=ExtractedTextForm(request.POST or None, instance=extext) hp_formset=HnPFormSet(request.POST or None, instance=extext, prefix='habits') if request.method=='POST' and 'save' in request.POST: if", "label": 0}, {"snippet_id": 37978, "code": " extra=extra, can_delete=can_delete) def one(): ChemicalFormSet=make_formset( parent_model=parent, model=child, formset=ExtractedChemicalFormSet, form=ExtractedChemicalForm ) return(ExtractedTextForm, ChemicalFormSet", "label": 0}, {"snippet_id": 4140, "code": "() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users are redirected in specific views.\"\"\" self.client.login(username=self.test_username, password=self", "label": 0}, {"snippet_id": 72819, "code": "=create_position_form.save(commit=False) d=parse_upload(position) errors=d.get('errors') if errors: create_position_form.add_error('pdf', errors) if create_position_form.is_valid(): position=d.get('position')", "label": 1}, {"snippet_id": 72924, "code": "\"sort-closed\"): sort_by='-date_closed' elif request.POST.get(\"sort-position\"): sort_by='position_title' elif request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST", "label": 1}, {"snippet_id": 10701, "code": " third_party_auth_hint or '', 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'support_link': configuration_helpers.get_value('SUPPORT_SITE_LINK', settings.SUPPORT_SITE_LINK),", "label": 0}, {"snippet_id": 27479, "code": ": raise ValueError( \"The 'num_workers' argument is deprecated. Please use \" \"'num_cpus' instead.\") if self.include_java is None and self.java_worker_options is not None: raise ValueError(\"Should not specify", "label": 0}, {"snippet_id": 37014, "code": "=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type", "label": 1}, {"snippet_id": 76087, "code": " version_slug=None): method=getattr( self, 'redirect_{type}'.format( type=self.redirect_type, ), ) return method(path, language=language, version_slug=version_slug) def redirect_prefix(self, path, language=None", "label": 0}, {"snippet_id": 32132, "code": "' Read a single token from the stream. Returns: The generated token. Throws: May throw a ValueError in the case that the input is malformed and a token cannot be correctly generated from it. ''' while self", "label": 0}, {"snippet_id": 68129, "code": " event.date, event.info, event.get_threat_level_id_display(), event.attribute_count, event.org.name] writer.writerow(row) b_stream=BytesIO(BOM_UTF8 +stream.getvalue().encode('utf8')) response=HttpResponse", "label": 0}, {"snippet_id": 82372, "code": "(), name='add-custom-url'), re_path(r'^add-many/$', ShortManyURLSView.as_view(), name='add-many-urls'), re_path(r'^detail/(?P<pk>(\\d)+)/$', URLDetailView.as_view(), name='url-detail-view'), re_path(r'^update", "label": 0}, {"snippet_id": 41176, "code": "'''Check that the user has the ability to create an extracted record when the document doesn't yet have an extracted record for data group types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784", "label": 0}, {"snippet_id": 39302, "code": " report_funcuse=models.CharField(\"Reported functional use\", max_length=100, null=True, blank=True) weight_fraction_type=models.ForeignKey(WeightFractionType, on_delete=models.PROTECT, null=True, default", "label": 0}, {"snippet_id": 78644, "code": " data request :type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request", "label": 0}, {"snippet_id": 10223, "code": " user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders=[] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country'", "label": 0}, {"snippet_id": 37043, "code": ".objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc.get_level(), puc.product_count ] writer.writerow(row) return", "label": 0}, {"snippet_id": 61774, "code": "\"\"\" securedrops=securedrops.with_domain_annotation() domains=securedrops.values_list('domain', flat=True) results=inspect_domains(domains,{'timeout': 10}) results_to_be_written=[] for result_data in results", "label": 1}, {"snippet_id": 64412, "code": "('TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA", "label": 0}, {"snippet_id": 6560, "code": ", \\ current_user from. import auth from.. import db from..models import User from..email import send_email from.forms import LoginForm, RegistrationForm, ChangePasswordForm,\\ PasswordResetRequestForm, PasswordResetForm", "label": 0}, {"snippet_id": 1491, "code": " response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size", "label": 0}, {"snippet_id": 20598, "code": " new_monitor_log_file, new_raylet_monitor_log_file, new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging.getLogger(__name__) class Node(object): \"\"\"An", "label": 0}, {"snippet_id": 1754, "code": " serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import", "label": 0}, {"snippet_id": 11699, "code": ":{ 'options': all_languages(), }, 'time_zone':{ 'options': TIME_ZONE_CHOICES, } }, 'platform_name': configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME), 'password_reset_support_link", "label": 0}, {"snippet_id": 23973, "code": " warning_message, driver_id=worker.task_driver_id) class _ThreadSafeProxy(object): \"\"\"This class is used to create a thread-safe proxy for a given object. Every method call will be guarded with a lock.", "label": 0}, {"snippet_id": 35433, "code": ".document_type: doc.document_type=DocumentType.objects.get(pk=document_type) doc.save() if 'datadocument' in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect", "label": 0}, {"snippet_id": 43843, "code": "\"extextModal\"]') ) ) add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*", "label": 0}, {"snippet_id": 22461, "code": " time import threading import traceback import ray LOG_POINT=0 LOG_SPAN_START=1 LOG_SPAN_END=2 class _NullLogSpan(object): \"\"\"A log span context manager that does nothing\"\"\" def __enter__(self): pass def", "label": 1}, {"snippet_id": 3728, "code": "(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self):", "label": 0}, {"snippet_id": 4864, "code": " users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s", "label": 0}, {"snippet_id": 61330, "code": "\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\" logger=logging.getLogger(__name__) logger.setLevel(logging.DEBUG", "label": 0}, {"snippet_id": 61112, "code": ") return DisconnectEvent(self.hostname) def info(self): return \"Running ssh host check for %s with pid %s\" %(self.hostname, self.pid) class CrashEvent(object): \"\"\"Superclass to model a component crash.", "label": 0}, {"snippet_id": 62454, "code": ": the SAML session info :type session_info: dict :param user: the authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info, user) def _reauthn(reason", "label": 0}, {"snippet_id": 12405, "code": " member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS', settings.ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS ) return[field for", "label": 0}, {"snippet_id": 50772, "code": " set_default(self, enabled_by_default): self.is_enabled_by_default=enabled_by_default def set_optional(self, optional): self.is_optional=optional def test_conditions(self, env): if len(self.condition_sets)=", "label": 0}, {"snippet_id": 72088, "code": " def create(self, path, cluster_id, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): if fsal['name'] not in Ganesha.fsals_available()", "label": 0}, {"snippet_id": 63321, "code": "(self.browser, eppn) as c: self.assertRaises(NotFound, c.get, '/') class NoAuthnAPITestCase(EduidAPITestCase): def setUp(self): super(NoAuthnAPITestCase, self).setUp() test_views=Blueprint('testing', __name__", "label": 0}, {"snippet_id": 64913, "code": " against. Each test case \" \"must take the form of of a function call without the function \" \"name followed by a comparison to a return value. For example \" \"``(1, 2)==3'' or ``(1, 2,(3, 4), *[5, 6], last=8)", "label": 0}, {"snippet_id": 16675, "code": ") assert len(game)==7 seeder.add_played_game(game) for tp in tourney_players: for sb in tp.seederbias_set.all(): seeder.add_bias(sb.player1, sb.player2, sb.weight) return seeder def _seed_games(tournament", "label": 0}, {"snippet_id": 4611, "code": ": 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit", "label": 0}, {"snippet_id": 32511, "code": " return None def next(self): self.last=self.token self.token=next(self.tokens, None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next() return self.last else", "label": 0}, {"snippet_id": 51333, "code": ") return dependency_collection.get_args(dependencies, self._context.env) class SshSession(object): def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy", "label": 0}, {"snippet_id": 27240, "code": ", object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards", "label": 1}, {"snippet_id": 56541, "code": "'http://dynamic.link/link=http://pachatary.com/&other=param') def test_when_there_is_no_dynamic_link_returns_deep_link(self): RedirectRootTestCase.ScenarioMaker() \\ .given_a_deep_link_domain('pachatary:", "label": 1}, {"snippet_id": 53161, "code": ".get_object().house_cond, None) data={'budget': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().budget, None) data={'current_rent': 'TEXT'} self.client.post(update_url", "label": 0}, {"snippet_id": 4189, "code": " target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"\" paths=('logout/', 'profile/edit/', 'profile/edit/image/'", "label": 0}, {"snippet_id": 15421, "code": "': field.name, 'input_source_initial': entry.input_source_initial.data, 'input_source_final': entry.input_source_final.data }) elif field.name=='change_timeseries_value_several_days': for entry in field", "label": 0}, {"snippet_id": 65867, "code": ".container.page_num(child_widget) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_tab_close_button_clicked(self, sender, widget): page_num=self.container.page_num(widget) for", "label": 0}, {"snippet_id": 29770, "code": "=[get_or_create_tag(db.session, tag)[0] for tag in form.tags.data if tag] tags.extend(added_tags) post=Post(title=fname, created=datetime.utcnow(), image=image, tags=tags) db.session.add(post) current_user", "label": 0}, {"snippet_id": 32881, "code": " multiple file redirections. Args: redirections: A list of redirections. ''' def __init__(self, redirections): self.redirections=redirections self.stack=None def __enter__(self): if len(self.redirections) >", "label": 0}, {"snippet_id": 12779, "code": " response.content def _external_auth_intercept(request, mode): \"\"\"Allow external auth to intercept a login/registration request. Arguments: request(Request): The original request. mode(str): Either \"login\"", "label": 0}, {"snippet_id": 3597, "code": ") self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username", "label": 0}, {"snippet_id": 38370, "code": ".extracted_functional_use import ExtractedFunctionalUse from.extracted_habits_and_practices import ExtractedHabitsAndPractices from.extracted_list_presence import ExtractedListPresence from.extracted_hhdoc", "label": 1}, {"snippet_id": 62917, "code": " the eppn of the user to access the service :type eppn: str :param check_fn: the function that checks the side effects after accessing the acs :type check_fn: callable \"\"\" came_from='/camefrom/' with self", "label": 1}, {"snippet_id": 11098, "code": " 'enterprise_branded_welcome_string': branded_welcome_string, 'platform_welcome_string': platform_welcome_string, } return context def _third_party_auth_context(request, redirect_to, tpa_hint=None): \"\"", "label": 0}, {"snippet_id": 10205, "code": " request object. Returns: dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception", "label": 0}, {"snippet_id": 1152, "code": " f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static", "label": 0}, {"snippet_id": 80143, "code": ".setup_log_window() self.setup_matisse() self.setup_widgets() self.aboutToQuit.connect(self.clean_up) container=QWidget() container.setLayout(self.layout) self.window.setCentralWidget(container) self.window.show", "label": 0}, {"snippet_id": 25348, "code": " local_schedulers: client_id=local_scheduler_info.get(\"DBClientID\") or \\ local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info.get(\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split", "label": 0}, {"snippet_id": 73083, "code": "=CreatePositionFormText.link_to_job_description upload_text=CreatePositionFormText.choose_a_file browse_text=CreatePositionFormText.browse submit_text=CreatePositionFormText.submit class Meta: model=Position fields=('pdf", "label": 0}, {"snippet_id": 44766, "code": " def test_extracted_text_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) self.assertRaises(ValidationError", "label": 1}, {"snippet_id": 68643, "code": "=HttpResponse(b_stream.getvalue(), content_type=\"text/csv\") response[\"Content-Disposition\"]=\"filename=hunter%s.csv\" % pk return response def hunt_switch_notice(request, pk): hunt=get_object_or_404(Hunt", "label": 0}, {"snippet_id": 14037, "code": " enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: for enabled in third_party_auth.provider.Registry.displayed_for_login(tpa_hint=tpa_hint): info={ \"id\": enabled.provider_id, ", "label": 0}, {"snippet_id": 24136, "code": " exports from the driver or other workers. Note: The driver also has an import thread, which is used only to import custom class definitions from calls to register_custom_serializer that happen under the hood", "label": 1}, {"snippet_id": 20209, "code": "=gcs_entries.Entries(0) message=ray.gcs_utils.DriverTableData.GetRootAsDriverTableData( driver_data, 0) driver_id=message.DriverId() logger.info(\"Monitor: \" \"XRay Driver{} has been removed.\".format( binary_to_hex", "label": 0}, {"snippet_id": 74957, "code": " from.forms import UploadForm try: candidate=_get_candidate(candidate_id=candidate_id, request=request) except Candidate.DoesNotExist: return HttpResponseRedirect(reverse('register')) if candidate.thesis", "label": 0}, {"snippet_id": 59164, "code": "(invite_email, invite_domain) ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code{}, User{}\".format", "label": 0}, {"snippet_id": 19829, "code": ".primary_subscribe_client=self.redis.pubsub( ignore_subscribe_messages=True) self.local_scheduler_id_to_ip_map={} self.load_metrics=LoadMetrics() if autoscaling_config: self.autoscaler=StandardAutoscaler(autoscaling_config,", "label": 0}, {"snippet_id": 56066, "code": "=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute() preview_content={'st': '@{}'", "label": 0}, {"snippet_id": 51517, "code": "=open(os.devnull))==0 program_exists=windows_program_exists if platform.platform().startswith(\"Windows\") else other_program_exists def scp(*args): program=None for p in[\"scp\", \"pscp\"]: if program_exists", "label": 1}, {"snippet_id": 36965, "code": " gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the PUCs in csv form. The \"bubbles\" parameter in the request will either be \"True\"", "label": 0}, {"snippet_id": 30391, "code": "\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests.get(userinfo_url, params=params) data=answer.json() login_session['username']=data['name'] login_session['picture']=data", "label": 0}, {"snippet_id": 56402, "code": " test_when_there_is_a_dynamic_link_wraps_public_domain_url(self): RedirectProfileTestCase.ScenarioMaker() \\ .given_a_profile(username='a_b.c', bio='my info', pic='url') \\ .given_a_public_domain('http://pachatary.com') \\ .given_a_dynamic_link('http:", "label": 0}, {"snippet_id": 63105, "code": " then=session['reauthn-for-chpass'] now=int(time.time()) self.assertTrue(now -then < 5) self.acs('/chpass', eppn, _check) def test_terminate_assertion_consumer_service(self): eppn='hubba-bubba' def _check", "label": 0}, {"snippet_id": 55677, "code": " self \t\traise IndexError,(name,self.path) \tdef folders(self): \t\tfor item in self.listdir(): \t\t\tp=os.path.abspath(os.path.join(self.path,item)) \t\t\tif os.path.isdir(p): \t\t\t\tyield Folder(p) \tdef files(self)", "label": 0}, {"snippet_id": 4547, "code": ", path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code=200) def test_login_post(self): \"\"\"Test logging in.\"\"", "label": 0}, {"snippet_id": 32106, "code": " stream and store it in self.char. Returns: The value of self.char. ''' self.position +=1 if self.position < len(self.string): self.char=self.string[self.position] else: self.char=None return self.char", "label": 0}, {"snippet_id": 31287, "code": ".environ.get('SOCIAL_AUTH_REDIRECT', 'http://localhost:4200') SOCIAL_AUTH_LOGIN_URL='/login' SOCIAL_AUTH_PIPELINE=( 'social.pipeline.social_auth.social_details', 'social.pipeline.social_auth.social_uid", "label": 1}, {"snippet_id": 63018, "code": " path=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN')) class AuthnAPITestCase(AuthnAPITestBase): \"\"\" Tests to check the different modes of authentication. \"", "label": 0}, {"snippet_id": 29470, "code": ".filter_by(user_id=user_id).first() if user: login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test')) else: session['user_id", "label": 0}, {"snippet_id": 51280, "code": " def fetch_dependencies(self, *dependencies, **kwargs): kwargs=process_kwargs( \"fetch_dependencies\", kwargs, {\"platform\":None}) dependencies=flatten_string_list(dependencies) platform=kwargs['platform']", "label": 0}, {"snippet_id": 80572, "code": ")\"') @handled_slot(bool) def restart(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self", "label": 1}, {"snippet_id": 69492, "code": " isinstance(e.reason, ConnectionRefusedError): time.sleep(1) continue raise raise Exception(\"Installation failed: JupyterHub did not start in{}s\".format(times)) def ensure_symlinks(prefix): \"\"\" Ensure we", "label": 0}, {"snippet_id": 35987, "code": "=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank=True, default='') description", "label": 0}, {"snippet_id": 76737, "code": " from the server. bgcolor: BGCOLOR parameter as sent by the GIS client's. Default is 0xFFFFFF(white). Returns: The source tile with transparent pixels fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(", "label": 0}, {"snippet_id": 63636, "code": " with self.app.test_request_context('/saml2-ls', method='POST', data={'SAMLResponse': deflate_and_base64_encode( logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app", "label": 0}, {"snippet_id": 44577, "code": " Family', prod_type='Test Product Type', description='Test Product Description', last_edited_by=user, kind='FO') extext=ExtractedText.objects.create( prod_name='Test Extracted Text Record', data_document=doc", "label": 0}, {"snippet_id": 16702, "code": " seeder=_create_game_seeder(tournament, the_round.number()) sitters, two_gamers=_sitters_and_two_gamers(tournament, the_round) return seeder.seed_games(omitting_players=sitters, players_doubling_up=two_gamers", "label": 0}, {"snippet_id": 14717, "code": ", current_user, login_user, logout_user, UserMixin from werkzeug.security import generate_password_hash, check_password_hash from wtforms import IntegerField, FloatField, DateField, SelectField, \\ SelectMultipleField", "label": 1}, {"snippet_id": 75802, "code": " re from django.db import models from django.utils.translation import ugettext from django.utils.translation import ugettext_lazy as _ from readthedocs.core.resolver import resolve_path from readthedocs", "label": 0}, {"snippet_id": 27608, "code": " type of the event. extra_data: This must be a dictionary mapping strings to strings. This data will be added to the json objects that are used to populate the timeline, so if you want to set a particular", "label": 0}, {"snippet_id": 3052, "code": " 'response_type': 'code', 'scope': 'openid', 'client_id': self.OIDC_RP_CLIENT_ID, 'redirect_uri': absolutify( request, reverse('oidc_authentication_callback') ), 'state': state, } if import_from_settings", "label": 0}, {"snippet_id": 9980, "code": "=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache else", "label": 0}, {"snippet_id": 37823, "code": "['true_chemname']=forms.CharField(max_length=400) self.fields['true_chemname'].initial=self.instance.dsstox.true_chemname self.fields['true_chemname'].disabled=True self.fields['SID']=forms.CharField(max_length", "label": 0}, {"snippet_id": 13528, "code": "\": return old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message", "label": 0}, {"snippet_id": 38524, "code": " ExtractedText record is created with the DataDocument's id as its primary key. ``document_type`` each type of data group may only contain certain types of data documents. The clean() method checks to make sure", "label": 0}, {"snippet_id": 46525, "code": "(rawchem_ptr=extracted_chemical.rawchem_ptr) except Ingredient.DoesNotExist as e: ingredient=Ingredient(rawchem_ptr=extracted_chemical.rawchem_ptr) ingredient.lower_wf_analysis=row['lower_wf_analysis']", "label": 0}, {"snippet_id": 31516, "code": ".get('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static')) STATIC_URL='/static/' STATICFILES_DIRS=() djcelery.setup_loader() BROKER_URL=os.environ.get('CELERY_BROKER_URL', 'amqp://admin:password@rabbit", "label": 0}, {"snippet_id": 5651, "code": "/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self", "label": 0}, {"snippet_id": 13908, "code": "('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr", "label": 0}, {"snippet_id": 18245, "code": " \t\treturn self.get_secure_cookie(\"user\") \"\"\" SignUpHandler(): Class that handles /signup \"\"\" class SignUpHandler(tornado.web.RequestHandler): \t\"\"\"\tget(): \tRenders the Sign Up page when the user arrives", "label": 1}, {"snippet_id": 24438, "code": " strings representing its contents. log_file_handles: A dictionary mapping the name of a log file to a file handle for that file. \"\"\" def __init__(self, redis_ip_address, redis_port, node_ip_address, redis_password", "label": 1}, {"snippet_id": 26981, "code": " object tables). object_manager_port int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on.", "label": 0}, {"snippet_id": 77996, "code": " destination=LocalCKAN() destination.action.package_patch(id=package_id, security_classification=security_classification, data_driven_application=data_driven_application, version=version, author_email=author_email", "label": 0}, {"snippet_id": 10991, "code": " fields that we don't want to require if the user is going to be a member of an Enterprise Customer. \"\"\" enterprise_exclusions=configuration_helpers.get_value( 'ENTERPRISE_EXCLUDED_REGISTRATION_FIELDS'", "label": 0}, {"snippet_id": 34614, "code": ".pk return render(request, template_name, context) def stats_by_dtxsids(dtxs): \"\"\" PUCS.n The number of unique PUCs(product categories) the chemical is associated with datadocs.n \"The number of data documents", "label": 1}, {"snippet_id": 36735, "code": "]=DSSToxLookup.objects.count() stats['chemical_count']=ExtractedChemical.objects.count() stats['product_with_puc_count']=ProductToPUC.objects.values('product_id').distinct().count() stats['product_with_puc_count_by_month", "label": 0}, {"snippet_id": 29595, "code": " from flask_security import login_required, current_user from benwaonline.database import db from benwaonline.models import Post, Tag, Comment, Preview, Image from benwaonline.gallery import gallery from", "label": 0}, {"snippet_id": 62540, "code": " eduid_common.authn.eduid_saml2 import get_authn_request from eduid_common.authn.tests.responses import(auth_response, logout_response, logout_request) from eduid_webapp.authn.app import authn_init_app", "label": 0}, {"snippet_id": 78891, "code": "=data_dict['organization_id'] if organisation_updated: unassigned_organisation_id=data_req.organization_id _undictize_datarequest_basic(data_req, data_dict) session.add(data_req) session.commit() datarequest_dict", "label": 0}, {"snippet_id": 61069, "code": ". :type host_lock: Lock \"\"\" self.pid=pid self.hostname=hostname self.host_status=host_status self.host_lock=host_lock def run_check(self): try: proc=Process(self.pid) if proc.is_running() and system(\"exec", "label": 1}, {"snippet_id": 15687, "code": "'input_source_initial', '') sub_form.start_day.data=str_to_datetime(command.get('start_day', '')) sub_form.number_of_days.data=command.get('number_of_days', '') sub_form.delta.data=command.get('delta', '') @app.route", "label": 0}, {"snippet_id": 5374, "code": ".\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com',", "label": 0}, {"snippet_id": 54853, "code": " problem in assignment.problems: \t\t\t\tp_text=string.join(string.split(problem.text)) \t\t\t\tproblem_text_students[p_text].append(assignment.student) \t\tfor t,s in problem_text_students.items(): \t\t\tif len(s) > 1", "label": 0}, {"snippet_id": 58236, "code": " (onboarding.CREATE_COURSE, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_COURSELET, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding.CREATE_THREAD, ONBOARDING_STEPS_DEFAULT_TEMPLATE), (onboarding", "label": 1}, {"snippet_id": 68245, "code": "=super().get_context_data(**kwargs) search_form=SearchForm(self.request.GET) context['search_form']=search_form count=self.object_list.count() context['count']=count context['30_day_labels']=self.thirty_day_labels", "label": 0}, {"snippet_id": 57934, "code": "\"title\": \"\" } }, \"create_course\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_courselet\":{ \"done\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" ", "label": 0}, {"snippet_id": 52925, "code": " import ChatRoomView from realpal.apps.chat.api import MessageCreateAPIView urlpatterns=[ url(r'^$', ChatRoomView.as_view(), name='chat-room'), url(r'^(?P<room_id>[0-9]+)/', ChatRoomView.as_view(), name", "label": 1}, {"snippet_id": 52364, "code": "(): \"\"\"Update database with user_id for the project.\"\"\" user_id=session.get(\"user_id\") project_id=request.form.get(\"projectId\") q.update_user_claiming_project(user_id, project_id) return \"HTTP-status-code", "label": 0}, {"snippet_id": 57834, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.PREVIEW_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.NEXT_STEPS: ONBOARDING_STEPS_DEFAULT_TEMPLATE } def get_onboarding_setting(setting_name): \"\"\" Return settings for the", "label": 1}, {"snippet_id": 42210, "code": "=self.client.get(url).content.decode('utf8') span='<span class=\"oi oi-circle-check\" style=\"color:green;\"></span>' self.assertIn(span, response, 'Check should be present if matched.') def test_detail_table_headers", "label": 0}, {"snippet_id": 40657, "code": "=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('100%',", "label": 0}, {"snippet_id": 59912, "code": ".execute(\"SELECT load_extension('{}')\".format(extension)) if self.config(\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn)", "label": 0}, {"snippet_id": 294, "code": "/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list %} <li><a href=\"{{ f|urlencode}}\">{{ f}}</a></li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index", "label": 0}, {"snippet_id": 35856, "code": "=puc.get_assumed_tags() if puc else PUCTag.objects.none() if tagform.is_valid(): tagform.save() docs=p.datadocument_set.order_by('-created_at') return render(request, template_name,{'product' : p, 'puc' ", "label": 0}, {"snippet_id": 10264, "code": " UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ 'options': all_languages(), ", "label": 0}, {"snippet_id": 59299, "code": " Maximum rows that can be returned from a table or custom query \"\"\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads in the thread pool for executing SQLite queries \"\"\".strip()), ConfigOption", "label": 0}, {"snippet_id": 29232, "code": "(app, db) oauth.init_app(app) login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): return User.get(user_id) security_ctx=security.init_app(app, user_datastore) @security_ctx.context_processor", "label": 0}, {"snippet_id": 72299, "code": " cluster_id, export_id, reload_daemons=True): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) export=ganesha_conf", "label": 0}, {"snippet_id": 84004, "code": "*article_args) if revision is not None: changeset=get_object_or_404( article.changeset_set, revision=revision) article.content=changeset.get_content() template_params={'article': article, 'revision': revision, ", "label": 0}, {"snippet_id": 21973, "code": " be used across multiple runs of the same job in order to generate the object IDs in a consistent manner. However, the same ID should not be used for different jobs. local_mode(bool): True if the code should", "label": 0}, {"snippet_id": 20239, "code": " messages ready in the subscription channels. This reads messages from the subscription channels and calls the appropriate handlers until there are no messages left. Args: max_messages: The maximum number of", "label": 0}, {"snippet_id": 64461, "code": " return redirect(location_on_fail) session['eduPersonPrincipalName']=user.eppn session['user_eppn']=user.eppn session['eduPersonAssurance']=loa session.persist() response=redirect(location_on_success) session", "label": 0}, {"snippet_id": 81550, "code": "+str(new_end_date)) old_event_cat=old_repeating_event.event_type_id.id existing_event=self.env['event.event'].search([('event_type_id', '=', old_event_cat),('date_end', '=', str(new_end_date))]) if existing_event", "label": 0}, {"snippet_id": 12226, "code": ": The next step in the password reset process(confirmation) is currently handled by student.views.password_reset_confirm_wrapper, a custom wrapper around Django's password reset confirmation view. Args", "label": 0}, {"snippet_id": 49530, "code": " database.database_insert import insert_user, insert_social_user from database.database_query import query_user,query_social_user, number_of_users import base64 import json import os import shutil import", "label": 0}, {"snippet_id": 48355, "code": " ds=DataSource.objects.get(pk=pk) products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource'", "label": 0}, {"snippet_id": 14503, "code": " year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order history from Otto.') user_orders", "label": 0}, {"snippet_id": 22226, "code": "=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO, logging_format=ray_constants.LOGGER_FORMAT, plasma_store_socket_name=None, raylet_socket_name=None, temp_dir=None", "label": 0}, {"snippet_id": 54761, "code": "\t\tprob_code_data=(assignment_student,prob_id) \t\t\tprob_code=str(hash(prob_code_data)) \t\t\tself.code_list.append((prob_code,prob_code_data)) \t\t\tself.problem_groups[prob_id].append(prob_code+\"\\n\"+(\"=\"*50)+", "label": 0}, {"snippet_id": 46450, "code": " info=[x.decode('ascii','ignore') for x in csv_file.readlines()] table=csv.DictReader(info) missing= list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form", "label": 0}, {"snippet_id": 38893, "code": " self.type=='HH' def get_extract_models(self): '''returns a tuple with parent/child extract models''' return extract_models.get(self.type) def save(self, *args, **kwargs): super(DataGroup, self).save(*args", "label": 0}, {"snippet_id": 41687, "code": "(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects.doc.extracted=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/", "label": 0}, {"snippet_id": 28189, "code": " client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to use. error_type(str): The", "label": 0}, {"snippet_id": 57430, "code": ".code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp, context=context) return result request.method='GET' return self.get(request, *args, **kwargs", "label": 0}, {"snippet_id": 57749, "code": ".STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID: user_id}) or{} if status: steps=[status.get(key", "label": 1}, {"snippet_id": 47228, "code": " import datetime from django.contrib.auth.decorators import login_required from django.shortcuts import render, redirect, get_object_or_404 from dashboard.forms import DataSourceForm, PriorityForm from", "label": 1}, {"snippet_id": 21540, "code": " Raise an exception if the process was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_PLASMA_STORE, check_alive=check_alive) def kill_raylet(self, check_alive=True): \"\"\"Kill the raylet", "label": 0}, {"snippet_id": 60680, "code": " info.update( {\"ok\": False, \"error\": message, \"status\": status, \"title\": title} ) if request is not None and request.path.split(\"?\")[0].endswith(\".json\"): return response.json(info, status=status) else", "label": 0}, {"snippet_id": 82563, "code": "\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 76876, "code": " debugging; saves the named tile to /tmp. Args: image: the PIL tile image. fname: the name to give the image. image_spec: all details about type, extension etc. \"\"\" try: _, t_path=tempfile.mkstemp(suffix=\"", "label": 0}, {"snippet_id": 18079, "code": ") email.send_email(email_msg) def send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user", "label": 0}, {"snippet_id": 80273, "code": " self.bifi_scan_action=scan_menu.addAction('Birefringent Filter') self.thin_eta_scan_action=scan_menu.addAction('Thin Etalon') lock_menu=menu_bar.addMenu('Lock') self.lock_all_action=lock_menu.addAction(", "label": 0}, {"snippet_id": 17548, "code": "=flask.make_response(flask.redirect(redirect_url())) response.set_cookie(app.session_cookie_name, expires=0) return response @bp.route('/register', methods=['GET', 'POST']) def register(): if flask.g.user", "label": 0}, {"snippet_id": 32824, "code": " self.base.wait() class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file descriptor to modify. newfd: The new file descriptor. ''' def __init__(self, fd, newfd): self.fd", "label": 0}, {"snippet_id": 55897, "code": ".filter(self,pattern) if __name__==\"__main__\": \tprint \"current has \" \tfor item in current(): \t\tprint item.path \tprint \"root has \" \tfor item in root(): \t\tprint item.path \tprint \"home has \" \tfor item in home(", "label": 0}, {"snippet_id": 83434, "code": " None: self.old_title=self.old_content=self.old_markup='' self.is_new=True else: self.old_title=self.instance.title self.old_content=self.instance.content self.old_markup=self.instance.markup self.is_new", "label": 0}, {"snippet_id": 12385, "code": " context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we don't want to require if the user is", "label": 0}, {"snippet_id": 4242, "code": ".test_password, }) self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4", "label": 0}, {"snippet_id": 49828, "code": " filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(userpath, exist_ok=True) file.save(os", "label": 0}, {"snippet_id": 18289, "code": " in database \tthen checks if the email address also exists in the database \tdepending on conditions, returns None or the error message to be displayed. \t\"\"\" \tdef check_if_exists(self): \t\terror=None \t\tdocument_username", "label": 1}, {"snippet_id": 44782, "code": ") self.assertRaises(ValidationError, note.clean) def test_long_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes", "label": 1}, {"snippet_id": 67388, "code": " import ListView, DetailView from pure_pagination.mixins import PaginationMixin from django.db.models import Q from.models import Event, Attribute, Org, Tag, Object, ObjectReference from.forms import EventSearchForm", "label": 0}, {"snippet_id": 51489, "code": " required_version),32) def windows_program_exists(program): return subprocess.call([\"where\", \"/q\", program], shell=False)==0 def other_program_exists(program): return subprocess.call([\"/bin/sh\", \"-c\", \"command", "label": 1}, {"snippet_id": 80566, "code": "\\'Access the Matisse using \\\\\\'matisse.[method]\\\\\\'\\')\"') @handled_slot(bool) def restart(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked):", "label": 1}, {"snippet_id": 12092, "code": " initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if", "label": 0}, {"snippet_id": 29373, "code": " import auth from benwaonline.auth.forms import RegistrationForm @auth.before_request def before_request(): g.user=current_user @auth.route('/test') def test(): if current_user.is_authenticated: return", "label": 1}, {"snippet_id": 1593, "code": " directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n", "label": 0}, {"snippet_id": 34869, "code": "/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={}", "label": 0}, {"snippet_id": 29772, "code": ".session, tag)[0] for tag in form.tags.data if tag] tags.extend(added_tags) post=Post(title=fname, created=datetime.utcnow(), image=image, tags=tags) db.session.add(post) current_user.posts.append(post", "label": 0}, {"snippet_id": 50442, "code": " while True: if self.tryacquire(self.filename): break print \"Lockfile \"+self.filename+\" not available.\" print \"Wait 30s...\" time.sleep(30.0) self.locktime=datetime.datetime.now() print \"Lock acquired at", "label": 0}, {"snippet_id": 16825, "code": "=GamePlayer.objects.get(id=gp_id) gp.power=field try: gp.full_clean() except ValidationError as e: f.add_error(None, e) return render(request, 'rounds/seeded_games.html', {'tournament': t, 'round': r, 'formset'", "label": 0}, {"snippet_id": 36318, "code": ".client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) self.assertIn('QA', response_html.xpath('string(", "label": 0}, {"snippet_id": 62037, "code": " >=16070400: return True else: return False def validate_hsts_entire_domain(pshtt_result): if pshtt_result: return True else: return False def validate_encoding(page): if page.encoding is None: return False", "label": 0}, {"snippet_id": 83312, "code": "=ContentType.objects.all(), required=False, widget=forms.HiddenInput) object_id=forms.IntegerField(required=False, widget=forms.HiddenInput) action=forms.CharField(widget=forms.HiddenInput) class Meta:", "label": 0}, {"snippet_id": 45581, "code": " to the data document form The request object should have a 'referer' key to redirect the browser to the appropriate place after saving the edits Invoked by changing the document type in the data document", "label": 0}, {"snippet_id": 11014, "code": "'name'] not in enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related", "label": 0}, {"snippet_id": 57420, "code": "'application/pdf') resp['Content-Disposition']='attachment; filename=\"{}.pdf\"'.format(transaction.code) context={ 'transaction': transaction, } result=generate_pdf('transactions/invoice.html', file_object=resp", "label": 0}, {"snippet_id": 34239, "code": " process in the browser 1. Open the QA page for an ExtractedText record 2. Edit one of the child records 3. Attempt to approve the document without a QA note 4. Add a note 5. Approve ''' for doc_id in[7", "label": 1}, {"snippet_id": 77044, "code": ", \"glb\") logger=logging.getLogger(\"wms_maps\") class WmsLayer(object): \"\"\"Represents everything a client needs to deal with a server layer.\"\"\" def __init__( self, target_url, name, layer_id, label, projection", "label": 0}, {"snippet_id": 45569, "code": " render(request, template_name, context) @login_required() def save_doc_form(request, pk): '''Writes changes to the data document form The request object should have a 'referer' key to redirect the browser", "label": 0}, {"snippet_id": 55112, "code": " \tdef expanduser(self): \t\treturn FSPath(os.path.expanduser(self.path)) \tdef expandvars(self): \t\treturn FSPath(os.path.expandvars(self.path)) \tdef getatime(self): \t\treturn os.path.getatime(self.path) \tdef", "label": 0}, {"snippet_id": 63156, "code": "'TOKEN_LOGIN_SHARED_KEY'] timestamp='{:x}'.format(int(time.time())) nonce=os.urandom(16).encode('hex') token=sha256(\"{0}|{1}|{2}|{3}\".format(shared_key, eppn, nonce, timestamp)).hexdigest() data={ 'eppn': eppn, ", "label": 0}, {"snippet_id": 3726, "code": ".post(path, params) self.assertContains(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302)", "label": 0}, {"snippet_id": 4578, "code": ") self.assertRedirects(response, '/', status_code=302, target_status_code=301) response2=self.client.get(response[\"location\"]) response3=self.client.get(response2[\"location\"]) response4=self.client.get", "label": 0}, {"snippet_id": 78476, "code": "'organization']=_get_organization(datarequest.organization_id) if datarequest.accepted_dataset_id: data_dict['accepted_dataset']=_get_package(datarequest.accepted_dataset_id) data_dict['followers']=db.DataRequestFollower", "label": 0}, {"snippet_id": 21945, "code": " int: The port to use for the object manager. node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed", "label": 0}, {"snippet_id": 68091, "code": ", id=pk) hunt.delete() return redirect('threat_hunter:index') def hunt_export(request, pk): stream=StringIO() writer=csv.writer(stream) header=[' writer.writerow(header) for event in Event.objects.filter", "label": 0}, {"snippet_id": 56653, "code": ", \\ root_redirect, aasa_redirect urlpatterns=[ url(r'^redirects/people/me/email-confirmation$', email_confirmation_redirect, name='email-confirmation-redirect'), url(r'^redirects/people/me/login$', login_redirect", "label": 1}, {"snippet_id": 458, "code": ".template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path", "label": 0}, {"snippet_id": 11017, "code": " enterprise_exclusions] def enterprise_sidebar_context(request): \"\"\" Given the current request, render the HTML of a sidebar for the current logistration view that depicts Enterprise-related information. \"", "label": 0}, {"snippet_id": 71376, "code": " self.app(environ, start_response) req=EngineAuthRequest(environ) req._config=self._config req._load_session() req._load_user() req._set_redirect_uri() resp=None if environ['PATH_INFO'].startswith(self", "label": 1}, {"snippet_id": 48307, "code": " item in list_no_puc if item[\"data_source\"]==ds.id), False)['no_category'] except: ds.no_category=0 dgs=ds.datagroup_set.all() for dg in dgs: dg.unlinked=dg.datadocument_set.count() -dg.datadocument_set", "label": 0}, {"snippet_id": 21950, "code": " node_manager_port: The port to use for the node manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The", "label": 0}, {"snippet_id": 37342, "code": ".widget.attrs.update({ 'onchange': 'form.submit();' }) class QANotesForm(forms.ModelForm): class Meta: model=QANotes fields=['qa_notes'] widgets={ 'qa_notes': forms.Textarea, } labels={ 'qa_notes': _('QA", "label": 1}, {"snippet_id": 5781, "code": " time_module from copy import copy import logging from six.moves.urllib.parse import urlencode from flask import request, session, redirect, url_for, g from oauth2client.client import flow_from_clientsecrets", "label": 0}, {"snippet_id": 42354, "code": ".url, f'/datagroup/{dgpk}/', \"Should go to detail page.\") class DataGroupDetailTestWithFixtures(TestCase): fixtures=fixtures_standard def setUp(self): self.client.login(username='Karyn', password='specialP@55word", "label": 0}, {"snippet_id": 46203, "code": ".raw_category=row.pop('raw_category') wft=request.POST.get('weight_fraction_type', None) if wft: w='weight_fraction_type' row[w]=WeightFractionType.objects.get(pk=int(wft)) unit_type_id=int(row['unit_type']) row", "label": 0}, {"snippet_id": 55175, "code": "\t\treturn os.path.islink(self.path) \tdef ismount(self): \t\treturn os.path.ismount(self.path) \tdef normcase(self): \t\treturn FSPath(os.path.normcase(self.path)) \tdef realpath(self): \t\treturn FSPath(os.path", "label": 0}, {"snippet_id": 81710, "code": "\nfrom django.shortcuts import render from.models import Post def home(request): posts=Post.objects.order_by('pub_date') return render(request, 'posts/home.html',{'posts':posts}) def post_details(request", "label": 1}, {"snippet_id": 73303, "code": "'email', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email) self.add_error('email', message) return self.cleaned_data def get_user(self): email=self", "label": 0}, {"snippet_id": 39044, "code": "(self): '''This is a \"falsy\" property. If the csv file cannot be found, dg.csv_url evaluates to boolean False ''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url", "label": 0}, {"snippet_id": 81780, "code": "*kwargs): form=ShortUrlForm() return render(request, 'home.html',{'form': form}) def post(self, request, *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form.cleaned_data[", "label": 0}, {"snippet_id": 74358, "code": " request): return redirect(self._passphrase_next_url(request)) def _check_report_owner(self): if not self.report.owner==self.request.user: logger.warn(self.invalid_access_user_message) raise PermissionDenied", "label": 0}, {"snippet_id": 34508, "code": " forms from django.db import connection from django.urls import reverse from django.http import HttpResponse, HttpResponseRedirect from django.contrib import messages from django.shortcuts import render", "label": 0}, {"snippet_id": 10238, "code": ", 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 34074, "code": " raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') save_button.send_keys(\"\\n\") wait.until(ec.visibility_of(self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 72120, "code": ".format(fsal['name'])) ganesha_conf=GaneshaConf.instance(cluster_id) ex_id=ganesha_conf.create_export({ 'path': path, 'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type", "label": 0}, {"snippet_id": 41326, "code": " if doc.data_group.group_type.code=='CP': self.assertEqual(type(extsub), ExtractedCPCat) elif doc.data_group.group_type.code=='HH': self.assertEqual(type(extsub), ExtractedHHDoc) else: self.assertEqual", "label": 0}, {"snippet_id": 59188, "code": " import collections import hashlib import os import sys import threading import traceback import urllib.parse from concurrent import futures from pathlib import Path from markupsafe import Markup from jinja2", "label": 0}, {"snippet_id": 42029, "code": ", bulk_create needed') new_stub_id=Product.objects.all().aggregate(Max('id'))[\"id__max\"] +1 response=self.client.post(f'/datagroup/{self.objects.dg.pk}/', {'bulk':1}) self.assertEqual(response.context[", "label": 0}, {"snippet_id": 69550, "code": " We can work around this with sudo -E and extra entries in the sudoers file, but this is far more secure at the cost of upsetting some FHS purists. \"\"\" tljh_config_src=os.path.join(prefix, 'bin', 'tljh", "label": 0}, {"snippet_id": 5039, "code": " account registration.\"\"\" path=\"/%s/register/\" %(self.locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email", "label": 0}, {"snippet_id": 35383, "code": "(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size", "label": 0}, {"snippet_id": 31828, "code": " password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in", "label": 1}, {"snippet_id": 26327, "code": " PROCESS_TYPE_REDIS_SERVER, then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type:", "label": 0}, {"snippet_id": 78499, "code": " data_request.title=data_dict['title'] data_request.description=data_dict['description'] organization=data_dict['organization_id'] data_request.organization_id=organization if organization else None def", "label": 1}, {"snippet_id": 67153, "code": "(text__icontains=filehash)).order_by('-datetime') count=context['exs'].count() if count > 0: context['exs_count']=count return context def getpcap(request, pk): response=HttpResponse(VT().getPcap(pk), content_type", "label": 0}, {"snippet_id": 29937, "code": ".join(BASE, 'db', 'benwaonline.db') DEBUG=True SECRET_KEY='not-so-secret' class TestConfig(Config): SQLALCHEMY_DATABASE_URI='sqlite://' TESTING=True TWITTER_CONSUMER_KEY='consume' TWITTER_CONSUMER_SECRET=", "label": 0}, {"snippet_id": 74891, "code": "=_get_candidate(candidate_id=candidate_id, request=request) else: candidate=Candidate.objects.get(person__netid=request.user.username) except Candidate.DoesNotExist: type_=request.GET.get('type', '') if type_: url='", "label": 0}, {"snippet_id": 34643, "code": " appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from", "label": 0}, {"snippet_id": 52162, "code": "[\"POST\"]) def update_team_membership(): \"\"\"Update UserTeam membership field's value to true; update Dashboard with a redirect.\"\"\" user_id=session[\"user_id\"] team_id=request.form.get(\"team\") user_choice", "label": 0}, {"snippet_id": 38803, "code": " download_script=models.ForeignKey('Script', on_delete=models.SET_NULL, default=None, null=True, blank=True) data_source=models.ForeignKey('DataSource', on_delete=models.CASCADE) fs_id=models.UUIDField", "label": 0}, {"snippet_id": 23183, "code": "\"\"\" if driver_id is None: driver_id=ray.DriverID.nil() error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray", "label": 0}, {"snippet_id": 11902, "code": " ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site from openedx.core.djangoapps", "label": 0}, {"snippet_id": 26042, "code": ", stderr_file=(new_plasma_store_log_file( self._ray_params.redirect_output)) process_info=ray.services.start_plasma_store( self._node_ip_address, self._redis_address, stdout_file=stdout_file, stderr_file", "label": 0}, {"snippet_id": 80228, "code": " Python Shell...') self.restart_action=console_menu.addAction('Restart') set_menu=menu_bar.addMenu('Set') self.set_wavelength_action=set_menu.addAction('Wavelength') self.set_bifi_approx_wavelength_action", "label": 0}, {"snippet_id": 40048, "code": " return str(self.raw_chem_name) if self.raw_chem_name else '' @property def sid(self): '''If there is no DSSToxLookup record via the curated_chemical relationship, it evaluates to boolean False ''' try", "label": 0}, {"snippet_id": 58526, "code": " onboarding.NEXT_STEPS: False, onboarding.PREVIEW_COURSELET: False } settings_mock.side_effect=mocked_setting user_id=1 data=get_onboarding_status_with_settings(user_id) self.assertEqual(data, expected_result", "label": 0}, {"snippet_id": 81158, "code": "'subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner", "label": 0}, {"snippet_id": 51938, "code": " log_in_returning_user(): \"\"\"Validate login entry.\"\"\" num_attempts=h.get_login_attempts() remaining=h.calc_attempts_remaining(num_attempts) email=request.form.get('email') pw=request.form.get('pw') user_record=q", "label": 0}, {"snippet_id": 72388, "code": "/clients') def cephx_clients(self): return[client for client in CephX.list_clients()] @Endpoint('GET', '/fsals') def fsals(self): return Ganesha.fsals_available() @Endpoint('GET', '/lsdir') def lsdir(self", "label": 0}, {"snippet_id": 4620, "code": " test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username':", "label": 0}, {"snippet_id": 46912, "code": ", template_name, context) @login_required() def data_group_update(request, pk, template_name='data_group/datagroup_form.html'): datagroup=get_object_or_404(DataGroup, pk=pk) form=DataGroupForm(request.POST", "label": 0}, {"snippet_id": 25352, "code": " local_scheduler_info[\"ClientID\"] ip_address=( local_scheduler_info.get(\"AuxAddress\") or local_scheduler_info[\"NodeManagerAddress\"]).split(\":\")[0] self.local_scheduler_id_to_ip_map[client_id]=ip_address", "label": 0}, {"snippet_id": 2693, "code": "']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user.is_active: return self.login_success", "label": 0}, {"snippet_id": 63848, "code": " _authn('login-action') @authn_views.route('/chpass') def chpass(): \"\"\" Reauthn view, sends a SAML2 reauthn request to the IdP. \"\"\" return _authn('change-password-action', force_authn=True) @authn_views", "label": 0}, {"snippet_id": 21381, "code": " process_type !=ray_constants.PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process.poll() is not None: if check_alive: raise Exception", "label": 0}, {"snippet_id": 68402, "code": " redirect from django.views.generic import ListView, DetailView from django.views.generic.edit import CreateView, UpdateView from pure_pagination.mixins import PaginationMixin from django.db.models import Q,", "label": 0}, {"snippet_id": 75669, "code": "(fast_results, index): results=[] fast_ids=[] for item in fast_results: text=item['auth'] if item['type'] !='auth': text='%s(%s)' %(text, item[index][0]) if item['idroot'] not in fast_ids: results.append({'id': ", "label": 0}, {"snippet_id": 39422, "code": "): if hasattr(self, 'curated_chemical') and self.curated_chemical is not None: return self.curated_chemical.true_chemname else: return None @property def sid(self): if hasattr(self, 'curated_chemical')", "label": 0}, {"snippet_id": 467, "code": ".utils.http import http_date, parse_http_date from django.utils.translation import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below", "label": 0}, {"snippet_id": 46656, "code": " user =request.user, initial=initial_values) if form.is_valid(): datagroup=form.save() info=[x.decode('ascii', 'ignore') for x in datagroup.csv.readlines()] table=csv.DictReader(info) good_fields=['filename", "label": 0}, {"snippet_id": 71778, "code": " user=models.User.query().get() self.assertTrue(p.key.id() in user.auth_ids) req=EngineAuthRequest.blank('/auth/google') req._load_session() req._load_user() req.load_user_by_profile(p) user_count=models", "label": 0}, {"snippet_id": 43923, "code": " from selenium.webdriver.common.by import By from selenium.webdriver.common.keys import Keys from selenium.common.exceptions import NoSuchElementException from django.conf import settings from django.contrib", "label": 1}, {"snippet_id": 823, "code": " item we're talking about. size This is the size of the item we're talking about. \"\"\" try: if header is None: raise ValueError matches=re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE) header_mtime", "label": 0}, {"snippet_id": 47740, "code": ".\\ annotate(products_n=Count('extracted_text__data_document__product')).\\ annotate(sid=F('dsstox__sid')).values('sid', 'products_n') stats=pucs_n\\ .annotate(dds_n=Value(-1, output_field=IntegerField())", "label": 0}, {"snippet_id": 24038, "code": "(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper is None: @functools.wraps(orig_attr) def _wrapper(*args, **kwargs): with self.lock: return orig_attr(*args, **kwargs) self", "label": 0}, {"snippet_id": 30165, "code": ".db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker(bind=engine) session=DBSession() @app.route('/login') def showLogin(): state=''.join(random.choice(string", "label": 0}, {"snippet_id": 34280, "code": "-raw_chem_name\"]') wait=WebDriverWait(self.browser, 10) raw_chem_name_field=wait.until(ec.element_to_be_clickable( (By.XPATH, \"//*[@id='id_rawchem-0-raw_chem_name']\"))) old_raw_chem_name=raw_chem_name_field", "label": 0}, {"snippet_id": 47643, "code": " fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number of products the chemical appears in, where a", "label": 0}, {"snippet_id": 18593, "code": "\"\" \tdef get(self): \t\tself.render('signin.html',error='') \t\"\"\" check_database(): \tCreates an instance of PasswordHasher, finds if there is any document in the database with the \tusername submitted, verifies", "label": 1}, {"snippet_id": 77, "code": "<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index", "label": 0}, {"snippet_id": 48881, "code": "=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get('referer') if request.POST.get('referer') else 'category_assignment'", "label": 0}, {"snippet_id": 49945, "code": " methods=['POST']) @app.route('/save', methods=['POST']) def saveFile(fname=None): if(not 'email' in session) and(not 'social' in session): return \"\", 401 name=fname if fname else request.form['filename'", "label": 0}, {"snippet_id": 31447, "code": ".context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='gitmate.wsgi.application' DATABASES={ 'default':{ 'ENGINE': 'django.db.backends.postgresql_psycopg2", "label": 0}, {"snippet_id": 82790, "code": " __init__(self, pid, hostname, host_status, host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname", "label": 0}, {"snippet_id": 62223, "code": ") def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore(page): return validate_cache_control_header(page, 'no-store') def validate_notransform(page): return", "label": 0}, {"snippet_id": 6896, "code": "('main.index')) form=PasswordResetRequestForm() if form.validate_on_submit(): user=User.query.filter_by(email=form.email.data).first() if user: token=user.generate_reset_token() send_email(user.email, ", "label": 0}, {"snippet_id": 61688, "code": " ScanResult: \"\"\" Scan a single site. This method accepts a DirectoryEntry instance which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the", "label": 1}, {"snippet_id": 9665, "code": "=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, 'enterprise_branded_welcome_string': branded_welcome_string", "label": 0}, {"snippet_id": 78174, "code": "\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name", "label": 0}, {"snippet_id": 19439, "code": ".files_to_ignore=set() def update_log_filenames(self): \"\"\"Get the most up-to-date list of log files to monitor from Redis.\"\"\" num_current_log_files=len(self.log_files) new_log_filenames=self.redis_client.lrange(", "label": 1}, {"snippet_id": 72132, "code": " cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients", "label": 0}, {"snippet_id": 59918, "code": "\"cache_size_kb\"): conn.execute('PRAGMA cache_size=-{}'.format(self.config(\"cache_size_kb\"))) pm.hook.prepare_connection(conn=conn) def table_exists(self, database, table): return table in self.inspect()", "label": 0}, {"snippet_id": 71511, "code": "('appengine_openid') self.assertEqual(strategy_class, AppEngineOpenIDStrategy) def test_load_session_no_session(self): req=EngineAuthRequest.blank('/auth/google') s_count=models.Session.query().count()", "label": 1}, {"snippet_id": 23431, "code": " binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier", "label": 0}, {"snippet_id": 84858, "code": " for searching. \"\"\" this_article=Article.objects.get(title=title) changesets=this_article.changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title", "label": 0}, {"snippet_id": 67233, "code": "'ip/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form']=SearchForm() return context def get(self, request, **kwargs): if request.GET.get(", "label": 0}, {"snippet_id": 2193, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'})", "label": 0}, {"snippet_id": 56448, "code": "') \\ .when_call_profile_redirect('a_b.c') \\ .then_response_should_be_a_redirect_to('pachatary://app/profiles/a_b.c') class ScenarioMaker: def given_a_profile(self, username, bio, pic): orm_person=ORMPerson", "label": 0}, {"snippet_id": 13414, "code": " from util.bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model(", "label": 0}, {"snippet_id": 81214, "code": "\nimport logging from datetime import datetime from dateutil.relativedelta import relativedelta from odoo import fields, models, api _logger=logging.getLogger(__name__) class FitEvent(models.Model): _name=", "label": 0}, {"snippet_id": 83987, "code": "=ChangeSet.objects.filter( old_title=title).order_by('-revision')[0].article redirected_from=title except IndexError: article=ArticleClass(**article_args) if revision is not None: changeset=get_object_or_404", "label": 0}, {"snippet_id": 81778, "code": ", *args, **kwargs): form=ShortUrlForm() return render(request, 'home.html',{'form': form}) def post(self, request, *args, **kwargs): form=ShortUrlForm(request.POST or None) if form.is_valid(): url=form", "label": 0}, {"snippet_id": 19360, "code": " LogMonitor(object): \"\"\"A monitor process for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine", "label": 1}, {"snippet_id": 63068, "code": "(self): self.authn('/terminate', force_authn=True) def test_login_assertion_consumer_service(self): eppn='hubba-bubba' def _check(): eppn='hubba-bubba' self.assertEquals(session['eduPersonPrincipalName']", "label": 0}, {"snippet_id": 65179, "code": "(args.points, deductions) return try: code_obj=compile(tree, '<unknown>', 'exec') except BaseException as e: if vlevel >=1: print(repr(e), file=sys.stderr) code_obj=None if not code_obj: dock_points(deductions", "label": 0}, {"snippet_id": 68815, "code": "\"\"Installation logic for TLJH\"\"\" import argparse import itertools import logging import os import secrets import subprocess import sys import time from urllib.error import HTTPError from urllib.request", "label": 0}, {"snippet_id": 36923, "code": "())) ) .values('puc_assigned_month') .annotate(product_count=Count('product', distinct=True)) .order_by('puc_assigned_month') ) if len(product_stats) < 12: for i in range(0, 12): chart_month=chart_start_datetime", "label": 0}, {"snippet_id": 28461, "code": ", 0): return byte_str.decode(\"ascii\") else: return byte_str def binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify", "label": 0}, {"snippet_id": 49768, "code": " session: email=session['email'] elif 'social' in session: email=session['social'] userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) try: files=os.listdir(userpath) except: os.makedirs(userpath", "label": 0}, {"snippet_id": 25705, "code": " the node. head(bool): True if this is the head node, which means it will start additional processes like the Redis servers, monitor processes, and web UI. shutdown_at_exit(bool): If true, a handler will", "label": 0}, {"snippet_id": 29444, "code": "'/oauthorize') def oauthorize_callback(): resp=twitter.authorized_response() if not resp: flash(u'You denied the request to sign in.') return redirect(url_for('gallery.show_posts')) user_id=resp['user_id", "label": 0}, {"snippet_id": 62985, "code": ".location, came_from) check_fn() def dump_session_cookie(self, session_id): \"\"\" Get a cookie corresponding to an authenticated session. :param session_id: the token for the session :type session_id: str ", "label": 0}, {"snippet_id": 83916, "code": " template_dir='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'title': title} if group_slug is not None: group=get_object_or_404( group_qs", "label": 0}, {"snippet_id": 80776, "code": " for action in reversed(self.lock_actions): action.trigger() action.setEnabled(True) @handled_slot(bool) def toggle_slow_piezo_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} slow piezo", "label": 0}, {"snippet_id": 82063, "code": "{request.get_host()}/{short_url}', category=category) created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk': created.pk})) return redirect(reverse('success-url", "label": 0}, {"snippet_id": 67097, "code": ".getReportFromSample(filehash) context['events']=Event.objects.filter(Q(info__icontains=filehash)).order_by('-publish_timestamp') count=context['events'].count() if count > 0: context['events_count']=count context", "label": 0}, {"snippet_id": 3336, "code": " initialization HTTP endpoint\"\"\" state=get_random_string(import_from_settings('OIDC_STATE_SIZE', 32)) redirect_field_name=import_from_settings('OIDC_REDIRECT_FIELD_NAME', 'next') params={ 'response_type': 'code', ", "label": 0}, {"snippet_id": 30919, "code": " newGrudge(grudget_id): if 'username' not in login_session: return redirect('/login') grudget=session.query(Grudget).filter_by(id=grudget_id).one() if request.method=='POST': newGrudge=Grudge(name=request.form", "label": 1}, {"snippet_id": 47883, "code": " if \"GET\"==request.method: return render(request, \"get_data/get_data.html\", data) try: csv_file=request.FILES[\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type", "label": 0}, {"snippet_id": 45533, "code": " child_formset.forms: for field in form.fields: form.fields[field].widget.attrs['disabled']=True context.update( {'edit_text_form': ParentForm(instance=extracted_text), 'extracted_text': extracted_text", "label": 1}, {"snippet_id": 645, "code": "'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding", "label": 0}, {"snippet_id": 56064, "code": " link=dynamic_link.format(real_link) get_profile_interactor=create_get_profile_interactor() profile=get_profile_interactor.set_params(username=username, logged_person_id='-1').execute() preview_content=", "label": 0}, {"snippet_id": 40256, "code": "=self.pk).count() def get_qa_complete_extractedtext_count(self): return DataDocument.objects.filter(extractedtext__qa_checked=True, extractedtext__extraction_script=self.pk).count() def get_pct_checked", "label": 0}, {"snippet_id": 43832, "code": ", \"the count of ExtractedText records related to the \\ data document should be zero\") edit_modal=wait.until( ec.invisibility_of_element( (By.XPATH, '//*[@id=\"extextModal\"]') ) ) add_button=self.browser", "label": 0}, {"snippet_id": 37065, "code": " as _ from dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models class DataGroupForm(forms.ModelForm): required_css_class='required' class Meta: model", "label": 1}, {"snippet_id": 27579, "code": "\"cname\" if you want to override the default timeline display text and box color. Other values will appear at the bottom of the chrome tracing GUI when you click on the box corresponding to this profile", "label": 0}, {"snippet_id": 22, "code": " import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date", "label": 1}, {"snippet_id": 3939, "code": "'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path", "label": 0}, {"snippet_id": 29678, "code": ".show_posts')) @gallery.route('/gallery/benwa/<int:post_id>') def show_post(post_id): post=Post.query.paginate(post_id, 1, False) if post.items: return render_template('show.html', post=post, form=CommentForm())", "label": 1}, {"snippet_id": 52794, "code": ",] def create(self, request, *args, **kwargs): room_id=self.request.data.get('room') try: self.room=Room.objects.get(pk=room_id) self.request.data['sent_by']=self.request.user.id self.request.data['room", "label": 0}, {"snippet_id": 49470, "code": ") if form.is_valid(): form.save() doc.extracted=True doc.save() return redirect('data_document', pk=doc.pk) else: extext.delete() return HttpResponse(\"Houston, we have a problem.\") @login_required def extracted_child_edit", "label": 0}, {"snippet_id": 58203, "code": " onboarding.STEP_8: 1}, 100.0) ) def test_percentage_of_done(self, steps, result, mock): _mock=mock.return_value _mock.find_one.return_value=steps self.assertEqual(get_onboarding_percentage(1), result) @mock", "label": 1}, {"snippet_id": 36867, "code": "=(Trunc('created_at', 'month', output_field=DateTimeField()))) \\ .values('upload_month') \\ .annotate(document_count=(Count('id'))) \\ .values('document_count', 'upload_month') \\ .order_by('upload_month'", "label": 0}, {"snippet_id": 73823, "code": " PositionText, 'userVisibleText': PositionsViewText, 'applicationsForm': ImportApplicationsForm, 'positions': request.user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] } @login_required", "label": 0}, {"snippet_id": 40173, "code": ".validators import(URLValidator, MaxValueValidator, MinValueValidator) from.common_info import CommonInfo from.data_document import DataDocument class Script(CommonInfo): TYPE_CHOICES=(('DL', 'download'), ('EX", "label": 0}, {"snippet_id": 4013, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']", "label": 1}, {"snippet_id": 55147, "code": "): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path.isfile(self.path) \tdef isdir(self): \t\treturn os.path.isdir(self.path) \tdef", "label": 0}, {"snippet_id": 10327, "code": ")) auth_states=pipeline.get_provider_user_states(user) context['auth']['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline", "label": 0}, {"snippet_id": 66716, "code": " show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context=unlock_failed_box.get_style_context() context.add_class('NotifyRevealer') unlock_failed_revealer=self.builder.get_object(", "label": 0}, {"snippet_id": 80846, "code": ".lock_piezo_etalon_action.setChecked(not checked) self.matisse.set_piezo_etalon_lock(checked) self.lock_piezo_etalon_action.setChecked(checked) @handled_slot(bool) def toggle_fast_piezo_lock(self, checked): print(f\"{'Locking", "label": 0}, {"snippet_id": 82318, "code": " return render(request, 'clicktracking-detail-view.html',{'object': object, 'reports': reports}) def link_redirect(request, pk): instance=get_object_or_404(JustURL, pk=pk) return redirect(instance.input_url", "label": 1}, {"snippet_id": 67528, "code": ".order_by('-publish_timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day", "label": 0}, {"snippet_id": 2929, "code": ".user) expiration_interval=import_from_settings('OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect", "label": 0}, {"snippet_id": 10110, "code": " for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait\" message while AJAX calls are made to enroll the user", "label": 0}, {"snippet_id": 19366, "code": " for monitoring Ray log files. Attributes: node_ip_address: The IP address of the node that the log monitor process is running on. This will be used to determine which log files to track. redis_client: A", "label": 1}, {"snippet_id": 14174, "code": ". Arguments: request(HttpRequest): The original request, used to retrieve session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions", "label": 0}, {"snippet_id": 62215, "code": " validate_cache_must_revalidate(page): return validate_cache_control_header(page, 'must-revalidate') def validate_nocache(page): return validate_cache_control_header(page, 'no-cache') def validate_nostore", "label": 0}, {"snippet_id": 59295, "code": ".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table or custom query \"\"\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads in the thread", "label": 0}, {"snippet_id": 65511, "code": ".FileChooserDialog( \"Choose Keepass Database\", self, Gtk.FileChooserAction.OPEN, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(", "label": 0}, {"snippet_id": 14454, "code": " page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1", "label": 0}, {"snippet_id": 83283, "code": "' +WIKI_WORD_RE +'$') class ArticleForm(forms.ModelForm): summary=forms.CharField(widget=forms.Textarea) comment=forms.CharField(required=False) user_ip=forms.CharField(widget=forms.HiddenInput) content_type", "label": 0}, {"snippet_id": 15056, "code": ") time_series.sort(key=lambda ts_item: ts_item['result_type'], reverse=False) return render_template('results.html', results=results, time_series=time_series) class NoValidationSelectField(SelectField)", "label": 0}, {"snippet_id": 14984, "code": " re.search('\\(output,.*\\)$', name): name_wo_braces=re.sub(r'[()]', '', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time", "label": 0}, {"snippet_id": 3994, "code": " can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username", "label": 0}, {"snippet_id": 39210, "code": " auto_delete_file_on_delete(sender, instance, **kwargs): \"\"\" Deletes datagroup directory from filesystem when datagroup instance is deleted. \"\"\" dg_folder=instance.get_dg_folder() if os.path.isdir(dg_folder): shutil", "label": 0}, {"snippet_id": 73003, "code": ": position }) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm(request.POST, request.FILES) if form.is_valid(): breakpoint() parse_applications() return render(request", "label": 0}, {"snippet_id": 16491, "code": " or None, the_round=r) if form.is_valid(): for rp in r.roundplayer_set.exclude(game_count=1): rp.game_count=1 rp.save() for i in range(sitters): rp=form.cleaned_data['sitter_%d' % i] if rp: rp.game_count", "label": 0}, {"snippet_id": 40011, "code": "(default=0, null=True, blank=True) temp_obj_name=models.CharField(max_length=255, null=True, blank=True) rid=models.CharField(max_length=50, null=True, blank=True) dsstox=models.ForeignKey(DSSToxLookup,", "label": 1}, {"snippet_id": 54035, "code": " of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr redirect buffer contents \"", "label": 0}, {"snippet_id": 50374, "code": " None: flash('Authentication failed.') return redirect(url_for('login')) user=query_social_user(social); session['social']=social if user is None: insert_social_user(social) return redirect('/') if __name__", "label": 0}, {"snippet_id": 1834, "code": " path.split('/'): if not part: continue drive, part=os.path.splitdrive(part) head, part=os.path.split(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/')", "label": 1}, {"snippet_id": 53104, "code": "(response.status_code, 302) self.assertTemplateUsed('users/update.html') data={'purchase_step': 8} self.client.post(update_url, data) self.assertEqual(self.view.get_object().purchase_step, PS_DAP) data=", "label": 1}, {"snippet_id": 29193, "code": " benwaonline.gallery import gallery from benwaonline.gallery.forms import images from benwaonline.user import user from benwaonline.auth import auth FILE_SIZE_LIMIT=10 * 1024 * 1024 security=Security()", "label": 1}, {"snippet_id": 10666, "code": "(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags'", "label": 0}, {"snippet_id": 42832, "code": ".content) pk=9 response=self.client.get(f'/qa/extractionscript/{pk}/', follow=True) self.assertEqual(response.status_code, 200) def test_data_document_qa(self): scr=Script.objects.annotate(num_ets=Count", "label": 1}, {"snippet_id": 22350, "code": " else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs): \"\"\"Update the settings when the target fields are None. Args: kwargs", "label": 0}, {"snippet_id": 4494, "code": ".test_password) paths=('login/', 'register/', 'confirm/123456/username/', 'confirm/resend/username/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) print response", "label": 0}, {"snippet_id": 22723, "code": " to appear more quickly. In such cases, this function can be called. Note that as an alternative, we could start a thread in the background on workers that calls this automatically. \"\"\" with self.lock:", "label": 1}, {"snippet_id": 41677, "code": "'datagroup'].all_matched(),( 'UploadForm should not be included in the page!')) self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')", "label": 0}, {"snippet_id": 19920, "code": ".issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises: Exception: An exception is raised", "label": 0}, {"snippet_id": 80577, "code": "(self, checked): self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Wavelength', label", "label": 0}, {"snippet_id": 56075, "code": "'-1').execute() preview_content={'st': '@{}'.format(profile.username), 'sd': profile.bio, 'si': profile.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format", "label": 0}, {"snippet_id": 7048, "code": " flash('An email with instructions for confirming your new email ' 'address has been sent.') return redirect(url_for('main.index')) else: flash('Invalid password.') return render_template(\"auth/change_email", "label": 0}, {"snippet_id": 76459, "code": " bgcolor) if im_tile: _PasteTile(im_whole_tiles, im_tile, pos) logger.debug(\"tilepixel_rect: %s\", str(tilepixel_rect)) offset_within_tiled_image=geom.Pair( tilepixel_rect.x0 % _TILE_PIXEL_SIZE, tilepixel_rect", "label": 0}, {"snippet_id": 36136, "code": ".gen_cat) if self.is_level_two: return PUC.objects.filter(gen_cat=self.gen_cat, prod_fam=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): ", "label": 0}, {"snippet_id": 63011, "code": "'SESSION_COOKIE_NAME'), session_id, max_age=float(self.app.config.get('PERMANENT_SESSION_LIFETIME')), path=self.app.config.get('SESSION_COOKIE_PATH'), domain=self.app.config.get('SESSION_COOKIE_DOMAIN'))", "label": 0}, {"snippet_id": 54030, "code": ": \"\"\" Returns the current state of the stderr redirect buffer This is useful for creating intermediate display values while the step is still executing. :return: A string of the current state of the stderr", "label": 0}, {"snippet_id": 36058, "code": " 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat for cat in cats if cat is not None) def natural_key(self): return self", "label": 0}, {"snippet_id": 52839, "code": "=status.HTTP_201_CREATED) except Room.DoesNotExist: return Response(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self", "label": 0}, {"snippet_id": 66872, "code": " context['vt_domain']=vt.getDomainReport(domain) tm=ThreatMiner() context['tm_url']=tm.getURIFromDomain(domain) context['tm_sample']=tm.getSamplesFromDomain(domain) context['tm_report']=tm.getReportFromDomain", "label": 0}, {"snippet_id": 69637, "code": " packages collected from plugins:{}'.format( len(apt_packages), ' '.join(apt_packages) )) apt.install_packages(apt_packages) conda_packages=list(set(itertools.chain(*hook.tljh_extra_user_conda_packages()", "label": 0}, {"snippet_id": 40515, "code": " fixtures_standard from dashboard import views from dashboard.models import * class DashboardTest(TestCase): def setUp(self): self.objects=load_model_objects() def test_public_navbar(self): self.client", "label": 0}, {"snippet_id": 36048, "code": " applicable to this PUC') class Meta: ordering=['gen_cat', 'prod_fam', 'prod_type'] verbose_name_plural='PUCs' def __str__(self): cats=[self.gen_cat, self.prod_fam, self.prod_type] return ' -'.join(cat", "label": 0}, {"snippet_id": 48268, "code": "=DataSource.objects.annotate(uploaded=Count('datagroup__datadocument'))\\ .filter(uploaded__gt=0) qs_no_puc=Product.objects.values('data_source').exclude(id__in=(ProductToPUC.objects.values_list('product_id',", "label": 0}, {"snippet_id": 79738, "code": " been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound(tk._('Data Request", "label": 0}, {"snippet_id": 24952, "code": " exception:{}\".format( str(e))) self.issue_gcs_flushes=False def subscribe(self, channel): \"\"\"Subscribe to the given channel on the primary Redis shard. Args: channel(str): The channel to subscribe to. Raises:", "label": 0}, {"snippet_id": 41036, "code": ") p_idx=html.index('<h4 class=\"d-inline\">Products') self.assertTrue(p_idx > e_idx,('Product card should come after ' 'Extracted Text card')) def test_product_create_link(self): response=self.client.get", "label": 0}, {"snippet_id": 75761, "code": ") if select2_results: return[{'text': 'FAST results', 'children': select2_results}] else: return[] except Exception as e: logger.error('fast data exception: %s' % e) logger.error('fast response: %s -%s", "label": 0}, {"snippet_id": 8259, "code": " tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders", "label": 0}, {"snippet_id": 36034, "code": ".ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text='A set of PUC Attributes applicable to this PUC') class Meta: ordering=['gen_cat", "label": 0}, {"snippet_id": 78177, "code": "*' users from admin to editor in their respective organisations \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(DemotePublishers, self).__init__(name) self.parser.add_option('-u', '-", "label": 0}, {"snippet_id": 71009, "code": "'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if", "label": 0}, {"snippet_id": 3707, "code": ".locale,) params={ 'display_name': 'Joe User', 'username': 'joeuser', 'password': 'abcdefghijklmno1', 'password_confirm': 'abcdefghijklmno1', 'email': 'joe@mozilla.com', } response=self.client.post(path,", "label": 0}, {"snippet_id": 60325, "code": " raise InterruptedError(e) print( \"ERROR: conn={}, sql={}, params={}:{}\".format( conn, repr(sql), params, e ) ) raise if truncate: return Results(rows, truncated, cursor.description) else: return Results", "label": 0}, {"snippet_id": 60163, "code": ".version_info[:3])), \"full\": sys.version }, \"datasette\": datasette_version, \"sqlite\":{ \"version\": sqlite_version, \"fts_versions\": fts_versions, \"extensions\": sqlite_extensions, \"compile_options\":[ r[0] for r in", "label": 0}, {"snippet_id": 31089, "code": "/delete', methods=['GET', 'POST']) def deleteGrudge(grudget_id, grudge_id): if 'username' not in login_session: return redirect('/login') grudgeToDelete=session.query(Grudge).filter_by(id=grudge_id).one", "label": 0}, {"snippet_id": 16151, "code": "(tournament, round_num): \"\"\"Return the specified numbered round of the specified tournament or raise Http404.\"\"\" try: return tournament.round_numbered(round_num) except Round.DoesNotExist: raise Http404", "label": 0}, {"snippet_id": 71516, "code": ", AppEngineOpenIDStrategy) def test_load_session_no_session(self): req=EngineAuthRequest.blank('/auth/google') s_count=models.Session.query().count() self.assertTrue(s_count==0) sess=req._load_session(", "label": 1}, {"snippet_id": 45709, "code": "=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def", "label": 0}, {"snippet_id": 8090, "code": "]['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): \"\"\" Take the received field definition, and exclude those fields that we", "label": 0}, {"snippet_id": 6947, "code": "('/reset/<token>', methods=['GET', 'POST']) def password_reset(token): if not current_user.is_anonymous: return redirect(url_for('main.index')) form=PasswordResetForm() if form.validate_on_submit(): user", "label": 0}, {"snippet_id": 51112, "code": "._enabled_options.clear() self._disable_all_options=True args=flatten_string_list(args) args=flatten_comma_list(args) self.modify_optional_steps(*args) def run(self, argv=None): self._context=BuildContext(", "label": 0}, {"snippet_id": 12272, "code": " usage: POST /account/password \"\"\" limiter=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user", "label": 0}, {"snippet_id": 17567, "code": " if flask.g.user: return flask.redirect(redirect_url()) form=forms.RegisterForm(flask.request.form) if flask.request.method=='POST' and form.validate(): user=models.User(username=form.username.data.strip", "label": 0}, {"snippet_id": 77543, "code": ".cli import CkanCommand from ckan.model.package import Package from ckanapi import LocalCKAN _and_=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free", "label": 0}, {"snippet_id": 73355, "code": "'importposition'), path('positions/', views.positions, name='positions'), path('position/', views.position, name='position'), path('importapplications/', views.import_applications, name='importapplications'), ]", "label": 1}, {"snippet_id": 27817, "code": " RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of the event being logged. extra_data: Additional information to log. ", "label": 0}, {"snippet_id": 38183, "code": " tag_list(self, obj): return u\", \".join(o.name for o in obj.tags.all()) def get_level(self): if self.is_level_one: return 1 if self.is_level_two: return 2 else: return 3 @property def is_level_one(self)", "label": 0}, {"snippet_id": 1785, "code": "'}) in your URLconf. You must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template", "label": 0}, {"snippet_id": 46762, "code": ", \"'document_type' field can't be empty\"]) continue if DocumentType.objects.filter(group_type=datagroup.group_type, code=code).exists(): doc_type=DocumentType.objects.get( group_type=datagroup.group_type", "label": 0}, {"snippet_id": 63832, "code": " LogoutResponseSchema authn_views=Blueprint('authn', __name__) @authn_views.route('/login') def login(): \"\"\" login view, redirects to SAML2 IdP \"\"\" return _authn('login-action') @authn_views.route('/chpass') def chpass", "label": 0}, {"snippet_id": 41456, "code": " else: self.assertFalse( 'true_cas' in form.fields) self.assertFalse( 'SID' in form.fields) else: self.assertFalse( 'true_cas' in form.fields) def test_num_forms(self): ''''Assure that the number of child", "label": 1}, {"snippet_id": 68335, "code": "() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in", "label": 0}, {"snippet_id": 30934, "code": " request.method=='POST': newGrudge=Grudge(name=request.form['name'], description=request.form[ 'description'], processed=request.form['processed'], takeaway=request.form['takeaway'], grudget_id=grudget_id", "label": 1}, {"snippet_id": 76390, "code": " layer_properties.image_format==\"image/jpeg\": mode=\"RGB\" color=bgcolor else: mode=\"RGBA\" color=bgcolor +alpha im_whole_tiles=Image.new(mode, im_whole_tiles_extent.AsTuple(), color) logger.debug(\"Tiles rect", "label": 0}, {"snippet_id": 2139, "code": " setting. \"\"\" import mimetypes import os import posixpath import re import stat from django.http import( FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django", "label": 1}, {"snippet_id": 73411, "code": "'login/', redirect_field_name=None) def index(request): return redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request)", "label": 0}, {"snippet_id": 55974, "code": "> 0: real_link='{}{}/{}'.format(settings.PUBLIC_DOMAIN, EXPERIENCE_PATH, experience_share_id) link=dynamic_link.format(real_link) get_experience_interactor=create_get_experience_interactor() experience", "label": 0}, {"snippet_id": 39751, "code": " self def one_to_one_check(self, odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent", "label": 0}, {"snippet_id": 11590, "code": " HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action=enroll ", "label": 0}, {"snippet_id": 80201, "code": ".layout=QVBoxLayout() window.setWindowTitle('Matisse Controller') window.resize(600, 200) def setup_menus(self): menu_bar=self.window.menuBar() console_menu=menu_bar.addMenu('Console') self.clear_log_area_action", "label": 0}, {"snippet_id": 39173, "code": ", 'upper_wf_analysis'] def clean_fields(self, exclude=None): super().clean_fields(exclude=exclude) if self.tracker.has_changed('group_type_id') and self.extracted_docs(): msg=\"The Group Type may not be", "label": 0}, {"snippet_id": 55761, "code": " __init__(self,file,number,text): \t\tself.file=file \t\tself.number=number \t\tself.text=text class File(FSItem): \tdef __init__(self,path): \t\tsuper(File,self).__init__(path) \t\tassert(self.isfile()) \tdef read(self)", "label": 1}, {"snippet_id": 59183, "code": " User{}\".format(self.code, self.email) @receiver(post_save, sender=Invite) def onboarding_invite_created(sender, instance, **kwargs): update_onboarding_step(onboarding.STEP_8, instance.instructor.user_id)", "label": 1}, {"snippet_id": 7607, "code": ".core.djangoapps.programs.models import ProgramsApiConfig from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers from openedx.core.djangoapps.theming.helpers import is_request_in_themed_site", "label": 0}, {"snippet_id": 4629, "code": "\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver", "label": 0}, {"snippet_id": 63265, "code": " config): \"\"\" Called from the parent class, so we can provide the appropriate flask app for this test case. \"\"\" return eduid_init_app('testing', config) def test_no_cookie(self): with self.app.test_client(", "label": 0}, {"snippet_id": 15468, "code": " in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial.data, 'start_day': str(entry.start_day.data), 'number_of_days': entry.number_of_days.data, 'delta", "label": 0}, {"snippet_id": 53026, "code": "( self.view.get_object(), self.user ) def test_updating_user_info(self): update_url=reverse('users:update') data={ 'purchase_step_form':{'purchase_step': PS_DAP}, 'marital_status_form':{'status': SC_SI", "label": 0}, {"snippet_id": 36602, "code": " assigned_prods=ProductToPUC.objects.values_list('product_id') prod=Product.objects.exclude(id__in=assigned_prods).first() puc21=PUC.objects.get(id=21) p2puc=ProductToPUC.objects.create( product=prod, puc=puc21,", "label": 0}, {"snippet_id": 19517, "code": "( current_position) break if len(new_lines) > 0: self.log_files[log_filename] +=new_lines redis_key=\"LOGFILE:{}:{}\".format( self.node_ip_address, ray.utils.decode(log_filename)) self.redis_client.rpush", "label": 1}, {"snippet_id": 52847, "code": "(status=status.HTTP_400_BAD_REQUEST) def perform_create(self, serializer): serializer.is_valid(self) instance=serializer.save(sent_by=self.request.user, room=self.room) if not settings.IS_TESTING: data={ ", "label": 0}, {"snippet_id": 50458, "code": ".0) self.locktime=datetime.datetime.now() print \"Lock acquired at \"+str(self.locktime) def __exit__(self, etype, einstance, etraceback): self.release() unlocktime=datetime.datetime.now() print \"Lock released", "label": 0}, {"snippet_id": 76489, "code": ") logger.debug(\"Cropping to: %s\", str(within_tiled_image.AsTuple())) im_true=im_whole_tiles.crop(within_tiled_image.AsTuple()) logger.debug(\"Stretching to requested: %s\", str( (user_width, user_height)", "label": 0}, {"snippet_id": 4872, "code": ", 'profile/edit/image/') for path in paths: full=\"/%s/%s\" %(self.locale, path) response=self.client.get(full) expected=\"/%s/\" %(self.locale,) self.assertRedirects(response, expected, status_code=302, target_status_code", "label": 0}, {"snippet_id": 69567, "code": " 'bin', 'tljh-config') tljh_config_dest='/usr/bin/tljh-config' if os.path.exists(tljh_config_dest): if os.path.realpath(tljh_config_dest) !=tljh_config_src: raise FileExistsError(f'/usr/bin/tljh-config", "label": 0}, {"snippet_id": 9725, "code": "\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, \"registerFormSubmitButtonText\": _(\"Create Account\"), } if third_party_auth.is_enabled", "label": 0}, {"snippet_id": 6625, "code": "'/unconfirmed') def unconfirmed(): if current_user.is_anonymous or current_user.confirmed: return redirect(url_for('main.index')) return render_template('auth/unconfirmed.html') @auth.route('/login', methods", "label": 0}, {"snippet_id": 51415, "code": "(self, *args): return self.call(*args) def __enter__(self): return self def __exit__(self, ex_type, ex_value, ex_traceback): self.ssh.close() class AbortRunException(Exception): def __init__(self, message=", "label": 0}, {"snippet_id": 22344, "code": " in kwargs: if hasattr(self, arg): setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update: %s\" % arg) self._check_usage() def update_if_absent(self, **kwargs):", "label": 0}, {"snippet_id": 50701, "code": " None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path, ignore_errors=True", "label": 0}, {"snippet_id": 23584, "code": " for the task. \"\"\" if runtime_resources is not None: resources=runtime_resources.copy() elif default_resources is not None: resources=default_resources.copy() else: resources={} if \"CPU\" in resources or ", "label": 0}, {"snippet_id": 23949, "code": "\" \"It will be stored in Redis, which could cause memory issues. \" \"This may mean that its definition uses a large array or other object.\" ).format(obj_type, name, length) push_error_to_driver( worker, ray_constants", "label": 0}, {"snippet_id": 40147, "code": "=kwargs.get('instance') previous_raw_cas=instance.tracker.previous('raw_cas') previous_raw_chem_name=instance.tracker.previous('raw_chem_name') if instance.tracker.has_changed('raw_cas') or \\ instance.tracker", "label": 0}, {"snippet_id": 55407, "code": "\t\treturn FSPath(os.readlink(self.path)) \tdef remove(self): \t\treturn os.remove(self.path) \tdef removedirs(self): \t\treturn os.removedirs(self.path) \tdef rename(self,other): \t\tif isinstance(other,FSPath):", "label": 0}, {"snippet_id": 50124, "code": "['UPLOAD_FOLDER'], email) filepath=os.path.join(userpath, filename) with open(filepath) as f: data=f.read() try: parsed=parser.parse(data) return render_template(\"diagramEditor.html\", data=json.dumps(parsed", "label": 0}, {"snippet_id": 7684, "code": " util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted", "label": 0}, {"snippet_id": 38220, "code": ".prod_type is '' @property def is_level_three(self): return not self.prod_fam is '' and not self.prod_type is '' def get_the_kids(self): if self.is_level_one: return PUC.objects.filter(gen_cat=self.gen_cat)", "label": 0}, {"snippet_id": 78292, "code": " org['name'])) user['capacity']='editor' updates_required=True updates +=1 if updates_required: print('-Updating user capacities for organisation %s' % org['name']) self.patch_organisation_users(org['id", "label": 0}, {"snippet_id": 77956, "code": " to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__(self, name): super(MigrateExtras, self).__init__(name) def get_package_ids(self): session=model.Session package_ids=[] packages", "label": 0}, {"snippet_id": 23710, "code": " statistic. Args: stat: The statistic that we are interested in retrieving. Returns: The parsed output. \"\"\" out=subprocess.check_output([\"vmstat\", \"-s\"]) stat=stat.encode(\"ascii\") for line in out.split(b", "label": 0}, {"snippet_id": 50011, "code": " saveFilePath) if \"diagram\" in request.referrer or 'diagram' in request.args or 'diagram' in request.form: return redirect('/diagram?filename=%s'%name) else: return redirect('/?filename=%s'%name) flash(", "label": 0}, {"snippet_id": 61083, "code": " try: proc=Process(self.pid) if proc.is_running() and system(\"exec >(ping %s -c 10 >/dev/null) </dev/null\" % self.hostname) is 0: return True except NoSuchProcess: pass self.host_lock.acquire() self.host_status", "label": 1}, {"snippet_id": 10239, "code": "{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language':{ 'options': released_languages(), }, 'level_of_education", "label": 0}, {"snippet_id": 21954, "code": " manager. node_ip_address(str): The IP address of the node that we are on. object_id_seed(int): Used to seed the deterministic generation of object IDs. The same value can be used across multiple runs of the", "label": 0}, {"snippet_id": 48869, "code": " p2p: p2p.save() else: puc=PUC.objects.get(id=form['puc'].value()) p2p=ProductToPUC.objects.create(puc=puc, product=p, classification_method='MA', puc_assigned_usr=request.user) referer=request.POST.get", "label": 0}, {"snippet_id": 67604, "code": " return labels class EventDetailView(PaginationMixin, ListView): model=Attribute template_name='threat/event_detail.html' context_object_name='attributes' paginate_by=30 def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 65824, "code": " tab_hbox.show_all() self.container.append_page(page_instance, tab_hbox) self.container.set_current_page(self.container.page_num(page_instance)) self.update_tab_bar_visibility() return page_instance def", "label": 0}, {"snippet_id": 47100, "code": " template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects", "label": 0}, {"snippet_id": 24882, "code": ".autoscaler=StandardAutoscaler(autoscaling_config, self.load_metrics) else: self.autoscaler=None self.issue_gcs_flushes=\"RAY_USE_NEW_GCS\" in os.environ self.gcs_flush_policy=None if self.issue_gcs_flushes", "label": 0}, {"snippet_id": 46594, "code": " else: context['clean_comp_data_form'].collapsed=False return render(request, template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html'):", "label": 0}, {"snippet_id": 4000, "code": "=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com\" response=self.client.post(path +\"?next=%s\" %(next_param),{ 'username': self.test_username, 'password': self.test_password,", "label": 0}, {"snippet_id": 71726, "code": ".blank('/auth/google') req._load_session() req.session.user_id=user.get_id() req._load_user() self.assertEqual(user, req.user) def test__load_user_by_profile(self): auth_id='test:12345' user_info={ 'auth_id", "label": 0}, {"snippet_id": 28395, "code": " random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes. Args: byte_str: The byte string to decode. allow_none: If true, then we will allow byte_str to", "label": 0}, {"snippet_id": 44060, "code": "() btn=self.browser.find_element_by_name('cancel') self.assertEqual(btn.get_attribute(\"href\"), list_url, \"User should go back to list view when clicking cancel\") self.browser.find_element_by_name('submit", "label": 0}, {"snippet_id": 76153, "code": ", language=language, version_slug=version_slug, ) return to def redirect_exact(self, path, language=None, version_slug=None): full_path=path if language and version_slug: full_path=self.get_full_path(path", "label": 1}, {"snippet_id": 15884, "code": " __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self) if not rv: return False user=auth_get_user_by_email(self.email", "label": 0}, {"snippet_id": 37910, "code": " DataDocument The parent DataDocument extra: integer How many empty forms should be created for new records can_delete: boolean whether a delete checkbox is included exclude: list which fields to leave out", "label": 0}, {"snippet_id": 66707, "code": "\"composite_unlock_entry\") password_unlock_entry.set_text(\"\") composite_unlock_entry.set_text(\"\") def show_unlock_failed_revealer(self): unlock_failed_box=self.builder.get_object(\"unlock_failed_box\") context", "label": 0}, {"snippet_id": 23259, "code": " or inspect.ismethod(obj) or is_cython(obj) def is_class_method(f): \"\"\"Returns whether the given method is a class_method.\"\"\" return hasattr(f, \"__self__\") and f.__self__ is not None def random_string():", "label": 0}, {"snippet_id": 33328, "code": ".register(WeightFractionType) admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin)", "label": 0}, {"snippet_id": 53534, "code": ".source_directory) +1:] location=stack_frame.name if location=='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error", "label": 0}, {"snippet_id": 43367, "code": " attribute') self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas", "label": 0}, {"snippet_id": 11688, "code": " _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ ", "label": 0}, {"snippet_id": 2213, "code": " must provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but", "label": 0}, {"snippet_id": 53909, "code": "\" Clear all user-data stored in this instance and reset it to its originally loaded state :return: The instance that was called for method chaining \"\"\" self.body=[] self.data=SharedCache() self.files=SharedCache", "label": 0}, {"snippet_id": 11633, "code": " dict \"\"\" user=request.user year_of_birth_options=[(unicode(year), unicode(year)) for year in UserProfile.VALID_YEARS] try: user_orders=get_user_orders(user) except: log.exception('Error fetching order", "label": 0}, {"snippet_id": 55337, "code": "\treturn os.lchown(self.path,uid,gid) \tdef link(self,link_name): \t\treturn os.link(self.path,link_name) \tdef listdir(self): \t\t \t\treturn os.listdir(self.path) \tdef lstat(self): \t\treturn os.lstat(self.path", "label": 0}, {"snippet_id": 20788, "code": "\" return self._redis_address @property def plasma_store_socket_name(self): \"\"\"Get the node's plasma store socket name.\"\"\" return self._plasma_store_socket_name @property def webui_url(self): \"\"\"Get the", "label": 0}, {"snippet_id": 3243, "code": " def get(self, request): \"\"\"Callback handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in", "label": 0}, {"snippet_id": 55274, "code": " os.access(self.path,mode) \tdef chdir(self): \t\treturn os.chdir(self.path) \t\t \t@staticmethod \tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags", "label": 0}, {"snippet_id": 64439, "code": " token=token, nonce=nonce, timestamp=timestamp): try: user=current_app.central_userdb.get_user_by_eppn(eppn) if user.locked_identity.count > 0: current_app.logger.error('Not new user{} tried to log in using", "label": 0}, {"snippet_id": 33391, "code": "(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard def setUp(self): self.client=Client() def test_dtxsid_pucs_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\"", "label": 0}, {"snippet_id": 60026, "code": "} except sqlite3.OperationalError as e: if(e.args[0]=='no such module: VirtualSpatialIndex'): raise click.UsageError( \"It looks like you're trying to load a SpatiaLite\" \" database without first loading", "label": 0}, {"snippet_id": 68327, "code": "=self.object_list.filter(datetime__gte=from_date, datetime__lte=to_date).count() data.append(count) return data def thirty_day_labels(self): labels=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST", "label": 0}, {"snippet_id": 17880, "code": ".request.form) if flask.request.method=='POST' and form.validate(): user=flask.g.user new_email=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !", "label": 0}, {"snippet_id": 66498, "code": " password=None, keyfile=keyfile_path) self.open_database_page() self.logging_manager.log_debug(\"Database successfully opened with keyfile\") except(OSError, IndexError): self.show_unlock_failed_revealer(", "label": 0}, {"snippet_id": 9245, "code": " ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, 'tags': message.tags } for message in messages.get_messages(request) if 'account-activation' in", "label": 0}, {"snippet_id": 50829, "code": " Input should be a string or a list containing only strings or similar lists. Output will be a list containing only strings. \"\"\" if isinstance(arglist,(str, unicode)): return[arglist] return sum([flatten_string_list", "label": 0}, {"snippet_id": 39772, "code": ", i.e.(Text/CPCat), and the DataDocument ''' if hasattr(self, 'cat_code'): return self.cat_code !=odict['cat_code'] else: return self.prod_name !=odict['prod_name'] def get_next_or_prev(models, item, direction", "label": 0}, {"snippet_id": 60614, "code": ".query_string) return response.redirect(path) @app.exception(Exception) def on_exception(request, exception): title=None help=None if isinstance(exception, NotFound): status=404 info={} message=exception.args[0", "label": 0}, {"snippet_id": 48473, "code": ") if form.is_valid(): upc=form['upc'].value() title=form['title'].value() product, created=Product.objects.get_or_create(upc=upc, data_source_id=ds_id) if created: product.title=title product.manufacturer", "label": 0}, {"snippet_id": 41679, "code": "].all_matched(),( 'UploadForm should not be included in the page!')) self.assertIsInstance(response.context['extract_form'], ExtractionScriptForm, ('ExtractForm should be included in the page!')) self.objects", "label": 0}, {"snippet_id": 28794, "code": " command: A sysctl command with an argument, for example, [\"sysctl\", \"hw.memsize\"]. Returns: The parsed output. \"\"\" out=subprocess.check_output(command) result=out.split(b\" \")[1] try: return int(result", "label": 0}, {"snippet_id": 70965, "code": "{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif %} {% for f in file_list", "label": 0}, {"snippet_id": 18431, "code": " regex fails to match the submitted value. \tThen checks if the submitted username and email already exist in database by calling check_if_exists \tif check_if_exists returns not None then renders signup", "label": 1}, {"snippet_id": 22017, "code": "-worker processes should be redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt", "label": 0}, {"snippet_id": 74564, "code": " redirect_to_home(request): return HttpResponsePermanentRedirect(reverse('home')) def home(request): return render(request, 'etd_app/home.html') def overview(request): return render(request, 'etd_app/overview", "label": 0}, {"snippet_id": 39755, "code": " odict): ''' Used in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument", "label": 0}, {"snippet_id": 40304, "code": " qa_button_text(self): if self.get_qa_status(): return \"QA Complete\" elif self.qa_begun: return \"Continue QA\" else: return \"Begin QA\" def get_qa_status(self): \"\"\" Compare the derived percent checked against the", "label": 0}, {"snippet_id": 63807, "code": " eduid_common.authn.cache import IdentityCache, StateCache from eduid_webapp.authn.acs_registry import get_action, schedule_action from eduid_webapp.authn.helpers import verify_auth_token from eduid_webapp", "label": 1}, {"snippet_id": 4261, "code": " response4=self.client.get(response3[\"location\"]) self.assertContains(response4, 'id=\"dashboard\"') self.client.logout() response5=self.client.post(path,{ 'username': 'nonexistant', 'password': 'password", "label": 0}, {"snippet_id": 34121, "code": "='save']\"))) raw_cas_input=self.browser.find_element_by_xpath( '//*[@id=\"id_rawchem-1-raw_cas\"]') raw_cas_input.send_keys('test raw cas') unit_type_select=Select(self.browser.find_element_by_xpath( '//", "label": 0}, {"snippet_id": 70833, "code": ", part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index", "label": 1}, {"snippet_id": 1194, "code": "(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def", "label": 0}, {"snippet_id": 1603, "code": ", ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.')", "label": 0}, {"snippet_id": 76945, "code": " image. \"\"\" try: im_dest.paste(im_src, box) except ValueError, e: logger.error(\"Failed to paste:%s\", str(e.args[0])) logger.debug(\"Size %s vs %s\", str(im_src.size), str(im_dest.size)) logger.debug(\"Mode ", "label": 0}, {"snippet_id": 23146, "code": " instances, the local scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client", "label": 0}, {"snippet_id": 37016, "code": "(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"PUCs.csv\"' bubbles=request.GET.get('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description", "label": 1}, {"snippet_id": 49218, "code": " edits Invoked by changing the document type in the data document detail view or the extracted text QA page template ''' referer=request.POST.get('referer', 'data_document') doc=get_object_or_404(DataDocument", "label": 0}, {"snippet_id": 29297, "code": " for Fun and for Profit\" PyBay 2016. \"\"\" for name in find_modules('benwaonline.blueprints'): mod=import_string(name) if hasattr(mod, 'bp'): app.register_blueprint(mod.bp) return None def register_cli(app", "label": 0}, {"snippet_id": 52824, "code": ".request.data.get('message') serializer=self.get_serializer(data=request.data) self.perform_create(serializer) return Response(serializer.data, status=status.HTTP_201_CREATED) except Room.DoesNotExist: return", "label": 0}, {"snippet_id": 81984, "code": " class URLDeleteView(LoginRequiredMixin, DeleteView): model=JustURL template_name='url-delete-view.html' success_url=reverse_lazy('home-view') class CustomShortURLCreateView(View): def get(self, request,", "label": 0}, {"snippet_id": 24661, "code": "(\"Parse Redis server for the \" \"log monitor to connect \" \"to.\")) parser.add_argument( \"--redis-address\", required=True, type=str, help=\"The address to use for Redis.\") parser.add_argument( \"--node-ip-address", "label": 1}, {"snippet_id": 70144, "code": "={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='", "label": 0}, {"snippet_id": 76211, "code": "=None): for ending in['/', '/index.html']: if path.endswith(ending): log.debug('Redirecting %s', self) path=path[1:] to=re.sub(ending +'$', '.html', path) return self.get_full_path( filename=to, language", "label": 0}, {"snippet_id": 11516, "code": ")) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query string params. See FinishAuthView.js for details on the", "label": 0}, {"snippet_id": 41283, "code": "(et.pk, child_model.objects.get(pk=ex_child.pk).extracted_text.pk, 'The ExtractedChemical object with the returned child pk should have the correct extracted_text parent') def test_extractedsubclasses(self", "label": 0}, {"snippet_id": 6997, "code": "') return redirect(url_for('auth.login')) else: return redirect(url_for('main.index')) return render_template('auth/reset_password.html', form=form) @auth.route('/change-email', methods=['GET', 'POST']", "label": 0}, {"snippet_id": 37499, "code": ") class ProductPUCForm(BasePUCForm): class Meta: model=ProductToPUC fields=['puc'] class HabitsPUCForm(BasePUCForm): class Meta: model=ExtractedHabitsAndPracticesToPUC fields=['puc'] class BulkProductPUCForm", "label": 0}, {"snippet_id": 24023, "code": ".lock=lock self._wrapper_cache={} def __getattr__(self, attr): orig_attr=getattr(self.orig_obj, attr) if not callable(orig_attr): return orig_attr else: wrapper=self._wrapper_cache.get(attr) if wrapper", "label": 0}, {"snippet_id": 26730, "code": "._kill_process_type( process_type, check_alive=check_alive, allow_graceful=allow_graceful) def live_processes(self): \"\"\"Return a list of the live processes. Returns: A list of the live processes. \"\"\" result=[] for", "label": 0}, {"snippet_id": 70887, "code": " statobj.st_size): return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb')", "label": 0}, {"snippet_id": 37026, "code": "('bubbles') writer=csv.writer(response) cols=['gen_cat','prod_fam','prod_type','description','PUC_type','num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects", "label": 1}, {"snippet_id": 81037, "code": ".state='open' subscription_update_counter -=1 self._update_counter_subscription(event, partner, subscription_update_counter) else: _logger.info('Found existing registration, no seats available') else: if", "label": 0}, {"snippet_id": 10485, "code": " openedx.core.djangoapps.user_api.accounts.api import request_password_change from openedx.core.djangoapps.user_api.api import( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from", "label": 0}, {"snippet_id": 38273, "code": ") @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,)) def get_assumed_tags(self): '''Queryset of used to filter which PUCs a Product can have ''' qs=PUCToTag.objects", "label": 0}, {"snippet_id": 60897, "code": " host_status): \"\"\"Creates a remote component monitoring job. :param pid: Process id on the remote machine :type pid: int :param comp_name: Name of the monitored component :type comp_name: str :param hostname", "label": 0}, {"snippet_id": 57479, "code": ") if request.method=='POST': form=TransactionPayForm(request.POST, instance=transaction) valid=form.is_valid() if form.data['cancel_button']=='True': transaction.delete() return redirect('index') if valid", "label": 0}, {"snippet_id": 45239, "code": " document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at", "label": 0}, {"snippet_id": 35641, "code": "/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip() if q > '': p=(Product.objects .filter( Q(title__icontains=q) | Q(brand_name__icontains=q", "label": 0}, {"snippet_id": 80217, "code": ".addMenu('Console') self.clear_log_area_action=console_menu.addAction('Clear Log') self.open_idle_action=console_menu.addAction('Open Python Shell...') self.restart_action=console_menu.addAction('Restart", "label": 0}, {"snippet_id": 57726, "code": " somewhere, haven't decided yet Return list of steps to be done \"\"\" return[ onboarding.STEP_1, onboarding.STEP_2, onboarding.STEP_3, onboarding.STEP_4, onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7,", "label": 0}, {"snippet_id": 79456, "code": " _get_admin_users_from_organasition(datarequest_dict): users=set([user['id'] for user in datarequest_dict['organization']['users'] if user.get('capacity')=='admin']) return users @tk.chained_action def", "label": 0}, {"snippet_id": 46619, "code": ".objects.filter(data_source=datasource).count() +1 default_name='{}{}'.format(datasource.title, group_key) header='Create New Data Group For Data Source \"' +str(datasource) +'\"' initial_values={'downloaded_by", "label": 0}, {"snippet_id": 30089, "code": "\"\" return{ 'id': self.id, 'name': self.name, 'description': self.description, 'processed': self.processed, 'takeaway': self.takeaway, } engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args", "label": 0}, {"snippet_id": 61507, "code": ".utils import timezone from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain if TYPE_CHECKING: from directory.models import DirectoryEntryQuerySet def pshtt_data_to_result", "label": 1}, {"snippet_id": 22196, "code": " redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers=None, local_mode=False, driver_mode=None,", "label": 0}, {"snippet_id": 42224, "code": " self.assertIn(span, response, 'Check should be present if matched.') def test_detail_table_headers(self): pk=self.objects.dg.pk response=self.client.get(f'/datagroup/{pk}/').content.decode('utf8') self", "label": 0}, {"snippet_id": 54455, "code": " tweets_search(query): access_token='487593326-yu9WIClcUgs9vBWJGGgW4QC9pKedHMdm3NhhNoxe' access_token_secret='fMcsDcqTtbeM73qB7Cxo7dGKhZT9byGh7i5lKjOVscQzP' consumer_key='yd6lDwm3Ra9j7djyXHmrg' consumer_secret", "label": 0}, {"snippet_id": 15769, "code": " 'html': render_template('run_form.html', form=run_form) }), 400 @app.route('/run/form/add/<field>', methods=['POST']) def view_run_add(field): run_form=get_run_form() run_form[field].append_entry() commands", "label": 0}, {"snippet_id": 24205, "code": ".redis_client.pubsub() import_pubsub_client.subscribe(\"__keyspace@0__:Exports\") num_imported=0 with self.worker.lock: export_keys=self.redis_client.lrange(\"Exports\", 0, -1) for key in export_keys: num_imported +=1", "label": 1}, {"snippet_id": 6107, "code": ", 'oidc_error']): return None id_token=self.get_cookie_id_token() if id_token is None: return self.redirect_to_auth_server(request.url) if self.time() >=id_token['exp']: try: credentials=self.credentials_store", "label": 0}, {"snippet_id": 21353, "code": " will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true. 2. The process had been", "label": 0}, {"snippet_id": 77406, "code": "\"projection\"] server_layer_def[\"db_type\"]=server_vars[\"dbType\"] layer=WmsLayer.Make(target_url, server_layer_def) layers_by_name[layer.name]=layer logger.debug(\"Found server layer: %s\", layer.name) logger.debug(", "label": 0}, {"snippet_id": 22165, "code": " can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str): JSON configuration for overriding RayConfig defaults. For testing purposes ONLY. \"\"\"", "label": 0}, {"snippet_id": 65891, "code": ".parent_widget)==page_num: self.opened_databases.remove(db) self.container.remove_page(page_num) self.update_tab_bar_visibility() def on_cancel_button_clicked(self, widget): self.override_dialog.destroy(", "label": 0}, {"snippet_id": 1442, "code": " newpath) if os.path.isdir(fullpath): if show_indexes: return directory_index(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"", "label": 1}, {"snippet_id": 54512, "code": "==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response=response.content, status=200, mimetype=\"application/json\" ) return resp else: return jsonify(error", "label": 0}, {"snippet_id": 13482, "code": ").query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return", "label": 0}, {"snippet_id": 34718, "code": "(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False) ) dds_wf_n=DSSToxLookup.objects.filter(sid__in=dtxs).filter(curated_chemical__in=wf_ecs).\\ annotate(dds_wf_n=Count('curated_chemical__extracted_text_id", "label": 0}, {"snippet_id": 2714, "code": " OIDCAuthenticationRequestView(View): \"\"\"OIDC client authentication HTTP endpoint\"\"\" http_method_names=['get'] def __init__(self, *args, **kwargs): super(OIDCAuthenticationRequestView, self).__init__(*args,", "label": 0}, {"snippet_id": 18042, "code": ".send_email(email_msg) def send_password_reset_email(user): ''' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format", "label": 0}, {"snippet_id": 44191, "code": " to list view when clicking cancel\") dg=DataGroup.objects.first() ds_detail_url=f'{self.live_server_url}/datasource/{dg.data_source.pk}' self.browser.get(ds_detail_url) self.browser.find_elements_by_xpath", "label": 0}, {"snippet_id": 49880, "code": "'social' in session): return redirect('/login?return_url=saveAs') if 'currentFile' in session: return saveFile(session['currentFile']) if 'diagram' in request.referrer: return saveAs(True) return saveAs", "label": 0}, {"snippet_id": 38087, "code": " default='UN', choices=KIND_CHOICES) gen_cat=models.CharField(max_length=50, blank=False) prod_fam=models.CharField(max_length=50, blank=True, default='') prod_type=models.CharField(max_length=100, blank", "label": 0}, {"snippet_id": 46035, "code": " : len(docs) -len(prod_link), 'msg' : '', } if request.method=='POST' and 'upload' in request.POST: matched_files=[f for d in docs for f in request.FILES.getlist('multifiles') if f.name==d.filename] if", "label": 0}, {"snippet_id": 23327, "code": " generated in a deterministic manner, then we will need to make some changes here. Returns: A random byte string of length ray_constants.ID_SIZE. \"\"\" numpy_state=np.random.get_state() np.random.seed(None)", "label": 0}, {"snippet_id": 27848, "code": " a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self.extra_data=extra_data if extra_data is not None else{} def set_attribute(self, key, value): \"\"\"Add a key-value pair", "label": 0}, {"snippet_id": 3228, "code": "'OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS', 60 * 15) self.request.session['oidc_id_token_expiration']=time.time() +expiration_interval return HttpResponseRedirect(self.success_url) def get(self, request): \"\"\"Callback handler for OIDC", "label": 0}, {"snippet_id": 81157, "code": "([('subscription_type', '=', 'cf_montly'), ('subscription_partner', '=', partner.id)]) bc_monthly=http.request.env['fit.subscription'].sudo().search([('subscription_type', '=', 'bc_montly'), ('subscription_partner", "label": 0}, {"snippet_id": 74339, "code": "(**form_kwargs) def _render_access_form(self): self.object=self.report self.template_name=self.access_template_name context=self.get_context_data(form=self._get_access_form()) return self.render_to_response", "label": 0}, {"snippet_id": 22140, "code": "(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling config file. include_java(bool)", "label": 0}, {"snippet_id": 36006, "code": " description=models.TextField(null=False, blank=False) last_edited_by=models.ForeignKey('auth.User', on_delete=models.CASCADE, default=1) products=models.ManyToManyField('Product', through='ProductToPUC", "label": 0}, {"snippet_id": 9616, "code": "('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url='' if getattr", "label": 0}, {"snippet_id": 64770, "code": " >=1: print(repr(e), file=sys.stderr) dock_points(deductions, points, 'unable to execute function') return deductions for i, test_case_obj in enumerate(test_case_objs): try: result=eval(test_case_obj, instr_globals", "label": 1}, {"snippet_id": 7872, "code": " configuration_helpers.get_value( 'ALLOW_PUBLIC_ACCOUNT_CREATION', settings.FEATURES.get('ALLOW_PUBLIC_ACCOUNT_CREATION', True)) }, 'login_redirect_url': redirect_to, 'responsive': True, 'allow_iframing'", "label": 0}, {"snippet_id": 80960, "code": ", **post): event_id=int(event_id) event_is_participating=event_is_participating event=http.request.env['event.event'].sudo().browse(event_id) subscription_update_counter=0 partner=http.request.env.user", "label": 0}, {"snippet_id": 9927, "code": " request(Request): The original request. mode(str): Either \"login\" or \"register\" Returns: Response or None \"\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register", "label": 0}, {"snippet_id": 63984, "code": " locate the user authenticated by the IdP') user=authenticate(current_app, session_info) if user is None: current_app.logger.error('Could not find the user identified by the IdP') raise Forbidden(\"Access not", "label": 0}, {"snippet_id": 49639, "code": "/pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\") def editor(filename=\"\"):", "label": 0}, {"snippet_id": 12186, "code": " settings.FEATURES['ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER'] ), } context=update_context_for_enterprise(request, context) return render_to_response('student_account/login_and_register.html', context", "label": 0}, {"snippet_id": 75160, "code": " information section below.') return HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate", "label": 0}, {"snippet_id": 43986, "code": " password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestIntegration(StaticLiveServerTestCase): def setUp(self): self.objects=load_model_objects() if", "label": 1}, {"snippet_id": 66687, "code": ".database_filepath)) keepassgtk.config_manager.save_config() self.unlock_database_stack_box.destroy() UnlockedDatabase(self.window, self.parent_widget, self.database_manager) def clear_input_fields(self", "label": 0}, {"snippet_id": 55478, "code": ".path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path) \tdef utime(self,times): \t\treturn os.utime(self.path,times) \tdef walk(self,topdown=True, onerror=None, followlinks=False): \t\treturn os.walk", "label": 0}, {"snippet_id": 31569, "code": " url(r'^project/new/', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/$', project, name='project'), url(r'^project/(?P<proj_id>[0-9]+)/clone/?$', project_clone, name='project_clone'), url", "label": 0}, {"snippet_id": 73792, "code": "-created' def change_positions_sort_method(request, sort_by): if request.POST.get(\"sort-created\"): return '-created' elif request.POST.get(\"sort-closed\"): return '-date_closed' elif request.POST.get(\"sort", "label": 0}, {"snippet_id": 61136, "code": " component.\"\"\" def __init__(self, comp_name): \"\"\"Initializes the crash event assigning the component name :param comp_name: Name of the crashed component :type comp_name: str \"\"\" self.comp_name=comp_name", "label": 0}, {"snippet_id": 46401, "code": "' product=Product.objects.create( title=new_prod_title, upc=f'stub_{stub}', data_source_id=doc.data_group.data_source_id ) ProductDocument.objects.create(product=product, document=doc) stub +=1 context", "label": 0}, {"snippet_id": 19034, "code": " topredir !=\"user\": infos=exts_pool.get_extension_infos(topredir) nextlocation=infos[\"topredirection_url\"] else: nextlocation=reverse(\"core:user_index\") else: nextlocation=reverse(\"core:dashboard\") return", "label": 1}, {"snippet_id": 13029, "code": " successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/finish_auth/?course_id=course-v1:blah&enrollment_action", "label": 0}, {"snippet_id": 72608, "code": "().objects.create_user( request.POST['email'].lower(), password=request.POST['password1'], email=request.POST['email'].lower()) user.first_name=request.POST['email'].split('.')[0].title() user.last_name", "label": 0}, {"snippet_id": 48630, "code": " flat=True)) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) prod2pucs=(ProductToPUC.objects.filter(puc=puc). values_list('product_id', flat=True)) products=Product.objects.filter(id__in", "label": 0}, {"snippet_id": 5616, "code": "}) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale", "label": 0}, {"snippet_id": 80579, "code": " self.exit(self.EXIT_CODE_RESTART) @handled_slot(bool) def set_wavelength_dialog(self, checked): target_wavelength, success=QInputDialog.getDouble(self.window, title='Set Wavelength', label='Wavelength(nm)", "label": 0}, {"snippet_id": 37694, "code": ": fields=ExtractedHHDocForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num'] class DocumentTypeForm(forms.ModelForm): class Meta: model=DataDocument fields=['document_type'] def __init__(self, *args", "label": 0}, {"snippet_id": 4657, "code": ") def test_login_next_param_header_injection(self): \"\"\"Test that we can't inject headers into response with next param.\"\"\" path=\"/%s/login/\" %(self.locale,) next_param=\"foo\\r\\nLocation: http://example.com", "label": 0}, {"snippet_id": 58058, "code": " \"first\", \"students_number\": 2, \"course_title\": \"Test Course\", \"lesson_title\": \"Test Lesson\", \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email", "label": 1}, {"snippet_id": 70307, "code": " show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root'", "label": 0}, {"snippet_id": 84433, "code": " context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def revert_to_revision(request, title, group_slug=None, group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES,", "label": 0}, {"snippet_id": 39684, "code": " qa_group=self.qa_group, qa_checked=False), self, 'next') if extextnext: nextid=extextnext.pk if extextnext==self: nextid=0 return nextid def get_qa_index_path(self): \"\"\" The type of data group to which the", "label": 0}, {"snippet_id": 21385, "code": ".PROCESS_TYPE_REDIS_SERVER: assert len(process_infos)==1 for process_info in process_infos: process=process_info.process if process.poll() is not None: if check_alive: raise Exception(\"Attempting to kill a process", "label": 0}, {"snippet_id": 76754, "code": " fill w/ BGCOLOR and made opaque. \"\"\" logger.debug(\"Processing the transparency for tile\") if not tile: return tile if tile.getbands()==(\"P\",): rgba_tile=Image.new(\"RGBA\", tile.size) rgba_tile.paste(tile", "label": 0}, {"snippet_id": 54378, "code": " \"\"\" @app.route('/json/politicians/all') def all_politicians(): pols=Politician.all() politicians=[] for pol in pols: tokens=pol.name.title().split(' ') politician={ 'value': pol.name.title(), 'tokens'", "label": 0}, {"snippet_id": 55224, "code": " isinstance(other,FSPath): \t\t\treturn os.path.samefile(self.path,other.path) \t\telse: \t\t\treturn os.path.samefile(self.path,other) \tdef split(self): \t\thead,tail=os.path.split(self.path) \t\treturn(FSPath(head)", "label": 0}, {"snippet_id": 2192, "code": " static files below a given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'", "label": 0}, {"snippet_id": 69028, "code": "']) def remove_chp(): \"\"\" Ensure CHP is not running \"\"\" if os.path.exists(\"/etc/systemd/system/configurable-http-proxy.service\"): if systemd.check_service_active('configurable-http-proxy.service'): try", "label": 0}, {"snippet_id": 26297, "code": ".start_raylet() if self._ray_params.include_log_monitor: self.start_log_monitor() if self._ray_params.include_webui: self.start_ui() def _kill_process_type(self, process_type, allow_graceful=False, check_alive", "label": 0}, {"snippet_id": 76352, "code": ", zoom_level) logger.info(\"Done tile calcs\") tiles_array=_FetchTiles(rect_of_tiles, zoom_level, layer_properties) im_whole_tiles_extent=geom.Pair(rect_of_tiles.Width() * _TILE_PIXEL_SIZE, rect_of_tiles", "label": 0}, {"snippet_id": 83719, "code": " not self.is_mine(request): user=request.user user.message_set.create( message=self.message_template % self.created_at) def is_mine(self, request): return self.user_ip==get_real_ip(request) def has_read_perm", "label": 0}, {"snippet_id": 7647, "code": ".enterprise_support.api import enterprise_customer_for_request from student.helpers import destroy_oauth_tokens, get_next_url_for_login_page from student.models import UserProfile from student.views import", "label": 0}, {"snippet_id": 16910, "code": " data.append(current) else: games=_seed_games(t, r) for i, g in enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name'", "label": 0}, {"snippet_id": 45030, "code": " import render from django.db.models import Count, F, DateField, DateTimeField from django.db.models.functions import Trunc from django.contrib.auth.decorators import login_required from dashboard.models", "label": 0}, {"snippet_id": 48788, "code": ") else: p={} full_p_count=0 form=BulkProductPUCForm(request.POST or None) if form.is_valid(): puc=PUC.objects.get(id=form['puc'].value()) product_ids=form['id_pks'].value().split(\",\") for id in product_ids", "label": 0}, {"snippet_id": 23434, "code": " ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier.decode() return hex_identifier def", "label": 0}, {"snippet_id": 27670, "code": " event_type, extra_data=extra_data) class Profiler(object): \"\"\"A class that holds the profiling states. Attributes: worker: the worker to profile. events: the buffer of events. lock: the lock to protect", "label": 0}, {"snippet_id": 47103, "code": "'): doc=get_object_or_404(DataDocument, pk=pk,) script=Script.objects.get(title='Manual(dummy)', script_type='EX') extext, created=ExtractedText.objects.get_or_create(data_document=doc, extraction_script", "label": 0}, {"snippet_id": 80488, "code": ".insertPlainText(message) def error_dialog(self): stack=list(traceback.format_exception(*sys.exc_info())) desired_width=min(max([len(line) for line in stack]), 185) description=stack.pop() print(description", "label": 0}, {"snippet_id": 69342, "code": "' miniconda_installer_md5=\"a946ea1d0c4a642ddf0c3a26a18bb16d\" if not conda.check_miniconda_version(USER_ENV_PREFIX, miniconda_version): logger.info('Downloading & setting up user environment...') with conda", "label": 0}, {"snippet_id": 29162, "code": " patch_request_class, configure_uploads from werkzeug.utils import find_modules, import_string from config import app_config from benwaonline.database import db from benwaonline.oauth import oauth from", "label": 0}, {"snippet_id": 5272, "code": ".client.post(path,{ 'username': 'nonexistant', 'password': 'password', }) self.assertContains(response5, 'id=\"id_username\"') def test_login_next_param(self): \"\"\"Test that user is redirected properly after", "label": 0}, {"snippet_id": 80309, "code": " self.lock_thin_etalon_action.setCheckable(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action.setCheckable(True) self.lock_fast_piezo_action=lock_menu", "label": 0}, {"snippet_id": 38503, "code": " to the file system, the document is considered \"matched\" to that source file. ``extracted`` When the content of a data document has been extracted by manual data entry or by an extraction script, a new", "label": 0}, {"snippet_id": 43115, "code": "/extractedtext/254781/\"> Begin QA'.encode(), response.content) elps=ExtractedListPresence.objects.filter( extracted_text__data_document_id=254781) self.assertEqual(elps.filter(qa_flag=True).count(), 0)", "label": 0}, {"snippet_id": 17040, "code": " GamePlayersFormset=formset_factory(GamePlayersForm, extra=expected_games -games.count(), formset=BaseGamePlayersFormset) formset=GamePlayersFormset(request.POST or None, the_round=r, initial=data) if formset.is_valid(", "label": 0}, {"snippet_id": 24464, "code": ".node_ip_address=node_ip_address self.redis_client=redis.StrictRedis( host=redis_ip_address, port=redis_port, password=redis_password) self.log_files={} self.log_file_handles={} self.files_to_ignore=set", "label": 1}, {"snippet_id": 12902, "code": "(order['number']), 'lines': order['lines'], } user_orders.append(order_data) return user_orders @login_required @require_http_methods(['GET']) def account_settings(request): \"\"\"Render the current user's", "label": 0}, {"snippet_id": 45915, "code": " get_object_or_404 from django.http import HttpResponse from django.core.paginator import Paginator from dashboard.models import * from dashboard.forms import(DataGroupForm, ExtractionScriptForm, CleanCompDataForm,", "label": 1}, {"snippet_id": 19115, "code": " calls to register_custom_serializer that happen under the hood on workers. Attributes: worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\"", "label": 1}, {"snippet_id": 40099, "code": " try: return apps.get_model('dashboard.ExtractedChemical').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedChemical').DoesNotExist: try: return apps.get_model('dashboard", "label": 0}, {"snippet_id": 54617, "code": "\traise \t\tself.assignments=[] \t\tfor homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self", "label": 0}, {"snippet_id": 48745, "code": " @login_required() def bulk_assign_puc_to_product(request, template_name=('product_curation/' 'bulk_product_puc.html')): max_products_returned=50 q=safestring.mark_safe(request.GET.get('q', '')).lstrip() if q > '':", "label": 0}, {"snippet_id": 54207, "code": " p in politicians: politician=p if politician !=None: politician.search_count=politician.search_count +1 politician.put() return render_template('politician.html', q=query, politician=politician) else:", "label": 1}, {"snippet_id": 26329, "code": " then we will kill all of the Redis servers. If the process was started in valgrind, then we will raise an exception if the process has a non-zero exit code. Args: process_type: The type of the process", "label": 0}, {"snippet_id": 21707, "code": "] for process_type, process_infos in self.all_processes.items(): for process_info in process_infos: if process_info.process.poll() is None: result.append((process_type, process_info.process)) return result", "label": 0}, {"snippet_id": 58717, "code": " django.core.urlresolvers import reverse from django.http.response import Http404 from django.template import loader, Context from accounts.models import Instructor from chat.models import EnrollUnitCode", "label": 0}, {"snippet_id": 41659, "code": "'ExtractForm should not be included in the page!')) self.objects.doc.matched=True self.objects.doc.save() response=self.client.get(f'/datagroup/{pk}/') self.assertTrue(response.context['datagroup'].all_matched(", "label": 0}, {"snippet_id": 82572, "code": " component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob, self).__init__(pid, comp_name) def run_check(self): \"\"\"Runs a check if the pid", "label": 0}, {"snippet_id": 11184, "code": " enabled.provider_id, \"name\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id", "label": 0}, {"snippet_id": 9407, "code": ", a custom wrapper around Django's password reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST", "label": 0}, {"snippet_id": 36024, "code": " extracted_habits_and_practices=models.ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank", "label": 0}, {"snippet_id": 28316, "code": " random_string(): \"\"\"Generate a random string to use as an ID. Note that users may seed numpy, which could cause this function to generate duplicate IDs. Therefore, we need to seed numpy ourselves, but", "label": 0}, {"snippet_id": 66819, "code": " request.GET.get('keyword'): domain=request.GET.get('keyword') return HttpResponseRedirect(domain) context=self.get_context_data() return self.render_to_response(context) class DetailView(TemplateView)", "label": 1}, {"snippet_id": 28140, "code": " If this is None, then the message will be pushed to all drivers. \"\"\" if driver_id is None: driver_id=ray.DriverID.nil() worker.raylet_client.push_error(driver_id, error_type, message, time.time()) def", "label": 0}, {"snippet_id": 59948, "code": " the database and return a dictionary of table metadata \" if self._inspect: return self._inspect self._inspect={} for filename in self.files: if filename is MEMORY: self._inspect[\":memory:\"]={ \"hash\": ", "label": 0}, {"snippet_id": 11532, "code": " any special query string params. See FinishAuthView.js for details on the query string params. e.g. auto-enroll the user in a course, set email opt-in preference. This view just displays a \"Please wait", "label": 0}, {"snippet_id": 80805, "code": "(checked) @handled_slot(bool) def toggle_thin_etalon_lock(self, checked): print(f\"{'Locking' if checked else 'Unlocking'} thin etalon.\") self.lock_thin_etalon_action.setChecked(not checked) self.matisse", "label": 0}, {"snippet_id": 67941, "code": " import BOM_UTF8 from pytz import timezone from django.http import JsonResponse from urllib.parse import urlparse from http.client import HTTPConnection class IndexView(PaginationMixin, ListView): model", "label": 0}, {"snippet_id": 4680, "code": "(next_param),{ 'username': self.test_username, 'password': self.test_password, }) self.assertTrue('login/foo%0D%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location", "label": 1}, {"snippet_id": 82795, "code": " host_lock): \"\"\"Create host monitoring job. :param pid: Process id of the ssh connection :type pid: int :param hostname: Name of the host connected to :type hostname: str :param host_status: Status of the", "label": 0}, {"snippet_id": 7204, "code": "\n'''Copyright 2018 Province of British Columbia Licensed under the Apache License, Version 2.0(the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the", "label": 0}, {"snippet_id": 72974, "code": ".user.positions.all().order_by(sort_by), 'sort': request.session['position_sort'] }) @login_required(login_url='/login/', redirect_field_name=None) def position(request, position): return render(request,", "label": 0}, {"snippet_id": 29111, "code": "\"\"Create a thread-safe proxy which locks every method call for the given client. Args: client: the client object to be guarded. lock: the lock object that will be used to lock client's methods. If None", "label": 0}, {"snippet_id": 9888, "code": " session info. Returns: dict: Keys are 'login', 'registration', and 'password_reset'; values are the JSON-serialized form descriptions. \"\"\" return{ 'password_reset': get_password_reset_form().to_json(),", "label": 0}, {"snippet_id": 75010, "code": "}) def _user_keywords_changed(thesis, user_request_keywords): db_keywords_info={} for kw in thesis.keywords.all(): db_keywords_info[str(kw.id)]=kw unsorted_user_keywords=[] for kw in user_request_keywords", "label": 0}, {"snippet_id": 68386, "code": " return JsonResponse({'url': exurl}) def expand(url): o=urlparse(url) con=HTTPSConnection(o.netloc) con.request('HEAD', o.path) res=con.getresponse() if res.getheader('location')==None: return url return", "label": 0}, {"snippet_id": 5300, "code": "/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\"", "label": 0}, {"snippet_id": 4396, "code": "(response, 'You must agree to the licensing terms') params['policy_optin']='on' response=self.client.post(path, params) self.assertEqual(response.status_code, 302) def test_profile_image_directories(self):", "label": 0}, {"snippet_id": 16259, "code": ".append(current) if round_num: formset=PlayerRoundFormset(request.POST or None, tournament=t, round_num=int(round_num), initial=data) else: formset=PlayerRoundFormset(request.POST or None, tournament=t,", "label": 0}, {"snippet_id": 16393, "code": ".roundplayer_set.count() % 7)==0: return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, r.number()))) return HttpResponseRedirect(reverse('get_seven', args=(tournament_id, r.number()))", "label": 1}, {"snippet_id": 29518, "code": "=='POST' and form.validate_on_submit(): username=''.join([form.adj.data, form.benwa.data, form.pos.data]) name_exists=User.query.filter(User.username==username).all() if name_exists: flash('Username %s", "label": 1}, {"snippet_id": 28651, "code": "\") assert default_num_cpus is not None resources[\"CPU\"]=(default_num_cpus if runtime_num_cpus is None else runtime_num_cpus) if runtime_num_gpus is not None: resources[\"GPU\"]=runtime_num_gpus elif default_num_gpus", "label": 0}, {"snippet_id": 55378, "code": "\t\tif mode is None: \t\t\treturn os.mkdir(self.path) \t\telse: \t\t\treturn os.mkdir(self.path,mode) \tdef makedirs(self,mode=None): \t\tif mode is None: \t\t\treturn os.makedirs(self.path) \t\telse: \t\t\treturn os.makedirs", "label": 0}, {"snippet_id": 78607, "code": " is not allowed a NotAuthorized exception will be risen. In addition, you should note that the parameters will be checked and an exception(ValidationError) will be risen if some of these parameters are", "label": 0}, {"snippet_id": 32548, "code": " if result: return result else: raise ValueError(f'expected token to be{ttype}, instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins):", "label": 0}, {"snippet_id": 57886, "code": "': setting_name, 'data': ONBOARDING_SETTINGS_DEFAULT[setting_name]}) return ONBOARDING_SETTINGS_DEFAULT[setting_name] return onboarding_setting['data'] def get_onboarding_status_with_settings(user_id):", "label": 0}, {"snippet_id": 48713, "code": " msg=f'The \"{tag.name}\" Attribute was assigned to{len(product_ids)} Product(s).' if assumed_tags: msg +=(' Along with the assumed tags: ' f'{\" | \".join(x.name for x in assumed_tags)}') products={} return", "label": 0}, {"snippet_id": 47398, "code": ".cleaned_data['priority'] datasource.priority=priority datasource.save() datagroup_list=DataGroup.objects.filter(data_source=pk) context= {'object': datasource, 'datagroup_list': datagroup_list, 'form':", "label": 0}, {"snippet_id": 49821, "code": ": email=session['social'] file=request.files['file'] filename=\"\" if file and allowed_file(file.filename): filename=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email", "label": 0}, {"snippet_id": 60157, "code": ".version_note return{ \"python\":{ \"version\": \".\".join(map(str, sys.version_info[:3])), \"full\": sys.version }, \"datasette\": datasette_version, \"sqlite\":{ \"version\": sqlite_version, \"fts_versions\": fts_versions", "label": 0}, {"snippet_id": 31713, "code": "=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8') assert '<a class=\"button\" href=\"/elections/results\">' in request.content.decode('utf-8') request", "label": 1}, {"snippet_id": 43268, "code": "('specialP@55word') object.browser.find_element_by_class_name('btn').click() class TestEditsWithSeedData(StaticLiveServerTestCase): fixtures=fixtures_standard def setUp(self): if settings.TEST_BROWSER=", "label": 1}, {"snippet_id": 31261, "code": ".messages', 'django.contrib.staticfiles', 'social_django', 'gitmate_config', 'djcelery', 'rest_framework', 'rest_framework_docs', 'corsheaders', 'db_mutex', 'coala_online', ] +['gitmate_'+plugin for plugin in", "label": 0}, {"snippet_id": 77886, "code": "]: if user['name'].startswith(username_prefix) and user['capacity']=='admin': print('-Setting capacity for user %s to \"editor\" in organisation %s' %(user['name'], org['name'])) user['capacity']='editor", "label": 0}, {"snippet_id": 46461, "code": " list(set(dg.get_clean_comp_data_fieldnames())- set(table.fieldnames)) if missing: context['clean_comp_data_form'].collapsed=False context['msg']=('The following columns need to be added or ' f'renamed", "label": 0}, {"snippet_id": 23148, "code": " the local scheduler client is not available, e.g., because the error happens in Python before the driver or worker has connected to the backend processes. Args: redis_client: The redis client to use. error_type", "label": 0}, {"snippet_id": 15866, "code": "] return render_template('run_history.html', history=history) class RegisterForm(FlaskForm): email=StringField('Email',[validators.required()]) password=PasswordField('Password',[validators.required()]", "label": 0}, {"snippet_id": 50690, "code": "()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile=None): if logfile is None: logfile=open(os.devnull, \"w\") path=os.path.abspath(path", "label": 0}, {"snippet_id": 39363, "code": "'ingredient_rank', 'rawchem_ptr'] def get_datadocument_url(self): return self.extracted_text.data_document.get_absolute_url() @property def data_document(self): return self.extracted_text.data_document def", "label": 0}, {"snippet_id": 9444, "code": "=BadRequestRateLimiter() if limiter.is_rate_limit_exceeded(request): AUDIT_LOG.warning(\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated", "label": 0}, {"snippet_id": 44972, "code": " test_edit_hnp_detail(self): self.objects.exscript.title='Manual(dummy)' self.objects.exscript.save() self.client.login(username='Karyn', password='specialP@55word') pk=self.objects.doc.pk response=self", "label": 0}, {"snippet_id": 4961, "code": " logging in.\"\"\" path=\"/%s/login/?next=/%s/profile/edit/\" %(self.locale, self.locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http", "label": 0}, {"snippet_id": 25548, "code": " parser.add_argument( \"--logging-format\", required=False, type=str, default=ray_constants.LOGGER_FORMAT, help=ray_constants.LOGGER_FORMAT_HELP) args=parser.parse_args() setup_logger(args.logging_level, args", "label": 0}, {"snippet_id": 3277, "code": "'state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match the OIDC callback state' raise SuspiciousOperation(msg) self.user=auth.authenticate(**kwargs) if self.user and self.user", "label": 0}, {"snippet_id": 5515, "code": " print response self.assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for", "label": 0}, {"snippet_id": 43089, "code": " test_cpcat_qa(self): response=self.client.get(f'/qa/chemicalpresence/') self.assertIn( f\"/qa/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content) response=self.client", "label": 0}, {"snippet_id": 58725, "code": " django.template import loader, Context from accounts.models import Instructor from chat.models import EnrollUnitCode from core.common import onboarding from core.common.utils import update_onboarding_step", "label": 0}, {"snippet_id": 32991, "code": ": list_display=('__str__', 'tag_list','num_products') form=PUCAdminForm def get_changeform_initial_data(self, request): get_data=super(PUCAdmin, self).get_changeform_initial_data(request) get_data['last_edited_by", "label": 0}, {"snippet_id": 65716, "code": "//run/terminal/KeepassGtk/database.kdbx\") new_database=Gio.File.new_for_path( self.filechooser_creation_dialog.get_filename()) stock_database.copy(new_database, Gio.FileCopyFlags.OVERWRITE) self.filechooser_creation_dialog", "label": 0}, {"snippet_id": 6762, "code": " render_template('auth/register.html', form=form) @auth.route('/confirm/<token>') @login_required def confirm(token): if current_user.confirmed: return redirect(url_for('main.index')) if current_user.confirm(token)", "label": 0}, {"snippet_id": 54077, "code": " knowyourgov import app from knowyourgov.models import Politician from knowyourgov.scripts import insert_politicians_in_db from knowyourgov.scripts.scraping import scrapers \"\"\"Home page \"\"\" @app.route('", "label": 0}, {"snippet_id": 65966, "code": " button): for db in self.databases_to_save: db.database_manager.save_database() self.quit_dialog.destroy() self.application.quit() def on_application_quit(self, window, event): unsaved_databases_list=[] for", "label": 0}, {"snippet_id": 24746, "code": " import absolute_import from __future__ import division from __future__ import print_function import argparse import logging import os import time import traceback import redis import ray from ray.autoscaler", "label": 0}, {"snippet_id": 22216, "code": "=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None, worker_path=None, huge_pages=False, include_webui=None, logging_level=logging.INFO", "label": 1}, {"snippet_id": 63606, "code": " logout_response(session_id) ), 'RelayState': 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location", "label": 1}, {"snippet_id": 33334, "code": ".register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec) admin.site.register(PUCToTag,", "label": 0}, {"snippet_id": 15610, "code": ") sub_form.input_source_initial.data=command.get('input_source_initial', '') sub_form.input_source_final.choices=get_inputs_choices() sub_form.input_source_final.data=command.get('input_source_final', ", "label": 0}, {"snippet_id": 23928, "code": ". worker: the worker used to send warning message. \"\"\" length=len(pickled) if length <=ray_constants.PICKLE_OBJECT_WARNING_SIZE: return warning_message=( \"Warning: The{}{} has size{} when pickled. \" \"It", "label": 0}, {"snippet_id": 28126, "code": "(str): The message that will be printed in the background on the driver. driver_id: The ID of the driver to push the error message to. If this is None, then the message will be pushed to all drivers. \"\"", "label": 0}, {"snippet_id": 74809, "code": "') if request.method=='POST': post_data=request.POST.copy() post_data['netid']=request.user.username person_form=PersonForm(post_data, instance=candidate.person) candidate_form=CandidateForm(post_data,", "label": 0}, {"snippet_id": 78946, "code": ", datarequest_dict], title=u'Data Request Unassigned Email') return datarequest_dict @tk.chained_action def close_datarequest(original_action, context, data_dict): \"\"\" Action to close a data request. Access", "label": 1}, {"snippet_id": 36352, "code": ") self.assertEqual(found.func, views.qa_extractionscript_index) def test_percent_extracted_text_doc(self): response=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count", "label": 0}, {"snippet_id": 28165, "code": " error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function should be used. However, in some instances, the", "label": 0}, {"snippet_id": 35701, "code": " id in product_ids: product=Product.objects.get(id=id) ProductToPUC.objects.create(puc=puc, product=product, classification_method='MB', puc_assigned_usr=request.user) form['puc'].label='PUC to Assign to", "label": 0}, {"snippet_id": 65679, "code": " cancel_button=builder.get_object(\"cancel_button\") override_button=builder.get_object(\"override_button\") cancel_button.connect(\"clicked\", self.on_cancel_button_clicked) override_button.connect(\"clicked\", self", "label": 0}, {"snippet_id": 36425, "code": ")) +',' +str(p.product_count)) response=self.client.get('/dl_pucs/') self.assertEqual(response.status_code, 200) csv_lines=response.content.decode('ascii').split('\\r\\n') self.assertEqual(csv_lines[0],(", "label": 1}, {"snippet_id": 72563, "code": "=='POST': register_form=ScreenDoorUserCreationForm(request.POST) if register_form.is_valid(): user=create_account(request) send_user_email(request, user) return render(request, 'registration/register.html", "label": 0}, {"snippet_id": 78586, "code": ".chained_action def create_datarequest(original_action, context, data_dict): \"\"\" Action to create a new data request. The function checks the access rights of the user before creating the data request.", "label": 0}, {"snippet_id": 52054, "code": "\"user_id\") user_object=q.get_user_object(user_id) ut_objects=user_object.userteams for userteam in ut_objects: if userteam.is_member: team_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name,", "label": 0}, {"snippet_id": 82188, "code": " ListView): queryset=Category.objects.all().order_by('name') template_name='category-list-view.html' paginate_by=15 def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) quantity", "label": 0}, {"snippet_id": 53177, "code": " None) data={'current_rent': 'TEXT'} self.client.post(update_url, data) self.assertEqual(self.view.get_object().current_rent, None) data={'how_soon': 8} self.client.post(update_url, data) self.assertEqual", "label": 0}, {"snippet_id": 27835, "code": " extra_data: Additional information to log. \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler self.event_type=event_type self", "label": 0}, {"snippet_id": 81801, "code": "'input_url'] category=form.cleaned_data['category'] created=JustURL.objects.create(input_url=url, category=category) short_url=create_short_url(created) created.short_url=f'{request.get_host()}/{short_url", "label": 0}, {"snippet_id": 47893, "code": "\"csv_file\"] if not csv_file.name.endswith('.csv'): messages.error(request,'File is not CSV type') return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) if csv_file.multiple_chunks(): messages.error", "label": 0}, {"snippet_id": 56333, "code": "=ORMExperience.objects.create(title=title, description=description, share_id=share_id, author=orm_person) experience.picture=pic experience.save() return self def given_a_public_domain(self, public_domain)", "label": 0}, {"snippet_id": 7343, "code": "; you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing", "label": 0}, {"snippet_id": 83955, "code": "(request.user, group, is_member) else: allow_read=allow_write=True if not allow_read: return HttpResponseForbidden() is_observing=False redirected_from=None try: article=article_qs.get(**article_args) if", "label": 0}, {"snippet_id": 71130, "code": " webob import Request class EngineAuthResponse(Response): def _save_session(self): session=self.request.session if self.request.session_hash==session.hash(): return session session.put() if session.user_id", "label": 0}, {"snippet_id": 44404, "code": " self.browser.get(dd_url) try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-weight_fraction_type\"]') except NoSuchElementException: self.fail(\"Absence of weight_fraction_type element raised", "label": 0}, {"snippet_id": 46194, "code": " row in enumerate(csv.DictReader(info)): d=docs.get(pk=int(row['data_document_id'])) d.raw_category=row.pop('raw_category') wft=request.POST.get('weight_fraction_type', None) if wft: w='weight_fraction_type", "label": 0}, {"snippet_id": 31057, "code": "'takeaway']: editgrudge.takeaway=request.form['takeaway'] session.add(editgrudge) session.commit() return redirect(url_for('showGrudge', grudget_id=grudget_id)) else: return render_template('editgrudge.html',", "label": 0}, {"snippet_id": 84745, "code": ".is_observing(article, request.user): notification.stop_observing(article, request.user) return redirect(article) def article_preview(request): \"\"\"This is a AJAX function that previews the body of the article", "label": 0}, {"snippet_id": 55793, "code": ") \t\treturn r \tdef readlines(self): \t\tf=open(self.path,\"rU\") \t\tr=f.readlines() \t\tf.close() \t\treturn r \tdef read_Lines(self):\t \t\twith open(self.path,\"rU\") as f: \t\t\tcount=0 \t\t\tfor l in f: \t\t\t\tcount +=1 \t\t", "label": 0}, {"snippet_id": 49255, "code": ") @login_required() def data_document_note(request, pk): doc=get_object_or_404(DataDocument, pk=pk) doc_note=request.POST['dd_note'] doc.note=doc_note doc.save() return redirect('data_document', pk=pk)", "label": 0}, {"snippet_id": 67582, "code": "(timedelta(hours=+9), 'JST')) today=today.replace(hour=0, minute=0, second=0, microsecond=0) for day in range(30)[::-1]: date=today -timedelta(days=day) label=date.strftime('%Y-%m-%d') labels.append(label)", "label": 0}, {"snippet_id": 11684, "code": "}, 'level_of_education':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options", "label": 0}, {"snippet_id": 68743, "code": ".run([ '/opt/tljh/user/bin/jupyter-serverextension', 'list', '--sys-prefix' ], stderr=subprocess.PIPE) extensions=[ 'jupyterlab 0.35.3', 'nbgitpuller 0.6.1', 'nteract_on_jupyter 1.9.12', 'nbresuse ' ] for", "label": 1}, {"snippet_id": 27230, "code": ", resources=None, object_store_memory=None, redis_max_memory=None, redis_port=None, redis_shard_ports=None, object_manager_port=None, node_manager_port=None, node_ip_address=None, object_id_seed=None, num_workers", "label": 0}, {"snippet_id": 4302, "code": ".locale) response=self.client.post(path,{ 'username': self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"]", "label": 0}, {"snippet_id": 19192, "code": "[\"type\"]==\"subscribe\": continue assert msg[\"data\"]==b\"rpush\" num_imports=self.redis_client.llen(\"Exports\") assert num_imports >=num_imported for i in range(num_imported, num_imports): num_imported +=1 key", "label": 0}, {"snippet_id": 71541, "code": ".assertTrue(s_count==1) def test_laod_session_session_id_no_user_id(self): s=models.Session.create() s_count=models.Session.query().count() self.assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth", "label": 0}, {"snippet_id": 64640, "code": "'next', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'object', 'oct', 'ord', 'OSError', 'OverflowError', '__package__', 'PendingDeprecationWarning', 'PermissionError', 'pow', ", "label": 0}, {"snippet_id": 35946, "code": ".utils.translation import ugettext_lazy as _ from.common_info import CommonInfo from.extracted_habits_and_practices_to_puc import( ExtractedHabitsAndPracticesToPUC) from.extracted_habits_and_practices import", "label": 0}, {"snippet_id": 16537, "code": "(tournament, the_round): \"\"\" Return a(sitters, two_gamers) 2-tuple\"\"\" tourney_players=tournament.tournamentplayer_set.all() round_players=the_round.roundplayer_set.all() rps=[] sitters=set() two_gamers", "label": 0}, {"snippet_id": 2375, "code": "{% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content", "label": 0}, {"snippet_id": 75391, "code": " status): if 'sort_by' in request.GET: candidates=Candidate.get_candidates_by_status(status, sort_param=request.GET['sort_by']) else: candidates=Candidate.get_candidates_by_status(status) return render", "label": 0}, {"snippet_id": 42474, "code": "(self.objects.extext.qa_group) self.assertEqual(len(QAGroup.objects.all()),0) pk=self.objects.extext.extraction_script.pk response=self.client.get(f'/qa/extractionscript/{pk}/') self.assertEqual(response", "label": 0}, {"snippet_id": 41076, "code": "/link_product_form/167497/', data=data) self.assertRedirects(response,'/datadocument/167497/') response=self.client.get(response.url) self.assertContains(response, 'New Product') def test_product_title_duplication", "label": 0}, {"snippet_id": 19558, "code": "=os.errno.EMFILE: logger.warning( \"Warning: Ignoring{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found", "label": 1}, {"snippet_id": 39809, "code": "'item' is a part of. direction is 'next' or 'prev' ''' getit=False if direction=='prev': models=models.reverse() for m in models: if getit: return m if item==m: getit=True if getit: return models[0] return", "label": 0}, {"snippet_id": 45377, "code": " if when making the call to here from the index page we were to use ?bubbles=False it would also give us the filtered PUCs because the if expression is just checking whether that parameter is there. ''", "label": 0}, {"snippet_id": 59214, "code": " from sanic import Sanic, response from sanic.exceptions import InvalidUsage, NotFound from.views.base import( DatasetteError, ureg ) from.views.database import DatabaseDownload, DatabaseView from.views", "label": 0}, {"snippet_id": 48492, "code": ", data_source_id=ds_id) if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form", "label": 0}, {"snippet_id": 59160, "code": ", \"{}@{}\".format(invite_email, invite_domain) ) if res and res.string: my_invite=invite break else: raise Http404() if my_invite: return my_invite else: raise Http404() def __unicode__(self): return \"Code", "label": 0}, {"snippet_id": 46860, "code": " +\"/\" +str(datagroup.fs_id) +\".zip\") zf=zipfile.ZipFile(str(new_zip_path), 'w', zipfile.ZIP_DEFLATED) datagroup.zip_file=new_zip_name zf.close() datagroup.save() return redirect('data_group_detail', pk", "label": 0}, {"snippet_id": 39143, "code": "'raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name) return extract_fields +['cat_code", "label": 0}, {"snippet_id": 27058, "code": " redirected to files and false otherwise. num_redis_shards: The number of Redis shards to start in addition to the primary Redis shard. redis_max_clients: If provided, attempt to configure Redis with this", "label": 0}, {"snippet_id": 66355, "code": ") !=\"\": try: self.database_manager=DatabaseManager(self.database_filepath, password_unlock_entry.get_text()) self.open_database_page() self.logging_manager.log_debug(\"Opening of database was successfull", "label": 1}, {"snippet_id": 70727, "code": ".parse import unquote from django.utils.translation import ugettext as _, ugettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the", "label": 0}, {"snippet_id": 43845, "code": ") add_button=self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit-extracted-text\"]') add_button.click() cancel_button=wait.until( ec.element_to_be_clickable( (By.XPATH, \"//*[@id='extracted-text", "label": 0}, {"snippet_id": 34001, "code": ".find_element_by_xpath( '//*[@id=\"id_rawchem-0-raw_cas\"]') raw_cas_input.send_keys('changed cas') self.browser.find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual", "label": 0}, {"snippet_id": 12449, "code": ".get_value('PLATFORM_NAME', settings.PLATFORM_NAME) if enterprise_customer.branding_configuration.logo: enterprise_logo_url=enterprise_customer.branding_configuration.logo.url else: enterprise_logo_url=", "label": 0}, {"snippet_id": 73547, "code": " token=EmailAuthenticateToken() token.user=user token.create_key() token.save() return \"http://localhost:8000/confirm?key=\" +str(token.key) def clear_get_data(request): request.GET._mutable=True request", "label": 0}, {"snippet_id": 52590, "code": " the team {team_name} on SamePage. Accept to help complete projects for {team_name}.\"\"\".format(sender=sender, team_name=team_object.name) flash_message=\"Emails sent to\\n\" for i in xrange(len(emails_lst", "label": 0}, {"snippet_id": 78322, "code": " ckan.model as model import ckan.plugins as plugins import ckanext.datarequests.db as db import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import", "label": 0}, {"snippet_id": 70872, "code": "') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'), statobj.st_mtime, statobj.st_size): return HttpResponseNotModified() content_type", "label": 0}, {"snippet_id": 55283, "code": "\tdef getcwd(self): \t\treturn FSPath(os.getcwd()) \t \tdef chflags(self,flags): \t\treturn os.chflags(self.path,flags) \tdef chroot(self): \t\treturn os.chroot(self.path) \tdef chmod(self,mode): \t\treturn os.chmod", "label": 0}, {"snippet_id": 20870, "code": " file{} exists!\".format(socket_path)) def start_redis(self): \"\"\"Start the Redis servers.\"\"\" assert self._redis_address is None (self._redis_address, redis_shards, process_infos)=ray.services.start_redis", "label": 0}, {"snippet_id": 84158, "code": "(article is None) and(group_slug is not None)): form.group=group new_article, changeset=form.save() return redirect(new_article) elif request.method=='GET': user_ip=get_real_ip(request) initial={'user_ip':", "label": 0}, {"snippet_id": 58188, "code": ".STEP_8: 0}, 75.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 1, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding.STEP_7: 1, onboarding.STEP_8: 1}, 100.0", "label": 1}, {"snippet_id": 63279, "code": " test_no_cookie(self): with self.app.test_client() as c: resp=c.get('/') self.assertEqual(resp.status_code, 302) self.assertTrue(resp.location.startswith(self.app.config['TOKEN_SERVICE_URL'])) def test_cookie", "label": 0}, {"snippet_id": 65439, "code": ", \"last-opened-db\")) else: self.logging_manager.log_debug( \"No / Not valid last opened database entry found.\") builder=Gtk.Builder() builder.add_from_resource( \"/run/terminal/KeepassGtk/main_window.ui\"", "label": 0}, {"snippet_id": 6912, "code": ".generate_reset_token() send_email(user.email, 'Reset Your Password', 'auth/email/reset_password', user=user, token=token, next=request.args.get('next')) flash('An email with instructions for resetting your password", "label": 0}, {"snippet_id": 35014, "code": " 'rid']) for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem.rid if rawchem", "label": 1}, {"snippet_id": 51338, "code": "._context.env) class SshSession(object): def __init__(self, host, username): import paramiko self.ssh=paramiko.SSHClient() self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) self.ssh.connect(host,", "label": 0}, {"snippet_id": 76117, "code": " cut_path=re.sub('^%s' % self.from_url, '', path) to=self.get_full_path( filename=cut_path, language=language, version_slug=version_slug, ) return to def redirect_page(self, path, language=None, version_slug", "label": 0}, {"snippet_id": 17891, "code": "=form.email.data.strip() new_password=form.new_password.data if new_email: if form.current_password.data !=user.password_hash: flask.flash(flask.Markup( '<strong>Email change failed!</strong> Incorrect", "label": 0}, {"snippet_id": 50407, "code": "=\"default\" ALL_STEPS=\"all\" ILLEGAL_STEP_NAMES=[DEFAULT_STEPS, ALL_STEPS] class BaseUserLock(object): def __init__(self, filename): self.filename=filename self.locktime=None def __enter__(self): dirname", "label": 0}, {"snippet_id": 53680, "code": ") def flush_all(self) -> str: \"\"\" :return: \"\"\" self.bytes_buffer.seek(0) contents=self.bytes_buffer.read() self.bytes_buffer.truncate(0) self.bytes_buffer.seek(0) if contents is None: return '' return contents", "label": 1}, {"snippet_id": 12725, "code": ", request.session) } def _local_server_get(url, session): \"\"\"Simulate a server-server GET request for an in-process API. Arguments: url(str): The URL of the request(excluding the protocol and domain) session", "label": 0}, {"snippet_id": 62281, "code": " session, request, redirect, current_app from eduid_common.authn.loa import get_loa from eduid_webapp.authn.acs_registry import acs_action @acs_action('login-action') def login_action(session_info, user", "label": 0}, {"snippet_id": 13204, "code": ": state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS, redirect_url=reverse('account_settings'),", "label": 0}, {"snippet_id": 1028, "code": "\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request", "label": 0}, {"snippet_id": 54228, "code": " return render_template('politician_notfound.html', q=query) \"\"\" ** Error Handlers ** 404, 500 and other errors \"\"\" \"\"\" 404 -Page \"\"\" @app.errorhandler(404) def page_not_found(error): return render_template", "label": 0}, {"snippet_id": 13743, "code": "\"Password reset rate limit exceeded\") return HttpResponseForbidden() user=request.user email=user.email if user.is_authenticated() else request.POST.get('email') if email: try: request_password_change(email", "label": 0}, {"snippet_id": 8513, "code": "\"\" if mode==\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the", "label": 0}, {"snippet_id": 40848, "code": "(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' % orm_prod_puc_count) assigned_prods", "label": 0}, {"snippet_id": 11027, "code": " logistration view that depicts Enterprise-related information. \"\"\" enterprise_customer=enterprise_customer_for_request(request) if not enterprise_customer: return{} platform_name=configuration_helpers", "label": 0}, {"snippet_id": 42500, "code": ".extext.extraction_script) ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get(f'/qa/extractedtext/{ext.pk}/') def test_qa_approval_redirect(self)", "label": 0}, {"snippet_id": 216, "code": " response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date(statobj.st_mtime) if stat.S_ISREG(statobj.st_mode): response[\"Content-Length\"]=statobj.st_size", "label": 0}, {"snippet_id": 79612, "code": ") tk.enqueue_job(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Created Email') return datarequest_dict @tk.chained_action def update_datarequest(original_action", "label": 1}, {"snippet_id": 29852, "code": " add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content.data,\\ created=datetime.utcnow(), user=current_user, post=post)", "label": 0}, {"snippet_id": 68287, "code": " None: query=query.filter(Q(text__icontains=keyword)).order_by('-datetime') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')) today=today.replace(hour", "label": 0}, {"snippet_id": 59353, "code": " facet \"\"\".strip()), ConfigOption(\"allow_facet\", True, \"\"\" Allow users to specify columns to facet using ?_facet=parameter \"\"\".strip()), ConfigOption(\"allow_download\", True, \"\"\" Allow users to download", "label": 0}, {"snippet_id": 62786, "code": ".add_outstanding_query(came_from) cookie=self.dump_session_cookie(session_id) saml_response=auth_response(session_id, eppn) with self.app.test_request_context('/saml2-acs', method='POST', headers={'Cookie': cookie}, data=", "label": 0}, {"snippet_id": 84061, "code": " group_slug_field=None, group_qs=None, article_qs=ALL_ARTICLES, ArticleClass=Article, ArticleFormClass=ArticleForm, template_name='edit.html', template_dir='wiki', extra_context=None, check_membership=False", "label": 0}, {"snippet_id": 53917, "code": ":return: The instance that was called for method chaining \"\"\" self.body=[] self.data=SharedCache() self.files=SharedCache() self._last_update_time=time.time() return self def append_body(self, dom: str): \"", "label": 0}, {"snippet_id": 79803, "code": "(_send_mail,[users, 'new_datarequest_organisation', datarequest_dict], title=u'Data Request Assigned Email') org_dict={ 'organization': _get_organization(unassigned_organisation_id) } users=_get_admin_users_from_organasition", "label": 1}, {"snippet_id": 79530, "code": ":type title: string :param description: A brief description for your data request :type description: string :param organiztion_id: The ID of the organization you want to asign the data request(optional)", "label": 0}, {"snippet_id": 12459, "code": ".branding_configuration.logo.url else: enterprise_logo_url='' if getattr(enterprise_customer.branding_configuration, 'welcome_message', None): branded_welcome_template=enterprise_customer.branding_configuration", "label": 0}, {"snippet_id": 65879, "code": " widget): page_num=self.container.page_num(widget) for db in self.opened_databases: if db.window.container.page_num(db.parent_widget)==page_num: self.opened_databases.remove(db) self.container.remove_page", "label": 0}, {"snippet_id": 10087, "code": "/account_settings.html', account_settings_context(request)) @login_required @require_http_methods(['GET']) def finish_auth(request): \"\"\" Following logistration(1st or 3rd party), handle any special query", "label": 0}, {"snippet_id": 37435, "code": "(forms.ModelForm): required_css_class='required' class Meta: model=Product fields=['title', 'manufacturer', 'brand_name', 'size', 'color', 'model_number', 'short_description', 'long_description'] class", "label": 0}, {"snippet_id": 16583, "code": "(rp.tournamentplayer()) elif rp.game_count==2: two_gamers.add(rp.tournamentplayer()) else: assert 0, 'Unexpected game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers", "label": 0}, {"snippet_id": 8590, "code": "=datetime.strptime(order['date_placed'], \"%Y-%m-%dT%H:%M:%SZ\") order_data={ 'number': order['number'], 'price': order['total_excl_tax'], 'order_date': strftime_localized(date_placed, 'SHORT_DATE'), 'receipt_url", "label": 0}, {"snippet_id": 55834, "code": "\") \t\tr=f.writelines(o) \t\tf.close() \t\treturn r \tdef open(self,mode): \t\treturn open(self.path,mode) \t\t class Link(FSItem): \tdef __init__(self,path): \t\tsuper(Link,self).__init__(path) \t\tassert(self.islink", "label": 0}, {"snippet_id": 70190, "code": " This is the value of the If-Modified-Since header. If this is None, I'll just return True. mtime This is the modification time of the item we're talking about. size This is the size of the item we're talking", "label": 0}, {"snippet_id": 40845, "code": ".fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count, 'The page should show %s Products linked to PUCs' %", "label": 0}, {"snippet_id": 77223, "code": " return tile_args def _GetServerVars(target_url): \"\"\"Fetches the server definitions from the Maps server. Args: target_url: The url of the server with target path. Returns: The server definitions for specified", "label": 0}, {"snippet_id": 77865, "code": "----------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name'].startswith", "label": 0}, {"snippet_id": 81610, "code": " inverse_name='subscription_partner', string='Inschrijving', store='True') fit_subscription_count=fields.Integer(' def _compute_total_scubscriptions(self): counter=0 for subscription in self.fit_subscriptions", "label": 0}, {"snippet_id": 28470, "code": " binary_to_object_id(binary_object_id): return ray.ObjectID(binary_object_id) def binary_to_hex(identifier): hex_identifier=binascii.hexlify(identifier) if sys.version_info >=(3, 0): hex_identifier=hex_identifier", "label": 0}, {"snippet_id": 43254, "code": " username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word')", "label": 0}, {"snippet_id": 76191, "code": "'$rest')[0] if full_path.startswith(match): cut_path=re.sub('^%s' % match, self.to_url, full_path) return cut_path def redirect_sphinx_html(self, path, language=None, version_slug=None): for ending in['/',", "label": 0}, {"snippet_id": 66944, "code": "']=count context['tws']=tweet.objects.filter(Q(text__icontains=domain)).order_by('-datetime') count=context['tws'].count() if count > 0: context['tws_count']=count context['exs']=Exploit.objects.filter", "label": 0}, {"snippet_id": 66399, "code": " keyfile\", self.window, Gtk.FileChooserAction.OPEN,(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)) filter_text=Gtk.FileFilter() filter_text.set_name(\"Keyfile\") filter_text", "label": 0}, {"snippet_id": 13703, "code": " reset confirmation view. Args: request(HttpRequest) Returns: HttpResponse: 200 if the email was sent successfully HttpResponse: 400 if there is no 'email' POST parameter HttpResponse: 403 if the client", "label": 0}, {"snippet_id": 17859, "code": "'/profile', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and", "label": 0}, {"snippet_id": 62184, "code": "-Permitted-Cross-Domain-Policies\", \"master-only\", ) def validate_pragma(page): return validate_security_header(page, \"Pragma\", \"no-cache\") def validate_expires(page): return validate_security_header(page,", "label": 0}, {"snippet_id": 52033, "code": " flash(\"\"\"Welcome to SamePage. Hover over different areas on our pages for tutorial tips. You can turn the tutorial off and on from your Dashboard.\"\"\") if session.get(\"is_logged_in\") is True: teams_list=[]", "label": 0}, {"snippet_id": 2670, "code": " if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request", "label": 0}, {"snippet_id": 66214, "code": ".child_set_property(password_unlock_stack_page, \"icon-name\", \"input-dialpad-symbolic\") stack.add_titled(keyfile_unlock_stack_page, \"keyfile_unlock\", \"Keyfile\") stack.child_set_property(keyfile_unlock_stack_page, \"icon", "label": 0}, {"snippet_id": 56494, "code": " settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_profile_redirect(self, username): client=Client() self.response=client.get(reverse('profile-redirect', args=[username])) return self", "label": 0}, {"snippet_id": 36474, "code": ", response, 'Where is the DSS Tox Chemicals card???') response_html=html.fromstring(response) num_dss=int(response_html.xpath('//*[@name=\"dsstox\"]')[0].text) dss_table_count=DSSToxLookup.objects.count(", "label": 0}, {"snippet_id": 52485, "code": " project_object.updated } if project_object.user_id: results[\"pOwnerName\"]=project_object.user.displayname print results.keys return jsonify(results) @app.route(\"/save-update/<int:project_id>\", methods=[", "label": 0}, {"snippet_id": 36632, "code": " num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count +1, 'The page should show %s Products linked to PUCs' % str(orm_prod_puc_count ", "label": 0}, {"snippet_id": 82057, "code": "=JustURL.objects.create(input_url=url, short_url=f'{request.get_host()}/{short_url}', category=category) created.save() if request.user.is_superuser: return redirect(reverse('url-detail-view', kwargs={'pk", "label": 0}, {"snippet_id": 9014, "code": " from openedx.core.djangoapps.commerce.utils import ecommerce_api_client from openedx.core.djangoapps.external_auth.login_and_register import login as external_auth_login from openedx.core.djangoapps.external_auth", "label": 0}, {"snippet_id": 27421, "code": "(self, arg): if getattr(self, arg) is None: setattr(self, arg, kwargs[arg]) else: raise ValueError(\"Invalid RayParams parameter in\" \" update_if_absent: %s\" % arg) self._check_usage() def _check_usage(self", "label": 0}, {"snippet_id": 5094, "code": " 1001): p_id=get_partition_id(i) self.assertEqual(1, p_id) for i in range(1001, 2001): p_id=get_partition_id(i) self.assertEqual(2, p_id) for i in range(10001, 11001): p_id=get_partition_id(i) self.assertEqual", "label": 0}, {"snippet_id": 35480, "code": "', pk=p.pk) @login_required() def bulk_assign_tag_to_products(request): template_name='product_curation/bulk_product_tag.html' products={} msg='' puc_form=BulkPUCForm(request.POST or None) form=BulkProductTagForm", "label": 0}, {"snippet_id": 75570, "code": " email %s if there should be one.' % BDR_EMAIL) file_path=os.path.join(settings.MEDIA_ROOT, candidate.thesis.current_file_name) response=FileResponse(open(file_path, 'rb'), content_type='application/pdf", "label": 0}, {"snippet_id": 44790, "code": " def test_long_qa_notes(self): self.objects.extext.qa_edited=True note=QANotes.objects.create(extracted_text=self.objects.extext) self.assertEqual(note.qa_notes, None) note.qa_notes=\"A short QA note\" try", "label": 0}, {"snippet_id": 47981, "code": " * from dashboard.forms import HabitsPUCForm, create_detail_formset @login_required() def habitsandpractices(request, pk, template_name='data_group/habitsandpractices.html'): doc=get_object_or_404(DataDocument", "label": 0}, {"snippet_id": 4801, "code": ".test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self): \"\"\"Test that authenticated users", "label": 0}, {"snippet_id": 57795, "code": " if not onboarding_data or not onboarding_data.get(step): c_onboarding_status().update_one(find_crit,{'$set':{ step: True }}, upsert=True) ONBOARDING_STEPS_DEFAULT_TEMPLATE={ 'title': '', 'description':", "label": 0}, {"snippet_id": 34706, "code": "\\ values('sid','dds_n').order_by() wf_ecs=ExtractedChemical.objects.filter(dsstox__sid__in=dtxs).filter( Q(raw_max_comp__isnull=False) | Q(raw_min_comp__isnull=False) | Q(raw_central_comp__isnull=False", "label": 0}, {"snippet_id": 57597, "code": " loader, Context from core.common.mongo import c_onboarding_status, c_onboarding_settings from core.common import onboarding def send_email(context_data, from_email, to_email, template_subject, template_text", "label": 0}, {"snippet_id": 18483, "code": "(self): \t\tself.username=self.get_argument(\"username\").lower() \t\tself.email=self.get_argument(\"email\").lower() \t\tself.password=self.get_argument(\"psword\").lower() \t\tif(re.fullmatch('^(?=.{8,20}$)(?![_.])", "label": 0}, {"snippet_id": 1110, "code": "-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans", "label": 0}, {"snippet_id": 67226, "code": " from apps.exploit.models import Exploit class IndexView(TemplateView): template_name='ip/index.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['search_form", "label": 0}, {"snippet_id": 20603, "code": " new_plasma_store_log_file, new_raylet_log_file, new_webui_log_file, set_temp_root, try_to_create_directory) logger=logging.getLogger(__name__) class Node(object): \"\"\"An encapsulation of the Ray processes on a single node.", "label": 0}, {"snippet_id": 662, "code": "-Length\"]=statobj.st_size if encoding: response[\"Content-Encoding\"]=encoding return response DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=", "label": 0}, {"snippet_id": 13012, "code": ". Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent", "label": 0}, {"snippet_id": 80436, "code": "=StatusMonitor(self.matisse, self.status_monitor_queue) self.layout.addWidget(self.status_monitor) @handled_function def setup_matisse(self): try: self.matisse: Matisse=Matisse(device_id=sys.argv[1], wavemeter_port", "label": 0}, {"snippet_id": 55137, "code": " \tdef getctime(self): \t\treturn os.path.getctime(self.path) \tdef getsize(self): \t\treturn os.path.getsize(self.path) \tdef isabs(self): \t\treturn os.path.isabs(self.path) \tdef isfile(self): \t\treturn os.path", "label": 0}, {"snippet_id": 2449, "code": " 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath):", "label": 0}, {"snippet_id": 35250, "code": ") products=ds.source.exclude(id__in=(ProductToPUC.objects.values_list('product_id', flat=True))).order_by('-created_at') return render(request, template_name,{'datasource': ds, 'products': products}) @login_required", "label": 0}, {"snippet_id": 6188, "code": " @wraps(view_func) def decorated(*args, **kwargs): if g.oidc_id_token is None: return self.redirect_to_auth_server(request.url) return view_func(*args, **kwargs) return decorated check=require_login def", "label": 0}, {"snippet_id": 35273, "code": "/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get(", "label": 0}, {"snippet_id": 27450, "code": " \"CPU\" not in self.resources,( \"'CPU' should not be included in the resource dictionary. Use \" \"num_cpus instead.\") assert \"GPU\" not in self.resources,( \"'GPU' should not be included in the resource dictionary", "label": 0}, {"snippet_id": 44149, "code": ".browser.get(self.live_server_url) import time time.sleep(3) bubbles=self.browser.find_elements_by_class_name('bubble') self.assertEqual(num_pucs, len(bubbles),('There should be a circle' 'drawn for every", "label": 0}, {"snippet_id": 78165, "code": " notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to editor in their respective organisations \"\"\" summary", "label": 1}, {"snippet_id": 50713, "code": "=os.path.abspath(path) logfile.write('Deleting \"'+path+'\"... ') shutil.rmtree(path, ignore_errors=True) if os.path.isdir(path): logfile.write('\\nFailed.\\n') raise Exception('Failed to delete \"%s\"' % path", "label": 0}, {"snippet_id": 28044, "code": "(exception_message, task_exception=False): \"\"\"Improve the formatting of an exception thrown by a remote function. This method takes a traceback from an exception and makes it nicer by removing a few uninformative", "label": 0}, {"snippet_id": 48254, "code": "'tags'].widget.form_instance=self @login_required() def product_curation_index(request, template_name='product_curation/product_curation_index.html'): data_sources=DataSource.objects.annotate(uploaded=Count", "label": 1}, {"snippet_id": 22823, "code": ", value): \"\"\"Add a key-value pair to the extra_data dict. This can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value", "label": 0}, {"snippet_id": 28161, "code": " push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function should be", "label": 0}, {"snippet_id": 15878, "code": "()]) password=PasswordField('Password',[validators.required()]) def __init__(self, *args, **kwargs): FlaskForm.__init__(self, *args, **kwargs) self.user=None def validate(self): rv=FlaskForm.validate(self", "label": 0}, {"snippet_id": 69142, "code": ".path.join(STATE_DIR, 'traefik-api.secret') if not os.path.exists(proxy_secret_path): with open(proxy_secret_path, 'w') as f: f.write(secrets.token_hex(32)) traefik.ensure_traefik_config(STATE_DIR) unit_params", "label": 0}, {"snippet_id": 52072, "code": " userteam.team.name, \"desc\": userteam.team.desc} teams_list.append(team_dict) elif userteam.is_member is None: invite_dict={\"team_id\": userteam.team_id, \"name\": userteam.team.name, \"desc\": userteam.team", "label": 0}, {"snippet_id": 26071, "code": "._ray_params.redis_password) assert( ray_constants.PROCESS_TYPE_PLASMA_STORE not in self.all_processes) self.all_processes[ray_constants.PROCESS_TYPE_PLASMA_STORE]=[ process_info ] def start_raylet(self", "label": 0}, {"snippet_id": 9637, "code": " branded_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE', settings.ENTERPRISE_SPECIFIC_BRANDED_WELCOME_TEMPLATE ) branded_welcome_string=branded_welcome_template.format(", "label": 0}, {"snippet_id": 2028, "code": ", ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE) files=[] for f in os.listdir(fullpath): if not f.startswith('.')", "label": 0}, {"snippet_id": 37040, "code": "'num_prods'] writer.writerow(cols) pucs=PUC.objects.filter(kind='FO') if bubbles else PUC.objects.all() for puc in pucs: row=[ puc.gen_cat, puc.prod_fam, puc.prod_type, puc.description, puc.get_level(),", "label": 1}, {"snippet_id": 50661, "code": "=0: raise Exception(\"Got error code %s from subprocess!\" % exitcode) return eval(stdout.strip()) def default_platform(): if platform.system()=='Windows': return 'Windows-x86' if platform.system()=='Linux", "label": 0}, {"snippet_id": 6786, "code": ": flash('Your account is confirmed. Thank you!') else: flash('The confirmation link is invalid or has expired.') return redirect(url_for('main.index')) @auth.route('/confirm') @login_required def resend_confirmation", "label": 0}, {"snippet_id": 58260, "code": " ) def test_get_onboarding_setting(self, setting_name, value, _mock): self.assertEqual(get_onboarding_setting(setting_name), value) @skip @mock.patch('core.common.utils.get_onboarding_setting') @mock.patch", "label": 0}, {"snippet_id": 76969, "code": "%s\", str(im_src.mode), str(im_dest.mode)) raise def main(): map_url=(\"http://localhost/ca_maps/query?request=ImageryMaps&\" \"channel=1002&version=1&x=1&y=0&z=1\") im=_FetchMapTile(map_url) print im if __name__", "label": 0}, {"snippet_id": 42796, "code": "(extraction_script_id=pk).pk et=ExtractedText.objects.filter(extraction_script=pk).first() self.assertTrue(et.qa_group_id==group_pk) response=self.client.get(f'/qa/extractionscript/') self.assertIn( f\"'", "label": 0}, {"snippet_id": 16172, "code": " round_simple(request, tournament_id, round_num, template): \"\"\"Just render the specified template with the round\"\"\" t=get_visible_tournament_or_404(tournament_id, request.user) r=get_round_or_404(t, round_num", "label": 0}, {"snippet_id": 2659, "code": " handler for OIDC authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request':", "label": 0}, {"snippet_id": 11262, "code": "=( 'Thank you for joining{}. ' 'Just a couple steps before you start learning!' ).format( configuration_helpers.get_value('PLATFORM_NAME', settings.PLATFORM_NAME) ) context[\"registerFormSubmitButtonText", "label": 0}, {"snippet_id": 57829, "code": " ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.INVITE_SOMEBODY: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.PREVIEW_COURSELET: ONBOARDING_STEPS_DEFAULT_TEMPLATE, onboarding.NEXT_STEPS: ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 1}, {"snippet_id": 77646, "code": "\"1.0\" default_author_email=\"opendata@qld.gov.au\" default_update_frequency=\"annually\" default_size='1' resources=[] pkg=toolkit.get_action('package_show')(context,{ 'id': package_id }) if pkg['resources", "label": 0}, {"snippet_id": 44037, "code": "' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"//table[@id='sources']/tbody/tr\")) self.assertEqual(row_count, 25, 'Should be 25 datasources in the table') self.browser.find_element_by_xpath", "label": 0}, {"snippet_id": 63249, "code": " config.update({ 'TOKEN_SERVICE_URL': 'http://login', 'SAML2_SETTINGS_MODULE': saml_config, }) return config def load_app(self, config): \"\"\" Called from the parent class, so we can provide the appropriate", "label": 0}, {"snippet_id": 1972, "code": "\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if", "label": 0}, {"snippet_id": 79734, "code": ".ValidationError(tk._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.UPDATE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk", "label": 0}, {"snippet_id": 7038, "code": " send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming your new email ' 'address has been sent.') return", "label": 0}, {"snippet_id": 66585, "code": " filechooser_opening_dialog.close() file_path=filechooser_opening_dialog.get_filename() composite_unlock_select_button.set_label(ntpath.basename(file_path)) self.composite_keyfile_path=file_path elif response==Gtk.ResponseType", "label": 0}, {"snippet_id": 63610, "code": " 'testing-relay-state', }): response=self.app.dispatch_request() self.assertEqual(response.status, '302 FOUND') self.assertIn('testing-relay-state', response.location) def test_logout_service_startingSP_already_logout", "label": 1}, {"snippet_id": 35543, "code": "(id__in=prod2pucs) if request.method=='POST' and 'save' in request.POST: form=BulkProductTagForm(request.POST or None) form.fields['tag'].queryset=PUCTag.objects.filter(id__in=puc2tags) if form.is_valid", "label": 0}, {"snippet_id": 61322, "code": " threading.Thread class.\"\"\" def __init__(self, queue): \"\"\"Initializes the monitoring thread with its input queue. :param queue: Input queue the monitor retrieves its jobs from :type queue: Queue.Queue \"\"\"", "label": 0}, {"snippet_id": 83688, "code": " is None: message_template=('Possible edit conflict:' ' another user started editing this article at %s') self.message_template=message_template cache.set(title, self, WIKI_LOCK_DURATION * 60) def create_message", "label": 0}, {"snippet_id": 41944, "code": ".create(document=doc, product=p) response=self.client.get(f'/datagroup/{self.objects.dg.pk}/') self.assertEqual(response.context['bulk'], 0, 'Product linked to all DataDocuments, no bulk_create needed.", "label": 0}, {"snippet_id": 36858, "code": " datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=(Trunc('created_at', 'month', output_field=DateTimeField())", "label": 0}, {"snippet_id": 22136, "code": " for the Ray process. include_log_monitor(bool): If True, then start a log monitor to monitor the log files for all processes on this node and push their contents to Redis. autoscaling_config: path to autoscaling", "label": 0}, {"snippet_id": 14989, "code": " name_wo_braces=re.sub(r'[()]', '', name) attrs=name_wo_braces.split(',') (ts_name, ts_author, _, model_name), rest=attrs[:4], attrs[4:] ts['result_type']='Output time series' ts['ts_name']=ts_name ts['ts_author", "label": 0}, {"snippet_id": 45797, "code": "\"Houston, we have a problem.\") @login_required def extracted_text_edit(request, pk): doc=get_object_or_404(DataDocument, pk=pk) ParentForm, _=create_detail_formset(doc, extra=0, can_delete=False) model", "label": 1}, {"snippet_id": 43634, "code": " doc_id in[7, 5, 254781, 354783, ]: qa_url=self.live_server_url +f'/qa/extractedtext/{doc_id}/' self.browser.get(qa_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-toggle-edit\"]').click() raw_chem", "label": 1}, {"snippet_id": 36311, "code": " link to /qa/ should not appear in the public navbar') def test_logged_in_navbar(self): self.client.login(username='Karyn', password='specialP@55word') response=self.client.get('/').content.decode('utf8", "label": 0}, {"snippet_id": 16762, "code": "(t, round_num) if request.method=='POST': PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(request.POST, the_round=r) if formset.is_valid", "label": 0}, {"snippet_id": 54361, "code": ".wiki_link, 'search_count': pol.search_count } politicians.append(politician) return jsonify(politicians=politicians) \"\"\"Array of datums for politicians Format: JSON \"\"\" @app.route('/json/politicians/all') def", "label": 0}, {"snippet_id": 19563, "code": "{} because there are too \" \"many open files.\".format(log_filename)) elif e.errno==os.errno.ENOENT: logger.warning(\"Warning: The file{} was not \" \"found.\".format(log_filename)) else: raise e self.files_to_ignore", "label": 1}, {"snippet_id": 66480, "code": " widget): keyfile_unlock_select_button=self.builder.get_object(\"keyfile_unlock_select_button\") keyfile_path=keyfile_unlock_select_button.get_label() try: self.database_manager=DatabaseManager(self.database_filepath", "label": 0}, {"snippet_id": 54821, "code": "\t\tprint \"=\"*50 \t\t\t\tprint item \t\t\t\tprint \"=\"*50 \t\t\t\tanother_count_by_groups +=1 \t\t\t\tprint \"problem count is now: \"+str(another_count_by_groups) \t\t\t \tdef detect_cheating(self): \t\tself.prepare_for_processing", "label": 1}, {"snippet_id": 32556, "code": " instead got{self.token.ttype}') class Node: ''' A single node in the Abstract Syntax Tree. ''' def execute(self, builtins): ''' Execute the node. Args: builtins: A dict of builtin commands. ''' pass def", "label": 0}, {"snippet_id": 16925, "code": "=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp in g: gp=GamePlayer.objects.create(player=tp.player, game=new_game) if t.power_assignment==Tournament.PREFERENCES:", "label": 0}, {"snippet_id": 71412, "code": "(provider) resp=req.get_response(strategy_class(self.app, self._config)) if resp.request is None: resp.request=req if resp is None: resp=req.get_response(self.app) resp._save_session() return resp(environ", "label": 0}, {"snippet_id": 54800, "code": ".prepare_for_processing() \t\tanother_count_by_groups=0 \t\tfor key,value in self.problem_groups.items(): \t\t\tbook_edition,chapter,problem_number=key \t\t\tprint \"In book edition \"+str(book_edition)+\" on problem \"+problem_number", "label": 1}, {"snippet_id": 51204, "code": "*args, **kwargs): if self._context.options.verbose: argstring=[\", \".join([repr(arg) for arg in args])] kwargstring=[\", \".join([\"%s=%r\" %(k,v) for(k,v) in kwargs.items()])] print \"subprocess.check_call(%s)", "label": 0}, {"snippet_id": 20280, "code": ".gcs_utils.XRAY_HEARTBEAT_BATCH_CHANNEL: message_handler=self.xray_heartbeat_batch_handler elif channel==ray.gcs_utils.XRAY_DRIVER_CHANNEL: message_handler=self.xray_driver_removed_handler else: raise Exception", "label": 0}, {"snippet_id": 30154, "code": "']['client_id'] APPLICATION_NAME=\"Grudget Catalog\" engine=create_engine('sqlite:///grudgebucketwithusers.db', connect_args={'check_same_thread': False}) Base.metadata.bind=engine DBSession=sessionmaker", "label": 0}, {"snippet_id": 21564, "code": " was already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET, check_alive=check_alive) def kill_log_monitor(self, check_alive=True): \"\"\"Kill the log monitor. Args: check_alive(bool", "label": 0}, {"snippet_id": 18013, "code": "': activation_link, 'user': user } email_msg=email.EmailHolder( subject='Verify your{} account'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask.render_template('email/verify.txt', **tmpl_context", "label": 0}, {"snippet_id": 46291, "code": " e: context['ext_err'][i+1]=e.message_dict if context['ext_err']: [e[1].delete() for e in good_records] return render(request, template_name, context) if not context['ext_err']: for doc,text,record in good_records", "label": 0}, {"snippet_id": 53472, "code": " :return: \"\"\" cauldron_path=environ.paths.package() resources_path=environ.paths.resources() frames=list(traceback.extract_tb(sys.exc_info()[-1])).copy() def is_cauldron_code(test_filename: str) -> bool", "label": 0}, {"snippet_id": 58685, "code": " models from django.db.models.signals import post_save from django.db.utils import IntegrityError from django.dispatch import receiver from django.contrib.auth.models import User from django.contrib.sites", "label": 0}, {"snippet_id": 8025, "code": " UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address provided", "label": 0}, {"snippet_id": 52200, "code": " been updated!\") return redirect(\"/dashboard\") @app.route(\"/ignored-teams\", methods=[\"GET\"]) def display_ignored_teams(): \"\"\"PENDING PENDING PENDING\"\"\" return \"Pending my good lady\" @app.route(\"/view-team", "label": 0}, {"snippet_id": 37318, "code": ": model=DataSource fields=['priority'] def __init__(self, *args, **kwargs): super(PriorityForm, self).__init__(*args, **kwargs) self.fields['priority'].label='' self.fields['priority'].widget.attrs.update", "label": 0}, {"snippet_id": 57742, "code": ", onboarding.STEP_5, onboarding.STEP_6, onboarding.STEP_7, onboarding.STEP_8 ] def get_onboarding_percentage(user_id): if user_id: status=c_onboarding_status(use_secondary=True).find_one({onboarding.USER_ID", "label": 1}, {"snippet_id": 47836, "code": ", 'products_n']) for stat in stats: writer.writerow([stat['sid'], stat['pucs_n'], stat['dds_n'], stat['dds_wf_n'], stat['products_n']]) return response def get_data_dsstox_csv_template(request): response", "label": 0}, {"snippet_id": 28841, "code": " open(memory_limit_filename, \"r\") as f: docker_limit=int(f.read()) psutil_memory_in_bytes=None try: import psutil psutil_memory_in_bytes=psutil.virtual_memory().total except ImportError: pass if psutil_memory_in_bytes", "label": 0}, {"snippet_id": 74652, "code": "') return info def _get_candidate(candidate_id, request): candidate=Candidate.objects.get(id=candidate_id) if candidate.person.netid !=request.user.username: raise PermissionDenied return candidate @login_required", "label": 0}, {"snippet_id": 54098, "code": ") q.order('-search_count') politicians=[] count=0 for politician in q: politicians.append(politician) count=count +1 if count==8: break return render_template('home.html', politicians=politicians) \"\"\"About", "label": 0}, {"snippet_id": 77862, "code": "------------------------') updates_required=False users=org.get('users',[]) print('Processing organisation ID: %s | Name: %s' %(org['id'], org['name'])) if users: for user in org['users']: if user['name", "label": 0}, {"snippet_id": 72169, "code": " ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) return ganesha_conf.get_export(export_id).to_dict() @NfsTask('edit',{'cluster_id':", "label": 0}, {"snippet_id": 81258, "code": "'Herhalen?', default=False) fit_repetition=fields.Selection([('daily', 'Dagelijks'), ('weekly', 'Wekelijks'), ('monthly', 'Maandelijks')], string=\"Schema herhaling\") def _fit_compute_is_participating(self): if", "label": 0}, {"snippet_id": 18341, "code": " a document of the username, the email, and the hashed password \tand using the Motor driver(asynchronously) inserts the document into database. \t\"\"\" \tasync def do_insert(self,hashed_password): \t\tdocument", "label": 1}, {"snippet_id": 41431, "code": "(instance=et) for form in child_formset.forms: if dd.data_group.type in['CO','UN']: ec=form.instance if ec.dsstox is not None: self.assertTrue( 'true_cas' in form.fields) self.assertTrue( 'SID' in form.fields", "label": 0}, {"snippet_id": 75164, "code": " HttpResponseRedirect(reverse('candidate_home', kwargs={'candidate_id': candidate.id})) else: form=MetadataForm(instance=candidate.thesis) context={'candidate': candidate, 'form': form, 'ID_VAL_SEPARATOR'", "label": 0}, {"snippet_id": 76467, "code": " offset_within_tiled_image=geom.Pair( tilepixel_rect.x0 % _TILE_PIXEL_SIZE, tilepixel_rect.y0 % _TILE_PIXEL_SIZE ) logger.debug(\"Offset within: %s\", str(offset_within_tiled_image)) within_tiled_image=geom.Rect", "label": 0}, {"snippet_id": 12639, "code": ".provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider", "label": 0}, {"snippet_id": 74457, "code": ": self.report.delete() class WizardPDFPartial(_ReportActionPartial): EVAL_ACTION_TYPE=\"ACCESS_PDF\" def form_valid(self, form): pass class ViewPDFPartial(WizardPDFPartial): content_disposition=\"inline\" EVAL_ACTION_TYPE", "label": 0}, {"snippet_id": 36956, "code": ": chart_month}) return product_stats def download_PUCs(request): '''This view gets called every time we call the index view and is used to populate the bubble plot. It is also used to download all of the", "label": 0}, {"snippet_id": 72081, "code": "}', 'cluster_id': '{cluster_id}'}, 2.0) def create(self, path, cluster_id, daemons, pseudo, tag, access_type, squash, security_label, protocols, transports, fsal, clients, reload_daemons=True): if fsal", "label": 0}, {"snippet_id": 35411, "code": ") product.save() if not ProductDocument.objects.filter(document=doc, product=product).exists(): p=ProductDocument(product=product, document=doc) p.save() document_type=form['document_type'].value() if document_type", "label": 0}, {"snippet_id": 61729, "code": "'timeout': 10}) result=pshtt_data_to_result(securedrop, pshtt_results[0]) if commit: result.securedrop=securedrop result.save() return result def bulk_scan(securedrops: 'DirectoryEntryQuerySet') -> None: ", "label": 1}, {"snippet_id": 79018, "code": "._('Data Request ID has not been included')) db.init_db(model) tk.check_access(constants.CLOSE_DATAREQUEST, context, data_dict) result=db.DataRequest.get(id=datarequest_id) if not result: raise tk.ObjectNotFound", "label": 0}, {"snippet_id": 31821, "code": ",create_user): user=create_user client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert \"Valget har ikke \u00e5pnet enda\" in request.content.decode('utf-8'", "label": 1}, {"snippet_id": 71531, "code": "(s_count==0) sess=req._load_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) def test_laod_session_session_id_no_user_id(self): s=models.Session.create() s_count=models.Session", "label": 0}, {"snippet_id": 11660, "code": "{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES], }, 'language", "label": 0}, {"snippet_id": 55463, "code": "(self): \t\treturn os.stat(self.path) \tdef statvfs(self): \t\treturn os.statvfs(self.path) \tdef symlink(self,link_name): \t\treturn os.symlink(self.path,link_name) \tdef unlink(self): \t\treturn os.unlink(self.path", "label": 0}, {"snippet_id": 32815, "code": " def execute(self, builtins): with self.redirections: self.base.execute(builtins) def wait(self): self.base.wait() class RedirectionHelper: ''' Helps perform a single file redirection. Args: fd: The file", "label": 0}, {"snippet_id": 49634, "code": ": return check_output([\"./pmlcheck\", fname], stderr=STDOUT).decode().replace(fname+':', \"Line \") except CalledProcessError as e: return e.output.decode().replace(fname+':', \"Line \"), 400 @app.route(\"/\"", "label": 0}, {"snippet_id": 73519, "code": " def send_user_email(request, user): url=generate_confirmation_url(request, user) send_mail( 'ScreenDoor: Please confirm e-mail address', 'Please visit the following URL to confirm your account: ' +url, ", "label": 0}, {"snippet_id": 57177, "code": "=transaction.description_short extra_context['next']=request.META['HTTP_REFERER'] if request.method=='POST': default_next=reverse('transactions_open') transaction.delete() next_page=request.POST.get('next", "label": 0}, {"snippet_id": 16763, "code": " round_num) if request.method=='POST': PowerAssignFormset=formset_factory(PowerAssignForm, formset=BasePowerAssignFormset, extra=0) formset=PowerAssignFormset(request.POST, the_round=r) if formset.is_valid", "label": 0}, {"snippet_id": 33361, "code": ", Product, ProductToPUC, ProductDocument, DSSToxLookup from dashboard.views.get_data import * from django.test import TestCase from django.test.client import Client from dashboard.views.get_data import", "label": 0}, {"snippet_id": 10952, "code": " sidebar_context=enterprise_sidebar_context(request) if sidebar_context: context['data']['registration_form_desc']['fields']=enterprise_fields_only( context['data']['registration_form_desc'] ) context.update", "label": 0}, {"snippet_id": 21310, "code": " process_type: The type of the process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside", "label": 0}, {"snippet_id": 17861, "code": "', methods=['GET', 'POST']) def profile(): if not flask.g.user: return flask.redirect(flask.url_for('main.home')) form=forms.ProfileForm(flask.request.form) if flask.request.method=='POST' and form.validate", "label": 0}, {"snippet_id": 11232, "code": " not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl", "label": 0}, {"snippet_id": 66430, "code": ".add_mime_type(\"application/x-iwork-keynote-sffkey\") keyfile_chooser_dialog.add_filter(filter_text) response=keyfile_chooser_dialog.run() if response==Gtk.ResponseType.OK: self.logging_manager.log_debug(\"File", "label": 0}, {"snippet_id": 51078, "code": "\"-\"): name=name[1:] self._enabled_options.discard(name) self._disabled_options.add(name) else: raise TypeError(\"Each step must be a string beginning with '+' or '-'.\") def select_optional_steps(self, *args", "label": 0}, {"snippet_id": 74934, "code": ".filter(person__netid=request.user.username).exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies']=other_candidacies return render(request, 'etd_app/candidate.html', context_data)", "label": 0}, {"snippet_id": 3446, "code": " TestLogins(TestCase): test_username='testuser' test_password='testpassword' test_email='test@mozillafoundation.org' def setUp(self): self.locale='en-US' self.client=Client() self.user=UserProfile(username", "label": 0}, {"snippet_id": 14785, "code": " self.user_id def db_init(): db.flushdb() auth_init() auth_add_user('gleb.kondratenko@skybonds.com', 'pwd') def auth_init(): db.set('user:ids', '0') def auth_add_user(email, password): user_id=db.incr(", "label": 0}, {"snippet_id": 71680, "code": ".assertTrue(resp.request.session.session_id==s.session_id) s_count2=models.Session.query().count() self.assertTrue(s_count2==1) resp.request.session.user_id='1' resp._save_session() s_count=models.Session", "label": 0}, {"snippet_id": 46600, "code": " template_name, context) @login_required() def data_group_create(request, pk, template_name='data_group/datagroup_form.html'): datasource=get_object_or_404(DataSource, pk=pk) group_key=DataGroup.objects.filter", "label": 0}, {"snippet_id": 73188, "code": "=forms.EmailField( label=StandardFormText.username_or_email_label, max_length=100) login_button_text=CreateAccountFormText.have_an_account_sign_in class Meta(UserCreationForm): model=ScreenDoorUser fields=", "label": 0}, {"snippet_id": 18231, "code": " that'll be used later when @tornado.web.authenticated is needed for POST requests. \"\"\" class BaseHandler(tornado.web.RequestHandler): \tdef get_current_user(self): \t\treturn self.get_secure_cookie(\"user\"", "label": 1}, {"snippet_id": 57930, "code": "\"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_course\":{ \"done\": true, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_courselet\":{ \"done\": false, \"settings\":{ \"html\": \"\",", "label": 0}, {"snippet_id": 55955, "code": " status=302) response['Location']='{}{}?{}'.format(settings.APP_DEEPLINK_DOMAIN, LOGIN_PATH, request.GET.urlencode()) return response def experience_redirect(request, experience_share_id): dynamic_link", "label": 0}, {"snippet_id": 43100, "code": "/chemicalpresencegroup/49/\\'> View Chemical Presence Lists\".encode(), response.content) response=self.client.get( f'/qa/chemicalpresencegroup/49', follow=True) self.assertIn( f'/qa/extractedtext/254781/\"", "label": 0}, {"snippet_id": 73849, "code": "=get_positions_sort_method(request) if request.method=='POST': sort_by=change_positions_sort_method(request, sort_by) if request.POST.get(\"position\"): return position(request, Position.objects.get( id=request.POST.get", "label": 1}, {"snippet_id": 2270, "code": " os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root, newpath) if os.path", "label": 1}, {"snippet_id": 70456, "code": " encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type) response[\"Last-Modified\"]=http_date", "label": 0}, {"snippet_id": 53752, "code": " import texts as render_texts from cauldron.session.buffering import RedirectBuffer from cauldron.session.caching import SharedCache class Report(object): \"\"\" The display management class for each step", "label": 0}, {"snippet_id": 41714, "code": "(), ('UploadForm should not be included in the page!')) self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_detail_template_fieldnames(self)", "label": 0}, {"snippet_id": 22086, "code": " start the web UI, which is a Jupyter notebook. logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message.", "label": 0}, {"snippet_id": 36831, "code": "']), '%Y-%m-%d') document_count +=item['document_count'] item['document_count']=document_count for item in document_stats[type][len(document_stats[type])-1:]: if item['upload_date'] !=current_date: document_stats", "label": 0}, {"snippet_id": 58747, "code": " import Course STATUS_CHOICES=( ('pendind', 'pending'), ('joined', 'joined'), ) TYPE_CHOICES=( ('student', 'student'), ('tester', 'tester') ) def clean_email_name(email): email_name, domain=email.split('@'", "label": 0}, {"snippet_id": 55998, "code": "'-1') \\ .execute() desc=(experience.description[:77] +'...') if len(experience.description) > 77 else experience.description preview_content={'st': experience.title, 'sd': desc, 'si': experience.picture", "label": 0}, {"snippet_id": 37621, "code": "*kwargs) lbl='Select Attribute to Assign to Selected Products' self.fields['tag'].label=lbl class ExtractedTextForm(forms.ModelForm): class Meta: model=ExtractedText fields=['prod_name', 'doc_date', 'rev_num", "label": 0}, {"snippet_id": 38393, "code": ".dsstox_lookup import DSSToxLookup from.qa_group import QAGroup from.unit_type import UnitType from.weight_fraction_type import WeightFractionType from.PUC import PUC, PUCToTag, PUCTag from.product_to_tag import", "label": 0}, {"snippet_id": 2971, "code": " 'request': request, 'nonce': nonce, } if 'oidc_state' not in request.session: return self.login_failure() if request.GET['state'] !=request.session['oidc_state']: msg='Session `oidc_state` does not match", "label": 0}, {"snippet_id": 50318, "code": " as f: content=base64.b64decode(request.form[\"content\"]).decode() f.write(content) session[\"tempFile\"]=f.name return \"\" @app.route(\"/resetCurrent\") def resetCurrent(): session.pop('currentFile', None) session", "label": 0}, {"snippet_id": 6502, "code": " flow=self.flow_for_request() credentials=flow.step2_exchange(code, http=self.http) id_token=credentials.id_token if not self.is_id_token_valid(id_token): logger.debug(\"Invalid ID token\") if id_token.get(", "label": 0}, {"snippet_id": 74241, "code": " except Exception: return False if passphrase: try: self.storage.report.decrypt_record(passphrase) return True except CryptoError: logger.warn(self.invalid_access_key_message) return False else: logger.info", "label": 0}, {"snippet_id": 77248, "code": "\"/\": target_url +=\"/\" logger.debug(\"Fetching server definitions over http\") target_url=urlparse.urljoin(target_url, _SERVER_DEF_URL) logger.debug(\"Opening url:[%s]\", target_url) try: fp=urllib2.urlopen", "label": 1}, {"snippet_id": 84700, "code": "(article_qs, **article_args) if not notification.is_observing(article, request.user): notification.observe(article, request.user, 'wiki_observed_article_changed') return redirect(article) return HttpResponseNotAllowed", "label": 0}, {"snippet_id": 73120, "code": ".ValidationError(ErrorMessages.empty_create_position_form) self.add_error('pdf', msg) return elif pdf and url: msg=forms.ValidationError( ErrorMessages.overfilled_create_position_form) self.add_error('pdf',", "label": 1}, {"snippet_id": 18082, "code": " send_password_reset_request_email(user): ''' Send user a password reset link ''' reset_link=get_password_reset_link(user) tmpl_context={ 'reset_link': reset_link, 'user': user } email_msg=email.EmailHolder", "label": 0}, {"snippet_id": 39970, "code": " FieldTracker class RawChem(models.Model): extracted_text=models.ForeignKey(ExtractedText, related_name='rawchem', on_delete=models.CASCADE, null=False, blank=False) raw_cas=models.CharField(\"Raw CAS\",", "label": 1}, {"snippet_id": 72129, "code": "'pseudo': pseudo, 'cluster_id': cluster_id, 'daemons': daemons, 'tag': tag, 'access_type': access_type, 'squash': squash, 'security_label': security_label, 'protocols': protocols, 'transports': transports, ", "label": 0}, {"snippet_id": 35017, "code": " for rawchem in RawChem.objects.filter(dsstox_id=None): writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem.rid if rawchem.rid", "label": 1}, {"snippet_id": 63974, "code": "] session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user=authenticate(current_app, session_info) if user", "label": 0}, {"snippet_id": 677, "code": " %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE", "label": 0}, {"snippet_id": 43561, "code": "%s/' % doc_id self.browser.get(self.live_server_url +doc_qa_link) doc_type_select=Select(self.browser.find_element_by_xpath( '//*[@id=\"id_document_type\"]')) option=doc_type_select.first_selected_option", "label": 1}, {"snippet_id": 32757, "code": "): if self.pid: os.waitpid(self.pid, 0) @property def full_command(self): if os.path.exists(self.command): return self.command path=os.environ['PATH'].split(':') for di in path: cmd=os.path.join(di, self", "label": 0}, {"snippet_id": 35272, "code": "/link_product_list.html'): dg=DataGroup.objects.get(pk=pk) documents=dg.datadocument_set.filter(productdocument__document__isnull=True) npage=20 paginator=Paginator(documents, npage) page=request.GET.get", "label": 0}, {"snippet_id": 80902, "code": " module; used for BCNL,. \"\"\", 'data':[ 'data/fit_actions.xml', 'data/fit_event_views.xml', 'data/fit_product_views.xml', 'data/fit_res_partner_view.xml', 'report/fit_report_subscription_view.xml', 'security", "label": 0}, {"snippet_id": 61508, "code": " import timezone from directory.models import ScanResult, DirectoryEntry from scanner.utils import url_to_domain if TYPE_CHECKING: from directory.models import DirectoryEntryQuerySet def pshtt_data_to_result", "label": 1}, {"snippet_id": 23650, "code": ") is str: logging_level=logging.getLevelName(logging_level.upper()) logger.setLevel(logging_level) global _default_handler _default_handler=logging.StreamHandler() _default_handler.setFormatter(logging", "label": 1}, {"snippet_id": 73325, "code": ".index, name='home'), path('register/', views.register_form, name='register'), path('login/', views.login_form, name='login'), path('logout/', views.logout_view, name='logout'), path('confirm/', views.login_form", "label": 0}, {"snippet_id": 19463, "code": " in new_log_filenames: logger.info(\"Beginning to track file{}\".format(log_filename)) assert log_filename not in self.log_files self.log_files[log_filename]=[] def check_log_files_and_push_updates(self)", "label": 1}, {"snippet_id": 72160, "code": ") def get(self, cluster_id, export_id): export_id=int(export_id) ganesha_conf=GaneshaConf.instance(cluster_id) if not ganesha_conf.has_export(export_id): raise cherrypy.HTTPError(404) return ganesha_conf", "label": 0}, {"snippet_id": 47683, "code": "'sid','pucs_n').order_by() dds_n=RawChem.objects.filter(dsstox__sid__in=dtxs).values('dsstox__sid').\\ annotate(sid=F('dsstox__sid'), dds_n=Count('extracted_text__data_document')).\\ values('sid','dds_n')", "label": 0}, {"snippet_id": 81571, "code": " _create_new_event(self, old_repeating_event, new_start_date, new_end_date): _logger.info('Start creation new repeating event') new_repeating_event=old_repeating_event.copy(default={'website_published': True})", "label": 0}, {"snippet_id": 39147, "code": "] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove(name) return extract_fields +['cat_code','description_cpcat', 'cpcat_code','cpcat_sourcetype'] def get_clean_comp_data_fieldnames", "label": 0}, {"snippet_id": 279, "code": "}Index of{{ directory}}{% endblocktrans %}</title> </head> <body> <h1>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}</h1> <ul> {% if directory !=\"/\" %} <li><a href=\"../\">../</a></li> {% endif", "label": 0}, {"snippet_id": 43063, "code": "=\"rawchem-1-unit_type\"', response.content) self.assertIn(b'Functional Use Chem1', response.content) response=self.client.get('/qa/extractionscript/5', follow=True) response=self.client.get('/qa/extractedtext", "label": 0}, {"snippet_id": 25513, "code": ", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser", "label": 0}, {"snippet_id": 59179, "code": " __unicode__(self): return \"Code{}, User{}\".format(self.code, self.email) @receiver(post_save, sender=Invite) def onboarding_invite_created(sender, instance, **kwargs): update_onboarding_step(onboarding.STEP_8,", "label": 1}, {"snippet_id": 57051, "code": "=transaction.get_all_permissions() concepts_permitted_by_employee=employee.get_all_permissions() available_concepts=[] for concept in settings.CONCEPTS: permission=concept.replace('.','.add_') concept_model", "label": 0}, {"snippet_id": 63045, "code": "\"\" test_user=User(data=NEW_COMPLETED_SIGNUP_USER_EXAMPLE) self.app.central_userdb.save(test_user, check_sync=False) def test_login_authn(self): self.authn('/login') def test_chpass_authn(self): self.authn", "label": 0}, {"snippet_id": 17738, "code": "(form.email.data.strip()) if user: send_password_reset_request_email(user) flask.flash(flask.Markup( 'A password reset request was sent to the provided email, ' 'if a matching account was found.'), 'info", "label": 0}, {"snippet_id": 68113, "code": ".filter(id__in=Hunt(id=pk).events.all()).order_by('publish_timestamp'): dt=event.publish_timestamp.astimezone(timezone('Asia/Tokyo')) row=[dt, event.date, event.info, event.get_threat_level_id_display(", "label": 0}, {"snippet_id": 46382, "code": " new_prod_title=ext.prod_name else: new_prod_title=None except ExtractedText.DoesNotExist: new_prod_title=None if not new_prod_title: if doc.title: new_prod_title='%s stub' % doc.title else: new_prod_title=", "label": 0}, {"snippet_id": 34817, "code": " def download_chem_stats(stats): response=HttpResponse(content_type='text/csv') response['Content-Disposition']='attachment; filename=\"chem_summary_metrics_%s.csv\"' %(datetime.datetime.now().strftime(\"%Y", "label": 1}, {"snippet_id": 62260, "code": "\") def validate_no_cookies(page): if len(page.cookies.keys()) > 0: return False else: return True def validate_onion_address_not_in_href(page): links_on_landing_page=page.find_all(\"a\") for link in links_on_landing_page", "label": 0}, {"snippet_id": 42162, "code": " response, 'Data Group should contain a count of 1 total extracted documents') def test_delete_doc_button(self): url=f'/datagroup/{DataGroup.objects.first().id}/' response=self.client.get(url).content.decode", "label": 0}, {"snippet_id": 82354, "code": "'home-view'), re_path(r'^success/(?P<pk>(\\d)+)/$', SuccessUrlView.as_view(), name='success-url-view'), re_path(r'^add-custom/$', CustomShortURLCreateView.as_view(), name='add-custom-url'), re_path(r'^add", "label": 0}, {"snippet_id": 44382, "code": "*[@id=\"id_rawchem-0-SID\"]') try: self.browser.find_element_by_xpath('//*[@id=\"id_rawchem-0-raw_cas\"]') except NoSuchElementException: self.fail(\"Absence of raw_cas element raised exception\") dd_url=self", "label": 0}, {"snippet_id": 44458, "code": "(username='SuperKaryn', password='specialP@55word', email='me@epa.gov') ds=DataSource.objects.create(title='Data Source for Test', estimated_records=2, state='AT', priority='HI') script=Script.objects.create", "label": 0}, {"snippet_id": 68682, "code": ") def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable() hunt.start() return redirect('twitter_hunter:index'", "label": 0}, {"snippet_id": 9124, "code": ".bad_request_rate_limiter import BadRequestRateLimiter from util.date_utils import strftime_localized AUDIT_LOG=logging.getLogger(\"audit\") log=logging.getLogger(__name__) User=get_user_model() @require_http_methods(['GET']", "label": 0}, {"snippet_id": 6839, "code": " change_password(): form=ChangePasswordForm() if form.validate_on_submit(): if current_user.verify_password(form.old_password.data): current_user.password=form.password.data db.session.add(current_user)", "label": 0}, {"snippet_id": 61657, "code": "), cache_control_set=validate_cache_control_set(page), cache_control_revalidate_set=validate_cache_must_revalidate(page), cache_control_nocache_set=validate_nocache(page), cache_control_notransform_set", "label": 1}, {"snippet_id": 53536, "code": ":] location=stack_frame.name if location=='<module>': location=None return dict( filename=filename, location=location, line_number=stack_frame.lineno, line=stack_frame.line ) def render_error( project:", "label": 0}, {"snippet_id": 919, "code": " given point in the directory structure. To use, put a URL pattern such as:: from django.views.static import serve url(r'^(?P<path>.*)$', serve,{'document_root': '/path/to/my/files/'}) in your URLconf. You", "label": 0}, {"snippet_id": 15410, "code": " entry.input_source_final.data }) elif field.name=='change_input_series_all_models': for entry in field.entries: result.append({ 'command': field.name, 'input_source_initial': entry.input_source_initial", "label": 0}, {"snippet_id": 15390, "code": "'change_input_series_one_model': for entry in field.entries: result.append({ 'command': field.name, 'model_system_name': entry.model_system_name.data, 'input_source_initial': entry.input_source_initial.data,", "label": 0}, {"snippet_id": 33251, "code": "=('__str__', 'hhe_report_number') class PUCToTagAdmin(admin.ModelAdmin): list_display=('content_object', 'tag', 'assumed') list_filter=('tag',) def tag(self, obj): return obj.tag def assumed(self, obj)", "label": 0}, {"snippet_id": 36026, "code": ".ManyToManyField( 'dashboard.ExtractedHabitsAndPractices', through='dashboard.ExtractedHabitsAndPracticesToPUC') tags=TaggableManager(through='dashboard.PUCToTag', to='dashboard.PUCTag', blank=True, help_text", "label": 0}, {"snippet_id": 19242, "code": "(key) return if key.startswith(b\"RemoteFunction\"): with profiling.profile( \"register_remote_function\", worker=self.worker): (self.worker.function_actor_manager. fetch_and_register_remote_function(key))", "label": 0}, {"snippet_id": 19763, "code": " for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures. Attributes:", "label": 0}, {"snippet_id": 77945, "code": "=sqlalchemy.and_ class MigrateExtras(CkanCommand): \"\"\"Migrates legacy field values that were added as free extras to datasets to their schema counterparts. \"\"\" summary=__doc__.split('\\n')[0] def __init__", "label": 0}, {"snippet_id": 71258, "code": "=self._get_user_class().get_or_create_by_profile(profile) self.session.user_id=self.user.get_id() load_user_by_profile=_load_user_by_profile def _add_message(self, message, level=None, key='_messages')", "label": 0}, {"snippet_id": 71001, "code": " directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html', 'static/directory_index', ]) except TemplateDoesNotExist: t=Engine(libraries={'i18n': 'django.templatetags", "label": 0}, {"snippet_id": 66965, "code": ", HttpResponseRedirect from django.shortcuts import get_object_or_404, render from django.views.generic import TemplateView, DetailView from.forms import SearchForm from lib.vt import VT from lib.threatminer", "label": 1}, {"snippet_id": 56199, "code": " self.response['Location']=='{}{}?token=ABXZ'.format(settings.APP_DEEPLINK_DOMAIN, '/people/me/email-confirmation') return self class RedirectLoginEmailTestCase(TestCase): def test_when_called_redirect_view_redirects_to_apps_url", "label": 0}, {"snippet_id": 42642, "code": "/find/?q=terro') self.assertNotContains(response, '<table') self.assertContains(response, '<div class=\"results-wrapper\">') def test_product_facet_returns(self): response=self.c.get('/find/?q=insecticide", "label": 0}, {"snippet_id": 50788, "code": ": if len(self.condition_sets)==0: return True for conditions in self.condition_sets: if all(key in env and env[key]==value for(key, value) in conditions.items()): return True return False def run(self,", "label": 0}, {"snippet_id": 52382, "code": " project_id) return \"HTTP-status-code: 200\" @app.route(\"/add-to-board\", methods=[\"POST\"]) def add_new_project_to_board(): \"\"\"Update database with new project and display on correct board on team main.\"\"\" title", "label": 0}, {"snippet_id": 53890, "code": " self.step.definition.name if self.step else None @property def definition(self) -> dict: return self.step.definition if self.step else None def clear(self) -> 'Report': \"\"\" Clear all user-data stored in", "label": 0}, {"snippet_id": 2476, "code": " files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user", "label": 0}, {"snippet_id": 42502, "code": " ext=ExtractedText.objects.get(qa_group=qa_group) self.assertIsNotNone(ext.qa_group) response=self.client.get(f'/qa/extractedtext/{ext.pk}/') def test_qa_approval_redirect(self): self.client.get(f'/qa/extractionscript", "label": 0}, {"snippet_id": 54498, "code": "', 'result_type': 'mixed'} response=requests.get(base_url +verify_url, auth=oauth) if response.status_code==200: response=requests.get(base_url +search_url, params=payload, auth=oauth) resp=Response( response", "label": 0}, {"snippet_id": 45872, "code": " itertools import islice from collections import OrderedDict from djqscsv import render_to_csv_response from pathlib import Path from django import forms from django.urls import reverse from django.conf", "label": 1}, {"snippet_id": 72140, "code": " security_label, 'protocols': protocols, 'transports': transports, 'fsal': fsal, 'clients': clients }) if reload_daemons: ganesha_conf.reload_daemons(daemons) return ganesha_conf.get_export(ex_id).to_dict(", "label": 0}, {"snippet_id": 17611, "code": ".is_rangebanned(user.registration_ip): flask.flash(flask.Markup('Your IP is blocked from creating new accounts. ' 'Please <a href=\"{}\">ask a moderator</a> to manually ' 'activate your account <a href=\"{}\">\\'{}\\", "label": 0}, {"snippet_id": 1904, "code": " return HttpResponseNotModified() content_type, encoding=mimetypes.guess_type(fullpath) content_type=content_type or 'application/octet-stream' response=FileResponse(open(fullpath, 'rb'), content_type=content_type", "label": 0}, {"snippet_id": 49403, "code": " datadocument=get_object_or_404(DataDocument, pk=pk) form=DataDocumentForm(request.POST or None, instance=datadocument) if form.is_valid(): if form.has_changed(): form.save() return redirect('data_document'", "label": 0}, {"snippet_id": 15549, "code": " if get_command('exe_models'): form.exe_models.data=get_command('exe_models')[0]['include'] if not form.change_input_series_one_model: for command in get_command('change_input_series_one_model'): form.change_input_series_one_model", "label": 0}, {"snippet_id": 27038, "code": " useful for debugging. redirect_worker_output: True if the stdout and stderr of worker processes should be redirected to files. redirect_output(bool): True if stdout and stderr for non-worker processes", "label": 0}, {"snippet_id": 2869, "code": " HttpResponseRedirect from django.utils.crypto import get_random_string from django.utils.module_loading import import_string from django.views.generic import View from mozilla_django_oidc.utils import", "label": 0}, {"snippet_id": 71026, "code": "[] for f in os.listdir(fullpath): if not f.startswith('.'): if os.path.isdir(os.path.join(fullpath, f)): f +='/' files.append(f) c=Context({ 'directory': path +'/', 'file_list': files, }) return HttpResponse", "label": 0}, {"snippet_id": 9181, "code": ") third_party_auth_hint=None if '?' in redirect_to: try: next_args=urlparse.parse_qs(urlparse.urlparse(redirect_to).query) provider_id=next_args['tpa_hint'][0] tpa_hint_provider=third_party_auth.provider", "label": 0}, {"snippet_id": 19079, "code": " ray from ray import ray_constants from ray import cloudpickle as pickle from ray import profiling from ray import utils class ImportThread(object): \"\"\"A thread used to import exports from the driver or", "label": 0}, {"snippet_id": 11367, "code": "\"login\": return external_auth_login(request) elif mode==\"register\": return external_auth_register(request) def get_user_orders(user): \"\"\"Given a user, get the detail of all the orders from the Ecommerce", "label": 0}, {"snippet_id": 13762, "code": ")) user=user if user.is_authenticated() else User.objects.get(email=email) destroy_oauth_tokens(user) except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter", "label": 0}, {"snippet_id": 58165, "code": ": 1, onboarding.STEP_7: 0, onboarding.STEP_8: 0}, 50.0), ({onboarding.STEP_1: 1, onboarding.STEP_2: 0, onboarding.STEP_3: 1, onboarding.STEP_4: 1, onboarding.STEP_5: 1, onboarding.STEP_6: 1, onboarding", "label": 1}, {"snippet_id": 56081, "code": "{}'.format(profile.username), 'sd': profile.bio, 'si': profile.picture.small_url} preview_encoded=urlencode(preview_content, quote_via=quote_plus) link='{}&{}'.format(link, preview_encoded) else: link=", "label": 0}, {"snippet_id": 31890, "code": "=Election.objects.create() client.login(username=user.username, password='defaultpassword') request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res", "label": 1}, {"snippet_id": 23121, "code": " push_error_to_driver_through_redis(redis_client, error_type, message, driver_id=None): \"\"\"Push an error message to the driver to be printed in the background. Normally the push_error_to_driver function", "label": 0}, {"snippet_id": 11141, "code": " authentication. tpa_hint(string): An override flag that will return a matching provider as long as its configuration has been enabled Returns: dict \"\"\" context={ \"currentProvider\": None, \"providers\":[", "label": 0}, {"snippet_id": 34649, "code": " data documents with associated weight fraction data that the chemical appears in(weight fraction data may be reported or predicted data, i.e., predicted from an ingredient list)\" products.n \"The number", "label": 0}, {"snippet_id": 84277, "code": "='wiki', extra_context=None, is_member=None, is_private=None, *args, **kw): if request.method=='GET': article_args={'article__title': title} if group_slug is not None: group=get_object_or_404( group_qs", "label": 0}, {"snippet_id": 57853, "code": " certain `settings_name` If it does not exist take default settings and save it to the MongoDB Argument: setting_name(str): name of setting e.g. `create_course` Return: dict object with the data. See ONBOARDING_STEPS_DEFAULT_TEMPLATE", "label": 0}, {"snippet_id": 18047, "code": "'' Alert user that their password has been successfully reset ''' email_msg=email.EmailHolder( subject='Your{} password has been reset'.format(app.config['GLOBAL_SITE_NAME']), recipient=user, text=flask", "label": 0}, {"snippet_id": 47860, "code": "/csv') response['Content-Disposition']='attachment; filename=\"dsstox_lookup_template.csv\"' writer=csv.writer(response) writer.writerow(['DTXSID']) return response def upload_dtxsid_csv(request): data={}", "label": 0}, {"snippet_id": 44127, "code": ".find_element_by_name('submit').click() self.assertIn('/datasource/', self.browser.current_url, \"User should always return to detail page after submit\") num_pucs=len(PUC.objects.filter(kind='FO')) self", "label": 0}, {"snippet_id": 80069, "code": "[users, 'open_datarequest_creator', datarequest_dict], title=u'Data Request Opened Creator Email') if datarequest_dict['organization']: users=_get_admin_users_from_organasition(datarequest_dict) tk.enqueue_job", "label": 1}, {"snippet_id": 78589, "code": "(original_action, context, data_dict): \"\"\" Action to create a new data request. The function checks the access rights of the user before creating the data request. If the user is not allowed a NotAuthorized", "label": 0}, {"snippet_id": 78334, "code": " import ckanext.datarequests.validator as validator import datetime import logging from pylons import config import constants c=plugins.toolkit.c log=logging.getLogger(__name__) tk=plugins.toolkit USERS_CACHE", "label": 0}, {"snippet_id": 80199, "code": ".window=window=QMainWindow() self.layout=QVBoxLayout() window.setWindowTitle('Matisse Controller') window.resize(600, 200) def setup_menus(self): menu_bar=self.window.menuBar() console_menu=menu_bar.addMenu", "label": 0}, {"snippet_id": 60179, "code": "\"compile_options\":[ r[0] for r in conn.execute(\"pragma compile_options;\").fetchall() ], }, } def plugins(self, show_all=False): ps=list(get_plugins(pm)) if not show_all: ps=[p for p in ps if p[\"name\"] not", "label": 0}, {"snippet_id": 20462, "code": " required=True, type=str, help=\"the address to use for Redis\") parser.add_argument( \"--autoscaling-config\", required=False, type=str, help=\"the path to the autoscaling config file\") parser.add_argument(", "label": 0}, {"snippet_id": 39449, "code": ".raw_chem import RawChem class ExtractedFunctionalUse(CommonInfo, RawChem): raw_cas_old=models.CharField(\"Raw CAS\", max_length=50, null=True, blank=True) raw_chem_name_old=models.CharField(\"Raw chemical name\",", "label": 0}, {"snippet_id": 32018, "code": " Token types that are recognized by the Tokenizer. ''' WORD=enum.auto() REDIRECT_OUT=enum.auto() REDIRECT_APPEND=enum.auto() REDIRECT_IN=enum.auto() PIPE=enum.auto() COMMAND_END=enum.auto() EOF=enum.auto", "label": 0}, {"snippet_id": 35891, "code": ".html')): p=Product.objects.get(pk=pk) form=ProductForm(request.POST or None, instance=p) if form.is_valid(): form.save() return redirect('product_detail', pk=p.pk) return render(request, template_name,", "label": 0}, {"snippet_id": 9324, "code": "': True, 'allow_iframing': True, 'disable_courseware_js': True, 'combined_login_and_register': True, 'disable_footer': not configuration_helpers.get_value( 'ENABLE_COMBINED_LOGIN_REGISTRATION_FOOTER', settings", "label": 0}, {"snippet_id": 10066, "code": " the page was sent successfully HttpResponse: 302 if not logged in(redirect to login page) HttpResponse: 405 if using an unsupported HTTP method Example usage: GET /account/settings \"\"\" return render_to_response", "label": 0}, {"snippet_id": 54460, "code": "'fMcsDcqTtbeM73qB7Cxo7dGKhZT9byGh7i5lKjOVscQzP' consumer_key='yd6lDwm3Ra9j7djyXHmrg' consumer_secret='BlBMf6kP98LwWepOVSypVwDi2x2782P2KQnJQomY' oauth=OAuth1(consumer_key, resource_owner_key=access_token", "label": 0}, {"snippet_id": 57940, "code": "\": \"\", \"description\": \"\", \"title\": \"\" } }, \"create_courselet\":{ \"done\": false, \"settings\":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } }, \"review_answers\":{ \"done\": true, \"settings\":{ \"html\": \"<p>Title", "label": 0}, {"snippet_id": 12862, "code": "=ecommerce_api_client(user) commerce_user_orders=get_edx_api_data( commerce_configuration, 'orders', api=api, querystring=user_query, cache_key=cache_key ) for order in commerce_user_orders: if order['status'", "label": 0}, {"snippet_id": 33384, "code": " from dashboard.tests.loader import fixtures_standard @override_settings(ALLOWED_HOSTS=['testserver']) class TestGetData(TestCase): fixtures=fixtures_standard def setUp(self): self.client=Client() def test_dtxsid_pucs_n", "label": 0}, {"snippet_id": 38734, "code": " ExtractedChemical from.extracted_functional_use import ExtractedFunctionalUse from.extracted_list_presence import ExtractedListPresence def update_filename(instance, filename): name_fill_space=instance.name.replace('", "label": 0}, {"snippet_id": 44024, "code": "(self): for i in range(27): ds=DataSource.objects.create(title=f'Test_DS_{i}') list_url=self.live_server_url +'/datasources/' self.browser.get(list_url) row_count=len(self.browser.find_elements_by_xpath(\"", "label": 0}, {"snippet_id": 79935, "code": "=result[0] if data_req.closed: raise tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req", "label": 0}, {"snippet_id": 71555, "code": ".assertTrue(s_count==1) req=EngineAuthRequest.blank('/auth/google') req.cookies['_eauth']=s.serialize() req._load_session() self.assertTrue(req.session.session_id==s.session_id) s_count2=models.Session.query(", "label": 0}, {"snippet_id": 32897, "code": "(self): if len(self.redirections) > 0: self.stack=contextlib.ExitStack() for redirection in self.redirections: self.stack.enter_context(redirection) def __exit__(self, type, value, traceback): if self.stack", "label": 0}, {"snippet_id": 67789, "code": "') if keyword is not None: query=query.filter(Q(value__icontains=keyword)).order_by('-timestamp') return query def thirty_day_data(self): data=[] today=datetime.now(timezone(timedelta(hours=+9), 'JST')", "label": 0}, {"snippet_id": 33136, "code": " admin.site.register(PUCTag) admin.site.register(Taxonomy) admin.site.register(TaxonomySource) admin.site.register(TaxonomyToPUC) admin.site.register(ExtractedHHDoc, HHDocAdmin) admin.site.register(ExtractedHHRec", "label": 0}, {"snippet_id": 20703, "code": "=True, resources={}, include_webui=False, worker_path=os.path.join( os.path.dirname(os.path.abspath(__file__)), \"workers/default_worker.py\")) if head: ray_params.update_if_absent(num_redis_shards=1, include_webui", "label": 0}, {"snippet_id": 28562, "code": " \"\"\"Determine a task's resource requirements. Args: default_num_cpus: The default number of CPUs required by this function or actor method. default_num_gpus: The default number of GPUs required by this", "label": 0}, {"snippet_id": 58066, "code": " \"current_site\": Site.objects.get_current(), \"course_id\": 1, \"unit_lesson_id\": 1, \"courselet_pk\": 1 }, from_email=settings.EMAIL_FROM, to_email=[\"test@example.com\"], template_subject=\"ct/email/milestone_ortc_notify_subject", "label": 1}, {"snippet_id": 5362, "code": "%0ALocation' in response['location']) self.assertNotEqual('http://example.com', response['location']) def test_registration_opt_in(self): \"\"\"Test account registration.\"\"\" path=\"/%s/register/\" %(self.locale,)", "label": 1}, {"snippet_id": 3080, "code": "'nonce': nonce }) request.session['oidc_nonce']=nonce request.session['oidc_state']=state request.session['oidc_login_next']=request.GET.get(redirect_field_name) query=urlencode(params) redirect_url='{url", "label": 1}, {"snippet_id": 15168, "code": "*args, **kwargs) input_source_initial=NoValidationSelectField('Initial input',[validators.required()], choices=[]) start_day=DateField('Start day',[validators.required()], '%Y-%m-%d', default=datetime.today", "label": 0}, {"snippet_id": 23676, "code": "(new_stream): global _default_handler logger=logging.getLogger(\"ray\") if _default_handler: new_handler=logging.StreamHandler(stream=new_stream) new_handler.setFormatter(_default_handler.formatter) _default_handler", "label": 1}, {"snippet_id": 49126, "code": " code=='CP': try: list_presence=doc.extractedtext.rawchem.select_subclasses('extractedlistpresence').first() list_presence_tag_form=ExtractedListPresenceTagForm(instance=list_presence) context.update({", "label": 0}, {"snippet_id": 16591, "code": ")) else: assert 0, 'Unexpected game_count value %d for %s' %(rp.game_count, str(rp)) assert(not sitters) or(not two_gamers) if sitters: assert(len(rps) -len(sitters)) % 7==0 if two_gamers: assert(len(rps", "label": 0}, {"snippet_id": 26310, "code": " _kill_process_type(self, process_type, allow_graceful=False, check_alive=True, wait=False): \"\"\"Kill a process of a given type. If the process type is PROCESS_TYPE_REDIS_SERVER, then we will kill all of the", "label": 0}, {"snippet_id": 73415, "code": " redirect('positions') return render(request, 'index.html', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method", "label": 0}, {"snippet_id": 41494, "code": " group_models.items(): if DataDocument.objects.filter( document_type__group_type__code=code, extractedtext__isnull=False ): doc=DataDocument.objects.filter( document_type__group_type__code=code, extractedtext__isnull", "label": 1}, {"snippet_id": 81406, "code": ": self._handle_montly_event_repetition(repeating_event) def _handle_daily_event_repetition(self, old_repeating_event): _logger.info('Handling daily repeating event') end_date=datetime.strptime(old_repeating_event", "label": 1}, {"snippet_id": 22155, "code": " autoscaling_config: path to autoscaling config file. include_java(bool): If True, the raylet backend can also support Java worker. java_worker_options(str): The command options for Java worker. _internal_config(str", "label": 0}, {"snippet_id": 82023, "code": ".is_valid(): url=form.cleaned_data['input_url'] short_url=form.cleaned_data['short_url'] category=form.cleaned_data['category'] if JustURL.objects.filter(short_url__contains=short_url).exists(): message", "label": 0}, {"snippet_id": 73294, "code": " None: message=forms.ValidationError(ErrorMessages.invalid_un_or_pw) self.add_error('email', message) elif user.email_confirmed is False: message=forms.ValidationError(ErrorMessages.unconfirmed_email) self", "label": 0}, {"snippet_id": 32042, "code": ") class Token: ''' A string with an assigned meaning. Args: ttype: The token meaning. lexeme: The token value(optional). position: The location of the token in the stream. ''' def __init__(self, ttype,", "label": 0}, {"snippet_id": 30381, "code": "']=credentials.access_token login_session['gplus_id']=gplus_id userinfo_url=\"https://www.googleapis.com/oauth2/v1/userinfo\" params={'access_token': credentials.access_token, 'alt': 'json'} answer=requests", "label": 0}, {"snippet_id": 13322, "code": ".login_and_register import register as external_auth_register from openedx.core.djangoapps.lang_pref.api import all_languages, released_languages from openedx.core.djangoapps.programs.models import ProgramsApiConfig", "label": 0}, {"snippet_id": 51926, "code": ") def display_login(): \"\"\"Load login form.\"\"\" return render_template(\"login.html\") @app.route(\"/login\", methods=[\"POST\"]) def log_in_returning_user(): \"\"\"Validate login entry.\"\"\" num_attempts=h.get_login_attempts", "label": 0}, {"snippet_id": 69266, "code": ", 'jupyterhub-dummyauthenticator==0.3.1', 'jupyterhub-systemdspawner==0.11', 'jupyterhub-firstuseauthenticator==0.12', 'jupyterhub-nativeauthenticator==0.0.4', 'jupyterhub-ldapauthenticator==1.2.2', 'oauthenticator", "label": 1}, {"snippet_id": 59614, "code": " up metadata, cascading backwards from specified level. Returns None if metadata value is not found. \"\"\" assert not(database is None and table is not None), \\ \"Cannot call metadata() with table=specified", "label": 0}, {"snippet_id": 2610, "code": " import_from_settings('LOGIN_REDIRECT_URL_FAILURE', '/') @property def success_url(self): next_url=self.request.session.get('oidc_login_next', None) return next_url or import_from_settings('LOGIN_REDIRECT_URL', '/", "label": 0}, {"snippet_id": 81505, "code": " '%Y-%m-%d %H:%M:00') present=datetime.now() if present >=end_date: new_start_date=datetime.strptime(old_repeating_event.date_begin, '%Y-%m-%d %H:%M:00') +relativedelta(months=+1) new_end_date=end_date", "label": 1}, {"snippet_id": 37663, "code": "=ExtractedCPCatForm.Meta.fields +\\ ['prod_name', 'doc_date', 'rev_num', 'cpcat_code'] class ExtractedHHDocForm(ExtractedTextForm): class Meta: model=ExtractedHHDoc fields=['hhe_report_number', 'study_location", "label": 0}, {"snippet_id": 27074, "code": " provided, attempt to configure Redis with this maxclients number. redis_password(str): Prevents external clients without the password from connecting to Redis if provided. plasma_directory: A directory", "label": 0}, {"snippet_id": 83569, "code": " except AttributeError: WIKI_LOCK_DURATION=15 try: from notification import models as notification except ImportError: notification=None ALL_ARTICLES=Article.objects.all() ALL_CHANGES=ChangeSet.objects.all", "label": 0}, {"snippet_id": 61631, "code": ", no_server_version=validate_server_version(page), csp_origin_only=validate_csp(page), mime_sniffing_blocked=validate_no_sniff(page), noopen_download=validate_download_options(page), xss_protection=validate_xss_protection", "label": 1}, {"snippet_id": 13358, "code": "( RegistrationFormFactory, get_login_session_form, get_password_reset_form ) from openedx.core.djangoapps.user_api.errors import UserNotFound from openedx.core.lib.edx_api_utils import get_edx_api_data", "label": 0}, {"snippet_id": 33869, "code": ".find_element_by_tag_name('body') object.assertIn('Please sign in', body.text) username_input=object.browser.find_element_by_name(\"username\") username_input.send_keys('Karyn') password_input=object.browser", "label": 0}, {"snippet_id": 73419, "code": "', {'user': request.user, 'baseVisibleText': InterfaceText}) def register_form(request): register_form=ScreenDoorUserCreationForm() if request.method=='POST': register_form=ScreenDoorUserCreationForm(request", "label": 0}, {"snippet_id": 29584, "code": " render_template, flash, g, current_app from werkzeug.utils import secure_filename from flask_security import login_required, current_user from benwaonline.database import db from benwaonline.models import", "label": 1}, {"snippet_id": 41185, "code": " doesn't yet have an extracted record for data group types 'CP' and 'HH' ''' doc=DataDocument.objects.get(pk=354784) self.assertFalse(doc.extracted,(\"This document is matched \" \"but not extracted\")) data", "label": 0}, {"snippet_id": 26670, "code": "\"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_RAYLET_MONITOR, check_alive=check_alive) def kill_all_processes(self, check_alive=True, allow_graceful=False): \"\"\"Kill all of the processes. Note", "label": 0}, {"snippet_id": 40105, "code": "=id).data_document except apps.get_model('dashboard.ExtractedChemical').DoesNotExist: try: return apps.get_model('dashboard.ExtractedFunctionalUse').objects.get(rawchem_ptr=id).data_document except apps", "label": 0}, {"snippet_id": 64934, "code": ".add_argument('-v', '--verbose', action='count', default=0, help=\"Specifies verbositiy level. Each time this flag is specified, \" \"the count goes up by one. Level 1 or greater outputs additional \" \"information", "label": 0}, {"snippet_id": 68763, "code": " extensions: assert '{} \\x1b[32mOK\\x1b[0m'.format(e) in proc.stderr.decode() def test_nbextensions(): \"\"\" Validate nbextensions we want are installed & enabled \"\"\" proc=subprocess.run([ '/opt/tljh/user", "label": 0}, {"snippet_id": 23386, "code": " empty string. TODO(rkn): Remove this flag. This is only here to simplify upgrading to flatbuffers 1.10.0. Returns: A byte string in Python 2 and a unicode string in Python 3. \"\"\" if byte_str is None and", "label": 0}, {"snippet_id": 29559, "code": "'token') user.oauth_secret=session.pop('secret') db.session.commit() login_user(user) next=request.args.get('next') flash('You were signed in as %s' % user.username) return redirect(url_for('auth.test'", "label": 0}, {"snippet_id": 47627, "code": " SDS, ingredient list, product label) the chemical is appears in\" datadocs_w_wf.n \"The number of data documents with associated weight fraction data that the chemical appears in(weight fraction data may", "label": 0}, {"snippet_id": 56365, "code": "(self, deep_link_domain): settings.APP_DEEPLINK_DOMAIN=deep_link_domain return self def when_call_experience_redirect(self, share_id): client=Client() self.response=client.get(reverse('experience-redirect", "label": 0}, {"snippet_id": 15711, "code": "') @app.route('/run/form/init', methods=['POST']) def view_run_init(): run_form=get_run_form() commands=json.loads(request.data)['commands'] set_form_defaults(run_form, commands) return json.dumps({ 'commands", "label": 0}, {"snippet_id": 27832, "code": " type of the event being logged. extra_data: Additional information to log. \"\"\" def __init__(self, profiler, event_type, extra_data=None): \"\"\"Initialize a RayLogSpanRaylet object.\"\"\" self.profiler=profiler", "label": 0}, {"snippet_id": 58660, "code": " instructor.user_id) enroll_unit_code_exists=EnrollUnitCode.objects.filter( courseUnit__course__addedBy=instructor.user, isPreview=True, isLive=False, isTest=False ).exists() if enroll_unit_code_exists", "label": 1}, {"snippet_id": 48064, "code": " doc, 'ext_form' : ext_form, 'hp_formset' : hp_formset, } return render(request, template_name, context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc", "label": 0}, {"snippet_id": 13774, "code": ") except UserNotFound: AUDIT_LOG.info(\"Invalid password reset attempt\") limiter.tick_bad_request_counter(request) return HttpResponse(status=200) else: return HttpResponseBadRequest(_(\"No email address", "label": 0}, {"snippet_id": 65921, "code": ".filechooser_creation_dialog.get_current_name()) self.start_database_creation_routine(tab_title) self.override_dialog.destroy() def on_tab_switch(self, notebook, tab, pagenum): headerbar=tab.get_headerbar()", "label": 0}, {"snippet_id": 37870, "code": " document extracted ''' if not dg.type in['CO']: return False if dg.extracted_docs() > 0: return CleanCompDataForm() else: return False def create_detail_formset(document, extra=1, can_delete=False, exclude=", "label": 0}, {"snippet_id": 68862, "code": " STATE_DIR, USER_ENV_PREFIX, ) from.yaml import yaml HERE=os.path.abspath(os.path.dirname(__file__)) logger=logging.getLogger(\"tljh\") def ensure_node(): \"\"\" Ensure nodejs from nodesource is installed \"\"\" key=b", "label": 0}, {"snippet_id": 15576, "code": ".append_entry() if not form.change_timeseries_value_several_days_add_delta: for command in get_command('change_timeseries_value_several_days_add_delta'): form.change_timeseries_value_several_days_add_delta", "label": 0}, {"snippet_id": 64414, "code": "'TOKEN_LOGIN_SUCCESS_REDIRECT_URL') eppn=request.form.get('eppn') token=request.form.get('token') nonce=request.form.get('nonce') timestamp=request.form.get('ts') loa=get_loa(current_app.config.get('AVAILABLE_LOA'), None) if", "label": 0}, {"snippet_id": 31189, "code": " import literal_eval import os import djcelery BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', ('s '*szo DEBUG=literal_eval(os.environ.get(", "label": 0}, {"snippet_id": 7813, "code": " message.tags } for message in messages.get_messages(request) if 'account-activation' in message.tags ] context={ 'data':{ 'login_redirect_url': redirect_to, 'initial_mode': initial_mode, 'third_party_auth", "label": 0}, {"snippet_id": 50944, "code": "=False, default=True): def decorator_func(f): if not hasattr(f, \"buildstep\"): f.buildstep=BuildStep(f.__name__, f) self._steps.append(f.buildstep) if name is not None: f.buildstep.name=name f.buildstep", "label": 0}, {"snippet_id": 24303, "code": "=self.worker): self.fetch_and_execute_function_to_run(key) elif key.startswith(b\"ActorClass\"): self.worker.function_actor_manager.imported_actor_classes.add(key) else: raise Exception(\"This code should be", "label": 0}, {"snippet_id": 33679, "code": ") def test_habits_and_practices_cards(self): data={'puc':['2']} response=self.client.post('/get_data/', data=data) for hnp in[b'ball bearings', b'motorcycle', b'vitamin a&amp;d', b'dish soap']: self.assertIn", "label": 0}, {"snippet_id": 18910, "code": " import generic from django.contrib.auth import mixins as auth_mixins from..extensions import exts_pool def find_nextlocation(request, user): \"\"\"Find next location for given user after login.\"\"\" if not", "label": 0}, {"snippet_id": 29355, "code": " current_user from flask_security import login_required from benwaonline.database import db from benwaonline.oauth import twitter from benwaonline.models import user_datastore, User from benwaonline.auth import", "label": 1}, {"snippet_id": 80313, "code": "(True) self.lock_piezo_etalon_action=lock_menu.addAction('Lock Piezo Etalon') self.lock_piezo_etalon_action.setCheckable(True) self.lock_fast_piezo_action=lock_menu.addAction('Lock Fast Piezo') self.lock_fast_piezo_action", "label": 0}, {"snippet_id": 16516, "code": "'double_%d' % i] if rp: rp.game_count=2 rp.save() return HttpResponseRedirect(reverse('seed_games', args=(tournament_id, round_num))) context['form']=form return render(request, 'rounds/get_seven.html',", "label": 0}, {"snippet_id": 33515, "code": "'dds_n'], 'There should be 2 datadocuments associated with ethylaraben') self.client.login(username='Karyn', password='specialP@55word') dds=DataDocument.objects.filter(pk__in=ExtractedChemical.objects", "label": 0}, {"snippet_id": 26227, "code": "): \"\"\"Start the raylet monitor.\"\"\" stdout_file, stderr_file=new_raylet_monitor_log_file( self._ray_params.redirect_output) process_info=ray.services.start_raylet_monitor( self._redis_address, stdout_file", "label": 0}, {"snippet_id": 39931, "code": " blank=True) def __str__(self): return 'Notes for{}'.format(self.extracted_text) def clean(self): if self.extracted_text.qa_edited and not self.qa_notes: raise ValidationError( _('Before approving, please", "label": 1}, {"snippet_id": 49835, "code": "=secure_filename(file.filename) userpath=os.path.join(app.config['UPLOAD_FOLDER'], email) os.makedirs(userpath, exist_ok=True) file.save(os.path.join(userpath, filename)) session['currentFile']=filename if 'diagram'", "label": 0}, {"snippet_id": 57981, "code": ":{ \"html\": \"\", \"description\": \"\", \"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps", "label": 0}, {"snippet_id": 12590, "code": "\": enabled.name, \"iconClass\": enabled.icon_class or None, \"iconImage\": enabled.icon_image.url if enabled.icon_image else None, \"loginUrl\": pipeline.get_login_url( enabled.provider_id, pipeline.AUTH_ENTRY_LOGIN", "label": 0}, {"snippet_id": 84462, "code": "'POST': revision=int(request.POST['revision']) article_args={'title': title} group=None if group_slug is not None: group=get_object_or_404( group_qs, **{group_slug_field: group_slug}) article_args.update", "label": 0}, {"snippet_id": 62460, "code": " authenticated user :type user: eduid_userdb.User \"\"\" return _reauthn('reauthn-for-termination', session_info, user) def _reauthn(reason, session_info, user): current_app.logger.info(\"Reauthenticating user{", "label": 0}, {"snippet_id": 66378, "code": " password_unlock_entry.get_style_context().add_class(\"error\") self.clear_input_fields() self.logging_manager.log_debug(\"Could not open database, wrong password\") def on_keyfile_unlock_select_button_clicked(self,", "label": 0}, {"snippet_id": 11759, "code": "['providers']=[{ 'id': state.provider.provider_id, 'name': state.provider.name, 'connected': state.has_account, 'connect_url': pipeline.get_login_url( state.provider.provider_id, pipeline.AUTH_ENTRY_ACCOUNT_SETTINGS", "label": 0}, {"snippet_id": 50163, "code": ": if 'return_url' in request.args: session['return_url']=request.args['return_url'] return render_template(\"register.html\") @app.route(\"/signup\", methods=[\"POST\"]) def signUpButton(): email=request.form", "label": 0}, {"snippet_id": 10925, "code": " address provided.\")) def update_context_for_enterprise(request, context): \"\"\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update", "label": 0}, {"snippet_id": 1154, "code": "</li> {% endfor %} </ul> </body> </html> \"\"\" template_translatable=gettext_lazy(\"Index of %(directory)s\") def directory_index(path, fullpath): try: t=loader.select_template([ 'static/directory_index.html", "label": 0}, {"snippet_id": 40487, "code": "(max_length=40, null=True, blank=True) last_edited_by=models.ForeignKey('auth.User', on_delete=models.SET_DEFAULT, default=1) product_category=models.ManyToManyField('PUC', through='TaxonomyToPUC') class", "label": 0}, {"snippet_id": 68915, "code": "/2LJEwARAQAB tB9Ob2RlU291cmNlIDxncGdAbm9kZXNvdXJjZS5jb20+iQI4BBMBAgAiBQJTmyS2 AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRAWVaCraFdigHTmD/9OKhUy jJ+h8gMRg6ri5EQxOExccSRU0i7UHktecSs0DVC4lZG9AOzBe+Q36cym5Z1di6JQ", "label": 0}, {"snippet_id": 65271, "code": "=NotImplemented headerbar=NotImplemented first_start_grid=NotImplemented logging_manager=LoggingManager(True) opened_databases=[] databases_to_save=[] def __init__(self, *args, **kwargs): super().__init__(", "label": 0}, {"snippet_id": 43690, "code": ".find_element_by_xpath('//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rawchem_id) self.assertEqual(rc.raw_chem_name, f'%s edited' % old_raw_chem_name, 'The raw_chem_name field should have changed') et=ExtractedText", "label": 0}, {"snippet_id": 78985, "code": " request creator :param id: The ID of the data request to be closed :type id: string :param accepted_dataset_id: The ID of the dataset accepted as solution for this data request :type accepted_dataset_id", "label": 0}, {"snippet_id": 14257, "code": " user to authenticate as when requesting ecommerce. Returns: list of dict, representing orders returned by the Ecommerce service. \"\"\" no_data=[] user_orders=[] commerce_configuration=CommerceConfiguration", "label": 0}, {"snippet_id": 61003, "code": " job :rtype: str \"\"\" return \"Running check for remote component %s with pid %s on host %s\" %(self.comp_name, self.pid, self.hostname) class HostMonitorJob(object): \"\"\"Class representing a host monitoring", "label": 0}, {"snippet_id": 39061, "code": "''' try: self.csv.size csv_url=self.csv.url except ValueError: csv_url=False except: csv_url=False return csv_url @property def zip_url(self): '''This is a \"falsy\" property. If the zip file cannot be found", "label": 0}, {"snippet_id": 21481, "code": ".terminate() timer=threading.Timer(1, lambda process: process.kill(), [process]) try: timer.start() process.wait() finally: timer.cancel() if process.poll() is not None: continue process.kill() if wait: process", "label": 0}, {"snippet_id": 39758, "code": " in the upload of extracted text in the data_group_detail view, this returns a boolean to assure that there is a 1:1 relationship w/ the Extracted{parent}, i.e.(Text/CPCat), and the DataDocument ''' if", "label": 0}, {"snippet_id": 9974, "code": " user_orders=[] commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY", "label": 0}, {"snippet_id": 6202, "code": " view_func(*args, **kwargs) return decorated check=require_login def flow_for_request(self): \"\"\" Build a flow with the correct absolute callback URL for this request. :return: \"\"\" flow=copy(self.flow) flow", "label": 0}, {"snippet_id": 43577, "code": " doc_type_select.select_by_visible_text(\"ingredient disclosure\") self.assertIn(doc_qa_link, self.browser.current_url) doc_detail_link=f'/datadocument/%s/' % doc_id self.browser.get(self.live_server_url", "label": 1}, {"snippet_id": 70929, "code": " DEFAULT_DIRECTORY_INDEX_TEMPLATE=\"\"\" {% load i18n %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=", "label": 0}, {"snippet_id": 70936, "code": " %} <!DOCTYPE html> <html lang=\"en\"> <head> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE", "label": 0}, {"snippet_id": 19955, "code": ".gcs_utils.GcsTableEntry.GetRootAsGcsTableEntry( data, 0) heartbeat_data=gcs_entries.Entries(0) message=(ray.gcs_utils.HeartbeatBatchTableData. GetRootAsHeartbeatBatchTableData(heartbeat_data, 0)) for j", "label": 0}, {"snippet_id": 56945, "code": ", *args, **kwargs): if not request.user.is_authenticated: return invalid_permission_redirect(request) self.request=request self.filter_data=kwargs.pop('filter_data',{}) return super().get(self, request", "label": 0}, {"snippet_id": 38259, "code": "''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return self.products.count() @property def admin_url(self): return reverse('admin:dashboard_puc_change', args=(self.pk,", "label": 0}, {"snippet_id": 83705, "code": " * 60) def create_message(self, request): \"\"\"Send a message to the user if there is another user editing this article.\"\"\" if not self.is_mine(request): user=request.user user.message_set.create( message", "label": 0}, {"snippet_id": 84757, "code": "\"\"This is a AJAX function that previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it", "label": 0}, {"snippet_id": 38749, "code": "(' ', '_') name='{0}/{0}_{1}'.format(name_fill_space, filename) return name def csv_upload_path(instance, filename): name='{0}/{1}'.format(instance.fs_id, filename) return name extract_models={ 'CO':(ExtractedText", "label": 0}, {"snippet_id": 7691, "code": "(__name__) User=get_user_model() @require_http_methods(['GET']) @ensure_csrf_cookie @xframe_allow_whitelisted def login_and_registration_form(request, initial_mode=\"login\"): \"\"\"Render the combined login", "label": 0}, {"snippet_id": 14523, "code": "] context={ 'auth':{}, 'duplicate_provider': None, 'nav_hidden': True, 'fields':{ 'country':{ 'options': list(countries), }, 'gender':{ 'options':[(choice[0], _(choice[1])) for choice in UserProfile.GENDER_CHOICES", "label": 0}, {"snippet_id": 69898, "code": " provide the ``document_root`` param. You may also set ``show_indexes`` to ``True`` if you'd like to serve a basic index of the directory. This index view will use the template hardcoded below, but if you", "label": 0}, {"snippet_id": 78553, "code": "{0}.txt'.format(action_type), extra_vars) mailer.mail_user(user_data, subject, body) except Exception: logging.exception(\"Error sending notification to{0}\".format(user_id)) def _get_admin_users_from_organasition", "label": 1}, {"snippet_id": 11572, "code": ". Otherwise, there is no need for it. Ideally this view will finish and redirect to the next step before the user even sees it. Args: request(HttpRequest) Returns: HttpResponse: 200 if the page was sent", "label": 0}, {"snippet_id": 20169, "code": "(keys): logger.warning(\"Monitor: \" \"Failed to remove{} relevant redis \" \"entries from redis shard{}.\".format( len(keys) -num_deleted, shard_index)) def xray_driver_removed_handler(self, unused_channel,", "label": 0}, {"snippet_id": 61302, "code": " message.\"\"\" self.hostname=hostname self.message='Lost connection to remote host %s' % hostname class MonitoringThread(Thread): \"\"\"This class is monitoring thread that extends the threading.Thread class.\"\"", "label": 0}, {"snippet_id": 2661, "code": " authorization code flow\"\"\" nonce=request.session.get('oidc_nonce') if nonce: del request.session['oidc_nonce'] if 'code' in request.GET and 'state' in request.GET: kwargs={ 'request': request, 'nonce':", "label": 0}, {"snippet_id": 18167, "code": " except:\r print \"[-]Error on \" +url\r \r if r.history: \r if r.url==\"https://example.com\":\r print \"[+]\"+url\r if is_closed:\r file=open(output_file,\"w+\")\r is_closed=False\r file.write(url +\"\\n\")\r else:\r print \"[-]", "label": 1}, {"snippet_id": 33778, "code": ".raw_chem_name, rc.rid if rc.rid else '') rc_row=bytes(rc_row, 'utf-8') self.assertIn(rc_row, response.content, 'The data group id should be in the output') rc=RawChem.objects.filter(dsstox_id__isnull=False", "label": 1}, {"snippet_id": 16336, "code": "': continue i=int(r_name[6:]) r=t.round_numbered(i) if value is True: i, created=RoundPlayer.objects.get_or_create(player=p, the_round=r) try: i.full_clean() except ValidationError as e: form.add_error", "label": 0}, {"snippet_id": 28085, "code": " message. \"\"\" lines=exception_message.split(\"\\n\") if task_exception: lines=lines[0:1] +lines[3:] pass return \"\\n\".join(lines) def push_error_to_driver(worker, error_type, message, driver_id=None): \"\"\"Push an", "label": 0}, {"snippet_id": 57983, "code": "\": \"\", \"description\": \"\", \"title\": \"\" } } } \"\"\" onboarding_status=c_onboarding_status().find_one({onboarding.USER_ID: user_id},{'_id': 0, 'user_id': 0}) or{} data={} for step in get_onboarding_steps():", "label": 0}, {"snippet_id": 49357, "code": "=pk) datagroup_id=doc.data_group_id if request.method=='POST': doc.delete() return redirect('data_group_detail', pk=datagroup_id) return render(request, template_name,{'object': doc}) @login_required def", "label": 0}, {"snippet_id": 64605, "code": "'FloatingPointError', 'format', 'frozenset', 'FutureWarning', 'GeneratorExit', 'getatter', 'globals', 'hasattr', 'hash', 'hex', 'id', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'input', ", "label": 0}, {"snippet_id": 74933, "code": "=Candidate.objects.filter(person__netid=request.user.username).exclude(id=candidate.id) if other_candidacies: context_data['other_candidacies']=other_candidacies return render(request, 'etd_app/candidate.html',", "label": 0}, {"snippet_id": 78365, "code": "'user_show')({'ignore_auth': True},{'id': user_id}) USERS_CACHE[user_id]=user return user except Exception as e: log.warn(e) def _get_organization(organization_id): try: organization_show=tk.get_action(", "label": 0}, {"snippet_id": 18271, "code": "='') \t \t\"\"\" check_if_exists(): \tUses the pymongo driver(so everything is synchronous) to check if the username exists in database \tthen checks if the email address also exists in the database \tdepending", "label": 1}, {"snippet_id": 14554, "code": " _(choice[1])) for choice in UserProfile.LEVEL_OF_EDUCATION_CHOICES], }, 'password':{ 'url': reverse('password_reset'), }, 'year_of_birth':{ 'options': year_of_birth_options, }, 'preferred_language':{ ", "label": 0}, {"snippet_id": 44669, "code": "'superuser':superuser, 'ds':ds, 'script':script, 'exscript':exscript, 'dg':dg, 'doc':doc, 'p':p, 'puc':puc, 'extext':extext, 'ut':ut, 'wft':wft, 'rc':rc, 'ec':ec, 'pt':pt, 'pd':pd, 'ing':ing, 'dt':dt, ", "label": 0}, {"snippet_id": 34919, "code": ".multiple_chunks(): messages.error(request,\"Uploaded file is too big(%.2f MB).\" %(csv_file.size/(1000*1000),)) return HttpResponseRedirect(reverse(\"upload_dtxsid_csv\")) file_data=csv_file.read().decode(", "label": 0}, {"snippet_id": 29845, "code": "<int:post_id>/comment/add', methods=['POST']) @login_required def add_comment(post_id): form=CommentForm() if form.validate_on_submit(): post=Post.query.get(post_id) comment=Comment(content=form.content", "label": 0}, {"snippet_id": 40630, "code": ".get('/').content.decode('utf8') response_html=html.fromstring(response) extracted_doc_count=response_html.xpath( '/html/body/div[1]/div[1]/div[4]/div/div')[0].text self.assertEqual('0%', extracted_doc_count", "label": 0}, {"snippet_id": 66103, "code": "(True) overlay=NotImplemented def __init__(self, window, widget, filepath): self.window=window self.parent_widget=widget self.database_filepath=filepath self.unlock_database() def unlock_database(self)", "label": 0}, {"snippet_id": 9167, "code": "\"\"\" redirect_to=get_next_url_for_login_page(request) if request.user.is_authenticated(): return redirect(redirect_to) form_descriptions=_get_form_descriptions(request) third_party_auth_hint=None if '?'", "label": 0}, {"snippet_id": 19878, "code": " \" \"touch shards in parallel.\") self.issue_gcs_flushes=False else: addr_port=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try", "label": 0}, {"snippet_id": 13955, "code": ".ENTERPRISE_PLATFORM_WELCOME_TEMPLATE ) platform_welcome_string=platform_welcome_template.format(platform_name=platform_name) context={ 'enterprise_name': enterprise_customer.name, 'enterprise_logo_url': enterprise_logo_url, ", "label": 0}, {"snippet_id": 57240, "code": " transaction_code=kwargs.get('transaction_code', None) if not transaction_code: transaction=Transaction.objects.create(employee=request.user) return redirect('transaction_edit', transaction_code=transaction", "label": 0}, {"snippet_id": 9239, "code": " old_register_view(request) ext_auth_response=_external_auth_intercept(request, initial_mode) if ext_auth_response is not None: return ext_auth_response account_activation_messages=[ { 'message': message.message, ", "label": 0}, {"snippet_id": 71168, "code": "'_eauth', session.serialize()) return self def _save_user(self): pass class EngineAuthRequest(Request): ResponseClass=EngineAuthResponse def _load_session(self): value=self.cookies.get('_eauth') session", "label": 0}, {"snippet_id": 41853, "code": "/datagroup/{pk}/') self.assertFalse(response.context['extract_form'], ('ExtractForm should not be included in the page!')) def test_bulk_create_products_form(self): response=self.client.get(f'/datagroup", "label": 0}, {"snippet_id": 6306, "code": " the email address has been verified. @see: http://openid.net/specs/openid-connect-core-1_0.html \"\"\" if not id_token: return False if id_token['iss'] not in self.app.config['OIDC_VALID_ISSUERS']: logger", "label": 0}, {"snippet_id": 62426, "code": " return _reauthn('reauthn-for-chpass', session_info, user) @acs_action('terminate-account-action') def term_account_action(session_info, user): \"\"\" Upon successful reauthn in the IdP, set a timestamp in", "label": 0}, {"snippet_id": 79940, "code": "._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now() session.add(data_req", "label": 0}, {"snippet_id": 1962, "code": " content=\"text/html; charset=utf-8\" /> <meta http-equiv=\"Content-Language\" content=\"en-us\" /> <meta name=\"robots\" content=\"NONE,NOARCHIVE\" /> <title>{% blocktrans %}Index of{{ directory}}{% endblocktrans %}<", "label": 0}, {"snippet_id": 4464, "code": " self.user=UserProfile(username=self.test_username, email=self.test_email) self.user.set_password(self.test_password) self.user.save() self.user.create_django_user() def test_authenticated_redirects(self", "label": 0}, {"snippet_id": 53970, "code": " the actual report body. This is useful for creating intermediate body values for display while the method is still executing. :return: A dom string for the current state of the print buffer contents \"", "label": 0}, {"snippet_id": 17208, "code": " in game.gameplayer_set.all(): content[gp.power.name]=gp.score data.append(content) formset=GameScoreFormset(request.POST or None, initial=data) if formset.is_valid(): for f in formset: g=Game.objects.get", "label": 0}, {"snippet_id": 64627, "code": "'issubclass', 'iter', 'KeyboardInterrupt', 'KeyError', 'len', 'list', 'locals', 'LookupError', 'map', 'max', 'MemoryError', 'memoryview', 'min', '__name__', 'NameError', 'next', 'None', 'NotADirectoryError', ", "label": 0}, {"snippet_id": 34012, "code": "'//*[@id=\"save\"]').click() rc=RawChem.objects.get(pk=rc_id) self.assertEqual( None, rc.dsstox, 'The same rawchem record should now have nothing in its dsstox link') def test_new_chem(self): ''' Adding a", "label": 0}, {"snippet_id": 67293, "code": "] except Exception as e: pass vt=VT() context['vt_ip']=vt.getIPReport(ip) tm=ThreatMiner() context['tm_url']=tm.getURIFromIP(ip) context['tm_sample']=tm.getSamplesFromIP(ip) context['tm_report']=tm.getReportFromIP", "label": 0}, {"snippet_id": 63975, "code": " session_info=get_authn_response(current_app.config, session, xmlstr) current_app.logger.debug('Trying to locate the user authenticated by the IdP') user=authenticate(current_app, session_info) if user is", "label": 0}, {"snippet_id": 474, "code": " import gettext as _, gettext_lazy def serve(request, path, document_root=None, show_indexes=False): \"\"\" Serve static files below a given point in the directory structure. To use, put a URL pattern such as::", "label": 0}, {"snippet_id": 13832, "code": "(sidebar_context) context['enable_enterprise_sidebar']=True context['data']['hide_auth_warnings']=True else: context['enable_enterprise_sidebar']=False return context def enterprise_fields_only(fields): ", "label": 0}, {"snippet_id": 61171, "code": " component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates a local crash event class with a component name and generates a short message. :param comp_name: Name of the crashed component", "label": 0}, {"snippet_id": 24924, "code": "=addr_port[0].split(b\":\") self.redis_shard=redis.StrictRedis( host=addr_port[0], port=addr_port[1], password=redis_password) try: self.redis_shard.execute_command(\"HEAD.FLUSH 0\") except redis.exceptions", "label": 0}, {"snippet_id": 52941, "code": " TestCase from django.test import Client from realpal.apps.users.constants import * from realpal.apps.users.views import UserRedirectView, UserUpdateView class BaseUserTestCase(TestCase): def setUp(self): self", "label": 0}, {"snippet_id": 4181, "code": ".assertRedirects(response, '/', status_code=302, target_status_code=301) self.client.logout() def test_unauthenticated_redirects(self): \"\"\"Test that anonymous users are redirected for specific views.\"\"", "label": 0}, {"snippet_id": 8266, "code": " dict \"\"\" context={ \"currentProvider\": None, \"providers\":[], \"secondaryProviders\":[], \"finishAuthUrl\": None, \"errorMessage\": None, } if third_party_auth.is_enabled(): if not enterprise_customer_for_request", "label": 0}, {"snippet_id": 31168, "code": " file, see https://docs.djangoproject.com/en/1.9/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/1.9/ref/settings/ \"\"\" from ast import literal_eval", "label": 0}, {"snippet_id": 67769, "code": ".request.GET.get('type') if category is not None: query=query.filter(category=category) if type is not None: query=query.filter(type=type) keyword=self.request.GET.get('keyword') if keyword is not None:", "label": 0}, {"snippet_id": 61698, "code": " which may or may not be saved to the database. You can optionally pass True for the commit argument, which will save the result to the database. In that case, the passed DirectoryEntry *must* already be", "label": 0}, {"snippet_id": 45958, "code": " data={} data['object_list']=datagroup return render(request, template_name, data) @login_required() def data_group_detail(request, pk, template_name='data_group/datagroup_detail.html'): dg=get_object_or_404", "label": 0}, {"snippet_id": 12045, "code": "=third_party_auth.provider.Registry.get(provider_id=provider_id) if tpa_hint_provider: if tpa_hint_provider.skip_hinted_login_dialog: return redirect( pipeline.get_login_url(provider_id, pipeline.AUTH_ENTRY_LOGIN,", "label": 1}, {"snippet_id": 76168, "code": " full_path=path if language and version_slug: full_path=self.get_full_path(path, language, version_slug) if full_path==self.from_url: log.debug('Redirecting %s', self) return self.to_url if '$rest' in self", "label": 1}, {"snippet_id": 34398, "code": " can add one in the browser 1. ''' for doc_id in[155324 ]: dd_url=self.live_server_url +f'/datadocument/{doc_id}/' self.browser.get(dd_url) self.browser.find_element_by_xpath( '//*[@id=\"btn-add-or-edit", "label": 0}, {"snippet_id": 54620, "code": " homework in self.homeworks: \t\t\tfor assignment in homework.getElementsByTagName(\"assignment\"): \t\t\t\tself.assignments.append(assignment) \t\tif True: \t\t\tfor assignment in self.assignments: \t\t\t\tattrs=attributesOf", "label": 0}, {"snippet_id": 43883, "code": " html from django.test import TestCase from dashboard.tests.loader import load_model_objects from dashboard.models import * import os import csv import time import unittest import collections import json", "label": 1}, {"snippet_id": 9979, "code": " commerce_configuration=CommerceConfiguration.current() user_query={'username': user.username} use_cache=commerce_configuration.is_cache_enabled cache_key=commerce_configuration.CACHE_KEY +'.' +str(user.id) if use_cache", "label": 0}, {"snippet_id": 84871, "code": ".changeset_set.all() old_titles=[] for cs in changesets: if cs.old_title and cs.old_title !=title and cs.old_title not in old_titles: old_titles.append(cs.old_title) m=re.match(r\"(!?)(\\b[A-Z][a-z]+[A-Z]\\w+\\b", "label": 0}, {"snippet_id": 52589, "code": "{sender} has invited you to join the team {team_name} on SamePage. Accept to help complete projects for {team_name}.\"\"\".format(sender=sender, team_name=team_object.name) flash_message=\"Emails sent to\\n\" for", "label": 0}, {"snippet_id": 16874, "code": " enumerate(games, start=1): new_game=Game.objects.create(name='R%sG%d' %(round_num, i), the_round=r, the_set=default_set) current={'game_name': new_game.name, 'the_set': new_game.the_set} for tp, power in g: gp", "label": 0}, {"snippet_id": 27809, "code": "(self, event): with self.lock: self.events.append(event) class RayLogSpanRaylet(object): \"\"\"An object used to enable logging a span of events with a with statement. Attributes: event_type(str): The type of", "label": 0}, {"snippet_id": 31899, "code": " request=client.get(reverse('elections:vote')) assert reverse('elections:vote')==request.url assert \"Klargj\u00f8res til valg\" in request.content.decode('utf-8') request=client.get(reverse('elections:has_voted')", "label": 0}, {"snippet_id": 78791, "code": " was changed to users of assigned organisation with admin access :param id: The ID of the data request to be updated :type id: string :param title: The title of the data request :type title: string :param", "label": 0}, {"snippet_id": 40109, "code": ".ExtractedChemical').DoesNotExist: try: return apps.get_model('dashboard.ExtractedFunctionalUse').objects.get(rawchem_ptr=id).data_document except apps.get_model('dashboard.ExtractedFunctionalUse').DoesNotExist", "label": 0}, {"snippet_id": 15246, "code": "%d', default=datetime.today()) number_of_days=IntegerField('Number of days',[validators.required()]) exe_models=SelectMultipleField('Execute models',[validators.required()]) change_input_series_one_model", "label": 0}, {"snippet_id": 20350, "code": " Ray must be started at run time with the flag as well. \"\"\" if not self.issue_gcs_flushes: return if self.gcs_flush_policy is None: serialized=self.redis.get(\"gcs_flushing_policy\") if serialized is None", "label": 0}, {"snippet_id": 68677, "code": " hunt.start() return redirect('twitter_hunter:index') def hunt_switch_enable(request, pk): hunt=get_object_or_404(Hunt, id=pk) if hunt.enable==True: hunt.setDisable() hunt.stop() else: hunt.setEnable()", "label": 0}, {"snippet_id": 79053, "code": " tk.ValidationError([tk._('This Data Request is already closed')]) data_req.closed=True data_req.accepted_dataset_id=data_dict.get('accepted_dataset_id', None) data_req.close_time=datetime.datetime.now", "label": 0}, {"snippet_id": 2269, "code": "(part) if part in(os.curdir, os.pardir): continue newpath=os.path.join(newpath, part).replace('\\\\', '/') if newpath and path !=newpath: return HttpResponseRedirect(newpath) fullpath=os.path.join(document_root", "label": 1}, {"snippet_id": 36573, "code": "=self.client.get('/').content.decode('utf8') response_html=html.fromstring(response) num_prods=int(response_html.xpath( '//*[@name=\"product_with_puc_count\"]')[0].text) self.assertEqual(num_prods, orm_prod_puc_count", "label": 0}, {"snippet_id": 71700, "code": "._save_session() s_count=models.Session.query().count() self.assertTrue(s_count==1) s1=models.Session.query().get() self.assertEqual(s1.key.id(), '1') def test__load_user(self): user=models.User.create_user", "label": 0}, {"snippet_id": 38983, "code": "}{str(self.fs_id)}' name_dir=f'{settings.MEDIA_ROOT}{self.get_name_as_slug()}' if bool(self.csv.name): p=PurePath(self.csv.path) csv_folder=p.parts[-2] csv_fullfolderpath =f'{settings.MEDIA_ROOT}{csv_folder", "label": 0}, {"snippet_id": 48495, "code": " if created: product.title=title product.manufacturer=form['manufacturer'].value() product.brand_name=form['brand_name'].value() product.upc=form['upc'].value() product.size=form['size'].value() product", "label": 0}, {"snippet_id": 59326, "code": ")), ConfigOption(\"default_facet_size\", 30, \"\"\" Number of values to return for requested facets \"\"\".strip()), ConfigOption(\"facet_time_limit_ms\", 200, \"\"\" Time limit for calculating a requested facet \"\"", "label": 0}, {"snippet_id": 69172, "code": ".install_unit('jupyterhub.service', hub_unit_template.format(**unit_params)) systemd.install_unit('traefik.service', traefik_unit_template.format(**unit_params)) systemd.reload_daemon() systemd.restart_service(", "label": 0}, {"snippet_id": 7033, "code": "=current_user.generate_email_change_token(new_email) send_email(new_email, 'Confirm Your Email Address', 'auth/email/change_email', user=current_user, token=token) flash('An email with instructions for confirming", "label": 0}, {"snippet_id": 55655, "code": ".path.abspath(os.path.join(self.path,item)) \t\t\tyield specialized(p) \tdef __getitem__(self,name): \t\tfor item in self.items(): \t\t\tif item.basename()==name: \t\t\t\treturn item \t\tif name==\"\": \t\t\treturn self \t", "label": 0}, {"snippet_id": 74096, "code": " _PassphraseClearingPartial(EvalDataMixin, _PassphrasePartial): def get(self, request, *args, **kwargs): self.storage.clear_passphrases() return super().get(request, *args, **kwargs) class DashboardPartial", "label": 0}, {"snippet_id": 55594, "code": "\tdef walk(self,*args,**kwargs): \t\tr=super(FSItem,self).walk(*args,**kwargs) \t\tfor root, dirs, files in r: \t\t\tfolder_list=[Folder(os.path.join(root,dir)) for dir in dirs] \t\t\tfile_list=[File(os.path.join", "label": 0}, {"snippet_id": 32508, "code": ", os.O_RDONLY)) else: return None def next(self): self.last=self.token self.token=next(self.tokens, None) return self.token def accept(self, ttype): if self.token and self.token.ttype==ttype: self.next", "label": 0}, {"snippet_id": 67732, "code": "']=attr.values_list('type', flat=True).order_by('type').distinct() context['count']=self.object_list.count() search_form=AttributeSearchForm(self.request.GET) context['search_form']=search_form return context", "label": 0}, {"snippet_id": 1637, "code": " HttpResponse(t.render(c)) def was_modified_since(header=None, mtime=0, size=0): \"\"\" Was something modified since the user last downloaded it? header This is the value of the If-Modified-Since header. If this", "label": 0}, {"snippet_id": 33404, "code": "\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) ethylparaben_stats=stats.get(sid='DTXSID9022528') self.assertEqual(0, ethylparaben_stats['pucs_n']) self.client.login", "label": 0}, {"snippet_id": 72218, "code": ".has_export(export_id): raise cherrypy.HTTPError(404) if fsal['name'] not in Ganesha.fsals_available(): raise NFSException(\"Cannot make modifications to this export. \" \"FSAL '{}' cannot be managed by the", "label": 0}, {"snippet_id": 1876, "code": "(newpath, fullpath) raise Http404(_(\"Directory indexes are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath", "label": 1}, {"snippet_id": 12343, "code": "\" Take the processed context produced by the view, determine if it's relevant to a particular Enterprise Customer, and update it to include that customer's enterprise metadata. \"\"\" context=context.copy", "label": 0}, {"snippet_id": 20935, "code": ".redis_address, self._node_ip_address, stdout_file=stdout_file, stderr_file=stderr_file, redis_password=self._ray_params.redis_password) assert ray_constants.PROCESS_TYPE_LOG_MONITOR not in self.all_processes", "label": 1}, {"snippet_id": 32806, "code": "'' def __init__(self, base, redirections): self.base=base self.redirections=redirections def execute(self, builtins): with self.redirections: self.base.execute(builtins) def wait(self): self.base.wait(", "label": 0}, {"snippet_id": 16665, "code": "(): game=set() for gp in g.gameplayer_set.all(): game.add((gp.tournamentplayer(), gp.power)) assert len(game)==7 seeder.add_played_game(game) for tp in tourney_players: for sb in tp.seederbias_set.all(", "label": 0}, {"snippet_id": 25515, "code": " type=str, help=\"the path to the autoscaling config file\") parser.add_argument( \"--redis-password\", required=False, type=str, default=None, help=\"the password to use for Redis\") parser.add_argument( \"-", "label": 0}, {"snippet_id": 72993, "code": ",{ 'baseVisibleText': InterfaceText, 'positionText': PositionText, 'userVisibleText': PositionsViewText, 'position': position }) def import_applications(request): if request.method=='POST': form=ImportApplicationsForm", "label": 0}, {"snippet_id": 26351, "code": " process to kill. allow_graceful(bool): Send a SIGTERM first and give the process time to exit gracefully. If that doesn't work, then use SIGKILL. We usually want to do this outside of tests. check_alive(bool", "label": 0}, {"snippet_id": 72506, "code": " import InterfaceText, CreateAccountFormText, PositionText, PositionsViewText, LoginFormText from django.utils.translation import gettext as _ from screendoor.redactor import parse_applications from.forms", "label": 1}, {"snippet_id": 21777, "code": " def any_processes_alive(self): \"\"\"Return true if any processes are still alive. Returns: True if any process is still alive. \"\"\" return any(self.live_processes()) def remaining_processes_alive(self): ", "label": 0}, {"snippet_id": 24798, "code": ": \"\"\"A monitor for Ray processes. The monitor is in charge of cleaning up the tables in the global state after processes have died. The monitor is currently not responsible for detecting component failures", "label": 0}, {"snippet_id": 9652, "code": "=enterprise_customer.name, platform_name=platform_name ) platform_welcome_template=configuration_helpers.get_value( 'ENTERPRISE_PLATFORM_WELCOME_TEMPLATE', settings.ENTERPRISE_PLATFORM_WELCOME_TEMPLATE", "label": 0}, {"snippet_id": 43951, "code": " log_karyn_in(object): ''' Log user in for further testing. ''' object.browser.get(object.live_server_url +'/login/') body=object.browser.find_element_by_tag_name('body') object.assertIn('Please sign in", "label": 0}, {"snippet_id": 58419, "code": ":{ \"html\": \"<p>create_courselet</p>\", \"description\": \"create_courselet desc\", \"title\": \"create_courselet\" } }, onboarding.NEXT_STEPS:{ \"done\": False, \"settings\":{ \"html\": \"<p>next_steps</p>\", \"description", "label": 0}, {"snippet_id": 28344, "code": " interfere with the state of the user's random number generator, so we extract the state of the random number generator and reset it after we are done. TODO(rkn): If we want to later guarantee that these", "label": 0}, {"snippet_id": 81440, "code": "+relativedelta(days=+1) new_end_date=end_date +relativedelta(days=+1) if self._event_does_not_exist(old_repeating_event, new_end_date): self._create_new_event(old_repeating_event, new_start_date, new_end_date) def", "label": 1}, {"snippet_id": 49615, "code": " methods=[\"POST\"]) def my_form_post(): with tempfile.NamedTemporaryFile(mode='w+t', suffix='.pml') as f: fname=f.name f.write(request.form[\"program\"]) f.flush() try: return check_output([\"./pmlcheck\", fname],", "label": 0}, {"snippet_id": 3639, "code": " self.test_username, 'password': self.test_password, }) self.assertEqual( \"http://testserver/%s/profile/edit/\" %(self.locale,), response[\"location\"], ) def test_login_next_param_header_injection(self): ", "label": 0}, {"snippet_id": 78059, "code": " for resource in pkg['resources']: if 'size' in resource: size=resource['size'] if resource['size'] is not None and resource[ 'size'] !='0 bytes' else default_size if 'name' in resource: name=resource[", "label": 0}, {"snippet_id": 33558, "code": " test_dtxsid_dds_wf_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']=='DTXSID9022528': ethylparaben_stats=e self.assertEqual(1,", "label": 0}, {"snippet_id": 82561, "code": ", comp_name): \"\"\"Creates a monitoring job for a local component. :param pid: Process id of the component :type pid: int :param comp_name: Name of the component :type comp_name: str \"\"\" super(LocalComponentMonitoringJob", "label": 0}, {"snippet_id": 28227, "code": " error_data=ray.gcs_utils.construct_error_message(driver_id, error_type, message, time.time()) redis_client.execute_command(\"RAY.TABLE_APPEND\", ray.gcs_utils.TablePrefix.ERROR_INFO, ray.gcs_utils.TablePubsub", "label": 0}, {"snippet_id": 15111, "code": "[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeAllModelsForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs): super(ChangeAllModelsForm", "label": 0}, {"snippet_id": 39140, "code": " return extract_fields +['raw_min_comp','raw_max_comp', 'unit_type', 'ingredient_rank', 'raw_central_comp'] if self.type=='CP': for name in['prod_name','rev_num','report_funcuse']: extract_fields.remove", "label": 0}, {"snippet_id": 2776, "code": " import_from_settings('OIDC_USE_NONCE', True): nonce=get_random_string(import_from_settings('OIDC_NONCE_SIZE', 32)) params.update({ 'nonce': nonce }) request.session['oidc_nonce']=nonce request.session", "label": 0}, {"snippet_id": 79979, "code": " datarequest_dict def open_datarequest(context, data_dict): \"\"\" Action to open a data request. Access rights will be checked before opening the data request. If the user is not allowed, a NotAuthorized exception", "label": 0}, {"snippet_id": 1029, "code": " are not allowed here.\")) if not os.path.exists(fullpath): raise Http404(_('\"%(path)s\" does not exist') %{'path': fullpath}) statobj=os.stat(fullpath) if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE", "label": 0}, {"snippet_id": 66510, "code": ".show_unlock_failed_revealer() keyfile_unlock_select_button.get_style_context().add_class(Gtk.STYLE_CLASS_DESTRUCTIVE_ACTION) keyfile_unlock_select_button.set_label(\"Try again\") self.logging_manager.log_debug(", "label": 0}, {"snippet_id": 449, "code": " FileResponse, Http404, HttpResponse, HttpResponseNotModified, HttpResponseRedirect, ) from django.template import Context, Engine, TemplateDoesNotExist, loader from django.utils.http import http_date,", "label": 1}, {"snippet_id": 9794, "code": "\" if not enabled.secondary else \"secondaryProviders\"].append(info) running_pipeline=pipeline.get(request) if running_pipeline is not None: current_provider=third_party_auth.provider.Registry.get_from_pipeline", "label": 0}, {"snippet_id": 59294, "code": "\".strip()), ConfigOption(\"max_returned_rows\", 1000, \"\"\" Maximum rows that can be returned from a table or custom query \"\"\".strip()), ConfigOption(\"num_sql_threads\", 3, \"\"\" Number of threads in the thread", "label": 0}, {"snippet_id": 27872, "code": " can be used to add attributes that are not available when ray.profile was called. Args: key: The attribute name. value: The attribute value. \"\"\" if not isinstance(key, str) or not isinstance(value, str)", "label": 0}, {"snippet_id": 43260, "code": " username_input.send_keys('Karyn') password_input=object.browser.find_element_by_name(\"password\") password_input.send_keys('specialP@55word') object.browser.find_element_by_class_name('btn').click() class", "label": 0}, {"snippet_id": 61161, "code": "=comp_name class LocalCrashEvent(CrashEvent): \"\"\"Crash event subclass for local component crashes. Provides the name of the crashed component and a short message. \"\"\" def __init__(self, comp_name): \"\"\"Creates", "label": 0}, {"snippet_id": 35441, "code": " in form['return_url'].value(): return redirect('data_document', pk=doc.pk) else: return redirect('link_product_list', pk=doc.data_group.pk) else: pass return render(request, template_name,{'document':", "label": 0}, {"snippet_id": 13275, "code": " import ugettext as _ from django.views.decorators.csrf import ensure_csrf_cookie from django.views.decorators.http import require_http_methods from django_countries import countries import third_party_auth", "label": 0}, {"snippet_id": 71958, "code": "': '/callback'} redirect_uri=req.get_redirect_uri() self.assertEqual(redirect_uri, '/newcallback') req=EngineAuthRequest.blank('/auth/google?next=/newcallback&a=121&123=a') req._load_session() req.set_redirect_uri", "label": 1}, {"snippet_id": 41410, "code": " displayed in the card This checks every data document. ''' for et in ExtractedText.objects.all(): dd=et.data_document ParentForm, ChildForm=create_detail_formset(dd) child_formset=ChildForm(instance=et", "label": 0}, {"snippet_id": 19121, "code": " workers. Attributes: worker: the worker object in this process. mode: worker mode redis_client: the redis client used to query exports. \"\"\" def __init__(self, worker, mode): self.worker=worker self.mode", "label": 1}, {"snippet_id": 47403, "code": ".filter(data_source=pk) context= {'object': datasource, 'datagroup_list': datagroup_list, 'form': form} return render(request, template_name, context) @login_required() def data_source_create(request, template_name", "label": 0}, {"snippet_id": 23349, "code": " random_id=np.random.bytes(ray_constants.ID_SIZE) np.random.set_state(numpy_state) return random_id def decode(byte_str, allow_none=False): \"\"\"Make this unicode in Python 3, otherwise leave it as bytes.", "label": 0}, {"snippet_id": 54305, "code": "=politician.party, constituency=politician.constituency, wiki=politician.wiki_link, imageUrl=politician.image_url, search_count=politician.search_count ) \"\"\"Politicians from a particular state Format: JSON \"\"", "label": 0}, {"snippet_id": 36851, "code": "'document_count': document_count}) return document_stats def datadocument_count_by_month(): document_stats=list(DataDocument.objects.filter(created_at__gte=chart_start_datetime)\\ .annotate(upload_month=", "label": 0}, {"snippet_id": 31352, "code": ".environ.get( 'SOCIAL_AUTH_GITLAB_REDIRECT_URL') SOCIAL_AUTH_GITLAB_SCOPE=['api'] SOCIAL_AUTH_BITBUCKET_KEY=os.environ.get('SOCIAL_AUTH_BITBUCKET_KEY') SOCIAL_AUTH_BITBUCKET_SECRET=os.environ.get('SOCIAL_AUTH_BITBUCKET_SECRET", "label": 0}, {"snippet_id": 55256, "code": ".splitdrive(self.path) \tdef splitext(self): \t\treturn os.path.splitext(self.path) \tdef splitunc(self): \t\treturn os.path.splitunc(self.path) \t \t \tdef access(self,mode): \t\treturn os.access(self.path,mode)", "label": 0}, {"snippet_id": 8348, "code": "(running_pipeline) if current_provider is not None: context[\"currentProvider\"]=current_provider.name context[\"finishAuthUrl\"]=pipeline.get_complete_url(current_provider.backend_name) if current_provider", "label": 0}, {"snippet_id": 49372, "code": "': doc}) @login_required def dg_dd_csv_view(request, pk): qs=DataDocument.objects.filter(data_group_id=pk) filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename", "label": 0}, {"snippet_id": 60307, "code": "(max_returned_rows +1) truncated=len(rows) > max_returned_rows rows=rows[:max_returned_rows] else: rows=cursor.fetchall() truncated=False except sqlite3.OperationalError as e: if e.args==('interrupted',", "label": 0}, {"snippet_id": 84038, "code": ".update(extra_context) return render_to_response('/'.join([template_dir, template_name]), template_params, context_instance=RequestContext(request)) return HttpResponseNotAllowed(['GET']) @login_required def", "label": 0}, {"snippet_id": 46973, "code": " group in groups: group.codes=DocumentType.objects.filter(group_type=group) return render(request, template_name,{'datagroup': datagroup, 'form': form, 'header': header, 'groups': groups}) @login_required", "label": 0}, {"snippet_id": 33613, "code": " data associated with ethylparaben') def test_dtxsid_products_n(self): dtxs=[\"DTXSID9022528\", \"DTXSID1020273\", \"DTXSID6026296\", \"DTXSID2021781\"] stats=stats_by_dtxsids(dtxs) for e in stats: if e['sid']", "label": 0}, {"snippet_id": 82471, "code": ".util.config as config from os import system from subprocess import call from psutil import Process, NoSuchProcess is_py2=sys.version[0]=='2' if is_py2: import Queue as Queue else: import queue as Queue", "label": 0}, {"snippet_id": 9222, "code": ") and not configuration_helpers.get_value('ENABLE_COMBINED_LOGIN_REGISTRATION', False): if initial_mode==\"login\": return old_login_view(request) elif initial_mode==\"register\": return old_register_view(request", "label": 0}, {"snippet_id": 14814, "code": " 'user_id': user_id, 'email': email, 'password_hash': password }) return auth_get_user_by_id(user_id) def auth_get_user_by_email(email): user_id=db.hget('user:emails', email) if not user_id: return None", "label": 0}, {"snippet_id": 65932, "code": " notebook, tab, pagenum): headerbar=tab.get_headerbar() self.set_titlebar(headerbar) def on_save_check_button_toggled(self, check_button, db): if check_button.get_active(): self.databases_to_save.append(db)", "label": 0}, {"snippet_id": 32708, "code": ": The name of the executable to run(will be looked up in PATH). args: The arguments to be passed to the executable. ''' def __init__(self, command, args): self.command=command self.args=args self.args.insert", "label": 0}, {"snippet_id": 51466, "code": "(required_version): '''Fail if the version of ohDevTools is too old.''' if VERSION<required_version: fail(\"This build requires a newer version of ohDevTools. You have version{0}, but need version{1}.\".format(VERSION,", "label": 0}, {"snippet_id": 54531, "code": " return jsonify(error=str(response.content)) \"\"\" **Database errands** \"\"\" \"\"\"Creates entry for politicians in the db *Note*: Do not run it more than once, will create multiple entries \"\"\" @app.route('/updatedb", "label": 0}, {"snippet_id": 15110, "code": "()], choices=[]) input_source_final=NoValidationSelectField('Final input',[validators.required()], choices=[]) class ChangeAllModelsForm(FlaskForm): def __init__(self, csrf_enabled=False, *args, **kwargs", "label": 0}, {"snippet_id": 45734, "code": " filename=DataGroup.objects.get(pk=pk).name return render_to_csv_response(qs, filename=filename, append_datestamp=True) @login_required def data_document_edit(request, pk): referer=request.POST['referer", "label": 1}, {"snippet_id": 63691, "code": ".app.dispatch_request() with self.app.test_request_context('/saml2-ls', method='POST', headers={'Cookie': cookie}, data={'SAMLRequest': deflate_and_base64_encode( logout_request(session_id) ), 'RelayState", "label": 0}, {"snippet_id": 22090, "code": ". logging_level: Logging level, default will be logging.INFO. logging_format: Logging format, default contains a timestamp, filename, line number, and message. See ray_constants.py. plasma_store_socket_name", "label": 0}, {"snippet_id": 76320, "code": " the image. user_height: The user-requested height of the image. Returns: The image to be presented to the user. \"\"\" proj=layer_properties.projection zoom_level=tilecalcs.CalcZoomLevel(user_log_rect.Extent", "label": 0}, {"snippet_id": 69160, "code": " python_interpreter_path=sys.executable, jupyterhub_config_path=os.path.join(HERE, 'jupyterhub_config.py'), install_prefix=INSTALL_PREFIX, ) systemd.install_unit('jupyterhub.service', hub_unit_template.format(*", "label": 0}, {"snippet_id": 29882, "code": "('gallery.show_post', post_id=post_id)) @gallery.route('/gallery/benwa/<int:post_id>/comment/delete/<int:comment_id>', methods=['GET', 'POST']) @login_required def delete_comment(post_id, comment_id): comment", "label": 0}, {"snippet_id": 47370, "code": "(docs)/float(datasource.estimated_records))*100 datasource.uploaded=(len(docs.filter(matched=True))/float( datasource.estimated_records))*100 form=PriorityForm(request.POST or None, instance=datasource) if", "label": 0}, {"snippet_id": 26551, "code": " the Redis servers. Args: check_alive(bool): Raise an exception if any of the processes were already dead. \"\"\" self._kill_process_type( ray_constants.PROCESS_TYPE_REDIS_SERVER, check_alive=check_alive)", "label": 0}, {"snippet_id": 16125, "code": " from tournament.diplomacy import GreatPower, GameSet from tournament.email import send_board_call from tournament.game_seeder import GameSeeder from tournament.models import Tournament, Round, Game from", "label": 0}, {"snippet_id": 14589, "code": "'user_accounts_api_url': reverse(\"accounts_api\", kwargs={'username': user.username}), 'user_preferences_api_url': reverse('preferences_api', kwargs={'username': user.username}), 'disable_courseware_js': True, ", "label": 0}, {"snippet_id": 72491, "code": ", redirect from django.contrib.auth import get_user_model from django.contrib.auth import login, logout from django.contrib.auth.decorators import login_required from.uservisibletext import InterfaceText", "label": 0}, {"snippet_id": 36145, "code": "=self.prod_fam) if self.is_level_three: return PUC.objects.filter(pk=self.pk) @property def product_count(self): '''Don't use this in large querysets. It uses a SQL query for each PUC record. ''' return", "label": 0}, {"snippet_id": 62671, "code": ": str :return: the session token corresponding to the query :rtype: str \"\"\" with self.app.test_request_context('/login'): self.app.dispatch_request() oq_cache=OutstandingQueriesCache(session) oq_cache.set", "label": 0}, {"snippet_id": 84762, "code": " previews the body of the article as it is currently displayed. This function is actually pretty simple, it just runs the function through the view template and returns it to the caller \"\"\" rv=do_wl_markdown", "label": 0}, {"snippet_id": 27247, "code": "=None, num_workers=None, local_mode=False, driver_mode=None, redirect_worker_output=False, redirect_output=True, num_redis_shards=None, redis_max_clients=None, redis_password=None, plasma_directory=None", "label": 1}, {"snippet_id": 48072, "code": ", template_name, context) @login_required() def link_habitsandpractices(request, pk, template_name='data_group/habitsandpractices_to_puc.html'): hnp=get_object_or_404(ExtractedHabitsAndPractices, pk=pk", "label": 0}, {"snippet_id": 21349, "code": " true, then this method will not return until the process in question has exited. Raises: This process raises an exception in the following cases: 1. The process had already died and check_alive is true", "label": 0}, {"snippet_id": 50681, "code": "'Linux' and platform.architecture()[0]=='32bit': return 'Linux-x86' if platform.system()=='Linux' and platform.architecture()[0]=='64bit': return 'Linux-x64' return None def delete_directory(path, logfile", "label": 0}, {"snippet_id": 39242, "code": " ValidationError( (f'Quantity{value} is not allowed'), params={'value': value},) class ExtractedChemical(CommonInfo, RawChem): raw_cas_old=models.CharField( \"Raw CAS\", max_length=100, null=True, blank=True", "label": 0}, {"snippet_id": 77771, "code": " security_classification, data_driven_application, version, author_email, notes, update_frequency, resources) return 'SUCCESS' class DemotePublishers(CkanCommand): \"\"\"Demotes any existing 'publisher-*' users from admin to", "label": 1}, {"snippet_id": 37056, "code": " forms from django.forms import BaseInlineFormSet from django.utils.translation import ugettext_lazy as _ from dashboard.models import * from django.db.models import F from dashboard.utils import get_extracted_models", "label": 1}]